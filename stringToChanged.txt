AGLoginKeyboardAccessoryView.m:36:    [self.phoneButton setTitle:NSLocalizedString(@"Phone",nil) forState:UIControlStateNormal];
AGLoginKeyboardAccessoryView.m:40:    self.phoneButton.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Light" size:13];
AGLoginKeyboardAccessoryView.m:47:    [self.emailButton setTitle:NSLocalizedString(@"Email",nil) forState:UIControlStateNormal];
AGLoginKeyboardAccessoryView.m:48:    self.emailButton.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Light" size:13];
August Today/AGMiniLockTableTestHostController.m:26:    NSLog(@"View Did Load - today widget");
August Today/AGMiniLockTableTestHostController.m:36:    NSLog(@"View will appear - today widget");
August Today/AGMiniLockTableTestHostController.m:51:    self.lockTableController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockTableController"];
August Today/AGMiniLockTableTestHostController.m:67:    lock1.houseName = @"House 1";
August Today/AGMiniLockTableTestHostController.m:68:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:70:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockTableTestHostController.m:71:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:74:    lock2.houseName = @"House 2";
August Today/AGMiniLockTableTestHostController.m:75:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:77:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockTableTestHostController.m:78:    lock2.lockID = @"lock2";
August Today/AGMiniLockTableTestHostController.m:81:    lock3.houseName = @"House 3";
August Today/AGMiniLockTableTestHostController.m:82:    lock3.houseID = @"house3";
August Today/AGMiniLockTableTestHostController.m:84:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockTableTestHostController.m:85:    lock3.lockID = @"lock3";
August Today/AGMiniLockTableTestHostController.m:88:    lock4.houseName = @"House 4";
August Today/AGMiniLockTableTestHostController.m:89:    lock4.houseID = @"house4";
August Today/AGMiniLockTableTestHostController.m:91:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockTableTestHostController.m:92:    lock4.lockID = @"lock4";
August Today/AGMiniLockTableTestHostController.m:95:    lock5.houseName = @"House 5";
August Today/AGMiniLockTableTestHostController.m:96:    lock5.houseID = @"house5";
August Today/AGMiniLockTableTestHostController.m:98:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockTableTestHostController.m:99:    lock5.lockID = @"lock5";
August Today/AGMiniLockTableTestHostController.m:106:    lock1.houseName = @"House 1";
August Today/AGMiniLockTableTestHostController.m:107:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:109:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockTableTestHostController.m:110:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:113:    lock2.houseName = @"House 2";
August Today/AGMiniLockTableTestHostController.m:114:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:116:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockTableTestHostController.m:117:    lock2.lockID = @"lock2";
August Today/AGMiniLockTableTestHostController.m:124:    lock1.houseName = @"A long house name";
August Today/AGMiniLockTableTestHostController.m:125:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:127:    lock1.lockName = @"A long lock name";
August Today/AGMiniLockTableTestHostController.m:128:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:131:    lock2.houseName = @"A very very long house name";
August Today/AGMiniLockTableTestHostController.m:132:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:134:    lock2.lockName = @"A very very long lock name";
August Today/AGMiniLockTableTestHostController.m:135:    lock2.lockID = @"lock2";
August Today/AGMiniLockTableTestHostController.m:160:    NSLog(@"Customize Tapped!");
August Today/AGWidgetLockActionSimulatorHandler.m:18:    NSLog(@"Did lock lock:%@ in house: %@", widgetLock.lockName, widgetLock.houseName);
August Today/AGWidgetLockActionSimulatorHandler.m:22:    NSLog(@"Did unlock lock:%@ in house: %@", widgetLock.lockName, widgetLock.houseName);
August Today/AGWidgetBLELockConnectionFactory.m:41:        logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message?:@""];
August Today/AGWidgetBLELockConnectionFactory.m:43:        logMessage = [NSString stringWithFormat:@"[%@] %@", event, message?:@""];
August Today/AGWidgetBLELockConnectionFactory.m:46:    NSLog(@"%@", logMessage);
August Today/AGWidgetLockActionHandler.m:24:    NSString *action = @"lock";
August Today/AGWidgetLockActionHandler.m:25:    NSURL *performLockURL = [NSURL URLWithString: [NSString stringWithFormat:@"AugustHome://action/%@?lockid=%@&lockname=%@&houseid=%@&v=%@",
August Today/AGWidgetLockActionHandler.m:37:    NSString *action = @"unlock";
August Today/AGWidgetLockActionHandler.m:38:    NSURL *performLockURL = [NSURL URLWithString: [NSString stringWithFormat:@"AugustHome://action/%@?lockid=%@&lockname=%@&houseid=%@&v=%@",
August Today/AGMiniLockView.m:37:                               [UIImage imageNamed:@"unlock_pulse0"],
August Today/AGMiniLockView.m:38:                               [UIImage imageNamed:@"unlock_pulse1"],
August Today/AGMiniLockView.m:39:                               [UIImage imageNamed:@"unlock_pulse2"],
August Today/AGMiniLockView.m:40:                               [UIImage imageNamed:@"unlock_pulse3"],
August Today/AGMiniLockView.m:41:                               [UIImage imageNamed:@"unlock_pulse4"],
August Today/AGMiniLockView.m:42:                               [UIImage imageNamed:@"unlock_pulse5"],
August Today/AGMiniLockView.m:43:                               [UIImage imageNamed:@"unlock_pulse6"],
August Today/AGMiniLockView.m:44:                               [UIImage imageNamed:@"unlock_pulse7"],
August Today/AGMiniLockView.m:45:                               [UIImage imageNamed:@"unlock_pulse8"],
August Today/AGMiniLockView.m:46:                               [UIImage imageNamed:@"unlock_pulse9"],
August Today/AGMiniLockView.m:47:                               [UIImage imageNamed:@"unlock_pulse10"],
August Today/AGMiniLockView.m:48:                               [UIImage imageNamed:@"unlock_pulse11"],
August Today/AGMiniLockView.m:49:                               [UIImage imageNamed:@"unlock_pulse12"],
August Today/AGMiniLockView.m:50:                               [UIImage imageNamed:@"unlock_pulse13"],
August Today/AGMiniLockView.m:51:                               [UIImage imageNamed:@"unlock_pulse14"],
August Today/AGMiniLockView.m:59:                                      [UIImage imageNamed:@"lock_pulse0"],
August Today/AGMiniLockView.m:60:                                      [UIImage imageNamed:@"lock_pulse1"],
August Today/AGMiniLockView.m:61:                                      [UIImage imageNamed:@"lock_pulse2"],
August Today/AGMiniLockView.m:62:                                      [UIImage imageNamed:@"lock_pulse3"],
August Today/AGMiniLockView.m:63:                                      [UIImage imageNamed:@"lock_pulse4"],
August Today/AGMiniLockView.m:64:                                      [UIImage imageNamed:@"lock_pulse5"],
August Today/AGMiniLockView.m:65:                                      [UIImage imageNamed:@"lock_pulse6"],
August Today/AGMiniLockView.m:66:                                      [UIImage imageNamed:@"lock_pulse7"],
August Today/AGMiniLockView.m:67:                                      [UIImage imageNamed:@"lock_pulse8"],
August Today/AGMiniLockView.m:68:                                      [UIImage imageNamed:@"lock_pulse9"],
August Today/AGMiniLockView.m:69:                                      [UIImage imageNamed:@"lock_pulse10"],
August Today/AGMiniLockView.m:70:                                      [UIImage imageNamed:@"lock_pulse11"],
August Today/AGMiniLockView.m:71:                                      [UIImage imageNamed:@"lock_pulse12"],
August Today/AGMiniLockView.m:72:                                      [UIImage imageNamed:@"lock_pulse13"],
August Today/AGMiniLockView.m:73:                                      [UIImage imageNamed:@"lock_pulse14"],
August Today/AGLockWidgetContainerController.m:85:    self.errorController.errorText = @"Open the August app to setup your locks.";
August Today/AGLockWidgetContainerController.m:111:    NCWidgetDisplayMode widgetDisplayMode = (NCWidgetDisplayMode)[((NSNumber *)[notification.userInfo objectForKey:@"activeDisplayMode"]) integerValue];
August Today/AGLockWidgetContainerController.m:122:        _lockSettingsController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockSettingsController"];
August Today/AGLockWidgetContainerController.m:130:        _lockTableController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockTableController"];
August Today/AGLockWidgetContainerController.m:139:        _errorController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGWidgetErrorViewController"];
August Today/AGMiniLockSettingsTestHostController.m:42:    self.settingsController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockSettingsController"];
August Today/AGMiniLockSettingsTestHostController.m:69:    NSLog(@"Save Tapped!");
August Today/AGMiniLockSettingsTestHostController.m:78:    lock1.houseName = @"House 1";
August Today/AGMiniLockSettingsTestHostController.m:79:    lock1.houseID = @"house1";
August Today/AGMiniLockSettingsTestHostController.m:81:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockSettingsTestHostController.m:82:    lock1.lockID = @"lock1";
August Today/AGMiniLockSettingsTestHostController.m:85:    lock2.houseName = @"House 2";
August Today/AGMiniLockSettingsTestHostController.m:86:    lock2.houseID = @"house2";
August Today/AGMiniLockSettingsTestHostController.m:88:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockSettingsTestHostController.m:89:    lock2.lockID = @"lock2";
August Today/AGMiniLockSettingsTestHostController.m:92:    lock3.houseName = @"House 3";
August Today/AGMiniLockSettingsTestHostController.m:93:    lock3.houseID = @"house3";
August Today/AGMiniLockSettingsTestHostController.m:95:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockSettingsTestHostController.m:96:    lock3.lockID = @"lock3";
August Today/AGMiniLockSettingsTestHostController.m:99:    lock4.houseName = @"House 4";
August Today/AGMiniLockSettingsTestHostController.m:100:    lock4.houseID = @"house4";
August Today/AGMiniLockSettingsTestHostController.m:102:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockSettingsTestHostController.m:103:    lock4.lockID = @"lock4";
August Today/AGMiniLockSettingsTestHostController.m:106:    lock5.houseName = @"House 5";
August Today/AGMiniLockSettingsTestHostController.m:107:    lock5.houseID = @"house5";
August Today/AGMiniLockSettingsTestHostController.m:109:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockSettingsTestHostController.m:110:    lock5.lockID = @"lock5";
August Today/AGMiniLockSettingsTestHostController.m:117:    lock1.houseName = @"House 1";
August Today/AGMiniLockSettingsTestHostController.m:118:    lock1.houseID = @"house1";
August Today/AGMiniLockSettingsTestHostController.m:120:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockSettingsTestHostController.m:121:    lock1.lockID = @"lock1";
August Today/AGMiniLockSettingsTestHostController.m:124:    lock2.houseName = @"House 2";
August Today/AGMiniLockSettingsTestHostController.m:125:    lock2.houseID = @"house2";
August Today/AGMiniLockSettingsTestHostController.m:127:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockSettingsTestHostController.m:128:    lock2.lockID = @"lock2";
August Today/AGMiniLockSettingsTestHostController.m:131:    lock3.houseName = @"House 3";
August Today/AGMiniLockSettingsTestHostController.m:132:    lock3.houseID = @"house3";
August Today/AGMiniLockSettingsTestHostController.m:134:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockSettingsTestHostController.m:135:    lock3.lockID = @"lock3";
August Today/AGMiniLockSettingsTestHostController.m:138:    lock4.houseName = @"House 4";
August Today/AGMiniLockSettingsTestHostController.m:139:    lock4.houseID = @"house4";
August Today/AGMiniLockSettingsTestHostController.m:141:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockSettingsTestHostController.m:142:    lock4.lockID = @"lock4";
August Today/AGMiniLockSettingsTestHostController.m:145:    lock5.houseName = @"House 5";
August Today/AGMiniLockSettingsTestHostController.m:146:    lock5.houseID = @"house5";
August Today/AGMiniLockSettingsTestHostController.m:148:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockSettingsTestHostController.m:149:    lock5.lockID = @"lock5";
August Today/AGMiniLockSettingsTestHostController.m:152:    lock6.houseName = @"House 6";
August Today/AGMiniLockSettingsTestHostController.m:153:    lock6.houseID = @"house6";
August Today/AGMiniLockSettingsTestHostController.m:155:    lock6.lockName = @"Lock 6";
August Today/AGMiniLockSettingsTestHostController.m:156:    lock6.lockID = @"lock6";
August Today/AGMiniLockSettingsTestHostController.m:159:    lock7.houseName = @"House 7";
August Today/AGMiniLockSettingsTestHostController.m:160:    lock7.houseID = @"house7";
August Today/AGMiniLockSettingsTestHostController.m:162:    lock7.lockName = @"Lock 7";
August Today/AGMiniLockSettingsTestHostController.m:163:    lock7.lockID = @"lock7";
August Today/AGMiniLockSettingsTestHostController.m:166:    lock8.houseName = @"House 8";
August Today/AGMiniLockSettingsTestHostController.m:167:    lock8.houseID = @"house8";
August Today/AGMiniLockSettingsTestHostController.m:169:    lock8.lockName = @"Lock 8";
August Today/AGMiniLockSettingsTestHostController.m:170:    lock8.lockID = @"lock8";
August Today/AGMiniLockSettingsTestHostController.m:173:    lock9.houseName = @"House 9";
August Today/AGMiniLockSettingsTestHostController.m:174:    lock9.houseID = @"house9";
August Today/AGMiniLockSettingsTestHostController.m:176:    lock9.lockName = @"Lock 9";
August Today/AGMiniLockSettingsTestHostController.m:177:    lock9.lockID = @"lock9";
August Today/AGMiniLockSettingsTestHostController.m:180:    lock10.houseName = @"House 10";
August Today/AGMiniLockSettingsTestHostController.m:181:    lock10.houseID = @"house10";
August Today/AGMiniLockSettingsTestHostController.m:183:    lock10.lockName = @"Lock 10";
August Today/AGMiniLockSettingsTestHostController.m:184:    lock10.lockID = @"lock10";
August Today/AGMiniLockSettingsTestHostController.m:187:    lock11.houseName = @"House 11";
August Today/AGMiniLockSettingsTestHostController.m:188:    lock11.houseID = @"house11";
August Today/AGMiniLockSettingsTestHostController.m:190:    lock11.lockName = @"Lock 11";
August Today/AGMiniLockSettingsTestHostController.m:191:    lock11.lockID = @"lock11";
August Today/AGMiniLockSettingsTestHostController.m:194:    lock12.houseName = @"House 12";
August Today/AGMiniLockSettingsTestHostController.m:195:    lock12.houseID = @"house12";
August Today/AGMiniLockSettingsTestHostController.m:197:    lock12.lockName = @"Lock 12";
August Today/AGMiniLockSettingsTestHostController.m:198:    lock12.lockID = @"lock12";
August Today/AGMiniLockSettingsTestHostController.m:201:    lock13.houseName = @"House 13";
August Today/AGMiniLockSettingsTestHostController.m:202:    lock13.houseID = @"house13";
August Today/AGMiniLockSettingsTestHostController.m:204:    lock13.lockName = @"Lock 13";
August Today/AGMiniLockSettingsTestHostController.m:205:    lock13.lockID = @"lock13";
August Today/AGMiniLockSettingsTestHostController.m:208:    lock14.houseName = @"House 14";
August Today/AGMiniLockSettingsTestHostController.m:209:    lock14.houseID = @"house14";
August Today/AGMiniLockSettingsTestHostController.m:211:    lock14.lockName = @"Lock 14";
August Today/AGMiniLockSettingsTestHostController.m:212:    lock14.lockID = @"lock14";
August Today/AGMiniLockSettingsTestHostController.m:215:    lock15.houseName = @"House 15";
August Today/AGMiniLockSettingsTestHostController.m:216:    lock15.houseID = @"house15";
August Today/AGMiniLockSettingsTestHostController.m:218:    lock15.lockName = @"Lock 15";
August Today/AGMiniLockSettingsTestHostController.m:219:    lock15.lockID = @"lock15";
August Today/AGWidgetOfflineKeyProvider.m:24:    query.service = @"AugustKeys";
August Today/AGWidgetOfflineKeyProvider.m:39:    NSString *offlineKeyHexStr = offlineKeyDict[@"key"];
August Today/AGWidgetOfflineKeyProvider.m:42:    NSNumber *slotNum = offlineKeyDict[@"slot"];
August Today/AGWidgetOfflineKeyProvider.m:53:    return [NSString stringWithFormat:@"OK%@", deviceID];
August Today/AGWidgetLock.m:11:NSString * const kHouseNameWidgetKey = @"kHouseNameWidgetKey";
August Today/AGWidgetLock.m:12:NSString * const kHouseIDWidgetKey = @"kHouseIDWidgetKey";
August Today/AGWidgetLock.m:14:NSString * const kLockIDWidgetKey = @"kLockIDWidgetKey";
August Today/AGWidgetLock.m:15:NSString * const kLockNameWidgetKey = @"kLockNameWidgetKey";
August Today/AGWidgetLock.m:31:             kHouseNameWidgetKey: self.houseName ?: @"",
August Today/AGWidgetLock.m:32:             kHouseIDWidgetKey:self.houseID ?: @"",
August Today/AGWidgetLock.m:33:             kLockNameWidgetKey:self.lockName ?: @"",
August Today/AGWidgetLock.m:34:             kLockIDWidgetKey:self.lockID ?: @""
August Today/AGMiniLockTableController.m:51:    NCWidgetDisplayMode widgetDisplayMode = (NCWidgetDisplayMode)[((NSNumber *)[notification.userInfo objectForKey:@"activeDisplayMode"]) integerValue];
August Today/AGMiniLockTableController.m:144:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
August Today/AGWidgetContainerController.m:14:NSString * const kWidgetDisplayModeDidChangeNotification = @"kWidgetDisplayModeDidChangeNotification";
August Today/AGWidgetContainerController.m:51:    NSDictionary *maxSizeDict = @{@"width":@(maxSize.width), @"height":@(maxSize.height)};
August Today/AGWidgetContainerController.m:52:    NSDictionary *notificationInfo = @{@"activeDisplayMode":@(activeDisplayMode), @"maxSize":maxSizeDict};
August Today/AGKeypadInviteUserCellTableViewCell.m:47:    self.checkMark.image = [UIImage imageNamed:@"check_v2"];
August Today/AGKeypadInviteUserCellTableViewCell.m:69:            self.pinCode.text = @"";
August Today/AGKeypadInviteUserCellTableViewCell.m:71:            self.pinCode.text = [NSString stringWithFormat:@"#%@", pinEntry.pinCode];
August Today/AGWidgetSharedData.m:14:NSString *const kAllWidgetLocksKey = @"kAllWidgetLocksKey";
August Today/AGWidgetSharedData.m:15:NSString *const kRecentlyUsedLocksKey = @"kRecentlyUsedLocksKey";
August Today/AGWidgetSharedData.m:16:NSString *const kPreferredLocksKey = @"kPreferredLocksKey";
August Today/AGWidgetSharedData.m:19:#define kWidgetAvailableHousesLocks @"availableHousesAndLocks"
August Today/AGWidgetSharedData.m:20:#define kWidgetFeaturedLocks @"featuredLocks"
August Today/AGWidgetSharedData.m:21:#define kWidgetAuthString @"authString"
August Today/AGWidgetSharedData.m:36:        NSArray *arr = [[self.availableHouses objectAtIndex:0] objectForKey:@"locks"];
August Today/AGWidgetSharedData.m:44:    NSUserDefaults *defaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:53:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:61:    NSString *s = [NSString stringWithFormat:@"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9]];
August Today/AGWidgetSharedData.m:66:    NSUserDefaults *defaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:72:    NSUserDefaults *defaults= [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:80:    NSUserDefaults *defaults= [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:114:        NSArray *lockList = [[self.availableHouses objectAtIndex:0] objectForKey:@"locks"];
August Today/AGWidgetSharedData.m:120:             for (NSDictionary *lock in [house objectForKey:@"locks"]) {
August Today/AGWidgetSharedData.m:121:                 if ([[lock objectForKey:@"LockID"] isEqualToString:lockID]) {
August Today/AGWidgetSharedData.m:134:    NSUserDefaults *defaults= [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:146:    NSUserDefaults *d= [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:179:        for (NSDictionary *lock in (NSArray *)([house objectForKey:@"locks"]))
August Today/AGWidgetSharedData.m:180:            [arr addObject:[lock objectForKey:@"lockid"]];
August Today/AGWidgetSharedData.m:194:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:205:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:217:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:231:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:243:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedData.m:257:    NSUserDefaults *widgetDefualts = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.today"];
August Today/AGWidgetSharedSimulatorData.m:72:        lock.houseName = [NSString stringWithFormat:@"House %i", i+1];
August Today/AGWidgetSharedSimulatorData.m:73:        lock.houseID = [NSString stringWithFormat:@"house%i", i+1];
August Today/AGWidgetSharedSimulatorData.m:75:        lock.lockName = [NSString stringWithFormat:@"Lock %i", i+1];
August Today/AGWidgetSharedSimulatorData.m:76:        lock.lockID = [NSString stringWithFormat:@"lock%i", i+1];
August Today/AGMiniLockController.m:28:NSString * const AGWidgetOperateEmptyStatusString = @" ";//A blank space prevents a UI jitter because a blank space has intrinsic height and width
August Today/AGMiniLockController.m:52:        _lockView = [[[NSBundle mainBundle] loadNibNamed:@"AGMiniLockView" owner:self options:nil] objectAtIndex:0];
August Today/AGMiniLockController.m:57:        _lockView.lockStatusLabel.text = @"";
August Today/AGMiniLockController.m:81:    NSString *statusDescription = @"";
August Today/AGMiniLockController.m:85:        statusDescription = [statusDescription stringByAppendingString:@" | "];
August Today/AGMiniLockController.m:110:                    [self postLockUsageSuccessForAction:@"lock"];
August Today/AGMiniLockController.m:141:                    [self postLockUsageSuccessForAction:@"unlock"];
August Today/AGMiniLockController.m:229:    NSString *relativeURLPath = [NSString stringWithFormat:@"/locks/usage/%@", self.lock.lockID];
August Today/AGMiniLockController.m:230:    NSString *fullURLPath = [NSString stringWithFormat:@"%@%@", [AGGeneralCrossProcessUtility networkClientBaseURL], relativeURLPath];
August Today/AGMiniLockController.m:233:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
August Today/AGMiniLockController.m:235:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
August Today/AGMiniLockController.m:236:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
August Today/AGMiniLockController.m:241:                               @"action": action,
August Today/AGMiniLockController.m:242:                               @"mechanical": @"success",
August Today/AGMiniLockController.m:243:                               @"crypto": @"success",
August Today/AGMiniLockController.m:244:                               @"dateTime": dateStr
August Today/AGMiniLockController.m:249:    AGDataUploadItem *lockUsageLogItem = [[AGDataUploadItem alloc] initWithData:jsonData url:fullURLPath httpMethod:@"PUT" maxUploadAttempts:3];
August Today/AGMiniLockController.m:259:             @(AGBLELockState_Locked):@"Locked",
August Today/AGMiniLockController.m:260:             @(AGBLELockState_Locking):@"Locking...",
August Today/AGMiniLockController.m:261:             @(AGBLELockState_Unlocked):@"Unlocked",
August Today/AGMiniLockController.m:262:             @(AGBLELockState_Unlocking):@"Unlocking..."
August Today/AGMiniLockController.m:269:             @(AGBLEDoorState_Closed):@"Closed",
August Today/AGMiniLockController.m:270:             @(AGBLEDoorState_Open):@"Open",
August Today/AGMiniLockSettingsView.m:54:    [self.tableView addObserver:self forKeyPath:@"contentSize" options:(NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld) context:nil];
August Today/AGMiniLockSettingsView.m:91:    if ([keyPath isEqualToString:@"contentSize"] && object == self.tableView) {
August Today/AGMiniLockSettingsView.m:109:    NSString *lockCellID = @"LockSettingsCellID";
August Today/AGMiniLockSettingsView.m:130:        badgeLabelView.label.text = [NSString stringWithFormat:@"%li", (long)lockDisplayOrderInt];
August Today/AGMiniLockSettingsView.m:143:    NSString *lockCellTitle = [NSString stringWithFormat:@"%@ - %@", lock.houseName, lock.lockName];
August Today/AGMiniLockSettingsView.m:183:        NSLog(@"Scroll size changed! %@", NSStringFromCGSize(newSize));
August Today/AGMiniLockTableView.m:100:    unlockDeviceLabel.text = @"Please unlock your phone";
August Today/AGMiniLockTableView.m:132:        UITableViewCell *customizeCell = [tableView dequeueReusableCellWithIdentifier:@"MiniLockTableCustomizeCell"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationView.m:112:        homeLocationAnnotation.image = [UIImage imageNamed:@"house_location"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationView.m:119:        homeLocationAnnotation.image = [UIImage imageNamed:@"iconGeofenceExit"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:37:    NSNumber *userExitLat = userInfo[@"user_exit_lat"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:38:    NSNumber *userExitLon = userInfo[@"user_exit_lon"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:42:    NSNumber *userHomeLat = userInfo[@"user_home_lat"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:43:    NSNumber *userHomeLon = userInfo[@"user_home_lon"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:47:    NSNumber *userGeofenceRadius = userInfo[@"user_home_geofence_radius"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:50:    NSString *showMap = userInfo[@"should_show_map"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:58:    NSURL *crossProcessContainerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.august.general-cross-process"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:59:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
SingleTouchRotateGestureRecognizer.m:39://    NSLog(@"angle in radians: %f", angleInRadians);
SingleTouchRotateGestureRecognizer.m:72:	//NSLog(@"angle in radians: %f", rotation);
SingleTouchRotateGestureRecognizer.m:73:	//NSLog(@"%@", _direction==UISwipeGestureRecognizerDirectionRight?@"right":@"left");
Lock Component/AGDialView.m:11:static NSString* kAGDiaryCategory = @"DialView";
Lock Component/AGDialView.m:182:        AGDiaryDebug(nil, @"Setting desiredDialState = %@", [self.class stringForDialState:desiredDialState]);
Lock Component/AGDialView.m:185:                animationNamed = @"state_unknown.json";
Lock Component/AGDialView.m:188:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:192:                animationNamed = @"spinner_closed_locked_to_closed_unlocked_pulsing.json";
Lock Component/AGDialView.m:196:                animationNamed = @"spinner_closed_unlocked_to_closed_locked_pulsing.json";
Lock Component/AGDialView.m:200:                animationNamed = @"spinner_open_locked_to_open_unlocked.json";
Lock Component/AGDialView.m:203:                animationNamed = @"spinner_open_unlocked_to_open_locked.json";
Lock Component/AGDialView.m:207:                animationNamed = @"state_closed_locked.json";
Lock Component/AGDialView.m:210:                animationNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:213:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:217:                animationNamed = @"state_open_locked.json";
Lock Component/AGDialView.m:220:                animationNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:223:                AGDiaryWarn(@"BadDialState", @"Illegal desiredDialState %u inside AGDialView.setDialState:", desiredDialState);
Lock Component/AGDialView.m:224:                NSAssert(false, @"Illegal desiredDialState %u inside AGDialView.setDialState:", desiredDialState);
Lock Component/AGDialView.m:225:                animationNamed = @"state_unknown.json";
Lock Component/AGDialView.m:246:                animationNamed = @"transition_closed_locked_to_closed_unlocked";
Lock Component/AGDialView.m:247:                finalStateNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:251:                animationNamed = @"transition_closed_unlocked_to_closed_locked";
Lock Component/AGDialView.m:252:                finalStateNamed = @"state_closed_locked.json";
Lock Component/AGDialView.m:256:                animationNamed = @"transition_closed_unlocked_to_open_unlocked";
Lock Component/AGDialView.m:257:                finalStateNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:261:                animationNamed = @"transition_open_locked_to_open_unlocked";
Lock Component/AGDialView.m:262:                finalStateNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:266:                animationNamed = @"transition_open_unlocked_to_open_locked";
Lock Component/AGDialView.m:267:                finalStateNamed = @"state_open_locked.json";
Lock Component/AGDialView.m:271:                animationNamed = @"transition_open_unlocked_to_closed_unlocked";
Lock Component/AGDialView.m:272:                finalStateNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:276:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:277:                finalStateNamed = @"state_unknown.json";
Lock Component/AGDialView.m:336:        case AGDialView_Inactive:        return @"Inactive";
Lock Component/AGDialView.m:337:        case AGDialView_PulseOnce:       return @"PulseOnce";
Lock Component/AGDialView.m:338:        case AGDialView_Waiting:         return @"Waiting";
Lock Component/AGDialView.m:339:        case AGDialView_Closed_WaitingToUnlock: return @"ClosedWaitingToUnlock";
Lock Component/AGDialView.m:340:        case AGDialView_Closed_WaitingToLock:   return @"ClosedWaitingToLock";
Lock Component/AGDialView.m:341:        case AGDialView_Open_WaitingToUnlock: return @"OpenWaitingToUnlock";
Lock Component/AGDialView.m:342:        case AGDialView_Open_WaitingToLock:   return @"OpenWaitingToLock";
Lock Component/AGDialView.m:343:        case AGDialView_Animating:       return @"Animating";
Lock Component/AGDialView.m:344:        case AGDialView_WaitingForToggle: return @"Searching";
Lock Component/AGDialView.m:345:        case AGDialView_Open_Locked:     return @"OpenandLocked";
Lock Component/AGDialView.m:346:        case AGDialView_Open_Unlocked:   return @"OpenandUnlocked";
Lock Component/AGDialView.m:347:        case AGDialView_Closed_Locked:   return @"ClosedandLocked";
Lock Component/AGDialView.m:348:        case AGDialView_Closed_Unlocked: return @"ClosedandUnlocked";
Lock Component/AGDialView.m:351:            AGDiaryWarn(@"BadDialState", @"Unrecognized AGDialState %u", dialState);
Lock Component/AGDialView.m:352:            NSAssert(NO, @"Unrecognized AGDialState %u", dialState);
Lock Component/AGDialView.m:353:            return [NSString stringWithFormat:@"DialState-%u", dialState];
Lock Component/AGDialView.m:384:// TODO: determine if it's better to have the label be fixed (e.g. @"August Dial"), and have the following labels be accessibility values
Lock Component/AGDialView.m:395:            return @"August Inactive";
Lock Component/AGDialView.m:398:            return @"August PulseOnce";
Lock Component/AGDialView.m:401:            return @"August Waiting";
Lock Component/AGDialView.m:404:            return @"August Waiting to Unlock Remotely";
Lock Component/AGDialView.m:407:            return @"August Waiting to Lock Remotely";
Lock Component/AGDialView.m:410:            return @"August Waiting to Unlock Remotely";
Lock Component/AGDialView.m:413:            return @"August Waiting to Lock Remotely";
Lock Component/AGDialView.m:416:            return @"August Waiting for Toggle";         // what's the best descriptor for this?
Lock Component/AGDialView.m:419:            return @"August currently Locking";
Lock Component/AGDialView.m:423:            return @"Lock Your August";                       // need to confirm this is most appropriate
Lock Component/AGDialView.m:427:            return @"Unlock Your August";                     // need to confirm this is most appropriate
Lock Component/AGDialView.m:430:            return @"August Undefined State";
NewRelicAgent.framework/Versions/A/Resources/newrelic_postbuild.sh:63:SERVER_RESPONSE=$(curl --write-out %{http_code} --silent --output /dev/null -F dsym=@"${DSYM_ARCHIVE_PATH}" -F buildId="$DSYM_UUIDS"  -F appName="$EXECUTABLE_NAME" -H "X-APP-LICENSE-KEY: ${API_KEY}" "${DSYM_UPLOAD_URL}")
Lock Component/PRTween.m:276:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:278:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:294:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:318:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:320:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:337:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:339:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:355:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:371:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:373:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:441:                                      @"setBounds:",            // CGRect
Lock Component/PRTween.m:442:                                      @"setPosition:",          // CGPoint
Lock Component/PRTween.m:443:                                      @"setZPosition:",         // CGFloat
Lock Component/PRTween.m:444:                                      @"setAnchorPoint:",       // CGPoint
Lock Component/PRTween.m:445:                                      @"setAnchorPointZ:",      // CGFloat
Lock Component/PRTween.m:446:                                      //@"setTransform:",         // CATransform3D
Lock Component/PRTween.m:447:                                      //@"setSublayerTransform:", // CATransform3D
Lock Component/PRTween.m:448:                                      @"setFrame:",             // CGRect
Lock Component/PRTween.m:449:                                      @"setContentsRect"        // CGRect
Lock Component/PRTween.m:450:                                      @"setContentsScale:",     // CGFloat
Lock Component/PRTween.m:451:                                      @"setContentsCenter:",    // CGPoint
Lock Component/PRTween.m:452:                                      //@"setBackgroundColor:",   // CGColorRef
Lock Component/PRTween.m:453:                                      @"setCornerRadius:",      // CGFloat
Lock Component/PRTween.m:454:                                      @"setBorderWidth:",       // CGFloat
Lock Component/PRTween.m:455:                                      @"setOpacity:",           // CGFloat
Lock Component/PRTween.m:456:                                      //@"setShadowColor:",       // CGColorRef
Lock Component/PRTween.m:457:                                      @"setShadowOpacity:",     // CGFloat
Lock Component/PRTween.m:458:                                      @"setShadowOffset:",      // CGSize
Lock Component/PRTween.m:459:                                      @"setShadowRadius:",      // CGFloat
Lock Component/PRTween.m:460:                                      //@"setShadowPath:",
Lock Component/PRTween.m:466:                                        @"setFrame:",           // CGRect
Lock Component/PRTween.m:467:                                        @"setBounds:",          // CGRect
Lock Component/PRTween.m:468:                                        @"setCenter:",          // CGPoint
Lock Component/PRTween.m:469:                                        @"setTransform:",       // CGAffineTransform
Lock Component/PRTween.m:470:                                        @"setAlpha:",           // CGFloat
Lock Component/PRTween.m:471:                                        //@"setBackgroundColor:", // UIColor
Lock Component/PRTween.m:472:                                        @"setContentStretch:",  // CGRect
Lock Component/PRTween.m:496:                    NSString *propertyUnformatted = [selector stringByReplacingCharactersInRange:NSMakeRange(0, 3) withString:@""];
Lock Component/PRTween.m:523:                    [operation.boundObject addAnimation:animation forKey:@"PRTweenCAAnimation"];
Lock Component/PRTween.m:534:                    NSString *propertyUnformatted = [selector stringByReplacingCharactersInRange:NSMakeRange(0, 3) withString:@""];
Lock Component/PRTween.m:625:    return NSSelectorFromString([NSString stringWithFormat:@"set%@:", [property stringByReplacingCharactersInRange:NSMakeRange(0, 1) withString:[[property substringToIndex:1] capitalizedString]]]);
Lock Component/PRTween.m:701:            [tweenOperation removeObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue"];
Lock Component/PRTween.m:705:            [tweenOperation removeObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp"];
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:64:#define NRLogMessageLevelKey        @"level"
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:65:#define NRLogMessageFileKey         @"file"
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:66:#define NRLogMessageLineNumberKey   @"lineNumber"
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:67:#define NRLogMessageMethodKey       @"method"
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:68:#define NRLogMessageTimestampKey    @"timestamp"
NewRelicAgent.framework/Versions/A/Headers/NRLogger.h:69:#define NRLogMessageMessageKey      @"message"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:29:#define kNRNetworkStatusDidChangeNotification @"com.newrelic.networkstatus.changed"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:30:#define kNRMemoryUsageDidChangeNotification @"com.newrelic.memoryusage.changed"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:35:#define kNRMetricUnitPercent            (NRMetricUnit*)@"%"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:36:#define kNRMetricUnitBytes              (NRMetricUnit*)@"bytes"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:37:#define kNRMetricUnitSeconds            (NRMetricUnit*)@"sec"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:38:#define kNRMetricUnitsBytesPerSecond    (NRMetricUnit*)(@"bytes/second")
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:39:#define kNRMetricUnitsOperations        (NRMetricUnit*)@"op"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:41:#define kNRSupportabilityPrefix          @"Supportability/MobileAgent"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:42:#define kNRAgentHealthPrefix             @"Supportability/AgentHealth"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:43:#define kNRMASessionStartMetric           @"Session/Start"
NewRelicAgent.framework/Versions/A/Headers/NRConstants.h:45:#define kNRMAExceptionHandlerHijackedMetric kNRAgentHealthPrefix @"/Hijacked/ExceptionHandler"
AugustTests/Core/TestEntities/AGTestEntityStore.m:23:    testUser.firstName = @"User";
AugustTests/Core/TestEntities/AGTestEntityStore.m:24:    testUser.lastName = @"One";
AugustTests/Core/TestEntities/AGTestEntityStore.m:25:    testUser.emailAddress = @"TestUserOne.Aug@gmail.com";
AugustTests/Core/TestEntities/AGTestEntityStore.m:26:    testUser.phoneNumber = @"+19709866260";
AugustTests/Core/TestEntities/AGTestEntityStore.m:27:    testUser.password = @"AutoPirate1";
AugustTests/Core/TestEntities/AGTestEntityStore.m:34:    testUser.firstName = @"NonAugust";
AugustTests/Core/TestEntities/AGTestEntityStore.m:35:    testUser.lastName = @"User";
AugustTests/Core/TestEntities/AGTestEntityStore.m:36:    testUser.emailAddress = @"thisIsAFakeEmail@pretendEmail.com";
AugustTests/Core/TestEntities/AGTestEntityStore.m:37:    testUser.phoneNumber = @"+13211234777";
AugustTests/Core/TestEntities/AGTestEntityStore.m:38:    testUser.password = @"baconAndEggs2&";
AugustTests/Core/TestEntities/AGTestEntityStore.m:44:    testLock.lockID = @"344FF33AC0F84C5B8A72A871E860506F";
AugustTests/Core/TestEntities/AGTestEntityStore.m:45:    testLock.lockName = @"Europa Lock One";
AugustTests/Core/TestEntities/AGTestEntityStore.m:47:    testLock.talosServerAddress = @"http://10.0.19.171";
AugustTests/Core/TestEntities/AGTestEntityStore.m:54:    testHouse.houseName = @"House One";
AugustTests/Core/TestEntities/AGTestEntityStore.m:60:    testHouse.houseName = @"House Two";
AugustTests/Core/TestEntities/AGTestEntityStore.m:66:    testHouse.houseName = @"House Three";
AugustTests/Core/TestEntities/AGTestUser.m:14:    return [NSString stringWithFormat:@"%@ %@", self.firstName, self.lastName];
AugustTests/Core/AGAugustToolsClient.m:14:static NSString * const kAugustToolsEndpoint = @"https://tools-internal.august.com";
AugustTests/Core/AGAugustToolsClient.m:20:    NSString *relativeURLPath = [NSString stringWithFormat:@"/user/delete/%@", user.phoneNumber];
AugustTests/Core/AGAugustToolsClient.m:22:    [request setHTTPMethod:@"DELETE"];
AugustTests/Core/AGAugustToolsClient.m:35:    NSString *fullURLPath = [NSString stringWithFormat:@"%@%@",kAugustToolsEndpoint, urlPath];
AugustTests/Core/AGAugustToolsClient.m:39:    [request addValue:bearerToken forHTTPHeaderField:@"Bearer"];
AugustTests/Core/AGTestMailClient.m:33:        [self.session setHostname:@"imap.gmail.com"];
AugustTests/Core/AGTestMailClient.m:100:    NSString *folder = @"INBOX";
AugustTests/Core/AGTestMailClient.m:108:            NSLog(@"Error downloading message headers:%@", error);
AugustTests/Core/AGTestMailClient.m:123:            dateFormatter.dateFormat = @"hh:mm";
AugustTests/Core/AGTestMailClient.m:125:            NSLog(@"Subject:%@", curMessage.header.subject);
AugustTests/Core/AGTestMailClient.m:126:            NSLog(@"Date:%@", [dateFormatter stringFromDate:curMessage.header.date]);
AugustTests/Core/AGTestMailClient.m:127:            NSLog(@"");
AugustTests/Core/AGTestMailClient.m:130:            BOOL messageSubjectLooksLikeTextMessageCode = [curMessage.header.subject rangeOfString:@"text message"].location != NSNotFound;
AugustTests/Core/AGTestMailClient.m:131:            BOOL messageSubjectLooksLikeAugustEmailCode = [curMessage.header.subject rangeOfString:@"August verification code"].location != NSNotFound;
AugustTests/Core/AGTestMailClient.m:207:    MCOIMAPFetchContentOperation *fetchOperation = [self.session fetchMessageOperationWithFolder:@"INBOX" uid:message.uid];
AugustTests/Core/AGTestMailClient.m:223:    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"verification code is ([0-9]{6})"
AugustTests/Core/TalosDevices/AGTalosDoor.m:43:        NSString *urlPath = [NSString stringWithFormat:@"%@/doorOperator/%@/doorState/%@", self.lock.talosServerAddress, operatorID, doorStateStr];
AugustTests/Core/TalosDevices/AGTalosDoor.m:63:        NSString *urlPath = [NSString stringWithFormat:@"%@/doorOperator/%@/doorState", self.lock.talosServerAddress, operatorID];
AugustTests/Core/TalosDevices/AGTalosDoor.m:67:            NSString *doorStateStr = [json objectForKey:@"doorState"];
AugustTests/Core/TalosDevices/AGTalosDoor.m:71:                completion(AGTalosDoorState_Unknown, [NSError errorWithDomain:@"AGTalosServerError" code:-6472 userInfo:@{@"AGError":@"NoDoorStateReturned"}]);
AugustTests/Core/TalosDevices/AGTalosDoor.m:90:    [AGTalosClient getURLPath:[NSString stringWithFormat:@"%@/lockAutomationDevices/%@", self.lock.talosServerAddress, self.lock.lockID] withCompletion:^(NSDictionary *json, NSError *error) {
AugustTests/Core/TalosDevices/AGTalosDoor.m:92:        NSNumber *operatorIDNum = [json objectForKey:@"doorOperatorID"];
AugustTests/Core/TalosDevices/AGTalosDoor.m:102:             @(AGTalosDoorState_Open):@"open",
AugustTests/Core/TalosDevices/AGTalosDoor.m:103:             @(AGTalosDoorState_Closed):@"closed",
AugustTests/Core/TalosDevices/AGTalosDoor.m:104:             @(AGTalosDoorState_Ajar):@"ajar"
AugustTests/Core/TalosDevices/AGTalosDoor.m:110:             @"open":@(AGTalosDoorState_Open),
AugustTests/Core/TalosDevices/AGTalosDoor.m:111:             @"closed":@(AGTalosDoorState_Closed),
AugustTests/Core/TalosDevices/AGTalosDoor.m:112:             @"ajar":@(AGTalosDoorState_Ajar)
AugustTests/Core/TalosDevices/AGTalosClient.m:17:    [request setHTTPMethod:@"PUT"];
AugustTests/Core/TalosDevices/AGTalosClient.m:36:    [request setHTTPMethod:@"GET"];
AugustTests/Core/TalosDevices/AGTalosLock.m:43:        NSString *urlPath = [NSString stringWithFormat:@"%@/lockOperator/%@/lockState/%@", self.lock.talosServerAddress, operatorID, lockStateStr];
AugustTests/Core/TalosDevices/AGTalosLock.m:63:        NSString *urlPath = [NSString stringWithFormat:@"%@/lockOperator/%@/lockState", self.lock.talosServerAddress, operatorID];
AugustTests/Core/TalosDevices/AGTalosLock.m:67:            NSString *lockStateStr = [json objectForKey:@"lockState"];
AugustTests/Core/TalosDevices/AGTalosLock.m:71:                completion(AGTalosLockState_Unknown, [NSError errorWithDomain:@"AGTalosServerError" code:-6471 userInfo:@{@"AGError":@"NoLockStateReturned"}]);
AugustTests/Core/TalosDevices/AGTalosLock.m:90:    NSString *urlPath = [NSString stringWithFormat:@"%@/lockAutomationDevices/%@", self.lock.talosServerAddress, self.lock.lockID];
AugustTests/Core/TalosDevices/AGTalosLock.m:93:        NSNumber *lockOperatorIDNum = [json objectForKey:@"lockOperatorID"];
AugustTests/Core/TalosDevices/AGTalosLock.m:103:             @(AGTalosLockState_Locked):@"locked",
AugustTests/Core/TalosDevices/AGTalosLock.m:104:             @(AGTalosLockState_Unlocked):@"unlocked",
AugustTests/Core/TalosDevices/AGTalosLock.m:105:             @(AGTalosLockState_Unknown):@"unknown"
AugustTests/Core/TalosDevices/AGTalosLock.m:111:             @"locked":@(AGTalosLockState_Locked),
AugustTests/Core/TalosDevices/AGTalosLock.m:112:             @"unlocked":@(AGTalosLockState_Unlocked),
AugustTests/Core/TalosDevices/AGTalosLock.m:113:             @"unknown":@(AGTalosLockState_Unknown)
AugustTests/AugustUITests/AGCreateAccountUITests.m:56:    XCTestExpectation *createAccountSuccessExpectation = [self expectationWithDescription:@"11"];
AugustTests/AugustUITests/AGCreateAccountUITests.m:60:        XCTAssert(error == nil, @"The account should be deleted successfully before creating an account");
AugustTests/AugustUITests/AGCreateAccountUITests.m:64:                XCTAssert(error == nil, @"The account should be created successfully when testing account creation");
AugustTests/Core/AGTestBuildTimeSecretsTemplate.h:15:static NSString * const kAugustToolsToken = @"___AugustToolsTokenPlaceholder___";
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:27:        if([[navigateToKeychainError.userInfo objectForKey:@"AGError"] isEqual:AGUITestGeneralNavigatorSignInError]){
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:79:        if ([error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorSignInError]) {
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:109:    [app.buttons[@"SET UP MY FIRST AUGUST DEVICE"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:110:    XCUIElement *firstNameTextField = app.textFields[@"First Name"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:111:    XCUIElement *lastNameTextField = [[[[app.scrollViews containingType:XCUIElementTypeTextField identifier:@"First Name"] childrenMatchingType:XCUIElementTypeTextField] matchingIdentifier:@"Last Name"] elementBoundByIndex:0];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:119:    XCUIElement *emailAddressTextField = app.textFields[@"Email Address"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:122:    [emailAddressTextField typeText:@"testuserone.aug@gmail.com"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:125:    XCUIElement *xxxXxxXxxxTextField = elementsQuery.textFields[@"(xxx) xxx-xxxx"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:129:    XCUIElement *createPasswordSecureTextField = app.secureTextFields[@"Create Password"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:134:    if([app.buttons[@"Done"] exists]){
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:136:        [app.buttons[@"Done"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:138:    [app.buttons[@"NEXT"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:142:        [[[XCUIApplication alloc] init].buttons[@"SELECT FROM GALLERY"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:144:        [[[window tables] cells][@"Camera Roll"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:145:        [[[[window collectionViews][@"PhotosGridView"] cells] elementBoundByIndex:0] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:146:        [[[XCUIApplication alloc] init].buttons[@"Choose"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:149:        XCUIElement *takePhotoButton = app.buttons[@"TAKE PHOTO"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:153:        XCUIElement *cameraPermissionsAlert = app.alerts[@"\u201cAugust\u201d Would Like to Access the Camera"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:155:            [cameraPermissionsAlert.buttons[@"OK"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:159:        [app.buttons[@"Use Photo"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:160:        [app.buttons[@"Choose"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:163:    [app.buttons[@"NEXT"] tap];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:168:    XCTestExpectation *waitForPhoneVerificationCode = [[XCTestExpectation alloc] initWithDescription:@"Waiting for verification code"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:215:    XCUIElement *continueButton = app.buttons[@"Continue"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:235:    XCTestExpectation *waitForEmailVerificationCode = [[XCTestExpectation alloc] initWithDescription:@"Waiting for verification code"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:251:    XCUIElement *verifyEmailText = app.staticTexts[@"VERIFY EMAIL"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:254:    XCUIElement *tapToResend = app.staticTexts[@"Didn't receive an email? TAP HERE"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:259:    XCTestExpectation *waitForEmailVerificationCodeSecondAttempt = [[XCTestExpectation alloc] initWithDescription:@"Waiting for verification code second attempt"];
AugustTests/AugustUITests/AGUITestCreateAccountRunner.m:275:    XCTestExpectation *waitForEmailVerificationCodeLastAttempt = [[XCTestExpectation alloc] initWithDescription:@"Waiting for verification code last attempt"];
AugustTests/AugustUITests/AGUITestUtility.m:19:    XCTestExpectation *waitExpectation = [[XCTestExpectation alloc] initWithDescription:@"Waiting should not fail"];
AugustTests/AugustUITests/AGUITestUtility.m:84:    return [NSError errorWithDomain:@"AGUITestError" code:-2001 userInfo:@{@"AGError":errorValue ?: @""}];
AugustTests/AugustUITests/AGUITestUtility.m:89:    return [[NSProcessInfo processInfo] environment][@"SIMULATOR_DEVICE_NAME"] != nil;
AugustTests/AugustUITests/AGUITestUtility.m:95:    [array addObject:@"--noAnimations"];
AugustTests/AugustUITests/AGLockCalibrationTests.m:54:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock calibration to complete"];
AugustTests/AugustUITests/AGLockCalibrationTests.m:59:        XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockCalibrationTests.m:62:            XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockCalibrationTests.m:65:                XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockCalibrationTests.m:69:                XCUIElement *calibrateLockButton = app.tables.staticTexts[@"Calibrate Lock"].firstMatch;
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:67:        BOOL isSetupFixableError = [error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorHouseDoesNotExist] || [error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorLockDoesNotExist];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:128:            XCUIElement *closeHomeKitSetupButton = app.buttons[@"Close HomeKit Setup"];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:129:            XCUIElement *doneButton = app.buttons[@"DONE"];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:130:            XCUIElement *okButton = app.buttons[@"OK"];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:139:                completion([AGUITestUtility errorWithValue:@"AGUITestLockSetupRunnerIsLost"]);
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:196:    [app.buttons[@"Show Settings"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:198:    [tablesQuery.staticTexts[@"Set up a New Device"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:199:    [tablesQuery.staticTexts[@"AUGUST SMART LOCK"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:200:    [tablesQuery.staticTexts[@"AUGUST SMART LOCK PRO"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:201:    [app.buttons[@"SKIP"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:202:    [app.buttons[@"START"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:207:    [app.buttons[@"Show Settings"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:209:    [tablesQuery.staticTexts[@"Set up a New Device"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:210:    [tablesQuery.staticTexts[@"AUGUST SMART LOCK"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:211:    [[app.tables.cells containingType:XCUIElementTypeImage identifier:@"onboard_callisto_bg"].staticTexts[@"3RD GENERATION"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:212:    [app.buttons[@"SKIP"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:213:    [app.buttons[@"START"] tap];
AugustTests/AugustUITests/AGUITestLockSetupRunner.m:218:    return [NSError errorWithDomain:@"AGUITestError" code:-3633 userInfo:@{@"AGError":@"AGUITestLockSetupRunner_LockTypeNotSupported"}];
AugustTests/AugustUITests/AGUITestsUtility.m:17:    [app.buttons[@"Show Settings"] tap];
AugustTests/AugustUITests/AGUITestsUtility.m:20:    [tablesQuery/*@START_MENU_TOKEN@*/.staticTexts[@"SpencerAutomation Carroll"]/*[[".cells.staticTexts[@\"SpencerAutomation Carroll\"]",".staticTexts[@\"SpencerAutomation Carroll\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGUITestsUtility.m:21:    [tablesQuery/*@START_MENU_TOKEN@*/.staticTexts[@"Sign Out"]/*[[".cells.staticTexts[@\"Sign Out\"]",".staticTexts[@\"Sign Out\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGUITestsUtility.m:22:    [app.alerts[@"Sign Out?"].buttons[@"Sign Out"] tap];
AugustTests/AugustUITests/AGUITestsUtility.m:27:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGUITestsUtility.m:30:    XCUIElement *xxxXxxXxxxTextField = elementsQuery.textFields[@"(xxx) xxx-xxxx"];
AugustTests/AugustUITests/AGUITestsUtility.m:31:    [xxxXxxXxxxTextField typeText:@"7706150808"];
AugustTests/AugustUITests/AGUITestsUtility.m:33:    XCUIElement *enterPasswordSecureTextField = elementsQuery.secureTextFields[@"Enter Password"];
AugustTests/AugustUITests/AGUITestsUtility.m:36:    [enterPasswordSecureTextField typeText:@"AutoPirate1"];
AugustTests/AugustUITests/AGUITestsUtility.m:37:    [app/*@START_MENU_TOKEN@*/.buttons[@"Go"]/*[[".keyboards.buttons[@\"Go\"]",".buttons[@\"Go\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGUITestsUtility.m:45:    XCUIElement *signInButton = app.buttons[@"Sign In"];
AugustTests/AugustUITests/AGUITestsUtility.m:66:    XCUIElement *keyChainButton = app.buttons[@"goto keychain"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:66:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expecting to reach Forgot Password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:69:        XCTAssertNil(error, @"Should not have reached an error when navigating to forgot password");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:75:    expectation = [self expectationWithDescription:@"Expecting to reset password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:78:        XCTAssertNil(error, @"Error resetting password!");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:79:        XCTAssertEqual(factors, @1, @"We signed in during this test, we should only need to verify a single factor");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:114:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expecting to reach Forgot Password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:117:        XCTAssertNil(error, @"Should not have reached an error when navigating to forgot password");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:123:    expectation = [self expectationWithDescription:@"Expecting to reset password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:126:        XCTAssertNil(error, @"Error resetting the password!");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:127:        XCTAssertEqual(factors, @1, @"We signed in during this test, we should only need to verify a single factor");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:152:    [args addObject:@"--clean"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:163:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:164:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:165:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:169:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expecting to reset password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:173:        XCTAssertEqual(factorsVerified, @2, @"We cleaned before this test, we should require two factors");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:197:    [args addObject:@"--clean"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:208:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:209:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:210:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:214:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expecting to reset password"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:218:        XCTAssertEqual(factorsVerified, @2, @"We cleaned before this test, we should require two factors");
AugustTests/AugustUITests/AGForgotPasswordUITests.m:240:    [args addObject:@"--clean"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:252:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:253:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:254:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:258:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expect to fail password reset"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:283:    [args addObject:@"--clean"];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:294:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:295:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:296:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGForgotPasswordUITests.m:300:    XCTestExpectation * expectation = [self expectationWithDescription:@"Expect to fail password reset"];
AugustTests/AugustUITests/AGLockOperationTests.m:53:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock operations to complete"];
AugustTests/AugustUITests/AGLockOperationTests.m:55:    XCUIElement *lockButton = app.buttons[@"Lock Your August"];
AugustTests/AugustUITests/AGLockOperationTests.m:56:    XCUIElement *unlockButton = app.buttons[@"Unlock Your August"];
AugustTests/AugustUITests/AGLockOperationTests.m:57:    XCUIElement *stateDescriptionLabel = app.staticTexts[@"Lock and Door State Label"];
AugustTests/AugustUITests/AGLockOperationTests.m:60:    XCTAssert(initialLockButton, @"Lock did not return a status");
AugustTests/AugustUITests/AGLockOperationTests.m:66:    NSString *initialLockStateDescription = initialLockState == AGTalosLockState_Locked ? @"Locked" : @"Unlocked";
AugustTests/AugustUITests/AGLockOperationTests.m:67:    NSString *oppositeOfInitialLockStateDescription = oppositeOfInitialLockState == AGTalosLockState_Locked ? @"Locked" : @"Unlocked";
AugustTests/AugustUITests/AGLockOperationTests.m:130:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock operations to complete"];
AugustTests/AugustUITests/AGLockOperationTests.m:132:    XCUIElement *lockButton = app.buttons[@"Lock Your August"];
AugustTests/AugustUITests/AGLockOperationTests.m:133:    XCUIElement *unlockButton = app.buttons[@"Unlock Your August"];
AugustTests/AugustUITests/AGLockOperationTests.m:134:    XCUIElement *stateDescriptionLabel = app.staticTexts[@"Lock and Door State Label"];
AugustTests/AugustUITests/AGLockOperationTests.m:137:    XCTAssert(initialLockButton, @"Lock did not return a status");
AugustTests/AugustUITests/AGLockOperationTests.m:143:    NSString *initialLockStateDescription = initialLockState == AGTalosLockState_Locked ? @"Locked" : @"Unlocked";
AugustTests/AugustUITests/AGLockOperationTests.m:144:    NSString *oppositeOfInitialLockStateDescription = oppositeOfInitialLockState == AGTalosLockState_Locked ? @"Locked" : @"Unlocked";
AugustTests/AugustUITests/AGLockOperationTests.m:211:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock operations to complete"];
AugustTests/AugustUITests/AGLockOperationTests.m:213:    XCUIElement *stateDescriptionLabel = app.staticTexts[@"Lock and Door State Label"];
AugustTests/AugustUITests/AGLockOperationTests.m:215:    XCTestExpectation *waitForUnlockOperation = [self expectationWithDescription:@"Wait for unlock operation"];
AugustTests/AugustUITests/AGLockOperationTests.m:229:    XCTestExpectation *waitForDoostateToggleOperation = [self expectationWithDescription:@"Wait for door setup operations to complete"];
AugustTests/AugustUITests/AGLockOperationTests.m:252:    XCTAssert([stateDescriptionLabel.label containsString:@"Closed"] || [stateDescriptionLabel.label containsString:@"Open"]);
AugustTests/AugustUITests/AGLockOperationTests.m:254:    AGTalosDoorState initialDoorState = [stateDescriptionLabel.label containsString:@"Open"] ? AGTalosDoorState_Open : AGTalosDoorState_Closed;
AugustTests/AugustUITests/AGLockOperationTests.m:257:    NSString *initialDoorStateDescription = initialDoorState == AGTalosDoorState_Open ? @"Open" : @"Closed";
AugustTests/AugustUITests/AGLockOperationTests.m:258:    NSString *oppositeOfInitialDoorStateDescription = oppositeOfInitialDoorState == AGTalosDoorState_Open ? @"Open" : @"Closed";
AugustTests/AugustUITests/AGLockOperationTests.m:321:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock calibration to complete"];
AugustTests/AugustUITests/AGLockOperationTests.m:326:        XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockOperationTests.m:329:            XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockOperationTests.m:333:                XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGUITestUtility.h:37://Returns an error where the "AGError" value is errorValue. i.e [userInfo[@"AGError"] isEqual <errorValue>]
AugustTests/AugustUITests/AGBasicUITests.m:52:    [app.collectionViews[@"Keychain"]/*@START_MENU_TOKEN@*/.staticTexts[@"SpencerAutomation's House"]/*[[".cells.staticTexts[@\"SpencerAutomation's House\"]",".staticTexts[@\"SpencerAutomation's House\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGBasicUITests.m:58:    XCUIElement *unlockButton = app.buttons[@"Unlock Your August"];
AugustTests/AugustUITests/AGBasicUITests.m:59:    XCUIElement *lockButton = app.buttons[@"Lock Your August"];
AugustTests/AugustUITests/AGBasicUITests.m:82:    [app.collectionViews[@"Keychain"]/*@START_MENU_TOKEN@*/.staticTexts[@"SpencerAutomation's House"]/*[[".cells.staticTexts[@\"SpencerAutomation's House\"]",".staticTexts[@\"SpencerAutomation's House\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGBasicUITests.m:83:    [app.tabBars.buttons[@"Doorbell"] tap];
AugustTests/AugustUITests/AGBasicUITests.m:84:    [app.buttons[@"WATCH LIVE"] tap];
AugustTests/AugustUITests/AGBasicUITests.m:86:    [app.buttons[@"declineDoorbellCall"] tap];
AugustTests/AugustUITests/AGBasicUITests.m:93:    [app.collectionViews[@"Keychain"]/*@START_MENU_TOKEN@*/.staticTexts[@"SpencerAutomation's House"]/*[[".cells.staticTexts[@\"SpencerAutomation's House\"]",".staticTexts[@\"SpencerAutomation's House\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/ tap];
AugustTests/AugustUITests/AGBasicUITests.m:98:    XCUIElement *lockSettingsElement = [[tablesQuery.cells containingType:XCUIElementTypeStaticText identifier:@"Lock Settings"] childrenMatchingType:XCUIElementTypeButton].element;
AugustTests/AugustUITests/AGBasicUITests.m:105:    XCUIElement *closeButtonV3Button = app.buttons[@"Close Button v3"];
AugustTests/AugustUITests/AGBasicUITests.m:108:    XCUIElement *doorbellSettingsElement = [[tablesQuery.cells containingType:XCUIElementTypeStaticText identifier:@"Doorbell Cam Settings"] childrenMatchingType:XCUIElementTypeButton].element;
AugustTests/AugustUITests/AGBasicUITests.m:120:    XCTestExpectation *waitBetweenTests = [self expectationWithDescription:@"Should never fail"];
AugustTests/AugustUITests/AGLockSetupTests.m:54:    XCTestExpectation *waitForTest = [self expectationWithDescription:@"Wait for lock setup to complete"];
AugustTests/AugustUITests/AGLockSetupTests.m:59:        XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockSetupTests.m:62:            XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGLockSetupTests.m:68:                XCTAssert(error == nil, @"Error occured: %@", error);
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:28:        if ([error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorHouseDoesNotExist] ||
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:29:            [error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorLockDoesNotExist]) {
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:50:        XCUIElementQuery *houseLabelsQuery = [app.collectionViews[@"Keychain"].cells.staticTexts matchingType:XCUIElementTypeStaticText identifier:@"house name"];
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:65:            XCTestExpectation *waitForFactoryReset = [[XCTestExpectation alloc] initWithDescription:@"Waiting for house factory reset"];
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:94:        if ([error.userInfo[@"AGError"] isEqual:AGUITestGeneralNavigatorSettingsTabDoesNotExist]) {
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:100:        XCUIElement *lockSettingsStaticText = tablesQuery.staticTexts[@"Lock Settings"];
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:134:    XCUIElement *factoryResetStaticText = app.tables.staticTexts[@"Factory Reset"];
AugustTests/AugustUITests/AGUITestFactoryResetRunner.m:137:    [app.buttons[@"Reset Lock"] tap];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:28:    XCUIElement *lockAndDoorsenseButton = app.buttons[@"LOCK AND DOORSENSE"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:35:    XCTestExpectation *wait0 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to unlock door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:45:    XCTestExpectation *wait1 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to close door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:55:    XCUIElement *okDoorIsClosedAndUnlockedButton = app.buttons[@"OK, DOOR IS CLOSED AND UNLOCKED"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:61:    XCTestExpectation *wait2 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to lock door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:71:    XCUIElement *okDoorIsLockedButton = app.buttons[@"OK, DOOR IS LOCKED"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:78:    XCTestExpectation *wait3 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to unlock door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:87:    XCUIElement *okDoorIsUnlockedButton = app.buttons[@"OK, DOOR IS UNLOCKED"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:94:    XCTestExpectation *wait4 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to open door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:103:    XCUIElement *okDoorIsWideOpenButton = app.buttons[@"OK, DOOR IS WIDE OPEN"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:110:    XCTestExpectation *wait5 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to ajar door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:120:    XCUIElement *okDoorIsAjarButton = app.buttons[@"OK, DOOR IS AJAR"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:127:    XCTestExpectation *wait6 = [[XCTestExpectation alloc] initWithDescription:@"Waiting to close door"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:142:    XCUIElement *doneButton = app.buttons[@"DONE"];
AugustTests/AugustUITests/AGUITestLockCalibrationRunner.m:144:        completion([AGUITestUtility errorWithValue:@"AGUITestLockCalibrationRunnerIsLost"]);
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:35:            [app.buttons[@"SIGN IN WITH EMAIL INSTEAD"] tap];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:49:    BOOL otherFactorRequired = [app.textFields[@"(xxx) xxx-xxxx"] exists] || [app.textFields[@"Enter Email Address"] exists];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:128:    XCUIElement * createPassword = app.secureTextFields[@"Create new Password"];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:129:    XCUIElement * confirmPassword = app.secureTextFields[@"Confirm new Password"];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:144:    [app.alerts[@"Password Updated"].buttons[@"OK"] tap];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:163:            [app.buttons[@"SIGN IN WITH EMAIL INSTEAD"] tap];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:176:    XCUIElement * alert = app.alerts[@"Error"];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:179:        error = [AGUITestUtility errorWithValue:@"No Error Dialog when Error Dialog expected"];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:224:    XCUIElement * emailField = app.textFields[@"Enter Email Address"];
AugustTests/AugustUITests/AGUITestResetPasswordRunner.m:233:    XCUIElement * phoneField = app.textFields[@"(xxx) xxx-xxxx"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:22:    [app.buttons[@"Start Setup"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:36:    XCUIElement *houseTextField = app.textFields[@"Matt's House"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:37:    XCUIElement *chooseNameForLock = app.staticTexts[@"Choose a name for your new lock."];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:59:    XCUIElement *frontDoorTextField = app.textFields[@"Front Door"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:62:    XCUIElement *deleteKey = app.keys[@"delete"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:66:    [app.buttons[@"Done"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:67:    [app.buttons[@"NEXT"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:74:        [app.collectionViews.cells.staticTexts[@"Add a House"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:80:    XCUIElement *lowerCaseContinueButton = app.buttons[@"Continue"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:94:    XCUIElement *houseTextField = app.textFields[@"Matt's House"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:97:    XCUIElement *deleteKey = app.keys[@"delete"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:102:    XCUIElement *lockNameTextField = app.textFields[@"Front Door"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:106:    [app.buttons[@"Done"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:108:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:110:    XCUIElement *lowerCaseContinueButton = app.buttons[@"Continue"];
AugustTests/AugustUITests/AGUITestLockAssociationRunner.m:123:    return [AGUITestUtility errorWithValue:@"AGUITestLockAssociationRunnerIsLost"];
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:38://    XCTestExpectation *imageCapturerShouldGetImage = [self expectationWithDescription:@"AGVideoStreamImageCapturer should get atleast one image(probably the one from the server) quickly"];
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:42://        if (self.imageCapturer.recentImageURL && ![self.imageCapturer.recentImageURL isEqualToString:@""]) {
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:43://            NSLog(@"Recent Image URL: %@", self.imageCapturer.recentImageURL);
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:44://            NSLog(@"Recent Image URL Date: %@", self.imageCapturer.recentImageDate);
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:48://            XCTFail(@"Image capturer alerted observer without valid image url.");
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:64:////    XCTestExpectation *imageCapturerShouldGetImage = [self expectationWithDescription:@"AGVideoStreamImageCapturer should get atleast two image updates if an image capture is received(server fetch plus image capture equals two)"];
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:69:////        if (self.imageCapturer.recentImageURL && ![self.imageCapturer.recentImageURL isEqualToString:@""]) {
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:70:////            NSLog(@"Recent Image URL: %@", self.imageCapturer.recentImageURL);
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:71:////            NSLog(@"Recent Image URL Date: %@", self.imageCapturer.recentImageDate);
AugustTests/AugustUnitTests/Media Streaming/Intellivision/AGVideoStreamImageCapturerTests.m:77:////            XCTFail(@"Image capturer alerted observer without valid image url.");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestDoorbellCallable.m:15:#define SERIAL_NUMBER @"1234567890"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestDoorbellCallable.m:16:#define DOORBELL_ID @"9876543210"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestDoorbellCallable.m:28:    self.doorbell = [[AGDoorbell alloc] initWithDictionary:@{@"doorbellID" : DOORBELL_ID, @"serialNumber" : SERIAL_NUMBER}];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:15:#define FAKE_SDP @"this is a fake sdp"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:47:    XCTAssertThrows([_signal register], @"Should not be able to register before MessageHandler is provided");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:62:    XCTAssertThrows([_signal sendWakeUp], @"Should not be able to send wake up before registered");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:88:    XCTAssertThrows([_signal sendAnswer:@""], @"Should not be able to send an answer before receiving offer");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:91:    XCTAssertThrows([_signal sendAnswer:@""], @"Should not be able to send an answer before receiving offer");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:122:    XCTAssertThrows([_signal sendICECandidate:[self iceCandidate]], @"Should not be able to send ICE candidate before registering");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:159:    XCTAssertThrows([_signal sendAnswer:@"answer"]);
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:161:    XCTAssertThrows([_signal sendSDPOffer:@"offer"]);
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:162:    XCTAssertThrows([_signal sendError:@"error"]);
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:169:    XCTAssertThrows([_signal sendWakeUp], @"Should not be able to send wake up before registered");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:216:            @"status" : @"error",
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:217:            @"session_id" : @"1234",
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:218:            @"error" : @{
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:219:                    @"code" : @0,
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:220:                    @"reason" : @"life"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:248:        XCTAssert([argument isEqual:_signal], @"PubSubSignaling does not register for messages");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:268:    XCTAssertNotNil(msg[@"status"], @"Message missing 'status' field!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:271:    XCTAssertNotNil(msg[@"tid"], @"Message missing 'tid' field!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:272:    XCTAssert([msg[@"tid"] isKindOfClass:[NSNumber class]], @"transaction id should be a number");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:275:    XCTAssertNotNil(msg[@"origin"], @"Message missing 'origin' field!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:276:    XCTAssert([msg[@"origin"] isEqualToString:@"iOS"], @"field should be 'iOS'");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:287:    XCTAssertNotNil(msg, @"Message should not be nil");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:289:    XCTAssertNotNil(msg[@"status"], @"Message should include status");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:290:    NSString * status = msg[@"status"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:294:    NSNumber * tid = msg[@"tid"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:295:    if([status isEqualToString:@"wakeup"]){
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:296:        XCTAssert([msg count] == 4, @"Parameter size does not match spec");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:298:        XCTAssert([msg[@"status"] isEqualToString:@"wakeup"], @"Status field should be 'wakeup'");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:300:        XCTAssertNotNil(msg[@"webrtc"], @"Message missing 'webrtc' field!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:301:        XCTAssert(msg[@"webrtc"], @"field should be 'true'");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:307:    } else if ([status isEqualToString:@"answer"]){
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:308:        XCTAssert([msg count] == 5, @"parameter size does not match spec!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:310:        XCTAssert([msg[@"status"] isEqualToString:@"answer"], @"Status should be 'answer'");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:312:        XCTAssertNotNil(msg[@"jsep"], @"Missing JSEP!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:313:        NSDictionary * jsep = msg[@"jsep"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:315:        XCTAssertNotNil(jsep[@"type"], @"Type not included with JSEP!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:316:        XCTAssert([jsep[@"type"] isEqualToString:@"answer"], @"JSEP type should be 'answer'");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:318:        XCTAssertNotNil(jsep[@"sdp"], @"SDP not included in JSEP! Cannot answer like that");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:319:        XCTAssert([jsep[@"sdp"] isEqualToString:FAKE_SDP], @"SDP does not match given SDP");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:324:    } else if([status isEqualToString:@"trickle"]){
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:325:        XCTAssertNotNil(msg[@"candidates"], @"Candidates field cannot be nil");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:326:        NSArray * candidates = msg[@"candidates"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:327:        XCTAssert([candidates count] == 1, @"There should be a single candidate per trickle message");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:328:        XCTAssertEqualObjects(candidates[0], [self iceCandidate], @"Candidate data does not match input");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:334:        XCTFail(@"Unknown status %@", status);
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:341:            @"jsep" : @{@"sdp" : @"sdp"},
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:342:            @"session_id" : @1234,
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:343:            @"tid" : tid,
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:344:            @"status" : @"offer"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:353:            @"status" : @"ack",
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:354:            @"tid" : tid
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:363:        @"key" : @"value"
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:375:        XCTFail(@"Received a response we were not expecting!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:384:        XCTFail(@"Received a response we were not expecting!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:393:        XCTFail(@"Received a response we were not expecting!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:402:        XCTFail(@"Received a response we were not expecting!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestPubSubSignaling.m:416:        XCTFail(@"Received an error we were not expecting!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:139:    bufferingExpectation = [self expectationWithDescription:@"Expecting to move back to buffering state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:145:    renderingExpectation = [self expectationWithDescription:@"Expecting to move to the rendering state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:160:    errorExpectation = [self expectationWithDescription:@"Expecting to move to error state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:171:    errorExpectation = [self expectationWithDescription:@"Expecting to move to error state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:190:    errorExpectation = [self expectationWithDescription:@"Expecting to move to error state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:225:            XCTFail(@"We do not support sending offers to peers!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:229:            XCTFail(@"We do not support sending offers to peers!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:311:    initializationExpectation = [[XCTestExpectation alloc] initWithDescription:@"Expecting internal state change to Initialized"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:312:    readyForOfferExpectation = [[XCTestExpectation alloc] initWithDescription:@"Expecting internal state change to ReadyForOffer"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:340:    NSString * offer = @"offer";
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:359:    sentAnswerExpectation = [self expectationWithDescription:@"Expecting to move to sentAnswer state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:362:    [client didReceiveOffer:offer from:@"test"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:373:    bufferingExpectation = [self expectationWithDescription:@"Expecting to start buffering"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:374:    connectedExpectation = [self expectationWithDescription:@"Expecting to move to Connected state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:410:    renderingExpectation = [self expectationWithDescription:@"Expecting to start rendering!"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:442:    closeExpectation = [self expectationWithDescription:@"Expecting to move to closed state"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:454:    XCTestExpectation * falseHope = [self expectationWithDescription:@"Expecting this to not be fullfilled"];
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:480:                XCTFail(@"Moved to buffering state unexpectedly!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:488:                XCTFail(@"Moved to rendering state unexpectedly!");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:529:                XCTFail(@"Unexpectedly moved to AGWebRTCState_Connected");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:537:                XCTFail(@"Unexpectedly moved to AGWebRTCState_Closed");
AugustTests/AugustUnitTests/Media Streaming/WebRTC/TestWebRTCClient.m:545:                XCTFail(@"Unexpectedly moved to Error state");
AugustTests/AugustUnitTests/Business/TestCallRecord.m:20:#define kPeerIdentifierTest @"identifier"
AugustTests/AugustUnitTests/Business/TestCallRecord.m:42:    [OCMStub([self.videoStream localizedStatus]) andReturn:@"MockStatus"];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:43:    [OCMStub([self.videoStream localizedStatus]) andReturn:@"MockStatus"];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:145:        [self.callRecord didRecieveMessageFromMessageHandler:@{@"status" : @"initiate"}];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:153:        [self.callRecord didRecieveMessageFromMessageHandler:@{@"status" : @"respond"}];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:188:    return [NSString stringWithFormat:kCallRecordEndpoint, kPeerIdentifierTest, @"respond"];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:193:    return [NSString stringWithFormat:kCallRecordEndpoint, kPeerIdentifierTest, @"initiate"];
AugustTests/AugustUnitTests/Business/TestCallRecord.m:198:    return [NSString stringWithFormat:kCallRecordEndpoint, kPeerIdentifierTest, @"hangup"];
AugustTests/AugustUnitTests/AGUnitTest.m:17:    XCTestExpectation *expectation = [[XCTestExpectation alloc] initWithDescription:@"Expecting to not receive notification while backoff timer drains"];
AugustTests/AugustUnitTests/Utillities/TestVideoStreamDebugger.m:84:    [OCMExpect([self.mockStream localizedStatus]) andReturn:@"I'm Fine"];
AugustTests/AugustUnitTests/Utillities/TestVideoStreamDebugger.m:85:    [OCMExpect([self.mockStream localizedError]) andReturn:@"I'm Fine, really."];
AugustTests/AugustUnitTests/Utillities/TestVideoStreamDebugger.m:86:    [OCMExpect([self.mockStream performanceStats]) andReturn:@{@"truth" : @"is out there"}];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:24:    NSDictionary *imageDict = [self dictionary:request.content.userInfo safeObjectForKey:@"image"];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:25:    NSString *secureImagePath = [self dictionary:imageDict safeObjectForKey:@"secure_url"];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:38:        UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"" URL:downloadedImageURL options:nil error:nil];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:112:    XCTestExpectation *waitForCommands = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:167:    XCTestExpectation *waitForGetStatus = [self expectationWithDescription:@"Wait for command"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:168:    XCTestExpectation *waitOperation1 = [self expectationWithDescription:@"Wait for command"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:169:    XCTestExpectation *waitOperation2 = [self expectationWithDescription:@"Wait for command"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:222:    XCTestExpectation *waitForCommands = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:229:    XCTestExpectation *waitForWillConnect = [self expectationWithDescription:@"Will connect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:235:    XCTestExpectation *waitForDidConnect = [self expectationWithDescription:@"Did connect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:240:    XCTestExpectation *waitForDidHandshake = [self expectationWithDescription:@"Did handshake should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:246:    XCTestExpectation *waitForDidDisconnect = [self expectationWithDescription:@"Disconnect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:274:    XCTestExpectation *waitForStallCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:280:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorCommandTimeout]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:289:    XCTestExpectation *waitForGetStatusCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:308:    XCTestExpectation *waitForCommand1 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:318:    XCTestExpectation *waitForCommand2 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:327:    XCTestExpectation *waitForCommand3 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:345:    XCTestExpectation *waitForStallCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:347:    XCTestExpectation *waitForFinalGetStatusCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:353:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorUnexpectedDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:369:    XCTestExpectation *waitForGetStatusCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:373:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorUnexpectedDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:393:    XCTestExpectation *waitForStallCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:398:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorCommandTimeout]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:409:    XCTestExpectation *waitForFirstGetStatusCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:414:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorCommandTimeout]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:426:    XCTestExpectation *waitForSecondGetStatusCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:455:    XCTestExpectation *waitForDidDisconnect = [self expectationWithDescription:@"Disconnect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:466:    XCTestExpectation *waitForCommand1 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:477:    XCTestExpectation *waitForCommand2 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:488:    XCTestExpectation *waitForCommand3 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:501:            XCTestExpectation *waitForCommand4 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:525:    XCTestExpectation *waitForDidDisconnect = [self expectationWithDescription:@"Disconnect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:536:    XCTestExpectation *waitForCommand1 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:548:    XCTestExpectation *waitForCommand2 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:551:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorForceDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:556:    XCTestExpectation *waitForCommand3 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:557:    XCTestExpectation *waitForCommand4 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:561:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorForceDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:587:    XCTestExpectation *waitForDidDisconnect = [self expectationWithDescription:@"Disconnect should be called"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:601:    XCTestExpectation *waitForCommand1 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:613:    XCTestExpectation *waitForCommand2 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:616:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorForceDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:623:    XCTestExpectation *waitForCommand3 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:624:    XCTestExpectation *waitForCommand4 = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:628:        XCTAssert([error.userInfo[@"AGError"] isEqual:AGBLEDeviceConnectionErrorForceDisconnect]);
AugustBLE/Tests/AGTestBLEDeviceConnection.m:659:    XCTestExpectation *waitForCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:669:    XCTestExpectation *waitForDisconnect = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:689:    NSData *keyOneData = [NSData dataFromHexString:@"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"];//bad offline key
AugustBLE/Tests/AGTestBLEDeviceConnection.m:700:    XCTestExpectation *waitForCommand = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:710:    XCTestExpectation *waitForDisconnect = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEDeviceConnection.m:735:    XCTestExpectation *waitForDisconnect = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:16:    return @"DD5ED328FD7249D3A409EB985B722D52";
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:34:        logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message ?: @""];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:36:        logMessage = [NSString stringWithFormat:@"[%@] %@", event, message ?: @""];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:39:    NSLog(@"%@", logMessage);
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:44:    return [NSURL URLWithString:@"https://api-production.august.com"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:50:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:51:    [updatedRequest setValue:@"en-US;q=1" forHTTPHeaderField:@"Accept-Language"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:52:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:53:    [updatedRequest setValue:@"August/1000.1000.9898 (iPhone; iOS 10.1.1; Scale/2.00)" forHTTPHeaderField:@"User-Agent"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:54:    [updatedRequest setValue:@"0.0.1" forHTTPHeaderField:@"accept-version"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:55:    [updatedRequest setValue:@"79fd0eb6-381d-4adf-95a0-47721289d1d9" forHTTPHeaderField:@"x-august-api-key"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:56:    [updatedRequest setValue:@"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpbnN0YWxsSWQiOiIyODZFRTQ5Qy1EQzY1LTQ3MUEtOTFBMy02RjYyODY4MUJBRjciLCJhcHBsaWNhdGlvbklkIjoiIiwidXNlcklkIjoiMGUxNGZjOWItNDJkNi00YzVmLWFlMTUtMmMxMGQ2MmRjMjE4Iiwidkluc3RhbGxJZCI6dHJ1ZSwidlBhc3N3b3JkIjp0cnVlLCJ2RW1haWwiOmZhbHNlLCJ2UGhvbmUiOnRydWUsImhhc0luc3RhbGxJZCI6dHJ1ZSwiaGFzUGFzc3dvcmQiOnRydWUsImhhc0VtYWlsIjp0cnVlLCJoYXNQaG9uZSI6dHJ1ZSwiaXNMb2NrZWRPdXQiOmZhbHNlLCJjYXB0Y2hhIjoiIiwiZW1haWwiOltdLCJwaG9uZSI6W10sImV4cGlyZXNBdCI6IjIwMTgtMDctMzFUMTg6MTA6NDguMTAyWiIsIkxhc3ROYW1lIjoiVXNlciIsIkZpcnN0TmFtZSI6IkFub255bW91cyJ9.igfPFc9g5o-VoGdSSiQbj45nw9su9NfXYQi9DN21MqE" forHTTPHeaderField:@"x-august-access-token"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:71:    NSData *keyOneData = [NSData dataFromHexString:@"af95f5aa9d8d4c78083bab614e18e4e8"];
AugustBLE/Tests/AGTestBLEConnectionDepedencyProvider.m:75:                                        @"DD5ED328FD7249D3A409EB985B722D52":keyOne
AugustBLE/Tests/AGTestBLELockConnection.m:65:    XCTestExpectation *waitForFirstLockStateUpdate = [self expectationWithDescription:@"Wait for first update"];
AugustBLE/Tests/AGTestBLELockConnection.m:66:    XCTestExpectation *waitForSecondLockStateUpdate = [self expectationWithDescription:@"Wait for second update"];
AugustBLE/Tests/AGTestBLELockConnection.m:127:    XCTestExpectation *waitForFirstLockStateUpdate = [self expectationWithDescription:@"Wait for first update"];
AugustBLE/Tests/AGTestBLELockConnection.m:128:    XCTestExpectation *waitForSecondLockStateUpdate = [self expectationWithDescription:@"Wait for second update"];
AugustBLE/Tests/AGTestBLELockConnection.m:207://    XCTestExpectation *waitForFirstDoorStateUpdate = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLELockConnection.m:208://    XCTestExpectation *waitForSecondDoorStateUpdate = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/Tests/AGTestBLELockConnection.m:257:    XCTestExpectation *waitForDisconnect = [self expectationWithDescription:@"Wait for commands to succeed"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:42:    [NSException raise:@"AGBLECryptoProviderUnimplementedMethod" format:@"candidateSessionKeyPacket:packetCompletion: must be implmented by subclasses"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:46:    [NSException raise:@"AGBLECryptoProviderUnimplementedMethod" format:@"sessionVerificationPacketForLockResponse:packetCompletion: must be implmented by subclasses"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:60:    NSAssert(!self.encryptor && !self.decryptor, @"An encryptor and decryptor has already been established. The sesion key can only be set once.");
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:109:    NSAssert(numBytesDecrypted == encryptedData.length, @"Expecting AES output size to equal input size");
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:123:    NSAssert(numBytesEncrypted == unencryptedData.length, @"Expecting AES output size to equal input size");
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:145:        *error = [NSError errorWithDomain:@"AGBLECryptoProvider" code:-4422 userInfo:@{@"AGError":@"AGBLECryptoProviderErrorBadChecksum"}];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:187:    NSAssert(numBytesTransformed == inputData.length, @"Expecting AES output size to equal input size");
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLECryptoProvider.m:205:    return [NSString stringWithFormat:@"%0.8X", randomResult];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:42:    NSDictionary *parameters = @{@"mRand1": [NSNumber numberWithUnsignedInt:self.mRand1],
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:43:                                 @"mRand2": [NSNumber numberWithUnsignedInt:self.mRand2]};
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:46:    NSString *relativeURLPath = [NSString stringWithFormat:@"/locks/initiatecomm/%@", self.deviceID];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:48:    NSString *fullURLPath = [NSString stringWithFormat:@"%@%@", baseURLPath, relativeURLPath];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:51:    [request setHTTPMethod:@"PUT"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:65:            NSString *packetStr = [respDict objectForKey:@"packet"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:79:    NSDictionary *parameters = @{@"LockResponse": lockResponseHexStr};
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:83:    NSString *relativeURLPath = [NSString stringWithFormat:@"/locks/getlockrands/%@", self.deviceID];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:85:    NSString *fullURLPath = [NSString stringWithFormat:@"%@%@", baseURLPath, relativeURLPath];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:88:    [request setHTTPMethod:@"PUT"];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:107:        uint32_t lRand1 = (uint32_t)[respDict[@"lRand1"] unsignedIntegerValue];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:108:        uint32_t lRand2 = (uint32_t)[respDict[@"lRand2"] unsignedIntegerValue];
AugustBLE/BLEDeviceConnection/Core/Crypto/AGBLEOnlineCryptoProvider.m:109:        int slot = (int)[respDict[@"slot"] unsignedIntegerValue];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:23:NSString *const AGBLEDeviceConnectionErrorCommandTimeout = @"AGBLEDeviceConnectionErrorCommandTimeout";
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:24:NSString *const AGBLEDeviceConnectionErrorUnexpectedDisconnect = @"AGBLEDeviceConnectionErrorUnexpectedDisconnect";
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:25:NSString *const AGBLEDeviceConnectionErrorForceDisconnect = @"AGBLEDeviceConnectionErrorForceDisconnect";
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:188:            [self.logger logEvent:@"iOSDeviceAlreadyConnectedToLock" category:@"BLEConnection" message:@"This or some other process was already connected to the device."];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:192:            NSAssert(false, @"We shouldn't be connected to the device. We won't know the handshake state!");//TODO: Consider removing this.
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:198:    if (uuid && ![uuid isEqualToString:@""]) {
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:201:        [self.logger logEvent:@"ConnectionStrategyDirectConnect" category:@"BLEConnection" message:@"Skip scanning. The peripheral can be directly connected to."];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:207:    [self.logger logEvent:@"ConnectionStrategyScan" category:@"BLEConnection" message:@"The peripheral could not be directly connected to."];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:247:            if (![[needle substringWithRange:NSMakeRange(curChar,1)] isEqual:@"0"]) {
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:263:        [self.logger logEvent:@"DiscoveredTargetPeripheral" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:271:    [self.logger logEvent:@"StartingConnectionToPeripheral" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:277:    [self.logger logEvent:@"DidConnectToPeripheral" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:292:    [self.logger logEvent:@"StartingDiscoveryOfServices" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:311:    [self.logger logEvent:@"DiscoveredServices" category:@"BLEConnection" message:[discoveredServiceUUIDs componentsJoinedByString:@","]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:334:        [self.logger logEvent:@"DiscoveredCharacteristics" category:@"BLEConnection" message:[discoveredCharacteristicUUIDs componentsJoinedByString:@","]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:373:            NSAssert(false, @"AGBLEDeviceConnection should not receive security read notifications while not handshaking");//TODO: Consider removing this. It might be annoying but will probably help us spot iOS and firmware bugs faster.
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:388:    NSAssert(channelConnection, @"There is no channel to process the updated characteristic");
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:414:    [self.logger logEvent:@"BLEDataReceived" category:@"BLEConnection" message:[NSString stringWithFormat:@"data: %@", dataToLog.description]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:420:        [self.logger logEvent:@"BLECommandResponseError" category:@"BLEConnection" message:[NSString stringWithFormat:@"error: %@", error.description]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:427:            [self.logger logEvent:@"BLECommandResponseCanBeHandled" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:446:    [self.logger logEvent:@"BLECommandResponseCannotBeHandled" category:@"BLEConnection" message:@"An unexpected packet was received. This is a serious issue and may result in a disconnect."];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:459:        [self.logger logEvent:@"SessionKeyProposalStrategyOffline" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:462:        [self.logger logEvent:@"SessionKeyProposalStrategyOnline" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:471:        [self.logger logEvent:@"SendSessionKeyProposal" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:478:    [self.logger logEvent:@"ReceivedDeviceProposedSessionKey" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:488:        [self.logger logEvent:@"SendSessionKeyVerification" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:494:    [self.logger logEvent:@"ReceivedDeviceSessionKeyVerification" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:502:        [self reconnectForError:[NSError errorWithDomain:@"AGBLEDeviceConnection" code:-4402 userInfo:@{@"AGError":@"AGBLEDeviceConnectionErrorBadHandshakeVerificationResponse"}]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:510:    [self.logger logEvent:@"PeripheralDidDisconnect" category:@"BLEConnection" message:[NSString stringWithFormat:@"Error: %@", error]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:565:    [self.logger logEvent:@"HandshakeSucceeded" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:594:    [self.logger logEvent:@"RunNextCommand" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:597:        [self.logger logEvent:@"CannotRunNextCommand" category:@"BLEConnection" message:[NSString stringWithFormat:@"ConnectionState:%li, CentralState:%li", (long)self.connectionState, (long)self.central.state]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:604:        [self.logger logEvent:@"CommandQueueEmpty" category:@"BLEConnection" message:nil];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:614:    [self.logger logEvent:@"BLEDataSend" category:@"BLEConnection" message:[NSString stringWithFormat:@"data: %@", dataToLog]];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:618:        [self.logger logEvent:@"CurrentCommandHasNoResponse" category:@"BLEConnection" message:@"The current command indicates that a there is no response to wait for. Will immediately send next command."];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:637:    NSAssert(channelConnection, @"There is no channel to send the requested command over");
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:697:    NSError *error = [NSError errorWithDomain:@"AGBLEDeviceConnection" code:-4405 userInfo:@{@"AGError":AGBLEDeviceConnectionErrorForceDisconnect}];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:770:    NSDictionary *storedDeviceIDToBLEUUIDDict = [[self userDefaults] objectForKey:@"AGBLEDeviceConnectionDeviceIDToBLEUUIDDict"];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:776:    NSDictionary *storedDeviceIDToBLEUUIDDict = [userDefaults objectForKey:@"AGBLEDeviceConnectionDeviceIDToBLEUUIDDict"];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:780:    [userDefaults setObject:updatedStoredDeviceIDToBLEUUIDDict forKey:@"AGBLEDeviceConnectionDeviceIDToBLEUUIDDict"];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:785:    return [[NSUserDefaults alloc] initWithSuiteName:@"AGBLEDeviceConnectionDefaults"];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:897:    NSAssert(availableCharacteristics.count == 1, @"Only one read/write/update characteristic per channel should actually be available for sending/receiving data");
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:919:    return [NSError errorWithDomain:@"AGBLEDeviceConnection" code:-4405 userInfo:@{@"AGError":AGBLEDeviceConnectionErrorForceDisconnect}];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:923:    return [NSError errorWithDomain:@"AGBLEDeviceConnection" code:-4406 userInfo:@{@"AGError":AGBLEDeviceConnectionErrorUnexpectedDisconnect}];
AugustBLE/BLEDeviceConnection/Core/AGBLEDeviceConnection.m:927:    return [NSError errorWithDomain:@"AGBLEDeviceConnection" code:-4404 userInfo:@{@"AGError":AGBLEDeviceConnectionErrorCommandTimeout}];
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:59:                                                @(AGBLEDoorState_Init): @"AGBLEDoorState_Init",
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:60:                                                @(AGBLEDoorState_Closed): @"AGBLEDoorState_Closed",
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:61:                                                @(AGBLEDoorState_Ajar): @"AGBLEDoorState_Ajar",
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:62:                                                @(AGBLEDoorState_Open): @"AGBLEDoorState_Open",
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:63:                                                @(AGBLEDoorState_Unknown): @"AGBLEDoorState_Unknown"
AugustBLE/BLEDeviceConnection/Lock/AGBLEDoorStateNotificationHandler.m:68:    [self.logger logEvent:@"DoorStateUpdated" category:@"BLEConnection" message:logDescription];
AugustBLE/BLEDeviceConnection/Utilities/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:63:                                                @(AGBLELockState_Init): @"AGBLELockState_Init",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:64:                                                @(AGBLELockState_Calibrating): @"AGBLELockState_Calibrating",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:65:                                                @(AGBLELockState_Unlocking): @"AGBLELockState_Unlocking",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:66:                                                @(AGBLELockState_Unlocked): @"AGBLELockState_Unlocked",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:67:                                                @(AGBLELockState_Locking): @"AGBLELockState_Locking",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:68:                                                @(AGBLELockState_Locked): @"AGBLELockState_Locked",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:69:                                                @(AGBLELockState_PolDiscovery): @"AGBLELockState_PolDiscovery",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:70:                                                @(AGBLELockState_UnknownStaticPosition): @"AGBLELockState_UnknownStaticPosition",
AugustBLE/BLEDeviceConnection/Lock/AGBLELockStateNotificationHandler.m:75:    [self.logger logEvent:@"LockStateUpdated" category:@"BLEConnection" message:logDescription];
AugustBLE/BLEDeviceConnection/Utilities/AGPriorityQueueTests.m:206:    return [NSString stringWithFormat:@"%0.8X", randomResult];
AugustBLE/BLEDeviceConnection/Commands/AGBLECommandLock.m:62:        return [NSError errorWithDomain:@"AGBLECommandResponseError" code:-4413 userInfo:@{@"AGError":@"AGBLECommandResponseError", @"AGBLECommandResponseErrorCode":@(error)}];
AugustBLE/BLEDeviceConnection/Commands/AGBLEDeviceCommand.m:35:    [NSException raise:@"AGBLEDeviceCommandUnimplementedMethod" format:@"The method -[AGBLEDeviceCommand packet] must be implemented by a subclass"];
AugustBLE/BLEDeviceConnection/Commands/AGBLEDeviceCommand.m:44:    [NSException raise:@"AGBLEDeviceCommandUnimplementedMethod" format:@"The method -[AGBLEDeviceCommand canProcessResponse:] must be implemented by a subclass"];
AugustBLE/BLEDeviceConnection/Commands/AGBLEDeviceCommand.m:49:    [NSException raise:@"AGBLEDeviceCommandUnimplementedMethod" format:@"The method -[AGBLEDeviceCommand processResponse:] must be implemented by a subclass"];
AugustBLE/BLEDeviceConnection/Commands/AGBLEDeviceCommand.m:53:    [NSException raise:@"AGBLEDeviceCommandUnimplementedMethod" format:@"The method -[AGBLEDeviceCommand processError:] must be implemented by a subclass"];
AugustBLE/BLEDeviceConnection/Commands/AGBLECommandGetStatus.m:71:    NSAssert(index == self.statusIndex, @"Returned status index does not match the sent status index. We're reading the wrong data.");
AugustBLE/BLEDeviceConnection/Commands/AGBLECommandGetStatus.m:94:    NSAssert(lockStateNum, @"An invalid lock state value was returned");
AugustBLE/BLEDeviceConnection/Commands/AGBLECommandGetStatus.m:112:    NSAssert(status == 0xdeadbeef || doorStateNum, @"An invalid door state value was returned");//non-door sense locks will just return 0xdeadbeef.
AugustBLE/BLEDeviceConnection/Commands/AGBLECommandUnlock.m:65:        return [NSError errorWithDomain:@"AGBLECommandResponseError" code:-4413 userInfo:@{@"AGError":@"AGBLECommandResponseError", @"AGBLECommandResponseErrorCode":@(error)}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:20:NSString * const AGUITestGeneralNavigatorSignInError = @"AGUITestGeneralNavigatorSignInError";
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:21:NSString * const AGUITestGeneralNavigatorHouseDoesNotExist = @"AGUITestGeneralNavigatorHouseDoesNotExist";
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:22:NSString * const AGUITestGeneralNavigatorLockDoesNotExist = @"AGUITestGeneralNavigatorLockDoesNotExist";
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:23:NSString * const AGUITestGeneralNavigatorSettingsTabDoesNotExist = @"AGUITestGeneralNavigatorSettingsTabDoesNotExist";
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:52:        XCUIElement *keyChainButton = app.buttons[@"goto keychain"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:86:                    XCUIElement *keyChainButton = app.buttons[@"goto keychain"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:113:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:116:    XCUIElement *xxxXxxXxxxTextField = elementsQuery.textFields[@"(xxx) xxx-xxxx"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:119:    XCUIElement *enterPasswordSecureTextField = elementsQuery.secureTextFields[@"Enter Password"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:126:    XCUIElement *errorAlertLabel = app.alerts[@"Incorrect phone number or password."];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:127:    XCUIElement *verificationLabel = app.staticTexts[@"VERIFY PHONE"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:128:    XCUIElement *keyChainButton = app.buttons[@"goto keychain"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:129:    XCUIElement *keyChainLabel = app.staticTexts[@"KEYCHAIN"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:168:    XCTestExpectation *waitForPhoneVerificationCode = [[XCTestExpectation alloc] initWithDescription:@"Waiting for verification code"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:198:    XCUIElement *keyChainLabel = self.app.staticTexts[@"KEYCHAIN"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:225:        [app.buttons[@"Show Settings"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:228:        [tablesQuery.staticTexts[@"View Account"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:229:        [tablesQuery.staticTexts[@"Sign Out"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:230:        [app.alerts[@"Sign Out?"].buttons[@"Sign Out"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:239:    XCUIElement *backButtonV1 = self.app.buttons[@"left arrow grey v3"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:240:    XCUIElement *backButtonV2 = self.app.buttons[@"back"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:241:    XCUIElement *closeButton = self.app.buttons[@"Close Button v3"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:242:    XCUIElement *agreeLegalButton = self.app.buttons[@"I AGREE"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:287:        XCUIElement *houseElement = app.collectionViews[@"Keychain"].staticTexts[house.houseName];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:297:        XCUIElement *settingsButton = tabBarsQuery.buttons[@"Settings"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:305:        XCUIElement *updatingDevicesLabel = app.staticTexts[@"Updating Devices..."];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:327:        XCUIElement *houseElement = app.collectionViews[@"Keychain"].staticTexts[house.houseName];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:337:        XCUIElement *yourLocksButton = tabBarsQuery.buttons[@"Your Locks"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:368:        XCUIElement *houseElement = app.collectionViews[@"Keychain"].staticTexts[house.houseName];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:379:        XCUIElement *settingsButton = tabBarsQuery.buttons[@"Settings"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:383:        XCUIElement *lockSettingsStaticText = tablesQuery.staticTexts[@"Lock Settings"];//FIXME: There is no way this will work when there are multiple locks in a house
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:388:            XCUIElement *updatingDevicesLabel = app.staticTexts[@"Updating Devices..."];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:438:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:439:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:440:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:448:        XCTAssertNil(error, @"Should be able to sign out again");
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:455:    [app.buttons[@"Sign In"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:456:    [app.buttons[@"FORGOT PASSWORD   |"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:457:    [app.buttons[@"CONTINUE"] tap];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:464:    XCUIElement *keyChainLabel = self.app.staticTexts[@"KEYCHAIN"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:469:    XCUIElement *signInButton = self.app.buttons[@"Sign In"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:475:    XCUIElement * forgotLabel = self.app.staticTexts[@"FORGOT PASSWORD"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:482:    XCUIElement *keychainLabel = self.app.staticTexts[@"KEYCHAIN"];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:487:    return [NSError errorWithDomain:@"AGUITestError" code:-1631 userInfo:@{@"AGError":@"AGUITestGeneralNavigatorIsLostError"}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:491:    return [NSError errorWithDomain:@"AGUITestError" code:-1632 userInfo:@{@"AGError":@"AGUITestGeneralNavigatorSignInTimeoutError"}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:495:    return [NSError errorWithDomain:@"AGUITestError" code:-1633 userInfo:@{@"AGError":AGUITestGeneralNavigatorSignInError}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:499:    return [NSError errorWithDomain:@"AGUITestError" code:-1634 userInfo:@{@"AGError":AGUITestGeneralNavigatorHouseDoesNotExist}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:503:    return [NSError errorWithDomain:@"AGUITestError" code:-1635 userInfo:@{@"AGError":AGUITestGeneralNavigatorLockDoesNotExist}];
AugustTests/AugustUITests/AGUITestGeneralNavigator.m:507:    return [NSError errorWithDomain:@"AGUITestError" code:-1636 userInfo:@{@"AGError":AGUITestGeneralNavigatorSettingsTabDoesNotExist}];
AGCountryCodeControl.m:45:    if (self.inputTextField.placeholder == NSLocalizedString(@"Email Address", nil)) {
AGCountryCodeControl.m:65:        self.inputTextField.alignment = @"";
AGCountryCodeControl.m:68:        self.inputTextField.alignment = @"Left";
AGCountryCodeControl.m:73:    return [NSString stringWithFormat:@"%@%@", self.countryCodeButton.titleLabel.text, self.inputTextField.text];
AGCountryCodeControl.m:82:            paddedCodeString = [code stringByAppendingString:@"   "];
AGCountryCodeControl.m:86:            paddedCodeString = [code stringByAppendingString:@"  "];
AGCountryCodeControl.m:90:            paddedCodeString = [code stringByAppendingString:@" "];
AGCountryCodeControl.m:94:            paddedCodeString = [code stringByAppendingString:@""];
AGCountryCodeControl.m:104:    UIStoryboard *sb = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
AGCountryCodeControl.m:105:    AGCountryPickerViewController *vc = (AGCountryPickerViewController *)[sb instantiateViewControllerWithIdentifier:@"CountryPicker"];
AGCountryCodeControl.m:200:    [phoneNumberCharacterSet addCharactersInString:@"()+ -"];
AGCountryCodeControl.m:207:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"(" withString:@""];
AGCountryCodeControl.m:208:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@")" withString:@""];
AGCountryCodeControl.m:209:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@" " withString:@""];
AGCountryCodeControl.m:210:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"-" withString:@""];
AGCountryCodeControl.m:211:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"+" withString:@""];
AGCountryCodeControl.m:223:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"(" withString:@""];
AGCountryCodeControl.m:224:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@")" withString:@""];
AGCountryCodeControl.m:225:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@" " withString:@""];
AGCountryCodeControl.m:226:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"-" withString:@""];
AGCountryCodeControl.m:227:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"+" withString:@""];
AGCountryCodeControl.m:233:    [self.inputTextField setFont:[UIFont fontWithName:@"ProximaNova-Light" size:17]];
AGCountryCodeControl.m:234:    [self.inputTextField setText:@""];
AGCountryCodeControl.m:235:    [self.inputTextField setPlaceholder: NSLocalizedString(@"(555)-555-5555",nil)];
AGCountryCodeControl.m:255:    [self.inputTextField setFont:[UIFont fontWithName:@"ProximaNova-Light" size:17]];
AGCountryCodeControl.m:256:    [self.inputTextField setText:@""];
AGCountryCodeControl.m:257:    [self.inputTextField setPlaceholder: NSLocalizedString(@"Email Address",nil)];
Pods/JDFTooltips/README.md:18:JDFTooltipView *tooltip = [[JDFTooltipView alloc] initWithTargetView:self.label1 hostView:self.view tooltipText:@"This is a Tooltip" arrowDirection:JDFTooltipViewArrowDirectionUp width:200.0f];
Pods/JDFTooltips/README.md:42:    [self.tooltipManager addTooltipWithTargetView:view1 hostView:self.view tooltipText:@"Tooltip 1" arrowDirection:JDFTooltipViewArrowDirectionUp width:200.0f];
Pods/JDFTooltips/README.md:43:    [self.tooltipManager addTooltipWithTargetView:view2 hostView:self.view tooltipText:@"Tooltip 2" arrowDirection:JDFTooltipViewArrowDirectionUp width:200.0f];
Pods/JDFTooltips/README.md:44:    [self.tooltipManager addTooltipWithTargetView:view3 hostView:self.view tooltipText:@"Tooltip 3" arrowDirection:JDFTooltipViewArrowDirectionDown width:200.0f];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyTransport.m:32:    DDLogVerbose(@"[MQTTSSLSecurityPolicyTransport] open");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyTransport.m:59:            connectError = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyTransport.m:61:                                           userInfo:@{NSLocalizedDescriptionKey : @"Fail to init ssl input stream!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyTransport.m:64:            connectError = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyTransport.m:66:                                           userInfo:@{NSLocalizedDescriptionKey : @"Fail to init ssl output stream!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTTransport.m:28:    DDLogError(@"MQTTTransport is abstract class");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTTransport.m:32:    DDLogError(@"MQTTTransport is abstract class");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTTransport.m:36:    DDLogError(@"MQTTTransport is abstract class");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:25:    self.host = @"localhost";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:27:    self.path = @"/mqtt";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:35:    DDLogVerbose(@"[MQTTWebsocketTransport] open");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:40:    NSArray <NSString *> *protocols = @[@"mqtt"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:51:    NSString *protocol = (self.tls) ? @"wss" : @"ws";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:52:    NSString *portString = (self.port == 0) ? @"" : [NSString stringWithFormat:@":%d",(unsigned int)self.port];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:54:    NSString *urlString = [NSString stringWithFormat:@"%@://%@%@%@",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:64:    DDLogVerbose(@"[MQTTWebsocketTransport] send(%ld):%@", (unsigned long)data.length,
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:75:    DDLogVerbose(@"[MQTTWebsocketTransport] close");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:85:    DDLogVerbose(@"[MQTTWebsocketTransport] didReceiveMessage(%ld)", (unsigned long)(data ? data.length : -1));
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:95:    DDLogVerbose(@"[MQTTWebsocketTransport] connected to websocket");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:105:    DDLogInfo(@"[MQTTWebsocketTransport] Failed to connect : %@",[error debugDescription]);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:117:    DDLogVerbose(@"[MQTTWebsocketTransport] ConnectionClosed : %@",reason);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.m:128:    DDLogVerbose(@"[MQTTWebsocketTransport] webSocket didReceivePong:%@", pongPayload);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:516: NSLog(@"Error Connect %@", error.localizedDescription);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:518: NSLog(@"Connected sessionPresent:%d", sessionPresent);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:572: [session subscribeToTopic:@"example/#" atLevel:2];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:601: [session subscribeToTopic:@"example/#" atLevel:2 subscribeHandler:^(NSError *error, NSArray<NSNumber *> *gQoss){
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:603:        NSLog(@"Subscription failed %@", error.localizedDescription);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:605:        NSLog(@"Subscription sucessfull! Granted Qos: %@", gQoss);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:632: @"example/#": @(0),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:633: @"example/status": @(2),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:634: @"other/#": @(1)
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:663:    @"example/#": @(0),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:664:    @"example/status": @(2),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:665:    @"other/#": @(1)
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:668:        NSLog(@"Subscription failed %@", error.localizedDescription);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:670:        NSLog(@"Subscription sucessfull! Granted Qos: %@", gQoss);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:696: [session unsubscribeTopic:@"example/#"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:735: @"example/#",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:736: @"example/status",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:737: @"other/#"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:779: [session publishData:[@"Sample Data" dataUsingEncoding:NSUTF8StringEncoding]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:780: topic:@"example/data"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:814: [session publishData:[@"Sample Data" dataUsingEncoding:NSUTF8StringEncoding]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:815: topic:@"example/data"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:820: DDLogVerbose(@"error: %@ %@", error.localizedDescription, payload);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:822: DDLogVerbose(@"delivered:%@", payload);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:849:        NSLog(@"Error Disconnect %@", error.localizedDescription);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.h:851:    NSLog(@"Session closed");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.h:19: * defaults to @"localhost"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTWebsocketTransport/MQTTWebsocketTransport.h:34: * defaults to @"/html"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:131:    DDLogVerbose(@"MQTTSessionManager connectTo:%@", host);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:195:        DDLogVerbose(@"[MQTTSessionManager] reconnecting");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:199:        DDLogVerbose(@"[MQTTSessionManager] connecting");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:240:                                            @(MQTTSessionEventConnected): @"connected",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:241:                                            @(MQTTSessionEventConnectionRefused): @"connection refused",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:242:                                            @(MQTTSessionEventConnectionClosed): @"connection closed",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:243:                                            @(MQTTSessionEventConnectionError): @"connection error",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:244:                                            @(MQTTSessionEventProtocolError): @"protocoll error",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:245:                                            @(MQTTSessionEventConnectionClosedByBroker): @"connection closed by broker"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:247:    DDLogVerbose(@"[MQTTSessionManager] eventCode: %@ (%ld) %@", events[@(eventCode)], (long)eventCode, error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.m:403:    DDLogVerbose(@"MQTTSessionManager internalSubscriptions: %@", self.internalSubscriptions);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:33:    self.host = @"localhost";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:65:    DDLogVerbose(@"[MQTTCFSocketTransport] open");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:88:            connectError = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:90:                                           userInfo:@{NSLocalizedDescriptionKey : @"Fail to init ssl input stream!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:93:            connectError = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:95:                                           userInfo:@{NSLocalizedDescriptionKey : @"Fail to init ssl output stream!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:139:    DDLogVerbose(@"[MQTTCFSocketTransport] close");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:190:        DDLogWarn(@"[MQTTCFSocketTransport] no p12 path given");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:196:        DDLogWarn(@"[MQTTCFSocketTransport] reading p12 failed");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:201:        DDLogWarn(@"[MQTTCFSocketTransport] no passphrase given");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:209:        DDLogWarn(@"[MQTTCFSocketTransport] Error while importing pkcs12 [%d]", (int)importStatus);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:215:        DDLogWarn(@"[MQTTCFSocketTransport] could not CFArrayGetValueAtIndex");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:222:        DDLogWarn(@"[MQTTCFSocketTransport] could not CFDictionaryGetValue");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.m:229:        DDLogWarn(@"[MQTTCFSocketTransport] SecIdentityCopyCertificate failed [%d]", (int)status);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:43:    DDLogVerbose(@"[MQTTCFSocketEncoder] setState %ld/%ld", (long)_state, (long)state);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:49:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventOpenCompleted");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:52:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventHasBytesAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:55:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventHasSpaceAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:68:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventEndEncountered");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:74:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventErrorOccurred");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:84:            DDLogInfo(@"[MQTTCFSocketEncoder] not MQTTCFSocketEncoderStateReady");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:93:            DDLogVerbose(@"[MQTTCFSocketEncoder] buffer to write (%lu)=%@...",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:100:                DDLogVerbose(@"[MQTTCFSocketEncoder] streamError: %@", self.error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketEncoder.m:106:                    DDLogVerbose(@"[MQTTCFSocketEncoder] buffer partially written: %ld", (long)n);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:79:            [data appendMQTTString:@"MQTT"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:84:            [data appendMQTTString:@"MQTT"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:89:            [data appendMQTTString:@"MQIsdp"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:94:            [data appendMQTTString:@""];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:99:            [data appendMQTTString:@"MQTT"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:510:    DDLogVerbose(@"[MQTTMessage] wireFormat(%lu)=%@...",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:532:                DDLogWarn(@"[MQTTMessage] message data incomplete remaining length");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:541:                DDLogWarn(@"[MQTTMessage] message data too long remaining length");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:590:                            DDLogWarn(@"[MQTTMessage] missing packet identifier");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:600:                                DDLogWarn(@"[MQTTMessage] unexpected payload after packet identifier");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:605:                                DDLogWarn(@"[MQTTMessage] no returncode");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:620:                            DDLogWarn(@"[MQTTMessage] unexpected payload after packet identifier");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:627:                            DDLogWarn(@"[MQTTMessage] unexpected payload");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:648:                                DDLogWarn(@"[MQTTMessage] unexpected payload");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:655:                            DDLogWarn(@"[MQTTMessage] missing connect variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:662:                                DDLogWarn(@"[MQTTMessage] missing connack variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:667:                                DDLogWarn(@"[MQTTMessage] missing connack variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:683:                            DDLogWarn(@"[MQTTMessage] missing subscribe variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:689:                            DDLogWarn(@"[MQTTMessage] missing suback variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:695:                            DDLogWarn(@"[MQTTMessage] missing unsubscribe variable header");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:700:                    DDLogWarn(@"[MQTTMessage] illegal header flags");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:703:                DDLogWarn(@"[MQTTMessage] remaining data wrong length");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:706:            DDLogWarn(@"[MQTTMessage] illegal message type");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTMessage.m:709:        DDLogWarn(@"[MQTTMessage] message data length < 2");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:61:    DDLogVerbose(@"[MQTTDecoder] #streams=%lu", (unsigned long)self.streams.count);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:106:        DDLogVerbose(@"[MQTTDecoder] NSStreamEventOpenCompleted");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:110:        DDLogVerbose(@"[MQTTDecoder] NSStreamEventHasBytesAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:125:                DDLogVerbose(@"[MQTTDecoder] fixedHeader=0x%02x", buffer);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:139:            DDLogVerbose(@"[MQTTDecoder] digit=0x%02x 0x%02x %d %d", digit, digit & 0x7f, (unsigned int)self.length, (unsigned int)self.lengthMultiplier);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:149:        DDLogVerbose(@"[MQTTDecoder] remainingLength=%d", (unsigned int)self.length);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:164:                    DDLogVerbose(@"[MQTTDecoder] read %ld %ld", (long)toRead, (long)n);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:169:                DDLogVerbose(@"[MQTTDecoder] received (%lu)=%@...", (unsigned long)self.dataBuffer.length,
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:175:                DDLogError(@"[MQTTDecoder] oops received (%lu)=%@...", (unsigned long)self.dataBuffer.length,
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:182:        DDLogVerbose(@"[MQTTDecoder] NSStreamEventHasSpaceAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:186:        DDLogVerbose(@"[MQTTDecoder] NSStreamEventEndEncountered");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTDecoder.m:200:        DDLogVerbose(@"[MQTTDecoder] NSStreamEventErrorOccurred");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:51: [session connectAndWaitToHost:@"192.168.0.1" port:1883 usingSSL:NO];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:64: @param host specifies the hostname or ip address to connect to. Defaults to @"localhost".
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:76: [session connectAndWaitToHost:@"192.168.0.1" port:1883 usingSSL:NO];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:104: [session subscribeAndWaitToTopic:@"example/#" atLevel:2];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:129: [session subscribeAndWaitToTopic:@"example/#" atLevel:2 timeout:10];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:155: @"example/#": @(0),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:156: @"example/status": @(2),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:157: @"other/#": @(1)
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:180: @"example/#": @(0),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:181: @"example/status": @(2),
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:182: @"other/#": @(1)
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:207: [session unsubscribeAndWaitTopic:@"example/#"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:229: [session unsubscribeAndWaitTopic:@"example/#" timeout:10];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:253: @"example/#",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:254: @"example/status",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:255: @"other/#"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:280: @"example/#",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:281: @"example/status",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:282: @"other/#"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:308: [session publishAndWaitData:[@"Sample Data" dataUsingEncoding:NSUTF8StringEncoding]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:309: topic:@"example/data"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:337: [session publishAndWaitData:[@"Sample Data" dataUsingEncoding:NSUTF8StringEncoding]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.h:338: topic:@"example/data"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:124: NSString* certificate = [[NSBundle bundleForClass:[MQTTSession class]] pathForResource:@"certificate" ofType:@"cer"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:130: initWithClientId:@"example-1234"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:131: userName:@"user"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:132: password:@"secret"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:136: willTopic:@"example/status"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:137: willMsg:[[@"Client off-line"] dataUsingEncoding:NSUTF8StringEncoding]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:145: [session connectToHost:@"example-1234" port:1883 usingSSL:YES];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:299: @param host specifies the hostname or ip address to connect to. Defaults to @"localhost".
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:316: [session connectToHost:@"192.168.0.1" port:1883 usingSSL:NO connectHandler:^(NSError *error, BOOL sessionPresent) {
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:318: NSLog(@"Error Connect %@", error.localizedDescription);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.h:320: NSLog(@"Connected sessionPresent:%d", sessionPresent);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicy.m:153:        NSArray *paths = [bundle pathsForResourcesOfType:@"cer" inDirectory:@"."];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicy.m:295:    return [NSSet setWithObject:@"pinnedCertificates"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyEncoder.m:47:        DDLogVerbose(@"[MQTTCFSocketEncoder] NSStreamEventHasSpaceAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyEncoder.m:50:            self.error = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyEncoder.m:52:                                         userInfo:@{NSLocalizedDescriptionKey: @"Unable to apply security policy, the SSL connection is insecure!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyDecoder.m:47:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventHasBytesAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyDecoder.m:50:            self.error = [NSError errorWithDomain:@"MQTT"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSSLSecurityPolicyDecoder.m:52:                                         userInfo:@{NSLocalizedDescriptionKey: @"Unable to apply security policy, the SSL connection is insecure!"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:253:    DDLogInfo(@"[MQTTCoreDataPersistence] deleteAllFlowsForClientId %@", clientId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:274:        DDLogVerbose(@"[MQTTPersistence] pre-sync: i%lu u%lu d%lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:281:            DDLogError(@"[MQTTPersistence] sync error %@", error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:284:            DDLogError(@"[MQTTPersistence] sync not complete");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:286:        DDLogVerbose(@"[MQTTPersistence] postsync: i%lu u%lu d%lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:301:        NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"MQTTFlow"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:303:                                  @"clientId = %@ and incomingFlag = %@",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:307:        fetchRequest.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@"deadline" ascending:YES]];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:311:            DDLogError(@"[MQTTPersistence] allFlowsforClientId %@", error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:325:    DDLogVerbose(@"flowforClientId requestingPerform");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:331:    DDLogVerbose(@"flowforClientId performed");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:340:    DDLogVerbose(@"flowforClientId performing");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:342:    NSFetchRequest *fetchRequest = [NSFetchRequest fetchRequestWithEntityName:@"MQTTFlow"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:344:                              @"clientId = %@ and incomingFlag = %@ and messageId = %@",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:353:        DDLogError(@"[MQTTPersistence] flowForClientId %@", error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:371:            row = [NSEntityDescription insertNewObjectForEntityForName:@"MQTTFlow"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:394:    attributeDescription.name = @"clientId";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:396:    attributeDescription.attributeValueClassName = @"NSString";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:400:    attributeDescription.name = @"incomingFlag";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:402:    attributeDescription.attributeValueClassName = @"NSNumber";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:406:    attributeDescription.name = @"retainedFlag";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:408:    attributeDescription.attributeValueClassName = @"NSNumber";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:412:    attributeDescription.name = @"commandType";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:414:    attributeDescription.attributeValueClassName = @"NSNumber";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:418:    attributeDescription.name = @"qosLevel";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:420:    attributeDescription.attributeValueClassName = @"NSNumber";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:424:    attributeDescription.name = @"messageId";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:426:    attributeDescription.attributeValueClassName = @"NSNumber";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:430:    attributeDescription.name = @"topic";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:432:    attributeDescription.attributeValueClassName = @"NSString";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:436:    attributeDescription.name = @"data";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:438:    attributeDescription.attributeValueClassName = @"NSData";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:442:    attributeDescription.name = @"deadline";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:444:    attributeDescription.attributeValueClassName = @"NSDate";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:448:    entityDescription.name = @"MQTTFlow";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:449:    entityDescription.managedObjectClassName = @"MQTTFlow";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:461:                                 URLByAppendingPathComponent:@"MQTTClient"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:462:    DDLogInfo(@"[MQTTPersistence] Persistent store: %@", persistentStoreURL.path);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:480:        DDLogError(@"[MQTTPersistence] managedObjectContext save: %@", error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:497:        NSString *persistentStorePath = [documentsDirectory stringByAppendingPathComponent:@"MQTTClient"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCoreDataPersistence.m:511:    DDLogVerbose(@"[MQTTPersistence] sizes %llu/%llu", self.fileSize, self.fileSystemFreeSize);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTInMemoryPersistence.m:105:        DDLogInfo(@"[MQTTInMemoryPersistence] deleteAllFlowsForClientId %@", clientId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTInMemoryPersistence.m:124:                NSArray *keys = [clientIdDirectedFlow.allKeys sortedArrayUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"self" ascending:YES]]];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:21:NSString * const MQTTSessionErrorDomain = @"MQTT";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:70:    DDLogVerbose(@"[MQTTSession] init");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:111:        clientId = [NSString stringWithFormat:@"MQTTClient%.0f",fmod([NSDate date].timeIntervalSince1970, 1.0) * 1000000.0];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:141:                                    exceptionWithName:@"topicFilter array in SUBSCRIBE or UNSUBSRIBE must not be empty"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:142:                                    reason:[NSString stringWithFormat:@"%@", topicFilters]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:151:                                        exceptionWithName:@"topicFilter must be at least 1 characters long"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:152:                                        reason:[NSString stringWithFormat:@"%@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:160:                                        exceptionWithName:@"topicFilter may not be longer than 65535 bytes in UTF8 representation"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:161:                                        reason:[NSString stringWithFormat:@"topicFilter length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:170:                                        exceptionWithName:@"topicFilter must not contain non-UTF8 characters"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:171:                                        reason:[NSString stringWithFormat:@"topicFilter = %@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:177:            NSArray <NSString *> *components = [topicFilter componentsSeparatedByString:@"/"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:179:                if ([components[level] rangeOfString:@"+"].location != NSNotFound &&
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:182:                                                exceptionWithName:@"singlelevel wildcard must be alone on a level of a topic filter"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:183:                                                reason:[NSString stringWithFormat:@"topicFilter = %@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:190:                if ([components[level] rangeOfString:@"#"].location != NSNotFound) {
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:192:                                                exceptionWithName:@"multilevel wildcard must be on the last level of a topic filter"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:193:                                                reason:[NSString stringWithFormat:@"topicFilter = %@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:198:            if ([components[components.count - 1] rangeOfString:@"#"].location != NSNotFound &&
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:201:                                            exceptionWithName:@"multilevel wildcard must be alone on a level of a topic filter"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:202:                                            reason:[NSString stringWithFormat:@"topicFilter = %@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:209:            [topicFilter rangeOfString:@"#"].location != NSNotFound &&
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:210:            [topicFilter rangeOfString:@"#"].location != topicFilter.length &&
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:211:            (topicFilter.length == 1 || [[topicFilter substringWithRange:NSMakeRange(topicFilter.length - 2, 1)] isEqualToString:@"/"])
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:214:                                        exceptionWithName:@"multilevel wildcard must alone on the last level of a topic filter"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:215:                                        reason:[NSString stringWithFormat:@"topicFilter = %@", topicFilter]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:224:    DDLogVerbose(@"[MQTTSession] subscribeToTopics:%@]", topics);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:234:                                        exceptionWithName:@"Illegal QoS level"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:235:                                        reason:[NSString stringWithFormat:@"%d is not 0, 1, or 2", qos.intValue]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:268:    DDLogVerbose(@"[MQTTSession] unsubscribeTopics:%@", topics);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:297:    DDLogVerbose(@"[MQTTSession] publishData:%@... onTopic:%@ retain:%d qos:%ld publishHandler:%p",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:307:                                    exceptionWithName:@"topic must not be nil"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:308:                                    reason:[NSString stringWithFormat:@"%@", topic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:317:                                    exceptionWithName:@"topic must not at least 1 character long"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:318:                                    reason:[NSString stringWithFormat:@"%@", topic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:327:                                    exceptionWithName:@"topic may not be longer than 65535 bytes in UTF8 representation"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:328:                                    reason:[NSString stringWithFormat:@"topic length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:338:                                    exceptionWithName:@"topic must not contain non-UTF8 characters"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:339:                                    reason:[NSString stringWithFormat:@"topic = %@", topic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:346:        ([self.willTopic containsString:@"+"] ||
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:347:         [self.willTopic containsString:@"#"])
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:350:                                    exceptionWithName:@"willTopic must not contain wildcards"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:351:                                    reason:[NSString stringWithFormat:@"willTopic = %@", self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:361:                                    exceptionWithName:@"Illegal QoS level"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:362:                                    reason:[NSString stringWithFormat:@"%d is not 0, 1, or 2", qos]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:387:                                    userInfo:@{NSLocalizedDescriptionKey : @"Encoder not ready"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:448:            DDLogWarn(@"[MQTTSession] dropping outgoing message %d", msgId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:451:                                             userInfo:@{NSLocalizedDescriptionKey : @"Dropping outgoing Message"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:465:                DDLogVerbose(@"[MQTTSession] PUBLISH %d", msgId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:467:                    DDLogInfo(@"[MQTTSession] queueing message %d after unsuccessfull attempt", msgId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:473:                DDLogInfo(@"[MQTTSession] queueing message %d", msgId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:499:    DDLogVerbose(@"[MQTTSession] closeWithDisconnectHandler:%p ", disconnectHandler);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:523:    DDLogVerbose(@"[MQTTSession] sending DISCONNECT");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:535:    DDLogVerbose(@"[MQTTSession] closeInternal");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:579:                                     userInfo:@{NSLocalizedDescriptionKey : @"No response"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:610:    DDLogVerbose(@"[MQTTSession] keepAlive %@ @%.0f", self.clientId, [[NSDate date] timeIntervalSince1970]);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:615:    DDLogVerbose(@"[MQTTSession] checkDup %@ @%.0f", self.clientId, [[NSDate date] timeIntervalSince1970]);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:637:        DDLogVerbose(@"[MQTTSession] %@ flow %@ %@ %@", self.clientId, flow.deadline, flow.commandType, flow.messageId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:642:                        DDLogVerbose(@"[MQTTSession] PUBLISH queued message %@", flow.messageId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:666:                    DDLogInfo(@"[MQTTSession] resend PUBLISH %@", flow.messageId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:687:                    DDLogInfo(@"[MQTTSession] resend PUBREL %@", flow.messageId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:707:                                 @"MQTTDecoderEventProtocolError",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:708:                                 @"MQTTDecoderEventConnectionClosed",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:709:                                 @"MQTTDecoderEventConnectionError"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:711:    DDLogVerbose(@"[MQTTSession] decoder handleEvent: %@ (%d) %@",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:737:        DDLogError(@"[MQTTSession] MQTT illegal message received");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:740:                                          userInfo:@{NSLocalizedDescriptionKey : @"MQTT illegal message received"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:775:                                                             userInfo:@{NSLocalizedDescriptionKey : @"MQTT protocol CONNACK expected"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:839:                                NSString *errorDescription = @"unknown";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:844:                                            errorDescription = @"MQTT CONNACK: unacceptable protocol version";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:848:                                            errorDescription = @"MQTT CONNACK: identifier rejected";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:852:                                            errorDescription = @"MQTT CONNACK: server unavailable";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:856:                                            errorDescription = @"MQTT CONNACK: bad user name or password";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:860:                                            errorDescription = @"MQTT CONNACK: not authorized";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:864:                                            errorDescription = @"MQTT CONNACK: reserved for future use";
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:890:                                                         userInfo:@{NSLocalizedDescriptionKey : @"MQTT protocol DISCONNECT instead of CONNACK"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:903:                                                          userInfo:@{NSLocalizedDescriptionKey : @"MQTT protocol no CONNACK"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:940:                                                         userInfo:@{NSLocalizedDescriptionKey : @"MQTT protocol DISCONNECT received"}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:950:                DDLogError(@"[MQTTSession] other state");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:972:        DDLogError(@"non UTF8 topic %@", topic);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1057:                    DDLogWarn(@"[MQTTSession] dropping incoming messages");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1274:                                userInfo:@{NSLocalizedDescriptionKey : @"Server has closed connection without connack."}];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1292:    DDLogVerbose(@"nextMsgId synchronizing");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1294:        DDLogVerbose(@"nextMsgId synchronized");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1301:        DDLogVerbose(@"nextMsgId synchronized done");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1328:    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObject:connectHandler forKey:@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1330:        dict[@"Error"] = error;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1337:    MQTTConnectHandler connectHandler = dict[@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1338:    NSError *error = dict[@"Error"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1343:    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObject:disconnectHandler forKey:@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1345:        dict[@"Error"] = error;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1352:    MQTTDisconnectHandler disconnectHandler = dict[@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1353:    NSError *error = dict[@"Error"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1358:    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObject:subscribeHandler forKey:@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1360:        dict[@"Error"] = error;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1363:        dict[@"GQoss"] = gqoss;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1370:    MQTTSubscribeHandler subscribeHandler = dict[@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1371:    NSError *error = dict[@"Error"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1372:    NSArray *gqoss = dict[@"GQoss"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1377:    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObject:unsubscribeHandler forKey:@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1379:        dict[@"Error"] = error;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1386:    MQTTUnsubscribeHandler unsubscribeHandler = dict[@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1387:    NSError *error = dict[@"Error"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1392:    NSMutableDictionary *dict = [NSMutableDictionary dictionaryWithObject:publishHandler forKey:@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1394:        dict[@"Error"] = error;
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1401:    MQTTPublishHandler publishHandler = dict[@"Block"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1402:    NSError *error = dict[@"Error"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1414:                                    exceptionWithName:@"clientId must be at least 1 character long if cleanSessionFlag is off"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1415:                                    reason:[NSString stringWithFormat:@"clientId length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1424:                                    exceptionWithName:@"clientId must not be nil"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1425:                                    reason:[NSString stringWithFormat:@"clientId length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1434:                                    exceptionWithName:@"clientId may not be longer than 65535 bytes in UTF8 representation"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1435:                                    reason:[NSString stringWithFormat:@"clientId length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1444:                                    exceptionWithName:@"clientId must not contain non-UTF8 characters"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1445:                                    reason:[NSString stringWithFormat:@"clientId = %@", self.clientId]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1453:                                    exceptionWithName:@"userName may not be longer than 65535 bytes in UTF8 representation"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1454:                                    reason:[NSString stringWithFormat:@"userName length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1463:                                    exceptionWithName:@"userName must not contain non-UTF8 characters"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1464:                                    reason:[NSString stringWithFormat:@"userName = %@", self.userName]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1472:                                    exceptionWithName:@"password specified without userName"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1473:                                    reason:[NSString stringWithFormat:@"password = %@", self.password]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1483:                                    exceptionWithName:@"Illegal protocolLevel"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1484:                                    reason:[NSString stringWithFormat:@"%d is not 3, 4, or 5", self.protocolLevel]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1493:                                    exceptionWithName:@"Will topic must be nil if willFlag is false"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1494:                                    reason:[NSString stringWithFormat:@"%@", self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1503:                                    exceptionWithName:@"Will message must be nil if willFlag is false"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1504:                                    reason:[NSString stringWithFormat:@"%@", self.willMsg]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1513:                                    exceptionWithName:@"Will retain must be false if willFlag is false"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1514:                                    reason:[NSString stringWithFormat:@"%d", self.willRetainFlag]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1523:                                    exceptionWithName:@"Will QoS Level must be 0 if willFlag is false"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1524:                                    reason:[NSString stringWithFormat:@"%d", self.willQoS]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1534:                                    exceptionWithName:@"Illegal will QoS level"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1535:                                    reason:[NSString stringWithFormat:@"%d is not 0, 1, or 2", self.willQoS]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1544:                                    exceptionWithName:@"Will topic must not be nil if willFlag is true"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1545:                                    reason:[NSString stringWithFormat:@"%@", self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1554:                                    exceptionWithName:@"Will topic must be at least 1 character long"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1555:                                    reason:[NSString stringWithFormat:@"%@", self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1564:                                    exceptionWithName:@"willTopic may not be longer than 65535 bytes in UTF8 representation"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1565:                                    reason:[NSString stringWithFormat:@"willTopic length = %lu",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1575:                                    exceptionWithName:@"willTopic must not contain non-UTF8 characters"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1576:                                    reason:[NSString stringWithFormat:@"willTopic = %@", self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1583:        ([self.willTopic containsString:@"+"] ||
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1584:         [self.willTopic containsString:@"#"])
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1587:                                    exceptionWithName:@"willTopic must not contain wildcards"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1588:                                    reason:[NSString stringWithFormat:@"willTopic = %@", self.self.willTopic]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1597:                                    exceptionWithName:@"Will message must not be nil if willFlag is true"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1598:                                    reason:[NSString stringWithFormat:@"%@", self.willMsg]
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1603:    DDLogVerbose(@"[MQTTSession] connecting");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1624:    DDLogVerbose(@"[MQTTSession] connectWithConnectHandler:%p", connectHandler);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1644:            DDLogVerbose(@"[MQTTSession] mqttTransport send");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1647:            DDLogError(@"[MQTTSession] trying to send message without wire format");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1651:        DDLogError(@"[MQTTSession] trying to send nil message");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1658:    DDLogVerbose(@"[MQTTSession] mqttTransport didReceiveMessage");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1665:    DDLogVerbose(@"[MQTTSession] mqttTransport mqttTransportDidClose");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1672:    DDLogVerbose(@"[MQTTSession] mqttTransportDidOpen");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1674:    DDLogVerbose(@"[MQTTSession] sending CONNECT");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSession.m:1704:    DDLogWarn(@"[MQTTSession] mqttTransport didFailWithError %@", error);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:44:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventOpenCompleted");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:50:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventHasBytesAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:65:                DDLogVerbose(@"[MQTTCFSocketDecoder] received (%lu)=%@...", (unsigned long)data.length,
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:72:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventHasSpaceAvailable");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:76:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventEndEncountered");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketDecoder.m:83:        DDLogVerbose(@"[MQTTCFSocketDecoder] NSStreamEventErrorOccurred");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.h:28: * defaults to @"localhost"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.h:59: NSString *path = [[NSBundle bundleForClass:[MQTTClientTests class]] pathForResource:@"filename"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.h:60: ofType:@"p12"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTCFSocketTransport.h:62: NSArray *myCerts = [MQTTCFSocketTransport clientCertsFromP12:path passphrase:@"passphrase"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:119:            forKeyPath:@"effectiveSubscriptions"
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:122:            manager.subscriptions = [@{@"#": @(0)} mutableCopy];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:125:        [manager removeObserver:self forKeyPath:@"effectiveSubscriptions"];
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:132:        if ([keyPath isEqualToString:@"effectiveSubscriptions"]) {
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:134:            DDLogVerbose(@"effectiveSubscriptions changed: %@", manager.effectiveSubscriptions);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionManager.h:178: * @param host specifies the hostname or ip address to connect to. Defaults to @"localhost".
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.m:114:    DDLogVerbose(@"[MQTTSessionLegacy] initWithClientId:%@ ", clientId);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionLegacy.m:323:    DDLogVerbose(@"MQTTSessionLegacy connectToHost:%@ port:%d usingSSL:%d connectHandler:%p",
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:47:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for connect");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:51:    DDLogVerbose(@"[MQTTSessionSynchron] end connect");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:75:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for connect");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:79:    DDLogVerbose(@"[MQTTSessionSynchron] end connect");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:97:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for suback %d", mid);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:101:    DDLogVerbose(@"[MQTTSessionSynchron] end subscribe");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:123:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for suback %d", mid);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:127:    DDLogVerbose(@"[MQTTSessionSynchron] end subscribe");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:150:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for unsuback %d", mid);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:154:    DDLogVerbose(@"[MQTTSessionSynchron] end unsubscribe");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:176:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for unsuback %d", mid);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:180:    DDLogVerbose(@"[MQTTSessionSynchron] end unsubscribe");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:215:            DDLogVerbose(@"[MQTTSessionSynchron] waiting for mid %d", mid);
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:219:        DDLogVerbose(@"[MQTTSessionSynchron] end publish");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:241:        DDLogVerbose(@"[MQTTSessionSynchron] waiting for close");
Pods/MQTTClient/MQTTClient/MQTTClient/MQTTSessionSynchron.m:244:    DDLogVerbose(@"[MQTTSessionSynchron] end close");
Pods/MQTTClient/README.md:38:transport.host = @"test.mosquitto.org";
Pods/MQTTClient/README.md:51:[session subscribeToTopic:@"example/#" atLevel:MQTTQosLevelExactlyOnce subscribeHandler:^(NSError *error, NSArray<NSNumber *> *gQoss) {
Pods/MQTTClient/README.md:53:        NSLog(@"Subscription failed %@", error.localizedDescription);
Pods/MQTTClient/README.md:55:        NSLog(@"Subscription sucessfull! Granted Qos: %@", gQoss);
Pods/MQTTClient/README.md:72:[session publishData:someData onTopic:@"example/#" retain:NO qos:MQTTQosLevelAtMostOnce publishHandler:^(NSError *error) {
Pods/Crashlytics/Crashlytics.framework/submit:5:sh "${PODS_ROOT}/Crashlytics/submit" "$@"
Pods/Crashlytics/iOS/Crashlytics.framework/Headers/CLSLogging.h:36:#define CLS_LOG(__FORMAT__, ...) CLSNSLog((@"%s line %d $ " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
Pods/Crashlytics/iOS/Crashlytics.framework/Headers/CLSLogging.h:38:#define CLS_LOG(__FORMAT__, ...) CLSLog((@"%s line %d $ " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarSymbol.m:41:    return [self initWithName:@"" isTerminal:NO];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarSymbol.m:44:#define NUIPGrammarSymbolNameKey     @"n"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarSymbol.m:45:#define NUIPGrammarSymbolTerminalKey @"t"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarSymbol.m:92:        return [NSString stringWithFormat:@"\"%@\"", [self name]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarSymbol.m:96:        return [NSString stringWithFormat:@"<%@>", [self name]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:133:            if ([symbol isEqualToString:@"*"])
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:138:            else if ([symbol isEqualToString:@"+"])
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:182:                                           [NSString stringWithFormat:@"Could not parse EBNF for grammar.  %ld:%ld: Found %@, Expected %@.", (long)[t lineNumber] + 1, (long)[t columnNumber] + 1, t, acceptableTokens], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:242:        NSLog(@"=== Core Parse Error ===");
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:243:        NSLog(@"%@", err);
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:252:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"::="]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:253:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"@"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:254:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"<"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:255:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@">"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:256:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"("]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:257:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@")"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:258:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"*"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:259:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"+"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:260:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"?"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:261:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"|"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:262:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@";"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:264:    [tokeniser addTokenRecogniser:[NUIPQuotedRecogniser quotedRecogniserWithStartQuote:@"\"" endQuote:@"\"" escapeSequence:@"\\" name:@"String"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:265:    [tokeniser addTokenRecogniser:[NUIPQuotedRecogniser quotedRecogniserWithStartQuote:@"'" endQuote:@"'" escapeSequence:@"\\" name:@"String"]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:271:    NUIPRule *ruleset1 = [NUIPRule ruleWithName:@"ruleset" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"ruleset"], [NUIPGrammarSymbol nonTerminalWithName:@"rule"], nil] tag:0];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:272:    NUIPRule *ruleset2 = [NUIPRule ruleWithName:@"ruleset" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"rule"], nil] tag:1];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:274:    NUIPRule *rule1 = [NUIPRule ruleWithName:@"rule" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"Number"], [NUIPGrammarSymbol nonTerminalWithName:@"unNumbered"], nil] tag:2];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:275:    NUIPRule *rule2 = [NUIPRule ruleWithName:@"rule" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"unNumbered"], nil] tag:3];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:277:    NUIPRule *unNumbered = [NUIPRule ruleWithName:@"unNumbered" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"Identifier"], [NUIPGrammarSymbol terminalWithName:@"::="], [NUIPGrammarSymbol nonTerminalWithName:@"rightHandSide"], [NUIPGrammarSymbol terminalWithName:@";"], nil] tag:4];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:279:    NUIPRule *rightHandSide1 = [NUIPRule ruleWithName:@"rightHandSide" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"rightHandSide"], [NUIPGrammarSymbol terminalWithName:@"|"], [NUIPGrammarSymbol nonTerminalWithName:@"sumset"], nil] tag:5];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:280:    NUIPRule *rightHandSide2 = [NUIPRule ruleWithName:@"rightHandSide" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"rightHandSide"], [NUIPGrammarSymbol terminalWithName:@"|"], nil] tag:6];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:281:    NUIPRule *rightHandSide3 = [NUIPRule ruleWithName:@"rightHandSide" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"sumset"], nil] tag:7];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:283:    NUIPRule *sumset1 = [NUIPRule ruleWithName:@"sumset" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"sumset"], [NUIPGrammarSymbol nonTerminalWithName:@"taggedRightHandSideItem"], nil] tag:8];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:284:    NUIPRule *sumset2 = [NUIPRule ruleWithName:@"sumset" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"taggedRightHandSideItem"], nil] tag:9];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:286:    NUIPRule *taggedRightHandSideItem1 = [NUIPRule ruleWithName:@"taggedRightHandSideItem" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"rightHandSideItem"], nil] tag:10];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:287:    NUIPRule *taggedRightHandSideItem2 = [NUIPRule ruleWithName:@"taggedRightHandSideItem" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"Identifier"], [NUIPGrammarSymbol terminalWithName:@"@"], [NUIPGrammarSymbol nonTerminalWithName:@"taggedRightHandSideItem"], nil] tag:11];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:289:    NUIPRule *rightHandSideItem1 = [NUIPRule ruleWithName:@"rightHandSideItem" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol nonTerminalWithName:@"unit"]] tag:12];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:290:    NUIPRule *rightHandSideItem2 = [NUIPRule ruleWithName:@"rightHandSideItem" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"unit"], [NUIPGrammarSymbol nonTerminalWithName:@"repeatSymbol"], nil] tag:13];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:292:    NUIPRule *unit1 = [NUIPRule ruleWithName:@"unit" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol nonTerminalWithName:@"grammarSymbol"]] tag:14];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:293:    NUIPRule *unit2 = [NUIPRule ruleWithName:@"unit" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"("], [NUIPGrammarSymbol nonTerminalWithName:@"rightHandSide"], [NUIPGrammarSymbol terminalWithName:@")"], nil] tag:15];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:295:    NUIPRule *repeatSymbol1 = [NUIPRule ruleWithName:@"repeatSymbol" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol terminalWithName:@"*"]] tag:16];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:296:    NUIPRule *repeatSymbol2 = [NUIPRule ruleWithName:@"repeatSymbol" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol terminalWithName:@"+"]] tag:17];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:297:    NUIPRule *repeatSymbol3 = [NUIPRule ruleWithName:@"repeatSymbol" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol terminalWithName:@"?"]] tag:18];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:299:    NUIPRule *grammarSymbol1 = [NUIPRule ruleWithName:@"grammarSymbol" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"nonterminal"], nil] tag:19];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:300:    NUIPRule *grammarSymbol2 = [NUIPRule ruleWithName:@"grammarSymbol" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol nonTerminalWithName:@"terminal"], nil] tag:20];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:302:    NUIPRule *nonterminal = [NUIPRule ruleWithName:@"nonterminal" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"<"], [NUIPGrammarSymbol terminalWithName:@"Identifier"], [NUIPGrammarSymbol terminalWithName:@">"], nil] tag:21];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:304:    NUIPRule *terminal = [NUIPRule ruleWithName:@"terminal" rightHandSideElements:[NSArray arrayWithObjects:[NUIPGrammarSymbol terminalWithName:@"String"], nil] tag:22];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:306:    NUIPGrammar *bnfGrammar = [NUIPGrammar grammarWithStart:@"ruleset" rules:[NSArray arrayWithObjects:ruleset1, ruleset2, rule1, rule2, unNumbered, rightHandSide1, rightHandSide2, rightHandSide3, sumset1, sumset2, taggedRightHandSideItem1, taggedRightHandSideItem2, rightHandSideItem1, rightHandSideItem2, unit1, unit2, repeatSymbol1, repeatSymbol2, repeatSymbol3, grammarSymbol1, grammarSymbol2, nonterminal, terminal, nil]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:348:#define NUIPGrammarStartKey @"s"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:349:#define NUIPGrammarRulesKey @"r"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:400:                                                 [NSString stringWithFormat:@"Could not find definition of %@, used in %@", [item name], rule], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.m:413:                                                     [NSString stringWithFormat:@"Could not find definition of %@, used in %@", [mutableUsedNonTerminals anyObject], rule], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarPrivate.m:102:                        if (![f1 containsObject:@""])
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarPrivate.m:112:            [f addObject:@""];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:27:    return [[[NUIPGrammar alloc] initWithStart:@"s'"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:28:                                       rules:[[self rules] arrayByAddingObject:[NUIPRule ruleWithName:@"s'" rightHandSideElements:[NSArray arrayWithObject:[NUIPGrammarSymbol nonTerminalWithName:[self start]]]]]]
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:44:        [s appendFormat:@"%3ld %@\n", (long)idx, r];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:178:        NSMutableSet *f = [NSMutableSet setWithObject:@"EOF"];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:192:                                                       return ![symbolName isEqualToString:@""];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:219:        if (![f1 containsObject:@""])
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:238:        testName = [NSString stringWithFormat:@"_%@", testName];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:290:                                                     [NSString stringWithFormat:@"Duplicate tag names %@ in same part of alternative is not allowed in \"%@\".", duplicateTags, rule], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:304:                                                         [NSString stringWithFormat:@"Duplicate tag names (%@) in same part of alternative is not allowed in \"%@\".", intersection, rule], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPGrammarInternal.m:340:        [namedRules setObject:[self symbolNameNotInSet:symbolNames basedOnName:[NSString stringWithFormat:@"RHS%ld", (long)name]] forKey:item];
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:91:    return [self initWithName:@"" rightHandSideElements:[NSArray array]];
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:94:#define NUIPRuleTagKey                 @"t"
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:95:#define NUIPRuleNameKey                @"n"
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:96:#define NUIPRuleRHSElementsKey         @"r"
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:97:#define NUIPRuleRepresentitiveClassKey @"c"
Pods/NUIParse/NUIParse/Grammar/NUIPRule.m:132:    return [NSString stringWithFormat:@"%@ ::= %@", [self name], [[rightHandSide valueForKey:@"description"] componentsJoinedByString:@" "]];
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.h:14:#define NUIPEBNFParserErrorDomain @"NUIPEBNFParserErrorDomain"
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.h:94: * You may use tags to identify sections of rules to be extracted in your result classes or parser delegate.  To do this, use the syntax `nonTerminal ::= foo@<subNonTerminal> bar@"subTerminal";`.  You may use multiple tags to identify the same section of a rule.  For example `range ::= min@'Number' '-' max@'Number' | min@'Number' '-' | '-' max@'Number' | min@max@'Number'`.
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.h:109: * taggedRightHandSideItem ::= ("Identifier" "@")? &lt;rightHandSideItem&gt;;
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.h:143: * You may use tags to identify sections of rules to be extracted in your result classes or parser delegate.  To do this, use the syntax `nonTerminal ::= foo@<subNonTerminal> bar@"subTerminal";`.  You may use multiple tags to identify the same section of a rule.  For example `range ::= min@'Number' '-' max@'Number' | min@'Number' '-' | '-' max@'Number' | min@max@'Number'`.
Pods/NUIParse/NUIParse/Grammar/NUIPGrammar.h:158: * taggedRightHandSideItem ::= ("Identifier" "@")? &lt;rightHandSideItem&gt;;
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:69:        [desc appendString:@"("];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:81:                [desc appendFormat:@"%@ ", comp];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:85:                [desc appendFormat:@"%@", comp];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:91:            [desc appendString:@"| "];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:96:        [desc appendString:@")"];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:98:    [desc appendString:[self repeats] ? ([self mayNotExist] ? @"*" : @"+") : ([self mayNotExist] ? @"?" : @"")];
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:174:                                                         [NSString stringWithFormat:@"Duplicate tag names %@ in same part of alternative is not allowed in \"%@\".", duplicateTags, self], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:192:                                                             [NSString stringWithFormat:@"Duplicate tag names (%@) in same part of alternative is not allowed in \"%@\".", intersection, self], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Grammar/NUIPRHSItem.m:211:                                             [NSString stringWithFormat:@"Tag names are not allowed within repeating section of rule \"%@\".", self], NSLocalizedDescriptionKey,
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceGotoTable.m:35:#define NUIPShiftReduceGotoTableTableKey @"t"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPSLRParser.m:50:                    BOOL success = [[self actionTable] setAction:[NUIPShiftReduceAction acceptAction] forState:idx name:@"EOF"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceState.m:50:    return [NSString stringWithFormat:@"<NUIPShiftReduceState: %@ (%ld)", [self object], (long)[self state]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLR1Item.m:74:    return [[super description] stringByAppendingFormat:@", %@", [[self terminal] name]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPItem.m:96:    NSMutableString *desc = [NSMutableString stringWithFormat:@"%@ ::= ", [[self rule] name]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPItem.m:103:            [desc appendString:@"• "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPItem.m:105:        [desc appendFormat:@"%@ ", obj];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPItem.m:110:        [desc appendString:@"•"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLR1Parser.m:52:                    BOOL success = [[self actionTable] setAction:[NUIPShiftReduceAction acceptAction] forState:idx name:@"EOF"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLR1Parser.m:99:    NSSet *initialKernel = [NSSet setWithObject:[NUIPLR1Item lr1ItemWithRule:startRule position:0 terminal:[NUIPGrammarSymbol terminalWithName:@"EOF"]]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:56:                            BOOL success = [[self actionTable] setAction:[NUIPShiftReduceAction acceptAction] forState:idx name:@"EOF"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:59:                                NSLog(@"Could not insert shift in action table for state %lu, token %@", (unsigned long)idx, @"EOF");
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:68:                                NSLog(@"Could not insert reduce in action table for state %lu, token %@", (unsigned long)idx, [[item terminal] name]);
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:91:                            NSLog(@"Could not insert shift in action table for state %lu, token %@", (unsigned long)idx, [next name]);
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:116:                    NSLog(@"Could not insert into goto table for state %lu, token %@", (unsigned long)idx, nonTerminalName);
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:141:    NSString *uniqueName = [aug uniqueSymbolNameBasedOnName:@"#"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPLALR1Parser.m:156:                [itemSpontaneous addObject:[NUIPGrammarSymbol terminalWithName:@"EOF"]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:38:#define NUIPShiftReduceActionTableTableKey @"t"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:120:        [s appendString:@"State | "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:123:            [s appendFormat:@"%@", key];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:127:                [s appendString:@" "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:130:        [s appendString:@"\n"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:136:            [s appendFormat:@"%5ld | ", (long)idx];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:147:                    [s appendFormat:@"%@", action];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:152:                    [s appendString:@" "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:155:            [s appendString:@"\n"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:162:    return @"";
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:181:        [s appendString:@"State | "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:184:            [s appendFormat:@"%@", key];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:188:                [s appendString:@" "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:191:        [s appendString:@"\n"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:197:            [s appendFormat:@"%5ld | ", (long)idx];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:208:                    [s appendFormat:@"%@", [action descriptionWithGrammar:g]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:213:                    [s appendString:@" "];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:216:            [s appendString:@"\n"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceActionTable.m:223:    return @"";
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:86:#define NUIPShiftReduceActionTypeKey  @"t"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:87:#define NUIPShiftReduceActionShiftKey @"s"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:88:#define NUIPShiftReduceActionRuleKey  @"r"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:216:            return [NSString stringWithFormat:@"s%ld", (long)details.shift];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:218:            return [NSString stringWithFormat:@"r%@", [details.reductionRule name]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:220:            return @"acc";
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:229:            return [NSString stringWithFormat:@"s%ld", (long)details.shift];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:231:            return [NSString stringWithFormat:@"r%ld", (long)[g indexOfRule:details.reductionRule]];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParsers/NUIPShiftReduceAction.m:233:            return @"acc";
Pods/NUIParse/NUIParse/Parsers/NUIPParser.m:53:    [NSException raise:@"Abstract Class Exception"
Pods/NUIParse/NUIParse/Parsers/NUIPParser.m:54:                format:@"NUIPParser is an abstract class, use one of the concrete subclasses to parse your token stream"];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:52:#define NUIPShiftReduceParserGrammarKey     @"g"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:53:#define NUIPShiftReduceParserActionTableKey @"at"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:54:#define NUIPShiftReduceParserGotoTableKey   @"gt"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:86:    NSLog(@"NUIPShiftReduceParser is abstract, use one of it's concrete subclasses instead");
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:90:#define kNUIPStopParsingException @"NUIPStopParsingException"
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:223:                                [NSException raise:kNUIPStopParsingException format:@""];
Pods/NUIParse/NUIParse/Parsers/NUIPShiftReduceParser.m:257:        NSLog(@"%ld:%ld: parse error.  Expected %@, found %@", (long)[t lineNumber] + 1, (long)[t columnNumber] + 1, acceptableTokens, t);
Pods/NUIParse/NUIParse/Syntax Tree/NUIPSyntaxTree.m:97:    NSMutableString *desc = [NSMutableString stringWithString:@"("];
Pods/NUIParse/NUIParse/Syntax Tree/NUIPSyntaxTree.m:100:        [desc appendFormat:@"%@ ", obj];
Pods/NUIParse/NUIParse/Syntax Tree/NUIPSyntaxTree.m:102:    [desc replaceCharactersInRange:NSMakeRange([desc length] - 1, 1) withString:@")"];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPEOFToken.h:16: * These tokens return `@"EOF"` as their name.
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPIdentifierToken.h:16: * These tokens return `@"Identifier"` as their name.
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPWhiteSpaceToken.m:34:    return [self initWithWhiteSpace:@""];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPWhiteSpaceToken.m:46:    return @"Whitespace";
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPKeywordToken.m:34:    return [self initWithKeyword:@" "];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPKeywordToken.m:45:    return [NSString stringWithFormat:@"<Keyword: %@>", [self keyword]];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPErrorToken.h:14: * These tokens return `@"Error"` as their name.  They may carry an error message with them.
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPToken.m:20:    [NSException raise:@"Abstract method called exception" format:@"NUIPToken is abstract, and should not have name called."];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPToken.m:21:    return @"";
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPToken.m:37:    return [NSString stringWithFormat:@"<%@>", [self name]];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPNumberToken.h:16: * These tokens return `@"Number"` as their name.
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPEOFToken.m:20:    return @"EOF";
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPIdentifierToken.m:37:    return [self initWithIdentifier:@""];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPIdentifierToken.m:49:    return [NSString stringWithFormat:@"<Identifier: %@>", [self identifier]];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPIdentifierToken.m:54:    return @"Identifier";
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPWhiteSpaceToken.h:16: * These tokens return `@"Whitespace"` as their name.
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPQuotedToken.m:44:    return [self initWithContent:@"" quoteType:@"" name:@""];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPQuotedToken.m:58:    return [NSString stringWithFormat:@"<%@: %@>", [self name], [self content]];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPNumberToken.m:45:    return [NSString stringWithFormat:@"<Number: %@>", [self number]];
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPNumberToken.m:50:    return @"Number";
Pods/NUIParse/NUIParse/Tokenisation/Token Types/NUIPErrorToken.m:41:    return @"Error";
Pods/NUIParse/NUIParse/Tokenisation/NUIPTokeniser.m:52:#define NUIPTokeniserTokenRecognisersKey @"T.r"
Pods/NUIParse/NUIParse/Tokenisation/NUIPTokeniser.m:93:        [NSException raise:NSInvalidArgumentException format:@"Token recogniser to insert before was not found"];
Pods/NUIParse/NUIParse/Tokenisation/NUIPTokeniser.m:174:                    NUIPErrorToken *t = [NUIPErrorToken errorWithMessage:[NSString stringWithFormat:@"The tokeniser encountered an invalid input \"%@\", and could not handle it.  Implement -tokeniser:didNotFindTokenAtInputPosition:error: to make this do something more useful", [input substringWithRange:NSMakeRange(currentTokenOffset, MIN((NSUInteger)10, [input length] - currentTokenOffset))]]];
Pods/NUIParse/NUIParse/Tokenisation/NUIPTokeniser.m:219:        newlineCharset = (CFCharacterSetRef)[[NSCharacterSet characterSetWithCharactersInString:@"\n\r"] retain];
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:41:#define NUIPIdentifierRecogniserInitialCharactersKey @"I.i"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:42:#define NUIPIdentifierRecogniserIdentifierCharactersKey @"I.c"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:74:                                                                                   @"abcdefghijklmnopqrstuvwxyz"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:75:                                                                                   @"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:76:                                                                                   @"_"] : [self initialCharacters];
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:78:                                                                         @"abcdefghijklmnopqrstuvwxyz"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:79:                                                                         @"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPIdentifierRecogniser.m:80:                                                                         @"_-1234567890"] : [self identifierCharacters];
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPNumberRecogniser.m:18:#define NUIPNumberRecogniserRecognisesIntsKey @"N.i"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPNumberRecogniser.m:19:#define NUIPNumberRecogniserRecognisesFloatsKey @"N.f"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPNumberRecogniser.m:87:            if ([tokenString rangeOfString:@"." options:0x0 range:numberRange].location == NSNotFound &&
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPNumberRecogniser.m:88:                [tokenString rangeOfString:@"e" options:0x0 range:numberRange].location == NSNotFound)
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPRegexpRecogniser.m:46:#define NUIPRegexpRecogniserRegexpKey @"R.r"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:53:#define NUIPQuotedRecogniserStartQuoteKey     @"Q.s"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:54:#define NUIPQuotedRecogniserEndQuoteKey       @"Q.e"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:55:#define NUIPQuotedRecogniserEscapeSequenceKey @"Q.es"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:56:#define NUIPQuotedRecogniserMaximumLengthKey  @"Q.m"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:57:#define NUIPQuotedRecogniserNameKey           @"Q.n"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:74:            NSLog(@"Warning, value for maximum length too long for this platform, allowing infinite lengths");
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPQuotedRecogniser.m:87:        NSLog(@"Warning: encoding NUIPQuoteRecogniser with an escapeReplacer set.  This will not be recreated when decoded.");
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPKeywordRecogniser.m:46:    return [self initWithKeyword:@" "];
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPKeywordRecogniser.m:49:#define NUIPKeywordRecogniserKeywordKey @"K.k"
Pods/NUIParse/NUIParse/Tokenisation/Token Recognisers/NUIPKeywordRecogniser.m:50:#define NUIPKeywordRecogniserInvalidFollowingCharactersKey @"K.f"
Pods/NUIParse/NUIParse/Tokenisation/NUIPTokenStream.m:142:        [desc appendFormat:@"%@ ", tok];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:39:        NUIPQuotedRecogniser *stringRecogniser = [NUIPQuotedRecogniser quotedRecogniserWithStartQuote:@"\"" endQuote:@"\"" escapeSequence:@"\\" name:@"String"];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:48:                         return @"\b";
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:51:                         return @"\f";
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:54:                         return @"\n";
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:57:                         return @"\r";
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:60:                         return @"\t";
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:68:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"{"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:69:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"}"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:70:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"["]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:71:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"]"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:72:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@":"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:73:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@","]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:74:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"true"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:75:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"false"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:76:        [jsonTokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"null"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:82:        NUIPGrammar *jsonGrammar = [NUIPGrammar grammarWithStart:@"value"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:84:                                  @"0  value    ::= 'String';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:85:                                  @"1  value    ::= 'Number';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:86:                                  @"2  value    ::= <object>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:87:                                  @"3  value    ::= <array>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:88:                                  @"4  value    ::= <boolean>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:89:                                  @"5  value    ::= 'null';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:90:                                  @"6  object   ::= '{' '}';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:91:                                  @"7  object   ::= '{' <members> '}';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:92:                                  @"8  members  ::= <pair>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:93:                                  @"9  members  ::= <pair> ',' <members>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:94:                                  @"10 pair     ::= 'String' ':' <value>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:95:                                  @"11 array    ::= '[' ']';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:96:                                  @"12 array    ::= '[' <elements> ']';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:97:                                  @"13 elements ::= <value>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:98:                                  @"14 elements ::= <value> ',' <elements>;"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:99:                                  @"15 boolean  ::= 'true';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:100:                                  @"16 boolean  ::= 'false';"
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:159:            return [NSMutableDictionary dictionaryWithObject:[p objectForKey:@"v"] forKey:[p objectForKey:@"k"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:165:            [ms setObject:[p objectForKey:@"v"] forKey:[p objectForKey:@"k"]];
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:171:                    [(NUIPQuotedToken *)[children objectAtIndex:0] content], @"k",
Pods/NUIParse/NUIParse/Built In Parsers/NUIPJSONParser.m:172:                    [children objectAtIndex:2], @"v",
Pods/AugustLockComm/BLEPacket.m:892:    NSLog(@"Crypto Status is %s", (kCCSuccess == stat) ? "OK" : "ERROR");
Pods/AugustLockComm/BLEPacket.m:981:        [workingTextString appendFormat:@"%02X", bytes? bytes[i] : 0];
Pods/AugustLockComm/BLEPacket.m:982:        if (((i +1) % 2) == 0) [workingTextString appendString:@" "];
Pods/AugustLockComm/AugLockCommandDecoder.m:65:        @{@0xBB : @"Response"
Pods/AugustLockComm/AugLockCommandDecoder.m:66:         ,@0xEE : @"Command"
Pods/AugustLockComm/AugLockCommandDecoder.m:70:        @{@AUG_CMD_GetLockEvent                  :@"AUG_CMD_GetLockEvent"
Pods/AugustLockComm/AugLockCommandDecoder.m:71:         ,@AUG_CMD_GetNotification               :@"AUG_CMD_GetNotification"
Pods/AugustLockComm/AugLockCommandDecoder.m:72:         ,@AUG_CMD_GetStatus                     :@"AUG_CMD_GetStatus"
Pods/AugustLockComm/AugLockCommandDecoder.m:73:         ,@AUG_CMD_SetParameter                  :@"AUG_CMD_SetParameter"
Pods/AugustLockComm/AugLockCommandDecoder.m:74:         ,@AUG_CMD_GetParameter                  :@"AUG_CMD_GetParameter"
Pods/AugustLockComm/AugLockCommandDecoder.m:75:         ,@AUG_CMD_ClearParameter                :@"AUG_CMD_ClearParameter"
Pods/AugustLockComm/AugLockCommandDecoder.m:76:         ,@AUG_CMD_ClearLog                      :@"AUG_CMD_ClearLog"
Pods/AugustLockComm/AugLockCommandDecoder.m:77:         ,@AUG_CMD_MotorMoveDegrees              :@"AUG_CMD_MotorMoveDegrees"
Pods/AugustLockComm/AugLockCommandDecoder.m:78:         ,@AUG_CMD_ReleaseLockEvent              :@"AUG_CMD_ReleaseLockEvent"
Pods/AugustLockComm/AugLockCommandDecoder.m:79:         ,@AUG_CMD_ReleaseNotification           :@"AUG_CMD_ReleaseNotification"
Pods/AugustLockComm/AugLockCommandDecoder.m:80:         ,@AUG_CMD_Unlock                        :@"@AUG_CMD_Unlock"
Pods/AugustLockComm/AugLockCommandDecoder.m:81:         ,@AUG_CMD_Lock                          :@"@AUG_CMD_Lock"
Pods/AugustLockComm/AugLockCommandDecoder.m:82:         ,@AUG_CMD_CalibrateLock                 :@"AUG_CMD_CalibrateLock"
Pods/AugustLockComm/AugLockCommandDecoder.m:83:         ,@AUG_CMD_AudioPlay                     :@"AUG_CMD_AudioPlay"
Pods/AugustLockComm/AugLockCommandDecoder.m:84:         ,@AUG_CMD_LED                           :@"AUG_CMD_LED"
Pods/AugustLockComm/AugLockCommandDecoder.m:85:         ,@AUG_CMD_ClearNotifications            :@"AUG_CMD_ClearNotifications"
Pods/AugustLockComm/AugLockCommandDecoder.m:86:         ,@AUG_CMD_SetRTC                        :@"AUG_CMD_SetRTC"
Pods/AugustLockComm/AugLockCommandDecoder.m:87:         ,@AUG_CMD_ForcePairing                  :@"AUG_CMD_ForcePairing"
Pods/AugustLockComm/AugLockCommandDecoder.m:88:         ,@AUG_CMD_ForcePairing                  :@"AUG_CMD_ForcePairing"
Pods/AugustLockComm/AugLockCommandDecoder.m:89:         ,@AUG_CMD_OTA_QueryStatus               :@"AUG_CMD_OTA_QueryStatus"
Pods/AugustLockComm/AugLockCommandDecoder.m:90:         ,@AUG_CMD_OTA_WriteToSlice              :@"AUG_CMD_OTA_WriteToSlice"
Pods/AugustLockComm/AugLockCommandDecoder.m:91:         ,@AUG_CMD_OTA_CreateAsset               :@"AUG_CMD_OTA_CreateAsset"
Pods/AugustLockComm/AugLockCommandDecoder.m:92:         ,@AUG_CMD_OTA_InfoForAsset              :@"AUG_CMD_OTA_InfoForAsset"
Pods/AugustLockComm/AugLockCommandDecoder.m:93:         ,@AUG_CMD_OTA_DeleteAsset               :@"AUG_CMD_OTA_DeleteAsset"
Pods/AugustLockComm/AugLockCommandDecoder.m:94:         ,@AUG_CMD_OTA_QuerySlice                :@"AUG_CMD_OTA_QuerySlice"
Pods/AugustLockComm/AugLockCommandDecoder.m:95:         ,@AUG_CMD_OTA_Error                     :@"AUG_CMD_OTA_Error"
Pods/AugustLockComm/AugLockCommandDecoder.m:96:         ,@AUG_CMD_OTA_Program                   :@"AUG_CMD_OTA_Program"
Pods/AugustLockComm/AugLockCommandDecoder.m:97:         ,@AUG_CMD_OTA_ResetAssetStore           :@"AUG_CMD_OTA_ResetAssetStore"
Pods/AugustLockComm/AugLockCommandDecoder.m:98:         ,@AUG_CMD_OTA_SetAndModifyCurrentSlice  :@"AUG_CMD_OTA_SetAndModifyCurrentSlice"
Pods/AugustLockComm/AugLockCommandDecoder.m:99:         ,@AUG_CMD_OTA_reserved                  :@"AUG_CMD_OTA_reserved"
Pods/AugustLockComm/AugLockCommandDecoder.m:100:         ,@AUG_CMD_MotPolDiscovery               :@"AUG_CMD_MotPolDiscovery"
Pods/AugustLockComm/AugLockCommandDecoder.m:101:         ,@AUG_CMD_NopAck                        :@"AUG_CMD_NopAck"
Pods/AugustLockComm/AugLockCommandDecoder.m:102:         ,@AUG_CMD_Nop                           :@"AUG_CMD_Nop"
Pods/AugustLockComm/AugLockCommandDecoder.m:103:         ,@AUG_CMD_8051SerialOut                 :@"AUG_CMD_8051SerialOut"
Pods/AugustLockComm/AugLockCommandDecoder.m:104:         ,@AUG_CMD_FactoryReset                  :@"AUG_CMD_FactoryReset"
Pods/AugustLockComm/AugLockCommandDecoder.m:105:         ,@AUG_CMD_KeyCode_Commit                :@"@AUG_CMD_KeyCode_Commit"
Pods/AugustLockComm/AugLockCommandDecoder.m:106:         ,@AUG_CMD_KeyCode_Set                   :@"@AUG_CMD_KeyCode_Set"
Pods/AugustLockComm/AugLockCommandDecoder.m:107:         ,@AUG_CMD_KeyCode_Clear                 :@"@AUG_CMD_KeyCode_Clear"
Pods/AugustLockComm/AugLockCommandDecoder.m:108:         ,@AUG_CMD_KeyCode_ClearAll              :@"@AUG_CMD_KeyCode_ClearAll"
Pods/AugustLockComm/AugLockCommandDecoder.m:109:         ,@AUG_CMD_KeyCode_Unlock                :@"@AUG_CMD_KeyCode_Unlock"
Pods/AugustLockComm/AugLockCommandDecoder.m:110:         ,@AUG_CMD_KeyCode_Access                :@"@AUG_CMD_KeyCode_Access"
Pods/AugustLockComm/AugLockCommandDecoder.m:111:         ,@AUG_CMD_ZWAVE_CMD                     :@"AUG_CMD_ZWAVE_CMD"         
Pods/AugustLockComm/AugLockCommandDecoder.m:115:        @{@AUG_PARAM_BACKOFF_TIME_MS             :@"AUG_PARAM_BACKOFF_TIME_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:116:         ,@AUG_PARAM_ANIMATION_PERIOD_MS         :@"AUG_PARAM_ANIMATION_PERIOD_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:117:         ,@AUG_PARAM_BATTERY_TYPE                :@"AUG_PARAM_BATTERY_TYPE"
Pods/AugustLockComm/AugLockCommandDecoder.m:118:         ,@AUG_PARAM_SERIAL_NUMBER_L             :@"AUG_PARAM_SERIAL_NUMBER_L"
Pods/AugustLockComm/AugLockCommandDecoder.m:119:         ,@AUG_PARAM_SERIAL_NUMBER_H             :@"AUG_PARAM_SERIAL_NUMBER_H"
Pods/AugustLockComm/AugLockCommandDecoder.m:120:         ,@AUG_PARAM_MANUF_INFO                  :@"AUG_PARAM_MANUF_INFO"
Pods/AugustLockComm/AugLockCommandDecoder.m:121:         ,@AUG_PARAM_MANUF_DATE                  :@"AUG_PARAM_MANUF_DATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:122:         ,@AUG_PARAM_AUDIO_VOLUME                :@"AUG_PARAM_AUDIO_VOLUME"
Pods/AugustLockComm/AugLockCommandDecoder.m:123:         ,@AUG_PARAM_LED_BRIGHTNESS              :@"AUG_PARAM_LED_BRIGHTNESS"
Pods/AugustLockComm/AugLockCommandDecoder.m:124:         ,@AUG_PARAM_CURRENT_KDT                 :@"AUG_PARAM_CURRENT_KDT"
Pods/AugustLockComm/AugLockCommandDecoder.m:125:         ,@AUG_PARAM_CURRENT_KI                  :@"AUG_PARAM_CURRENT_KI"
Pods/AugustLockComm/AugLockCommandDecoder.m:126:         ,@AUG_PARAM_CURRENT_KP                  :@"AUG_PARAM_CURRENT_KP"
Pods/AugustLockComm/AugLockCommandDecoder.m:127:         ,@AUG_PARAM_CURRENT_ILIMIT              :@"AUG_PARAM_CURRENT_ILIMIT"
Pods/AugustLockComm/AugLockCommandDecoder.m:128:         ,@AUG_PARAM_POS_KDT                     :@"AUG_PARAM_POS_KDT"
Pods/AugustLockComm/AugLockCommandDecoder.m:129:         ,@AUG_PARAM_POS_KI                      :@"AUG_PARAM_POS_KI"
Pods/AugustLockComm/AugLockCommandDecoder.m:130:         ,@AUG_PARAM_POS_KP                      :@"AUG_PARAM_POS_KP"
Pods/AugustLockComm/AugLockCommandDecoder.m:131:         ,@AUG_PARAM_POS_ILIMT                   :@"AUG_PARAM_POS_ILIMT"
Pods/AugustLockComm/AugLockCommandDecoder.m:132:         ,@AUG_PARAM_RSSI_THRESHOLD              :@"AUG_PARAM_RSSI_THRESHOLD"
Pods/AugustLockComm/AugLockCommandDecoder.m:133:         ,@AUG_PARAM_RSSI_FILTER                 :@"AUG_PARAM_RSSI_FILTER"
Pods/AugustLockComm/AugLockCommandDecoder.m:134:         ,@AUG_PARAM_ACC_THRESHOLD               :@"AUG_PARAM_ACC_THRESHOLD"
Pods/AugustLockComm/AugLockCommandDecoder.m:135:         ,@AUG_PARAM_KNOCK_THRESHOLD             :@"AUG_PARAM_KNOCK_THRESHOLD"
Pods/AugustLockComm/AugLockCommandDecoder.m:136:         ,@AUG_PARAM_KNOCK_FILTER                :@"AUG_PARAM_KNOCK_FILTER"
Pods/AugustLockComm/AugLockCommandDecoder.m:137:         ,@AUG_PARAM_STALL_CURRENT_LIMIT         :@"AUG_PARAM_STALL_CURRENT_LIMIT"
Pods/AugustLockComm/AugLockCommandDecoder.m:138:         ,@AUG_PARAM_PWM_LIMIT                   :@"AUG_PARAM_PWM_LIMIT"
Pods/AugustLockComm/AugLockCommandDecoder.m:139:         ,@AUG_PARAM_STALL_POSITION_CW           :@"AUG_PARAM_STALL_POSITION_CW"
Pods/AugustLockComm/AugLockCommandDecoder.m:140:         ,@AUG_PARAM_STALL_POSITION_CCW          :@"AUG_PARAM_STALL_POSITION_CCW"
Pods/AugustLockComm/AugLockCommandDecoder.m:141:         ,@AUG_PARAM_TARGET_POSITION_CW          :@"AUG_PARAM_TARGET_POSITION_CW"
Pods/AugustLockComm/AugLockCommandDecoder.m:142:         ,@AUG_PARAM_TARGET_POSITION_CCW         :@"AUG_PARAM_TARGET_POSITION_CCW"
Pods/AugustLockComm/AugLockCommandDecoder.m:143:         ,@AUG_PARAM_BATTERY_SOC_THRESHOLD       :@"AUG_PARAM_BATTERY_SOC_THRESHOLD"
Pods/AugustLockComm/AugLockCommandDecoder.m:144:         ,@AUG_PARAM_MIN_STALL_TIME_MS           :@"AUG_PARAM_MIN_STALL_TIME_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:145:         ,@AUG_PARAM_BACKOFF_ANGLE               :@"AUG_PARAM_BACKOFF_ANGLE"
Pods/AugustLockComm/AugLockCommandDecoder.m:146:         ,@AUG_PARAM_ANGLE_THRESHOLD             :@"AUG_PARAM_ANGLE_THRESHOLD"
Pods/AugustLockComm/AugLockCommandDecoder.m:147:         ,@AUG_PARAM_ORIENTATION                 :@"AUG_PARAM_ORIENTATION"
Pods/AugustLockComm/AugLockCommandDecoder.m:148:         ,@AUG_PARAM_TEMPERATURE_WARNING         :@"AUG_PARAM_TEMPERATURE_WARNING"
Pods/AugustLockComm/AugLockCommandDecoder.m:149:         ,@AUG_PARAM_TEMPERATURE_ALARM           :@"AUG_PARAM_TEMPERATURE_ALARM"
Pods/AugustLockComm/AugLockCommandDecoder.m:150:         ,@AUG_PARAM_ABSOLUTE_CURRENT_LIMIT      :@"AUG_PARAM_ABSOLUTE_CURRENT_LIMIT"
Pods/AugustLockComm/AugLockCommandDecoder.m:151:         ,@AUG_PARAM_MIN_BATTERY_VOTAGE_MV       :@"AUG_PARAM_MIN_BATTERY_VOTAGE_MV"
Pods/AugustLockComm/AugLockCommandDecoder.m:152:         ,@AUG_PARAM_LOCK_OP_TIMEOUT             :@"AUG_PARAM_LOCK_OP_TIMEOUT"
Pods/AugustLockComm/AugLockCommandDecoder.m:153:         ,@AUG_PARAM_BACKOFF_CURRENT_MA          :@"AUG_PARAM_BACKOFF_CURRENT_MA"
Pods/AugustLockComm/AugLockCommandDecoder.m:154:         ,@AUG_PARAM_CURRENT_MEASURE_INTERVAL_MS :@"AUG_PARAM_CURRENT_MEASURE_INTERVAL_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:155:         ,@AUG_PARAM_RELOCK_SEC                  :@"AUG_PARAM_RELOCK_SEC"
Pods/AugustLockComm/AugLockCommandDecoder.m:156:         ,@AUG_PARAM_UNLOCKED_TOL                :@"AUG_PARAM_UNLOCKED_TOL"
Pods/AugustLockComm/AugLockCommandDecoder.m:157:         ,@AUG_PARAM_LOCKED_TOL                  :@"AUG_PARAM_LOCKED_TOL"
Pods/AugustLockComm/AugLockCommandDecoder.m:158:         ,@AUG_PARAM_MAX_STALL_CURRENT_ERROR     :@"AUG_PARAM_MAX_STALL_CURRENT_ERROR"
Pods/AugustLockComm/AugLockCommandDecoder.m:159:         ,@AUG_PARAM_AUTOCAL_MS                  :@"AUG_PARAM_AUTOCAL_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:160:         ,@AUG_PARAM_MOTOR_POLARITY              :@"AUG_PARAM_MOTOR_POLARITY"
Pods/AugustLockComm/AugLockCommandDecoder.m:161:         ,@AUG_PARAM_AUTOCAL_ATTEMPTS            :@"AUG_PARAM_AUTOCAL_ATTEMPTS"
Pods/AugustLockComm/AugLockCommandDecoder.m:162:         ,@AUG_PARAM_PWM_DZONE                   :@"AUG_PARAM_PWM_DZONE"
Pods/AugustLockComm/AugLockCommandDecoder.m:163:         ,@AUG_PARAM_NUM_RETRIES                 :@"AUG_PARAM_NUM_RETRIES"
Pods/AugustLockComm/AugLockCommandDecoder.m:164:         ,@AUG_PARAM_RETRY_TIMER                 :@"AUG_PARAM_RETRY_TIMER"
Pods/AugustLockComm/AugLockCommandDecoder.m:165:         ,@AUG_PARAM_HLIMIT_ANGLE                :@"AUG_PARAM_HLIMIT_ANGLE"
Pods/AugustLockComm/AugLockCommandDecoder.m:166:         ,@AUG_PARAM_SIMULATED                   :@"AUG_PARAM_SIMULATED"
Pods/AugustLockComm/AugLockCommandDecoder.m:167:         ,@AUG_PARAM_ANGLE_TAU                   :@"AUG_PARAM_ANGLE_TAU"
Pods/AugustLockComm/AugLockCommandDecoder.m:168:         ,@AUG_PARAM_ACC_VERBOSE                 :@"AUG_PARAM_ACC_VERBOSE"
Pods/AugustLockComm/AugLockCommandDecoder.m:169:         ,@AUG_PARAM_MOTION_VERBOSE              :@"AUG_PARAM_MOTION_VERBOSE"
Pods/AugustLockComm/AugLockCommandDecoder.m:170:         ,@AUG_PARAM_MIN_AWAKE_TIME_MS           :@"AUG_PARAM_MIN_AWAKE_TIME_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:171:         ,@AUG_PARAM_AUDIO_ENABLED               :@"AUG_PARAM_AUDIO_ENABLED"
Pods/AugustLockComm/AugLockCommandDecoder.m:172:         ,@AUG_PARAM_ZWAVE_ENABLED               :@"AUG_PARAM_ZWAVE_ENABLED"
Pods/AugustLockComm/AugLockCommandDecoder.m:173:         ,@AUG_PARAM_BURNIN_TRG                  :@"AUG_PARAM_BURNIN_TRG"
Pods/AugustLockComm/AugLockCommandDecoder.m:174:         ,@AUG_PARAM_BURNIN_CYCLES               :@"AUG_PARAM_BURNIN_CYCLES"
Pods/AugustLockComm/AugLockCommandDecoder.m:175:         ,@AUG_PARAM_BURNIN_DELAY                :@"AUG_PARAM_BURNIN_DELAY"
Pods/AugustLockComm/AugLockCommandDecoder.m:176:         ,@AUG_PARAM_BURNIN_CYCLES_DONE          :@"AUG_PARAM_BURNIN_CYCLES_DONE"
Pods/AugustLockComm/AugLockCommandDecoder.m:177:         ,@AUG_PARAM_BURNIN_CYCLES_SUCCESS       :@"AUG_PARAM_BURNIN_CYCLES_SUCCESS"
Pods/AugustLockComm/AugLockCommandDecoder.m:178:         ,@AUG_PARAM_BURNIN_FAIL_TOL             :@"AUG_PARAM_BURNIN_FAIL_TOL"
Pods/AugustLockComm/AugLockCommandDecoder.m:179:         ,@AUG_PARAM_BURNIN_CAL_SUCCESS          :@"AUG_PARAM_BURNIN_CAL_SUCCESS"
Pods/AugustLockComm/AugLockCommandDecoder.m:180:         ,@AUG_PARAM_BURNIN_ATTEMPTS             :@"AUG_PARAM_BURNIN_ATTEMPTS"
Pods/AugustLockComm/AugLockCommandDecoder.m:181:         ,@AUG_PARAM_BURNIN_FAILED_ATTEMPTS      :@"AUG_PARAM_BURNIN_FAILED_ATTEMPTS"
Pods/AugustLockComm/AugLockCommandDecoder.m:182:         ,@AUG_PARAM_BURNIN_TIMESTAMP            :@"AUG_PARAM_BURNIN_TIMESTAMP"
Pods/AugustLockComm/AugLockCommandDecoder.m:183:         ,@AUG_PARAM_BURNIN_NOSLEEP              :@"AUG_PARAM_BURNIN_NOSLEEP"
Pods/AugustLockComm/AugLockCommandDecoder.m:184:         ,@AUG_PARAM_BURNIN_AUTO_RESTART         :@"AUG_PARAM_BURNIN_AUTO_RESTART"
Pods/AugustLockComm/AugLockCommandDecoder.m:185:         ,@AUG_PARAM_BURNIN_INIT_DELAY           :@"AUG_PARAM_BURNIN_INIT_DELAY"
Pods/AugustLockComm/AugLockCommandDecoder.m:186:         ,@AUG_PARAM_BURNIN_IN_PROGRESS          :@"AUG_PARAM_BURNIN_IN_PROGRESS"
Pods/AugustLockComm/AugLockCommandDecoder.m:187:         ,@AUG_PARAM_BURNIN_ERRORS               :@"AUG_PARAM_BURNIN_ERRORS"
Pods/AugustLockComm/AugLockCommandDecoder.m:188:         ,@AUG_PARAM_BAT_CRITICAL_TH             :@"AUG_PARAM_BAT_CRITICAL_TH"
Pods/AugustLockComm/AugLockCommandDecoder.m:189:         ,@AUG_PARAM_BAT_LOW_TH                  :@"AUG_PARAM_BAT_LOW_TH"
Pods/AugustLockComm/AugLockCommandDecoder.m:190:         ,@AUG_PARAM_BAT_MEDIUM_TH               :@"AUG_PARAM_BAT_MEDIUM_TH"
Pods/AugustLockComm/AugLockCommandDecoder.m:191:         ,@AUG_PARAM_BACKOFF_MIN_MS              :@"AUG_PARAM_BACKOFF_MIN_MS"
Pods/AugustLockComm/AugLockCommandDecoder.m:192:         ,@AUG_PARAM_BACKOFF_NUM_SAMPLES         :@"AUG_PARAM_BACKOFF_NUM_SAMPLES"
Pods/AugustLockComm/AugLockCommandDecoder.m:193:         ,@AUG_PARAM_MOTOR_UPDATE_PERIOD         :@"AUG_PARAM_MOTOR_UPDATE_PERIOD"
Pods/AugustLockComm/AugLockCommandDecoder.m:194:         ,@AUG_PARAM_ENABLE_KEY_UNLOCK           :@"AUG_PARAM_ENABLE_KEY_UNLOCK"
Pods/AugustLockComm/AugLockCommandDecoder.m:195:         ,@AUG_PARAM_ENABLE_KEY_BACKLIGHT        :@"AUG_PARAM_ENABLE_KEY_BACKLIGHT" 
Pods/AugustLockComm/AugLockCommandDecoder.m:196:         ,@AUG_PARAM_ENABLE_KEY_ONE_TOUCH        :@"AUG_PARAM_ENABLE_KEY_ONE_TOUCH" 
Pods/AugustLockComm/AugLockCommandDecoder.m:197:         ,@AUG_PARAM_KPD_NUM_FAILED              :@"AUG_PARAM_KPD_NUM_FAILED"
Pods/AugustLockComm/AugLockCommandDecoder.m:198:         ,@AUG_PARAM_KPD_TIME_FAILED             :@"AUG_PARAM_KPD_TIME_FAILED"
Pods/AugustLockComm/AugLockCommandDecoder.m:199:         ,@AUG_PARAM_KPD_TIMEOUT                 :@"AUG_PARAM_KPD_TIMEOUT"
Pods/AugustLockComm/AugLockCommandDecoder.m:200:         ,@AUG_PARAM_KPD_BATTERY                 :@"AUG_PARAM_KPD_BATTERY"
Pods/AugustLockComm/AugLockCommandDecoder.m:201:         ,@AUG_PARAM_BLE_INACTIVITY_TIMEOUT      :@"AUG_PARAM_BLE_INACTIVITY_TIMEOUT"
Pods/AugustLockComm/AugLockCommandDecoder.m:202:         ,@AUG_PARAM_HOMEKIT_ADVT_ENABLED        :@"AUG_PARAM_HOMEKIT_ADVT_ENABLED"
Pods/AugustLockComm/AugLockCommandDecoder.m:203:         ,@AUG_PARAM_KPD_PINH                    :@"AUG_PARAM_KPD_PINH"
Pods/AugustLockComm/AugLockCommandDecoder.m:204:         ,@AUG_PARAM_KPD_PINL                    :@"AUG_PARAM_KPD_PINL"
Pods/AugustLockComm/AugLockCommandDecoder.m:205:         ,@AUG_PARAM_HOMEKIT_PAIRING_STATE       :@"AUG_PARAM_HOMEKIT_PAIRING_STATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:206:         ,@AUG_PARAM_BCM_REBOOT_PERIOD           :@"AUG_PARAM_BCM_REBOOT_PERIOD"
Pods/AugustLockComm/AugLockCommandDecoder.m:210:                            @UNITY_PARAM_INSIDE_LED                :@"UNITY_PARAM_INSIDE_LED"
Pods/AugustLockComm/AugLockCommandDecoder.m:211:                             ,@UNITY_PARAM_LANGUAGE                  :@"UNITY_PARAM_LANGUAGE"
Pods/AugustLockComm/AugLockCommandDecoder.m:212:                             ,@UNITY_PARAM_ONE_TOUCH_LOCKING         :@"UNITY_PARAM_ONE_TOUCH_LOCKING"
Pods/AugustLockComm/AugLockCommandDecoder.m:213:                             ,@UNITY_PARAM_AUDIO_VOLUME              :@"UNITY_PARAM_AUDIO_VOLUME"
Pods/AugustLockComm/AugLockCommandDecoder.m:214:                             ,@UNITY_PARAM_OPERATING_MODE              :@"UNITY_PARAM_OPERATING_MODE"
Pods/AugustLockComm/AugLockCommandDecoder.m:215:                             ,@UNITY_PARAM_SHUTDOWN_TIME              :@"UNITY_PARAM_SHUTDOWN_TIME"
Pods/AugustLockComm/AugLockCommandDecoder.m:216:                             ,@UNITY_PARAM_WRONG_CODE_LIMIT              :@"UNITY_PARAM_WRONG_CODE_LIMIT"
Pods/AugustLockComm/AugLockCommandDecoder.m:220:        @{@AUG_STAT_STM32_FIRMWARE      :@"AUG_STAT_STM32_FIRMWARE"
Pods/AugustLockComm/AugLockCommandDecoder.m:221:         ,@AUG_STAT_HW_VERSION          :@"AUG_STAT_HW_VERSION"
Pods/AugustLockComm/AugLockCommandDecoder.m:222:         ,@AUG_STAT_LOCK_STATE          :@"AUG_STAT_LOCK_STATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:223:         ,@AUG_STAT_CURRENT_ANGLE       :@"AUG_STAT_CURRENT_ANGLE"
Pods/AugustLockComm/AugLockCommandDecoder.m:224:         ,@AUG_STAT_TARGET_ANGLE        :@"AUG_STAT_TARGET_ANGLE"
Pods/AugustLockComm/AugLockCommandDecoder.m:225:         ,@AUG_STAT_BATTERY_LEVEL       :@"AUG_STAT_BATTERY_LEVEL"
Pods/AugustLockComm/AugLockCommandDecoder.m:226:         ,@AUG_STAT_LED_STATE           :@"AUG_STAT_LED_STATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:227:         ,@AUG_STAT_AUDIO_STATE         :@"AUG_STAT_AUDIO_STATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:228:         ,@AUG_STAT_LOCK_EVENTS         :@"AUG_STAT_LOCK_EVENTS"
Pods/AugustLockComm/AugLockCommandDecoder.m:229:         ,@AUG_STAT_LOCK_EVENTS_UNREAD  :@"AUG_STAT_LOCK_EVENTS_UNREAD"
Pods/AugustLockComm/AugLockCommandDecoder.m:230:         ,@AUG_STAT_RTC                 :@"AUG_STAT_RTC"
Pods/AugustLockComm/AugLockCommandDecoder.m:231:         ,@AUG_STAT_TBD                 :@"AUG_STAT_TBD"
Pods/AugustLockComm/AugLockCommandDecoder.m:232:         ,@AUG_STAT_SUCCESSES           :@"AUG_STAT_SUCCESSES"
Pods/AugustLockComm/AugLockCommandDecoder.m:233:         ,@AUG_STAT_TBD1                :@"AUG_STAT_TBD1"
Pods/AugustLockComm/AugLockCommandDecoder.m:234:         ,@AUG_STAT_HW_TEMP             :@"AUG_STAT_HW_TEMP"
Pods/AugustLockComm/AugLockCommandDecoder.m:235:         ,@AUG_STAT_BATTERY_VOLTAGE     :@"AUG_STAT_BATTERY_VOLTAGE"
Pods/AugustLockComm/AugLockCommandDecoder.m:236:         ,@AUG_STAT_CURRENT_HISTORY0    :@"AUG_STAT_CURRENT_HISTORY0"
Pods/AugustLockComm/AugLockCommandDecoder.m:237:         ,@AUG_STAT_CURRENT_HISTORY1    :@"AUG_STAT_CURRENT_HISTORY1"
Pods/AugustLockComm/AugLockCommandDecoder.m:238:         ,@AUG_STAT_CURRENT_HISTORY2    :@"AUG_STAT_CURRENT_HISTORY2"
Pods/AugustLockComm/AugLockCommandDecoder.m:239:         ,@AUG_STAT_CURRENT_HISTORY3    :@"AUG_STAT_CURRENT_HISTORY3"
Pods/AugustLockComm/AugLockCommandDecoder.m:240:         ,@AUG_STAT_CURRENT_HISTORY4    :@"AUG_STAT_CURRENT_HISTORY4"
Pods/AugustLockComm/AugLockCommandDecoder.m:241:         ,@AUG_STAT_CURRENT_HISTORY5    :@"AUG_STAT_CURRENT_HISTORY5"
Pods/AugustLockComm/AugLockCommandDecoder.m:242:         ,@AUG_STAT_CURRENT_HISTORY6    :@"AUG_STAT_CURRENT_HISTORY6"
Pods/AugustLockComm/AugLockCommandDecoder.m:243:         ,@AUG_STAT_CURRENT_HISTORY7    :@"AUG_STAT_CURRENT_HISTORY7"
Pods/AugustLockComm/AugLockCommandDecoder.m:244:         ,@AUG_STAT_CURRENT_HISTORY8    :@"AUG_STAT_CURRENT_HISTORY8"
Pods/AugustLockComm/AugLockCommandDecoder.m:245:         ,@AUG_STAT_CURRENT_HISTORY9    :@"AUG_STAT_CURRENT_HISTORY9"
Pods/AugustLockComm/AugLockCommandDecoder.m:246:         ,@AUG_STAT_RSSI_HISTORY0       :@"AUG_STAT_RSSI_HISTORY0"
Pods/AugustLockComm/AugLockCommandDecoder.m:247:         ,@AUG_STAT_RSSI_HISTORY1       :@"AUG_STAT_RSSI_HISTORY1"
Pods/AugustLockComm/AugLockCommandDecoder.m:248:         ,@AUG_STAT_RSSI_HISTORY2       :@"AUG_STAT_RSSI_HISTORY2"
Pods/AugustLockComm/AugLockCommandDecoder.m:249:         ,@AUG_STAT_RSSI_HISTORY3       :@"AUG_STAT_RSSI_HISTORY3"
Pods/AugustLockComm/AugLockCommandDecoder.m:250:         ,@AUG_STAT_RSSI_HISTORY4       :@"AUG_STAT_RSSI_HISTORY4"
Pods/AugustLockComm/AugLockCommandDecoder.m:251:         ,@AUG_STAT_MEMS_X              :@"AUG_STAT_MEMS_X"
Pods/AugustLockComm/AugLockCommandDecoder.m:252:         ,@AUG_STAT_MEMS_Y              :@"AUG_STAT_MEMS_Y"
Pods/AugustLockComm/AugLockCommandDecoder.m:253:         ,@AUG_STAT_MEMS_Z              :@"AUG_STAT_MEMS_Z"
Pods/AugustLockComm/AugLockCommandDecoder.m:254:         ,@AUG_STAT_MOTOR               :@"AUG_STAT_MOTOR"
Pods/AugustLockComm/AugLockCommandDecoder.m:255:         ,@AUG_STAT_COULOMB_COUNT_L     :@"AUG_STAT_COULOMB_COUNT_L"
Pods/AugustLockComm/AugLockCommandDecoder.m:256:         ,@AUG_STAT_COULOMB_COUNT_H     :@"AUG_STAT_COULOMB_COUNT_H"
Pods/AugustLockComm/AugLockCommandDecoder.m:257:         ,@AUG_STAT_BATTERY_RUNNING     :@"AUG_STAT_BATTERY_RUNNING"
Pods/AugustLockComm/AugLockCommandDecoder.m:258:         ,@AUG_STAT_OTA_ACK             :@"AUG_STAT_OTA_ACK"
Pods/AugustLockComm/AugLockCommandDecoder.m:259:         ,@AUG_STAT_BAT_LEVEL           :@"AUG_STAT_BAT_LEVEL"
Pods/AugustLockComm/AugLockCommandDecoder.m:260:         ,@AUG_STAT_ACCEL               :@"AUG_STAT_ACCEL"
Pods/AugustLockComm/AugLockCommandDecoder.m:261:         ,@AUG_STAT_GIT_HASH            :@"AUG_STAT_GIT_HASH"
Pods/AugustLockComm/AugLockCommandDecoder.m:262:         ,@AUG_STAT_BUILD_DATE          :@"AUG_STAT_BUILD_DATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:263:         ,@AUG_STAT_SELF_CHECKSUM       :@"AUG_STAT_SELF_CHECKSUM"
Pods/AugustLockComm/AugLockCommandDecoder.m:264:         ,@AUG_STAT_ARM_VERSION         :@"AUG_STAT_ARM_VERSION"
Pods/AugustLockComm/AugLockCommandDecoder.m:265:         ,@AUG_STAT_DOOR_STATE          :@"AUG_STAT_DOOR_STATE"
Pods/AugustLockComm/AugLockCommandDecoder.m:266:         ,@AUG_STAT_ZWAVE_VERSION       :@"AUG_STAT_ZWAVE_VERSION"
Pods/AugustLockComm/AugLockCommandDecoder.m:270:        @{@BAT_Unknown                  : @"BAT_Unknown"
Pods/AugustLockComm/AugLockCommandDecoder.m:271:         ,@BAT_NiMH                     : @"BAT_NiMH"
Pods/AugustLockComm/AugLockCommandDecoder.m:272:         ,@BAT_Lithium                  : @"BAT_Lithium"
Pods/AugustLockComm/AugLockCommandDecoder.m:273:         ,@BAT_Alkaline                 : @"BAT_Alkaline"
Pods/AugustLockComm/AugLockCommandDecoder.m:274:         ,@BAT_NiCd                     : @"BAT_NiCd"
Pods/AugustLockComm/AugLockCommandDecoder.m:278:        @{@kAugLockCommandTypeEncrypted  : @"kAugLockCommandTypeEncrypted"
Pods/AugustLockComm/AugLockCommandDecoder.m:279:         ,@kAugLockCommandTypeIVInit4AES : @"kAugLockCommandTypeIVInit4AES"
Pods/AugustLockComm/AugLockCommandDecoder.m:280:         ,@kAugLockCommandTypeClearText  : @"kAugLockCommandTypeClearText"
Pods/AugustLockComm/AugLockCommandDecoder.m:283:        @{@Op_DoorStateChanged :      @"Op_DoorStateChanged"
Pods/AugustLockComm/AugLockCommandDecoder.m:284:         ,@Op_DoorManualStateChange : @"Op_DoorManualStateChange"
Pods/AugustLockComm/AugLockCommandDecoder.m:285:         ,@Op_KnockReceived :         @"Op_KnockReceived"
Pods/AugustLockComm/AugLockCommandDecoder.m:286:         ,@Op_BluetoothReceived :     @"Op_BluetoothReceived"
Pods/AugustLockComm/AugLockCommandDecoder.m:287:         ,@Op_Anomaly :               @"Op_Anomaly"
Pods/AugustLockComm/AugLockCommandDecoder.m:288:         ,@Op_AutoRelock :            @"Op_AutoRelock"
Pods/AugustLockComm/AugLockCommandDecoder.m:289:         ,@Op_AutoRetry :             @"Op_AutoRetry"
Pods/AugustLockComm/AugLockCommandDecoder.m:290:         ,@Op_OverTemp :              @"Op_OverTemp"
Pods/AugustLockComm/AugLockCommandDecoder.m:291:         ,@Op_BurnIn :                @"Op_BurnIn"
Pods/AugustLockComm/AugLockCommandDecoder.m:295:        @{@kAugLockState_Init                  :@"kAugLockState_Init"
Pods/AugustLockComm/AugLockCommandDecoder.m:296:         ,@kAugLockState_Calibrating           :@"kAugLockState_Calibrating"
Pods/AugustLockComm/AugLockCommandDecoder.m:297:         ,@kAugLockState_Unlocking             :@"kAugLockState_Unlocking"
Pods/AugustLockComm/AugLockCommandDecoder.m:298:         ,@kAugLockState_Unlocked              :@"kAugLockState_Unlocked"
Pods/AugustLockComm/AugLockCommandDecoder.m:299:         ,@kAugLockState_Locking               :@"kAugLockState_Locking"
Pods/AugustLockComm/AugLockCommandDecoder.m:300:         ,@kAugLockState_Locked                :@"kAugLockState_Locked"
Pods/AugustLockComm/AugLockCommandDecoder.m:301:         ,@kAugLockState_PolDiscovery          :@"kAugLockState_PolDiscovery"
Pods/AugustLockComm/AugLockCommandDecoder.m:302:         ,@kAugLockState_UnknownStaticPosition :@"kAugLockState_UnknownStaticPosition"
Pods/AugustLockComm/AugLockCommandDecoder.m:306:    @{@kAugDoorState_Init               :@"kAugDoorState_Init"
Pods/AugustLockComm/AugLockCommandDecoder.m:307:       ,@kAugDoorState_Closed           :@"kAugDoorState_Closed"
Pods/AugustLockComm/AugLockCommandDecoder.m:308:       ,@kAugDoorState_Ajar             :@"kAugDoorState_Ajar"
Pods/AugustLockComm/AugLockCommandDecoder.m:309:       ,@kAugDoorState_Open             :@"kAugDoorState_Open"
Pods/AugustLockComm/AugLockCommandDecoder.m:310:       ,@kAugDoorState_Unknown          :@"kAugDoorState_Unknown"
Pods/AugustLockComm/AugLockCommandDecoder.m:314:        @{@Notif_BatteryLow                    :@"Notif_BatteryLow"
Pods/AugustLockComm/AugLockCommandDecoder.m:315:         ,@Notif_MotorFailure                  :@"Notif_MotorFailure"
Pods/AugustLockComm/AugLockCommandDecoder.m:316:         ,@Notif_MotorJammed                   :@"Notif_MotorJammed"
Pods/AugustLockComm/AugLockCommandDecoder.m:317:         ,@Notif_AccelerometerMeasurementFault :@"Notif_AccelerometerMeasurementFault"
Pods/AugustLockComm/AugLockCommandDecoder.m:318:         ,@Notif_AccelerometerI2C_Fault        :@"Notif_AccelerometerI2C_Fault"
Pods/AugustLockComm/AugLockCommandDecoder.m:319:         ,@Notif_AccelerometerSelfTest_Fault   :@"Notif_AccelerometerSelfTest_Fault"
Pods/AugustLockComm/AugLockCommandDecoder.m:320:         ,@Notif_BLE_I2C_Fault                 :@"Notif_BLE_I2C_Fault"
Pods/AugustLockComm/AugLockCommandDecoder.m:321:         ,@Notif_CalibrationStart              :@"Notif_CalibrationStart"
Pods/AugustLockComm/AugLockCommandDecoder.m:322:         ,@Notif_CalibrationSuccessCW          :@"Notif_CalibrationSuccessCW"
Pods/AugustLockComm/AugLockCommandDecoder.m:323:         ,@Notif_CalibrationSuccessCCW         :@"Notif_CalibrationSuccessCCW"
Pods/AugustLockComm/AugLockCommandDecoder.m:324:         ,@Notif_CalibrationTimeout            :@"Notif_CalibrationTimeout"
Pods/AugustLockComm/AugLockCommandDecoder.m:325:         ,@Notif_OverTemperatureWarning        :@"Notif_OverTemperatureWarning"
Pods/AugustLockComm/AugLockCommandDecoder.m:326:         ,@Notif_OverTemperatureAlarm          :@"Notif_OverTemperatureAlarm"
Pods/AugustLockComm/AugLockCommandDecoder.m:327:         ,@Notif_LockSuccess                   :@"Notif_LockSuccess"
Pods/AugustLockComm/AugLockCommandDecoder.m:328:         ,@Notif_LockFailure                   :@"Notif_LockFailure"
Pods/AugustLockComm/AugLockCommandDecoder.m:329:         ,@Notif_UnlockSuccess                 :@"Notif_UnlockSuccess"
Pods/AugustLockComm/AugLockCommandDecoder.m:330:         ,@Notif_UnlockFailure                 :@"Notif_UnlockFailure"
Pods/AugustLockComm/AugLockCommandDecoder.m:331:         ,@Notif_WatchdogTripped               :@"Notif_WatchdogTripped"
Pods/AugustLockComm/AugLockCommandDecoder.m:335:        @{@AUG_System_StatusLOW_BATTERY       :@"AUG_System_StatusLOW_BATTERY"
Pods/AugustLockComm/AugLockCommandDecoder.m:336:         ,@AUG_System_StatusOVER_TEMP_WARNING :@"AUG_System_StatusOVER_TEMP_WARNING"
Pods/AugustLockComm/AugLockCommandDecoder.m:337:         ,@AUG_System_StatusOVER_TEMP_ALARM   :@"AUG_System_StatusOVER_TEMP_ALARM"
Pods/AugustLockComm/AugLockCommandDecoder.m:352:    NSString *magicString           = [NSString stringWithFormat:@"0x%X", packet->header.magic];
Pods/AugustLockComm/AugLockCommandDecoder.m:353:    NSString *indexString           = [NSString stringWithFormat:@"0x%X", packet->header.index];
Pods/AugustLockComm/AugLockCommandDecoder.m:354:    NSString *checkSumString        = [NSString stringWithFormat:@"0x%x", packet->header.checksum];
Pods/AugustLockComm/AugLockCommandDecoder.m:359:        [headerDict setObject:packetTypeString   forKey:@"Packet Type"];
Pods/AugustLockComm/AugLockCommandDecoder.m:362:        [headerDict setObject:magicString        forKey:@"magic"];
Pods/AugustLockComm/AugLockCommandDecoder.m:365:        [headerDict setObject:commandName        forKey:@"command"];
Pods/AugustLockComm/AugLockCommandDecoder.m:368:        [headerDict setObject:indexString        forKey:@"index"];
Pods/AugustLockComm/AugLockCommandDecoder.m:371:        [headerDict setObject:checkSumString     forKey:@"checksum"];
Pods/AugustLockComm/AugLockCommandDecoder.m:375:        [dict setObject:datagramTypeString forKey:@"type"];
Pods/AugustLockComm/AugLockCommandDecoder.m:378:        [dict setObject:headerDict forKey:@"header"];
Pods/AugustLockComm/AugLockCommandDecoder.m:400:    if (nil == opCodeString) opCodeString = [NSString stringWithFormat:@"bogus opcode: 0x%x", packet0->opCode];
Pods/AugustLockComm/AugLockCommandDecoder.m:401:    if (nil == currentLockStateString) currentLockStateString = [NSString stringWithFormat:@"bogus lock state:  0x%x", packet0->currentLockState];
Pods/AugustLockComm/AugLockCommandDecoder.m:403:    [eventDictionary setObject:[timeStamp description] forKey:@"timeStamp"];
Pods/AugustLockComm/AugLockCommandDecoder.m:404:    [eventDictionary setObject:opCodeString forKey:@"opCode"];
Pods/AugustLockComm/AugLockCommandDecoder.m:405:    [eventDictionary setObject:currentLockStateString forKey:@"currentLockState"];
Pods/AugustLockComm/AugLockCommandDecoder.m:409:           forKey:@"lastKeyIndex"];
Pods/AugustLockComm/AugLockCommandDecoder.m:412:            NSString *key = [NSString stringWithFormat:@"RSSI[%d]", i];
Pods/AugustLockComm/AugLockCommandDecoder.m:418:    [dict setObject:eventDictionary forKey:@"LockEventPacket0"];
Pods/AugustLockComm/AugLockCommandDecoder.m:429:    NSString *targetAngularPositionString = [NSString stringWithFormat:@"%d", packet1->targetAngularPosition];
Pods/AugustLockComm/AugLockCommandDecoder.m:430:    NSString *coulombCounterString = [NSString stringWithFormat:@"%d uC", CFSwapInt32LittleToHost(packet1->coulombCounter) << 8];
Pods/AugustLockComm/AugLockCommandDecoder.m:431:    NSString *currentAndgularPositionString = [NSString stringWithFormat:@"%d", CFSwapInt16LittleToHost(packet1->currentAngularPosition)];
Pods/AugustLockComm/AugLockCommandDecoder.m:432:    [eventDictionary setObject:currentAndgularPositionString forKey:@"currentAngularPostion"];
Pods/AugustLockComm/AugLockCommandDecoder.m:434:    [eventDictionary setObject:targetAngularPositionString forKey:@"targetAngularPosition"];
Pods/AugustLockComm/AugLockCommandDecoder.m:435:    [eventDictionary setObject:coulombCounterString forKey:@"coulombCounter"];
Pods/AugustLockComm/AugLockCommandDecoder.m:437:        NSString *value = (0xffff == packet1->currentSamples[i]) ? @"unused" : [NSString stringWithFormat:@"%d mA", CFSwapInt16LittleToHost(packet1->currentSamples[i])];
Pods/AugustLockComm/AugLockCommandDecoder.m:438:        NSString *key = [NSString stringWithFormat:@"currentSamples[%d]", i];
Pods/AugustLockComm/AugLockCommandDecoder.m:442:    [dict setObject:eventDictionary forKey:@"LockEventPacket1"];
Pods/AugustLockComm/AugLockCommandDecoder.m:453:        NSString *key = [NSString stringWithFormat:@"currentSamples[%d]", i + 2];
Pods/AugustLockComm/AugLockCommandDecoder.m:454:        NSString *value = (0xffff == packet2->currentSamples[i]) ? @"unused" : [NSString stringWithFormat:@"%d mA", CFSwapInt16LittleToHost(packet2->currentSamples[i])];
Pods/AugustLockComm/AugLockCommandDecoder.m:459:    [dict setObject:eventDictionary forKey:@"LockEventPacket2"];
Pods/AugustLockComm/AugLockCommandDecoder.m:469:    NSString *batteryLevelString = [NSString stringWithFormat:@"%d mV", CFSwapInt16LittleToHost(packet3->batteryLevel)];
Pods/AugustLockComm/AugLockCommandDecoder.m:470:    NSString *currentSampleBackoffString = [NSString stringWithFormat:@"%d mA", CFSwapInt16LittleToHost(packet3->currentSampleBackoff)];
Pods/AugustLockComm/AugLockCommandDecoder.m:472:        NSString *value = (0xffff == packet3->currentSamples[i]) ? @"unused" : [NSString stringWithFormat:@"%d mA", CFSwapInt16LittleToHost(packet3->currentSamples[i])];
Pods/AugustLockComm/AugLockCommandDecoder.m:473:        NSString *key = [NSString stringWithFormat:@"currentSamples[%d]", i + 7];
Pods/AugustLockComm/AugLockCommandDecoder.m:477:    [eventDictionary setObject:batteryLevelString forKey:@"batteryLevel"];
Pods/AugustLockComm/AugLockCommandDecoder.m:478:    [eventDictionary setObject:currentSampleBackoffString forKey:@"curentSampleBackoff"];
Pods/AugustLockComm/AugLockCommandDecoder.m:480:    [dict setObject:eventDictionary forKey:@"LockEventPacket3"];
Pods/AugustLockComm/AugLockCommandDecoder.m:524:        NSObject *notificationEventValue = (notificationEventIndex <= Notif_MAX) ? [self.notificationEventDictionary objectForKey:[NSNumber numberWithInt:notificationEventIndex]] : @"Bogus Event";
Pods/AugustLockComm/AugLockCommandDecoder.m:527:        NSObject *currentLockStateValue = (lockState <= kAugLockState_MAX) ? [self.lockStateDictionary objectForKey:[NSNumber numberWithUnsignedChar:lockState]] : @"Bogus Lock State";
Pods/AugustLockComm/AugLockCommandDecoder.m:529:        [notificationDict setObject:[NSNumber numberWithUnsignedLong:event0->timeStamp ] forKey:@"timeStamp"];
Pods/AugustLockComm/AugLockCommandDecoder.m:530:        [notificationDict setObject:notificationEventValue forKey:@"notificationEvent"];
Pods/AugustLockComm/AugLockCommandDecoder.m:531:        [notificationDict setObject:batterySOC forKey:@"batterySOC"];
Pods/AugustLockComm/AugLockCommandDecoder.m:532:        [notificationDict setObject:currentLockStateValue forKey:@"currentLockState"];
Pods/AugustLockComm/AugLockCommandDecoder.m:533:        [notificationDict setObject:[NSNumber numberWithUnsignedLong:event0->arg0] forKey:@"arg0"];
Pods/AugustLockComm/AugLockCommandDecoder.m:540:        [notificationDict setObject:[NSNumber numberWithUnsignedLong:event1->arg1] forKey:@"arg1"];
Pods/AugustLockComm/AugLockCommandDecoder.m:545:    [dict setObject:@"Bogus Packet Index" forKey:@"notificationEvent"];
Pods/AugustLockComm/AugLockCommandDecoder.m:550:    [dict setObject:notificationDict forKey:@"notificationEvent"];
Pods/AugustLockComm/AugLockCommandDecoder.m:573:            valueString = [NSString stringWithFormat:@"0x%x", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:576:            valueString = (0 == value) ? @"idle" : @"playing";
Pods/AugustLockComm/AugLockCommandDecoder.m:580:            valueString = [NSString stringWithFormat:@"%.1f C", value/100.f];
Pods/AugustLockComm/AugLockCommandDecoder.m:584:            valueString = [NSString stringWithFormat:@"%d mV", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:598:                valueString = @"unused";
Pods/AugustLockComm/AugLockCommandDecoder.m:600:                valueString = [NSString stringWithFormat:@"%d mA", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:606:            valueString = [NSString stringWithFormat:@"%08x", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:610:            valueString = [NSString stringWithFormat:@"%x", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:634:            valueString = [NSString stringWithFormat:@"%d", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:639:            valueString = [NSString stringWithFormat:@"%x", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:645:                valueString = @"undefined";
Pods/AugustLockComm/AugLockCommandDecoder.m:649:                valueString = [NSString stringWithFormat:@"%d.%d.%d", (unsignedValue >> 16), ((unsignedValue & 0xff00) >> 8), (unsignedValue & 0xff)];
Pods/AugustLockComm/AugLockCommandDecoder.m:655:            keyStr = [NSString stringWithFormat:@"Unknown Status: %x", index];
Pods/AugustLockComm/AugLockCommandDecoder.m:656:            valueString = [NSString stringWithFormat:@"%x", value];
Pods/AugustLockComm/AugLockCommandDecoder.m:662:    [dict setObject:statusDict forKey:@"getStatus"];
Pods/AugustLockComm/AugLockCommandDecoder.m:749:            valueStr = [NSString stringWithFormat:@"%d", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:752:            valueStr = [NSString stringWithFormat:@"0x%x", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:757:    if (nil == keyStr) keyStr = @"unknown parameter";
Pods/AugustLockComm/AugLockCommandDecoder.m:761:    [dict setObject:getParamDict forKey:@"setParameter"];
Pods/AugustLockComm/AugLockCommandDecoder.m:863:            valueStr = [NSString stringWithFormat:@"%d", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:870:            valueStr = [NSString stringWithFormat:@"0x%x", resp->getParameter.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:874:    if (nil == keyStr) keyStr = [NSString stringWithFormat:@"unknown parameter: %d", resp->getParameter.index];
Pods/AugustLockComm/AugLockCommandDecoder.m:878:    [dict setObject:getParamDict forKey:@"getParameter"];
Pods/AugustLockComm/AugLockCommandDecoder.m:897:    [dict setObject:[NSNumber numberWithInt:error] forKey:@"error"];
Pods/AugustLockComm/AugLockCommandDecoder.m:908:    NSString *version = [NSString stringWithFormat:@"%i.%i.%i", major,minor, patch];
Pods/AugustLockComm/AugLockCommandDecoder.m:912:    [dict setObject:[NSNumber numberWithInt:command] forKey:@"command"];
Pods/AugustLockComm/AugLockCommandDecoder.m:913:    [dict setObject:version forKey:@"version"];
Pods/AugustLockComm/AugLockCommandDecoder.m:914:    [dict setObject:[NSNumber numberWithInt:result] forKey:@"result"];
Pods/AugustLockComm/AugLockCommandDecoder.m:915:    [dict setObject:[NSNumber numberWithInt:zwave_state] forKey:@"zWaveState"];
Pods/AugustLockComm/AugLockCommandDecoder.m:925:    NSString *deltaAngleString         = [NSString stringWithFormat:@"%.2f", resp->motorMove.deltaAngle/100.f];
Pods/AugustLockComm/AugLockCommandDecoder.m:926:    NSString *maxCurrentString         = [NSString stringWithFormat:@"%u mA", resp->motorMove.maxCurrent];
Pods/AugustLockComm/AugLockCommandDecoder.m:927:    NSString *maxTime                  = [NSString stringWithFormat:@"%u ms", resp->motorMove.maxTime];
Pods/AugustLockComm/AugLockCommandDecoder.m:929:    [motorMoveDict setObject:deltaAngleString forKey:@"deltaAngle"];
Pods/AugustLockComm/AugLockCommandDecoder.m:930:    [motorMoveDict setObject:maxCurrentString forKey:@"maxCurrent"];
Pods/AugustLockComm/AugLockCommandDecoder.m:931:    [motorMoveDict setObject:maxTime forKey: @"maxTime"];
Pods/AugustLockComm/AugLockCommandDecoder.m:933:    [dict setObject:motorMoveDict forKey:@"motorMove"];    
Pods/AugustLockComm/AugLockCommandDecoder.m:952:    [dict setObject:[NSNumber numberWithInt:error] forKey:@"error"];
Pods/AugustLockComm/AugLockCommandDecoder.m:959:    [dict setObject:[NSNumber numberWithInt:error] forKey:@"error"];
Pods/AugustLockComm/AugLockCommandDecoder.m:971:    [dict setObject:[NSNumber numberWithInt:error] forKey:@"error"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1013:    [otaQueryStatusDict setObject:bitmap forKey:@"bitmap"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1014:    [otaQueryStatusDict setObject:crc32 forKey:@"crc32"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1016:    [dict setObject:otaQueryStatusDict forKey:@"otaStatusBitmap"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1028:    [otaWriteToSliceDict setObject:data forKey:@"data"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1030:    [dict setObject:otaWriteToSliceDict forKey:@"otaWriteToSlice"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1043:    [otaQuerySliceDict setObject:assetID  forKey:@"assetID"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1044:    [otaQuerySliceDict setObject:length   forKey:@"length"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1045:    [otaQuerySliceDict setObject:checksum forKey:@"checksum"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1047:    [dict setObject:otaQuerySliceDict forKey:@"otaQuerySlice"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1063:    [otaCreateAssetDict setObject:flags    forKey:@"flags"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1064:    [otaCreateAssetDict setObject:assetID  forKey:@"assetID"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1065:    [otaCreateAssetDict setObject:length   forKey:@"lenght"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1066:    [otaCreateAssetDict setObject:crc32    forKey:@"crc32"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1068:    [dict setObject:otaCreateAssetDict forKey:@"otaCreateAsset"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1082:    [otaAssetInfoDict setObject:flags   forKey:@"flags"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1083:    [otaAssetInfoDict setObject:assetID forKey:@"assetID"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1084:    [otaAssetInfoDict setObject:length  forKey:@"length"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1085:    [otaAssetInfoDict setObject:crc32   forKey:@"crc32"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1087:    [dict setObject:otaAssetInfoDict forKey:@"otaAssetInfo"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1102:    [otaDeleteAssetDict setObject:notAssetID forKey:@"notAssetID"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1103:    [otaDeleteAssetDict setObject:assetID    forKey:@"assetID"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1104:    [otaDeleteAssetDict setObject:length     forKey:@"length"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1105:    [otaDeleteAssetDict setObject:checksum   forKey:@"checksum"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1107:    [dict setObject:otaDeleteAssetDict forKey:@"otaDeleteAsset"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1124:    [otaErrorDict setObject:[self getUCPayloadFromPacket:packet] forKey:@"payload"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1126:    [dict setObject:otaErrorDict forKey:@"otaError"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1137:	[otaResetAssetStoreDict setObject:[self getUCPayloadFromPacket:packet] forKey:@"payload"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1139:	[dict setObject:otaResetAssetStoreDict forKey:@"otaResetAssetStore"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1154:    [otaSetAndModifyCurrentSliceDict setObject:bitmap forKey:@"bitmap"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1155:    [otaSetAndModifyCurrentSliceDict setObject:operation forKey:@"operation"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1182:            return [jsonObject objectForKey:@"payload"];
Pods/AugustLockComm/AugLockCommandDecoder.m:1347:    dict[@"firmwareVersion"] = [NSString stringWithFormat:@"%d.%d.0", firstDigit, secondDigit];
Pods/AugustLockComm/AugLockCommandDecoder.m:1350:    dict[@"hostModelID"] = [NSString stringWithFormat:@"%s", hostModelID];
Pods/AugustLockComm/AugLockCommandDecoder.m:1351:    dict[@"productID"] = @(lockInfo.productID);
Pods/AugustLockComm/AugLockCommandDecoder.m:1352:    dict[@"productTypeID"] = @(lockInfo.productTypeID);
Pods/AugustLockComm/AugLockCommandDecoder.m:1361:    dict[@"error_code"] = @(errorCode);
Pods/AugustLockComm/AugLockCommandDecoder.m:1375:        NSString *value = [NSString stringWithFormat:@"%d", param.value];
Pods/AugustLockComm/AugLockCommandDecoder.m:1383:            tempDict[@"error_code"] = @(param.error);
Pods/AugustLockComm/AugLockCommandDecoder.m:1395:    dict[@"response"] = responseArray;
Pods/AugustLockComm/AugLockCommandDecoder.m:1403:    dict[@"response"] = responseArray;
Pods/SocketRocket/SocketRocket/SRWebSocket.m:72:static NSString *const SRWebSocketAppendToSecKeyString = @"258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
Pods/SocketRocket/SocketRocket/SRWebSocket.m:145:NSString *const SRWebSocketErrorDomain = @"SRWebSocketErrorDomain";
Pods/SocketRocket/SocketRocket/SRWebSocket.m:146:NSString *const SRHTTPResponseErrorKey = @"HTTPResponseStatusCode";
Pods/SocketRocket/SocketRocket/SRWebSocket.m:312:    assert([scheme isEqualToString:@"ws"] || [scheme isEqualToString:@"http"] || [scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:314:    if ([scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]) {
Pods/SocketRocket/SocketRocket/SRWebSocket.m:388:    NSAssert(_readyState == SR_CONNECTING, @"Cannot call -(void)open on SRWebSocket more than once");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:397:                [self _failWithError:[NSError errorWithDomain:@"com.squareup.SocketRocket" code:504 userInfo:@{NSLocalizedDescriptionKey: @"Timeout Connecting to Server"}]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:447:        SRFastLog(@"Request failed with response code %d", responseCode);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:448:        [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2132 userInfo:@{NSLocalizedDescriptionKey:[NSString stringWithFormat:@"received bad response code from server %ld", (long)responseCode], SRHTTPResponseErrorKey:@(responseCode)}]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:453:        [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2133 userInfo:[NSDictionary dictionaryWithObject:[NSString stringWithFormat:@"Invalid Sec-WebSocket-Accept response"] forKey:NSLocalizedDescriptionKey]]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:461:            [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2133 userInfo:[NSDictionary dictionaryWithObject:[NSString stringWithFormat:@"Server specified Sec-WebSocket-Protocol that wasn't requested"] forKey:NSLocalizedDescriptionKey]]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:492:            SRFastLog(@"Finished reading headers %@", CFBridgingRelease(CFHTTPMessageCopyAllHeaderFields(_receivedHTTPHeaders)));
Pods/SocketRocket/SocketRocket/SRWebSocket.m:502:    SRFastLog(@"Connected");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:506:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Host"), (__bridge CFStringRef)(_url.port ? [NSString stringWithFormat:@"%@:%@", _url.host, _url.port] : _url.host));
Pods/SocketRocket/SocketRocket/SRWebSocket.m:533:        NSData *userAndPassword = [[NSString stringWithFormat:@"%@:%@", _url.user, _url.password] dataUsingEncoding:NSUTF8StringEncoding];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:543:        _basicAuthorizationString = [NSString stringWithFormat:@"Basic %@", userAndPasswordBase64Encoded];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:550:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Version"), (__bridge CFStringRef)[NSString stringWithFormat:@"%ld", (long)_webSocketVersion]);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:555:        CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Protocol"), (__bridge CFStringRef)[_requestedProtocols componentsJoinedByString:@", "]);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:613:            SRFastLog(@"Allowing connection to any root cert");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:638:                    NSLog(@"SocketRocket: %@ - this service type is deprecated in favor of using PushKit for VoIP control", networkServiceType);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:707:        SRFastLog(@"Closing with code %d reason %@", code, reason);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:765:            SRFastLog(@"Failing with error %@", error.localizedDescription);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:786:    NSAssert(self.readyState != SR_CONNECTING, @"Invalid State: Cannot call send: until connection is open");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:804:    NSAssert(self.readyState == SR_OPEN, @"Invalid State: Cannot call send: until connection is open");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:824:    SRFastLog(@"Received pong");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:834:    SRFastLog(@"Received message");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:880:    SRFastLog(@"Received close frame");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:884:        [self _closeWithProtocolError:@"Payload for close must be larger than 2 bytes"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:890:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Cannot have close code of %d", _closeCode]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:896:                [self _closeWithProtocolError:@"Close reason MUST be valid UTF-8"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:917:    SRFastLog(@"Trying to disconnect");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:944:                    [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:967:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Unknown opcode %ld", (long)opcode]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:985:        [self _closeWithProtocolError:@"Fragmented control frames not allowed"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:990:        [self _closeWithProtocolError:@"Control frames cannot have payloads larger than 126 bytes"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1068:            [self _closeWithProtocolError:@"Server used RSV bits"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1077:            [self _closeWithProtocolError:@"all data frames after the initial data frame must have opcode 0"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1082:            [self _closeWithProtocolError:@"cannot continue a message"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1097:            [self _closeWithProtocolError:@"Client must receive unmasked data"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1163:            [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2145 userInfo:[NSDictionary dictionaryWithObject:@"Error writing to stream" forKey:NSLocalizedDescriptionKey]]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1372:                        [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1431:    NSAssert([data isKindOfClass:[NSData class]] || [data isKindOfClass:[NSString class]], @"NSString or NSData");
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1437:        [self closeWithCode:SRStatusCodeMessageTooBig reason:@"Message too big"];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1530:                    NSDictionary *userInfo = @{ NSLocalizedDescriptionKey : @"Invalid server cert" };
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1531:                    [weakSelf _failWithError:[NSError errorWithDomain:@"org.lolrus.SocketRocket" code:23556 userInfo:userInfo]];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1551:                SRFastLog(@"NSStreamEventOpenCompleted %@", aStream);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1568:                SRFastLog(@"NSStreamEventErrorOccurred %@ %@", aStream, [[aStream streamError] copy]);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1579:                SRFastLog(@"NSStreamEventEndEncountered %@", aStream);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1594:                                    [self.delegate webSocket:self didCloseWithCode:SRStatusCodeGoingAway reason:@"Stream end encountered" wasClean:NO];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1605:                SRFastLog(@"NSStreamEventHasBytesAvailable %@", aStream);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1627:                SRFastLog(@"NSStreamEventHasSpaceAvailable %@", aStream);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1633:                SRFastLog(@"(default)  %@", aStream);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1712:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1721:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1726:    [NSURLProtocol setProperty:SR_SSLPinnedCertificates forKey:@"SR_SSLPinnedCertificates" inRequest:self];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1737:    if ([scheme isEqualToString:@"wss"]) {
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1738:        scheme = @"https";
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1739:    } else if ([scheme isEqualToString:@"ws"]) {
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1740:        scheme = @"http";
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1744:                         ([scheme isEqualToString:@"http"] && self.port.integerValue == 80) ||
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1745:                         ([scheme isEqualToString:@"https"] && self.port.integerValue == 443);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1748:        return [NSString stringWithFormat:@"%@://%@:%@", scheme, self.host, self.port];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1750:        return [NSString stringWithFormat:@"%@://%@", scheme, self.host];
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1767:    NSLog(@"[SR] %@", formattedString);
Pods/SocketRocket/SocketRocket/SRWebSocket.m:1848:        networkThread.name = @"com.squareup.SocketRocket.NetworkThread";
Pods/CocoaLumberjack/Classes/DDLog.h:75: *         DDLogVerbose(@"sprocket: %@", [sprocket description])
Pods/CocoaLumberjack/Classes/DDLog.h:122: * For example: DDLogWarn(@"%@: Unable to find thingy", THIS_FILE) -> @"MyViewController: Unable to find thingy"
Pods/CocoaLumberjack/Classes/DDLog.h:132: * For example: DDLogWarn(@"%@ - Requires non-nil strings", THIS_METHOD) -> @"setMake:model: requires non-nil strings"
Pods/CocoaLumberjack/Classes/DDLog.h:251: * DDLogError(@"oh no"); => gets forwarded to consoleLogger & fileLogger
Pods/CocoaLumberjack/Classes/DDLog.h:252: * DDLogInfo(@"hi");     => gets forwarded to consoleLogger only
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:169:    [m_codes_fg addObject:@"30m"];   // normal - black
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:170:    [m_codes_fg addObject:@"31m"];   // normal - red
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:171:    [m_codes_fg addObject:@"32m"];   // normal - green
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:172:    [m_codes_fg addObject:@"33m"];   // normal - yellow
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:173:    [m_codes_fg addObject:@"34m"];   // normal - blue
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:174:    [m_codes_fg addObject:@"35m"];   // normal - magenta
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:175:    [m_codes_fg addObject:@"36m"];   // normal - cyan
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:176:    [m_codes_fg addObject:@"37m"];   // normal - gray
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:177:    [m_codes_fg addObject:@"1;30m"]; // bright - darkgray
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:178:    [m_codes_fg addObject:@"1;31m"]; // bright - red
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:179:    [m_codes_fg addObject:@"1;32m"]; // bright - green
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:180:    [m_codes_fg addObject:@"1;33m"]; // bright - yellow
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:181:    [m_codes_fg addObject:@"1;34m"]; // bright - blue
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:182:    [m_codes_fg addObject:@"1;35m"]; // bright - magenta
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:183:    [m_codes_fg addObject:@"1;36m"]; // bright - cyan
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:184:    [m_codes_fg addObject:@"1;37m"]; // bright - white
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:186:    [m_codes_bg addObject:@"40m"];   // normal - black
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:187:    [m_codes_bg addObject:@"41m"];   // normal - red
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:188:    [m_codes_bg addObject:@"42m"];   // normal - green
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:189:    [m_codes_bg addObject:@"43m"];   // normal - yellow
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:190:    [m_codes_bg addObject:@"44m"];   // normal - blue
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:191:    [m_codes_bg addObject:@"45m"];   // normal - magenta
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:192:    [m_codes_bg addObject:@"46m"];   // normal - cyan
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:193:    [m_codes_bg addObject:@"47m"];   // normal - gray
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:194:    [m_codes_bg addObject:@"1;40m"]; // bright - darkgray
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:195:    [m_codes_bg addObject:@"1;41m"]; // bright - red
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:196:    [m_codes_bg addObject:@"1;42m"]; // bright - green
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:197:    [m_codes_bg addObject:@"1;43m"]; // bright - yellow
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:198:    [m_codes_bg addObject:@"1;44m"]; // bright - blue
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:199:    [m_codes_bg addObject:@"1;45m"]; // bright - magenta
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:200:    [m_codes_bg addObject:@"1;46m"]; // bright - cyan
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:201:    [m_codes_bg addObject:@"1;47m"]; // bright - white
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:255:    NSAssert([codes_fg count] == [codes_bg count], @"Invalid colors/codes array(s)");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:256:    NSAssert([codes_fg count] == [colors count],   @"Invalid colors/codes array(s)");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:589:        [m_codes_fg addObject:[NSString stringWithFormat:@"38;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:590:        [m_codes_bg addObject:[NSString stringWithFormat:@"48;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:641:                [m_codes_fg addObject:[NSString stringWithFormat:@"38;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:642:                [m_codes_bg addObject:[NSString stringWithFormat:@"48;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:657:        [m_codes_fg addObject:[NSString stringWithFormat:@"38;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:658:        [m_codes_bg addObject:[NSString stringWithFormat:@"48;5;%dm", index]];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:674:    NSAssert([codes_fg count] == [codes_bg count], @"Invalid colors/codes array(s)");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:675:    NSAssert([codes_fg count] == [colors count],   @"Invalid colors/codes array(s)");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:764:        NSLogVerbose(@"DDTTYLogger: %3lu : %.3f,%.3f,%.3f & %.3f,%.3f,%.3f = %.6f",
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:771:            NSLogVerbose(@"DDTTYLogger: New best index = %lu", (unsigned long)bestIndex);
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:807:        NSLogInfo(@"DDTTYLogger: isaColorTTY = %@", (isaColorTTY ? @"YES" : @"NO"));
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:808:        NSLogInfo(@"DDTTYLogger: isaColor256TTY: %@", (isaColor256TTY ? @"YES" : @"NO"));
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:809:        NSLogInfo(@"DDTTYLogger: isaXcodeColorTTY: %@", (isaXcodeColorTTY ? @"YES" : @"NO"));
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:837:            _appName = @"<UnnamedApp>";
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:855:        _processID = [NSString stringWithFormat:@"%i", (int)getpid()];
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:898:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:899:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:935:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:936:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:958:            NSLogInfo(@"DDTTYLogger: newColorProfile: %@", newColorProfile);
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:985:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:994:    NSAssert([(id < NSObject >) tag conformsToProtocol: @protocol(NSCopying)], @"Invalid tag");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1004:            NSLogInfo(@"DDTTYLogger: newColorProfile: %@", newColorProfile);
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1017:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1055:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1064:    NSAssert([(id < NSObject >) tag conformsToProtocol: @protocol(NSCopying)], @"Invalid tag");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1079:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1101:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1123:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1146:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1359:    return @"cocoa.lumberjack.ttyLogger";
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1397:            NSString *escapeSeq = @"\033[";
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1430:            NSString *escapeSeq = @"\033[";
Pods/CocoaLumberjack/Classes/DDTTYLogger.m:1472:            @"<DDTTYLoggerColorProfile: %p mask:%i ctxt:%ld fg:%u,%u,%u bg:%u,%u,%u fgCode:%@ bgCode:%@>",
Pods/CocoaLumberjack/Classes/DDASLLogger.m:61:    if ([logMessage->_fileName isEqualToString:@"DDASLLogCapture"]) {
Pods/CocoaLumberjack/Classes/DDASLLogger.m:95:                 @"Formatted euid is too long.");
Pods/CocoaLumberjack/Classes/DDASLLogger.m:97:                 @"Unhandled ASL log level.");
Pods/CocoaLumberjack/Classes/DDASLLogger.m:113:    return @"cocoa.lumberjack.aslLogger";
Pods/CocoaLumberjack/Classes/DDFileLogger.h:148: *    cy# [[NSBundle mainBundle] objectForInfoDictionaryKey:@"UIBackgroundModes"];
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:44:        _dateFormatString = @"yyyy-MM-dd HH:mm:ss:SSS";
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:55:        _replacements[@"com.apple.main-thread"] = @"main";
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:122:        NSString *key = @"DispatchQueueLogFormatter_NSDateFormatter";
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:158:            @"com.apple.root.low-priority",
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:159:            @"com.apple.root.default-priority",
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:160:            @"com.apple.root.high-priority",
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:161:            @"com.apple.root.low-overcommit-priority",
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:162:            @"com.apple.root.default-overcommit-priority",
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:163:            @"com.apple.root.high-overcommit-priority"
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:224:        return [NSString stringWithFormat:@"%@%s", queueThreadLabel, spaces];
Pods/CocoaLumberjack/Classes/Extensions/DDDispatchQueueLogFormatter.m:236:    return [NSString stringWithFormat:@"%@ [%@] %@", timestamp, queueThreadLabel, logMessage->_message];
Pods/CocoaLumberjack/Classes/CocoaLumberjack.h:54: * NSLog(@"Fatal error, no dohickey found!"); -> DDLogError(@"Fatal error, no dohickey found!");
Pods/CocoaLumberjack/Classes/DDTTYLogger.h:142: * static NSString *const PurpleTag = @"PurpleTag";
Pods/CocoaLumberjack/Classes/DDTTYLogger.h:159: * DDLogPurple(@"I'm a purple log message!");
Pods/CocoaLumberjack/Classes/DDLog.m:128:        NSLogDebug(@"DDLog: Using grand central dispatch");
Pods/CocoaLumberjack/Classes/DDLog.m:152:        NSLogDebug(@"DDLog: numProcessors = %@", @(_numProcessors));
Pods/CocoaLumberjack/Classes/DDLog.m:156:        NSString *notificationName = @"UIApplicationWillTerminateNotification";
Pods/CocoaLumberjack/Classes/DDLog.m:164:            notificationName = @"NSApplicationWillTerminateNotification";
Pods/CocoaLumberjack/Classes/DDLog.m:376:                                                                file:[NSString stringWithFormat:@"%s", file]
Pods/CocoaLumberjack/Classes/DDLog.m:377:                                                            function:[NSString stringWithFormat:@"%s", function]
Pods/CocoaLumberjack/Classes/DDLog.m:562:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:599:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:611:        NSLogDebug(@"DDLog: Request to remove logger which wasn't added");
Pods/CocoaLumberjack/Classes/DDLog.m:628:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:646:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:661:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:724:             @"This method should only be run on the logging thread/queue");
Pods/CocoaLumberjack/Classes/DDLog.m:908:        _threadID     = [[NSString alloc] initWithFormat:@"%x", pthread_mach_thread_np(pthread_self())];
Pods/CocoaLumberjack/Classes/DDLog.m:913:        NSUInteger dotLocation = [_fileName rangeOfString:@"." options:NSBackwardsSearch].location;
Pods/CocoaLumberjack/Classes/DDLog.m:921:            _queueLabel = [[NSString alloc] initWithFormat:@"%s", dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL)];
Pods/CocoaLumberjack/Classes/DDLog.m:927:            _queueLabel = [[NSString alloc] initWithFormat:@"%s", dispatch_queue_get_label(currentQueue)];
Pods/CocoaLumberjack/Classes/DDLog.m:929:            _queueLabel = @""; // iOS 6.x only
Pods/CocoaLumberjack/Classes/DDLog.m:1036:    // DDLogVerbose(@"log msg 1");
Pods/CocoaLumberjack/Classes/DDLog.m:1037:    // DDLogVerbose(@"log msg 2");
Pods/CocoaLumberjack/Classes/DDLog.m:1039:    // DDLogVerbose(@"log msg 3");
Pods/CocoaLumberjack/Classes/DDLog.m:1062:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDLog.m:1063:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDLog.m:1081:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDLog.m:1082:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAssertMacros.h:22:            DDLogError(@"%@", description);                                           \
Pods/CocoaLumberjack/Classes/DDAssertMacros.h:25:#define DDAssertCondition(condition) DDAssert(condition, @"Condition not satisfied: %s", #condition)
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:211:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:212:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:252:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:271:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:272:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:343:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:362:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:363:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:440:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:459:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:460:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:530:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:549:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:550:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDAbstractDatabaseLogger.m:577:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:96:        NSLogVerbose(@"DDFileLogManagerDefault: logsDirectory:\n%@", [self logsDirectory]);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:97:        NSLogVerbose(@"DDFileLogManagerDefault: sortedLogFileNames:\n%@", [self sortedLogFileNames]);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:106:    if ([theKey isEqualToString:@"maximumNumberOfLogFiles"] || [theKey isEqualToString:@"logFilesDiskQuota"]) {
Pods/CocoaLumberjack/Classes/DDFileLogger.m:158:        NSLogInfo(@"DDFileLogManagerDefault: Responding to configuration change: %@", keyPath);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:174:    NSLogVerbose(@"DDLogFileManagerDefault: deleteOldLogFiles");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:227:            NSLogInfo(@"DDLogFileManagerDefault: Deleting file: %@", logFileInfo.fileName);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:246:    NSString *logsDirectory = [baseDir stringByAppendingPathComponent:@"Logs"];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:252:    NSString *logsDirectory = [[basePath stringByAppendingPathComponent:@"Logs"] stringByAppendingPathComponent:appName];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:270:            NSLogError(@"DDFileLogManagerDefault: Error creating logsDirectory: %@", err);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:287:    BOOL hasProperSuffix = [fileName hasSuffix:@".log"];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:291:        NSUInteger lengthOfMiddle = fileName.length - appName.length - @".log".length;
Pods/CocoaLumberjack/Classes/DDFileLogger.m:298:            NSArray *components = [middle componentsSeparatedByString:@" "];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:308:                NSString *dateString = [NSString stringWithFormat:@"%@ %@", components[1], components[2]];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:326:    NSString *dateFormat = @"yyyy'-'MM'-'dd' 'HH'-'mm'";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:327:    NSString *key = [NSString stringWithFormat:@"logFileDateFormatter.%@", dateFormat];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:332:        [dateFormatter setLocale:[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"]];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:359:        NSString *theFileName = [fileName stringByReplacingOccurrencesOfString:@".archived"
Pods/CocoaLumberjack/Classes/DDFileLogger.m:360:                                                                    withString:@""];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:471:    return [NSString stringWithFormat:@"%@ %@.log", appName, formattedDate];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:490:            actualFileName = [actualFileName stringByAppendingFormat:@" %lu", (unsigned long)attempt];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:500:            NSLogVerbose(@"DDLogFileManagerDefault: Creating new log file: %@", actualFileName);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:540:        _appName = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleIdentifier"];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:547:            _appName = @"";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:579:            [_dateFormatter setDateFormat:@"yyyy/MM/dd HH:mm:ss:SSS"];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:589:    return [NSString stringWithFormat:@"%@  %@", dateAndTime, logMessage->_message];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:677:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:678:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:707:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:708:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:734:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:735:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:764:    NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:765:    NSAssert(![self isOnInternalLoggerQueue], @"MUST access ivar directly, NOT via self.* syntax.");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:795:    NSLogVerbose(@"DDFileLogger: scheduleTimerToRollLogFileDueToAge");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:797:    NSLogVerbose(@"DDFileLogger: logFileCreationDate: %@", logFileCreationDate);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:798:    NSLogVerbose(@"DDFileLogger: logFileRollingDate : %@", logFileRollingDate);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:847:        NSAssert(![self isOnGlobalLoggingQueue], @"Core architecture requirement failure");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:856:    NSLogVerbose(@"DDFileLogger: rollLogFileNow");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:887:        NSLogVerbose(@"DDFileLogger: Rolling log file due to age...");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:906:            NSLogVerbose(@"DDFileLogger: Rolling log file due to size (%qu)...", fileSize);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:964:                NSLogVerbose(@"DDFileLogger: Resuming logging with file %@", mostRecentLogFileInfo.fileName);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1008:                                                                          NSLogInfo(@"DDFileLogger: Current logfile was moved. Rolling it and creating a new one");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1042:            (![message hasSuffix:@"\n"])) {
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1043:            message = [message stringByAppendingString:@"\n"];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1056:                NSLogError(@"DDFileLogger.logMessage: %@", exception);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1059:                    NSLogError(@"DDFileLogger.logMessage: Too many exceptions -- will not log any more of them.");
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1073:    return @"cocoa.lumberjack.fileLogger";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1083:    NSString * const kDDXAttrArchivedName = @"archived";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1085:    NSString * const kDDXAttrArchivedName = @"lumberjack.log.archived";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1180:    return [@{ @"filePath": self.filePath ? : @"",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1181:               @"fileName": self.fileName ? : @"",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1182:               @"fileAttributes": self.fileAttributes ? : @"",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1183:               @"creationDate": self.creationDate ? : @"",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1184:               @"modificationDate": self.modificationDate ? : @"",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1185:               @"fileSize": @(self.fileSize),
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1186:               @"age": @(self.age),
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1187:               @"isArchived": @(self.isArchived) } description];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1254:        NSLogVerbose(@"DDLogFileInfo: Renaming file: '%@' -> '%@'", self.fileName, newFileName);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1260:            NSLogError(@"DDLogFileInfo: Error deleting archive (%@): %@", self.fileName, error);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1264:            NSLogError(@"DDLogFileInfo: Error renaming file (%@): %@", self.fileName, error);
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1295:    NSArray *components = [[self fileName] componentsSeparatedByString:@"."];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1324:    NSArray *components = [[self fileName] componentsSeparatedByString:@"."];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1335:    NSString *lastExt = @"";
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1352:            [newFileName appendFormat:@".%@", lastExt];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1358:    [newFileName appendFormat:@".%@", attrName];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1361:        [newFileName appendFormat:@".%@", lastExt];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1381:    NSArray *components = [[self fileName] componentsSeparatedByString:@"."];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1402:            [newFileName appendFormat:@".%@", attr];
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1429:        NSLogError(@"DDLogFileInfo: setxattr(%@, %@): error = %s",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1443:        NSLogError(@"DDLogFileInfo: removexattr(%@, %@): error = %s",
Pods/CocoaLumberjack/Classes/DDFileLogger.m:1513:    NSArray *backgroundModes = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"UIBackgroundModes"];
Pods/CocoaLumberjack/Classes/DDASLLogCapture.m:148:                                                               file:@"DDASLLogCapture"
Pods/libextobjc/extobjc/EXTADT.h:150:            [str appendString:@" }"]; \
Pods/libextobjc/extobjc/EXTADT.h:451:    [str appendFormat:@" { %@", ADT_CURRENT_PARAMETER_DESCRIPTION(CONS, PARAM, s, 0)]; \
Pods/libextobjc/extobjc/EXTADT.h:455:    [str appendFormat: @", %@", ADT_CURRENT_PARAMETER_DESCRIPTION(CONS, PARAM, s, metamacro_dec(INDEX))];
Pods/libextobjc/extobjc/EXTADT.h:556:    [NSString stringWithFormat:@"%@ = %@", \
Pods/libextobjc/extobjc/EXTADT.m:29:    [identifierCharacterSet addCharactersInString:@"$_"];
Pods/libextobjc/extobjc/EXTRuntimeExtensions.m:1001:        case 'v': return @"(void)";
Pods/libextobjc/extobjc/EXTRuntimeExtensions.m:1002:        case '*': return [NSString stringWithFormat:@"\"%s\"", bytes];
Pods/libextobjc/extobjc/EXTRuntimeExtensions.m:1010:                return @"(nil)";
Pods/libextobjc/extobjc/EXTRuntimeExtensions.m:1017:                return [NSString stringWithFormat:@"%p", ptr];
Pods/libextobjc/extobjc/EXTRuntimeExtensions.m:1019:                return @"(null)";
Pods/libextobjc/extobjc/NSInvocation+EXT.m:179:            NSLog(@"Unexpected array within method argument type code \"%s\", cannot set invocation argument!", type);
Pods/libextobjc/extobjc/NSInvocation+EXT.m:183:            NSLog(@"Unexpected bitfield within method argument type code \"%s\", cannot set invocation argument!", type);
Pods/libextobjc/extobjc/NSInvocation+EXT.m:187:            NSLog(@"Cannot get variable argument for a method that takes a struct argument!");
Pods/libextobjc/extobjc/NSInvocation+EXT.m:191:            NSLog(@"Cannot get variable argument for a method that takes a union argument!");
Pods/libextobjc/extobjc/NSInvocation+EXT.m:324:                NSLog(@"Pointer to unexpected type within method argument type code \"%s\", cannot set method invocation!", type);
Pods/libextobjc/extobjc/NSInvocation+EXT.m:334:                NSLog(@"Assuming method argument type code \"%s\" is a function pointer", type);
Pods/libextobjc/extobjc/NSInvocation+EXT.m:343:            NSLog(@"Unexpected method argument type code \"%s\", cannot set method invocation!", type);
Pods/libextobjc/extobjc/EXTSynthesize.h:30:		NSCAssert(property, @"Could not find property %s on class %@", # PROPERTY, cls); \
Pods/libextobjc/extobjc/EXTSynthesize.h:34:			NSLog(@"*** Could not copy property attributes for %@.%s", cls, # PROPERTY); \
Pods/libextobjc/extobjc/EXTSynthesize.h:38:		NSCAssert(!attributes->weak, @"@synthesizeAssociation does not support weak properties (%@.%s)", cls, # PROPERTY); \
Pods/libextobjc/extobjc/EXTSynthesize.h:54:				NSCAssert(NO, @"Unrecognized property memory management policy %i", (int)attributes->memoryManagementPolicy); \
Pods/libextobjc/extobjc/EXTSynthesize.h:66:			NSCAssert(NO, @"Could not add getter %s for property %@.%s", sel_getName(attributes->getter), cls, # PROPERTY); \
Pods/libextobjc/extobjc/EXTSynthesize.h:69:		if (!class_addMethod(cls, attributes->setter, imp_implementationWithBlock(setter), "v@:@")) { \
Pods/libextobjc/extobjc/EXTSynthesize.h:70:			NSCAssert(NO, @"Could not add setter %s for property %@.%s", sel_getName(attributes->setter), cls, # PROPERTY); \
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:20:// => @"lowercaseString.UTF8String"
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:23:// => @"version"
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:26:// => @"lowercaseString"
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:31: * component or argument (e.g., @"lowercaseString.UTF8String", @"version").
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:57: // => @"employees.firstName"
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:60: // => @"employees.firstName"
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:68:#define collectionKeypath3(PATH, COLLECTION_OBJECT, COLLECTION_PATH) ([[NSString stringWithFormat:@"%s.%s",keypath(PATH), keypath(COLLECTION_OBJECT, COLLECTION_PATH)] UTF8String])
Pods/libextobjc/extobjc/EXTKeyPathCoding.h:70:#define collectionKeypath4(OBJ, PATH, COLLECTION_OBJECT, COLLECTION_PATH) ([[NSString stringWithFormat:@"%s.%s",keypath(OBJ, PATH), keypath(COLLECTION_OBJECT, COLLECTION_PATH)] UTF8String])
Pods/GoogleWebRTC/Frameworks/frameworks/WebRTC.framework/Headers/RTCLogging.h:37:  [NSString stringWithFormat:@"(%@:%d %s): " format, \
Pods/mailcore2-ios/include/MailCore/MCOMessageBuilder.h:22:    [[builder header] setFrom:[MCOAddress addressWithDisplayName:@"Hoa V. DINH" mailbox:@"hoa@etpan.org"];
Pods/mailcore2-ios/include/MailCore/MCOMessageBuilder.h:23:    NSArray * to = [NSArray arrayWithObject:[MCOAddress addressWithDisplayName:@"Gael Roualland" mailbox:@"gael@etpan.org"]];
Pods/mailcore2-ios/include/MailCore/MCOMessageBuilder.h:25:    [[builder header] setSubject:@"A nice picture!"];
Pods/mailcore2-ios/include/MailCore/MCOMessageBuilder.h:26:    [builder setHTMLBody:@"<div>Here's the message I need to send.</div>"];
Pods/mailcore2-ios/include/MailCore/MCOMessageBuilder.h:27:    [builder addAttachment:[MCOAttachment attachmentWithContentsOfFile:@"/Users/foo/Pictures/image.jpg"]];
Pods/mailcore2-ios/include/MailCore/MCOConstants.h:242:#define MCOIMAPNamespacePersonal @"IMAPNamespacePersonal"
Pods/mailcore2-ios/include/MailCore/MCOConstants.h:243:#define MCOIMAPNamespaceOther @"IMAPNamespaceOther"
Pods/mailcore2-ios/include/MailCore/MCOConstants.h:244:#define MCOIMAPNamespaceShared @"IMAPNamespaceShared"
Pods/mailcore2-ios/include/MailCore/MCOConstants.h:322:#define MCOErrorDomain @"MCOErrorDomain"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:35:     MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchFrom:@"laura@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:44: MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchRecipient:@"ngan@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:53:    MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchTo:@"ngan@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:62: MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchCc:@"ngan@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:71: MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchBcc:@"ngan@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:80:     MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchSubject:@"airline"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:89:     MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchContent:@"meeting"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:98: MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchBody:@"building"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:125:     MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchHeader:@"List-Id" value:@"shoes"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:324: MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchGmailRaw:@"from:bill has:attachment filename:cal meeting schedule"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:334:     MCOIMAPSearchExpression * exprFrom = [MCOIMAPSearchExpression searchFrom:@"laura@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:335:     MCOIMAPSearchExpression * exprSubject = [MCOIMAPSearchExpression searchContent:@"meeting"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:345:     MCOIMAPSearchExpression * exprFrom = [MCOIMAPSearchExpression searchFrom:@"laura@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:346:     MCOIMAPSearchExpression * exprOtherFrom = [MCOIMAPSearchExpression searchRecipient:@"ngan@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSearchExpression.h:356: MCOIMAPSearchExpression * exprSubject = [MCOIMAPSearchExpression searchSubject:@"airline"]
Pods/mailcore2-ios/include/MailCore/MCOAddress.h:19:    Example: [MCOAddress addressWithDisplayName:@"DINH Viêt Hoà" mailbox:@"hoa@etpan.org"] */
Pods/mailcore2-ios/include/MailCore/MCOAddress.h:25:    Example: [MCOAddress addressWithMailbox:@"hoa@etpan.org"]*/
Pods/mailcore2-ios/include/MailCore/MCOAddress.h:30:    Example: [MCOAddress addressWithRFC822String:@"DINH Vi=C3=AAt Ho=C3=A0 <hoa@etpan.org>"]*/
Pods/mailcore2-ios/include/MailCore/MCOAddress.h:35:    Example: [MCOAddress addressWithNonEncodedRFC822String:@"DINH Viêt Hoà <hoa@etpan.org>"]*/
Pods/mailcore2-ios/include/MailCore/MCOAddress.h:42: For example: @[ @"DINH Vi=C3=AAt Ho=C3=A0 <hoa@etpan.org>" ]*/
Pods/mailcore2-ios/include/MailCore/MCOSMTPSession.h:147:                                                  from:[MCOAddress addressWithMailbox:@"hoa@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOSMTPSession.h:148:                                            recipients:[NSArray arrayWithObject:[MCOAddress addressWithMailbox:@"laura@etpan.org"]]];
Pods/mailcore2-ios/include/MailCore/MCOSMTPSession.h:160:     MCOSMTPOperation * op = [session checkAccountOperationWithFrom:[MCOAddress addressWithMailbox:@"hoa@etpan.org"]];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:101: MCONNTPFetchAllArticlesOperation * op = [session fetchAllArticlesOperation:@"comp.lang.c"];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:110: MCONNTPFetchHeaderOperation * op = [session fetchHeaderOperationWithIndex:idx inGroup:@"comp.lang.c"];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:120: MCONNTPFetchHeaderOperation * op = [session fetchOverviewOperationWithIndexes:indexes inGroup:@"comp.lang.c"];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:130: MCONNTPFetchArticleOperation * op = [session fetchArticleOperationWithIndex:idx inGroup:@"comp.lang.c"];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:140: MCONNTPFetchArticleOperation * op = [session fetchArticleOperationWithMessageID:@"<MessageID123@mail.google.com>"];
Pods/mailcore2-ios/include/MailCore/MCONNTPSession.h:150: MCONNTPFetchArticleOperation * op = [session fetchArticleOperationWithMessageID:@"<MessageID123@mail.google.com>" inGroup:@"comp.lang.c"];
Pods/mailcore2-ios/include/MailCore/NSObject+MCO.h:84:  mailcore::HashMap * serializable = MCO_FROM_OBJC(mailcore::HashMap, [coder decodeObjectForKey:@"info"]); \
Pods/mailcore2-ios/include/MailCore/NSObject+MCO.h:92:    [coder encodeObject:MCO_TO_OBJC(MCO_FROM_OBJC(nativeType, self)->serializable()) forKey:@"info"]; \
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:118:    NSLog(@"%@", [[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] autorelease]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:163:     MCOIMAPFolderInfoOperation * op = [session folderInfoOperation:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:165:          NSLog(@"UIDNEXT: %lu", (unsigned long) [info uidNext]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:166:          NSLog(@"UIDVALIDITY: %lu", (unsigned long) [info uidValidity]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:167:          NSLog(@"HIGHESTMODSEQ: %llu", (unsigned long long) [info modSequenceValue]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:168:          NSLog(@"messages count: %lu", [info messageCount]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:177:    MCOIMAPFolderStatusOperation * op = [session folderStatusOperation:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:179:        NSLog(@"UIDNEXT: %lu", (unsigned long) [info uidNext]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:180:        NSLog(@"UIDVALIDITY: %lu", (unsigned long) [info uidValidity]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:181:        NSLog(@"messages count: %lu", [info totalMessages]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:211:     MCOIMAPOperation * op = [session renameFolderOperation:@"my documents" otherName:@"Documents"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:222:     MCOIMAPOperation * op = [session deleteFolderOperation:@"holidays 2009"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:232:     MCOIMAPOperation * op = [session createFolderOperation:@"holidays 2013"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:242:     MCOIMAPOperation * op = [session createFolderOperation:@"holidays 2013"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:246:       MCOIMAPOperation * op = [session subscribeFolderOperation:@"holidays 2013"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:255:     MCOIMAPOperation * op = [session unsubscribeFolderOperation:@"holidays 2009"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:259:       MCOIMAPOperation * op = [session deleteFolderOperation:@"holidays 2009"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:268:     MCOIMAPOperation * op = [session expungeOperation:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:280:     MCOIMAPOperation * op = [session appendMessageOperationWithFolder:@"Sent Mail" messageData:rfc822Data flags:MCOMessageFlagNone];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:283:         NSLog(@"created message with UID %lu", (unsigned long) createdUID);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:294:     MCOIMAPOperation * op = [session appendMessageOperationWithFolder:@"Sent Mail" messageData:rfc822Data flags:MCOMessageFlagNone customFlags:@[@"$CNS-Greeting-On"]];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:297:         NSLog(@"created message with UID %lu", (unsigned long) createdUID);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:309:     MCOIMAPCopyMessagesOperation * op = [session copyMessagesOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:311:                                                                       destFolder:@"Cocoa"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:313:          NSLog(@"copied to folder with UID mapping %@", uidMapping);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:325:     MCOIMAPOperation * op = [session storeFlagsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:343:     MCOIMAPOperation * op = [session storeFlagsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:361:     MCOIMAPOperation * op = [session storeFlagsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:382:     MCOIMAPOperation * op = [session storeFlagsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:402:     MCOIMAPOperation * op = [session storeLabelsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:405:                                                              labels:[NSArray arrayWithObject:@"Home"]];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:420:     MCOIMAPOperation * op = [session storeLabelsOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:423:                                                              labels:[NSArray arrayWithObject:@"Home"]];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:438:     MCOIMAPFetchMessagesOperation * op = [session fetchMessagesByUIDOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:443:          NSLog(@"%lu: %@", [msg uid], [msg header]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:454:     MCOIMAPFetchMessagesOperation * op = [session fetchMessagesOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:459:          NSLog(@"%lu: %@", [msg uid], [msg header]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:470:     NSString *folder = @"INBOX";
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:484:                 NSLog(@"%u", [message uid]);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:496:     MCOIMAPFetchMessagesOperation * op = [session syncMessagesByUIDWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:501:       NSLog(@"added or modified messages: %@", messages);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:502:       NSLog(@"deleted messages: %@", vanishedMessages);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:516:     MCOIMAPFetchMessagesOperation * op = [session syncMessagesWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:521:       NSLog(@"added or modified messages: %@", messages);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:522:       NSLog(@"deleted messages: %@", vanishedMessages);
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:537:     MCOIMAPFetchContentOperation * op = [session fetchMessageByUIDOperationWithFolder:@"INBOX" uid:456 urgent:NO];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:550:     MCOIMAPFetchContentOperation * op = [session fetchMessageByUIDOperationWithFolder:@"INBOX" uid:456];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:563:     MCOIMAPFetchContentOperation * op = [session fetchMessageOperationWithFolder:@"INBOX" uid:456 urgent:NO];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:576:     MCOIMAPFetchContentOperation * op = [session fetchMessageOperationWithFolder:@"INBOX" uid:456];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:589:     MCOIMAPFetchContentOperation * op = [session fetchMessageOperationWithFolder:@"INBOX" number:42 urgent:NO];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:602:     MCOIMAPFetchContentOperation * op = [session fetchMessageOperationWithFolder:@"INBOX" number:42];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:615: MCOIMAPFetchParsedContentOperation * op = [session fetchParsedMessageOperationWithFolder:@"INBOX" uid:456 urgent:NO];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:628: MCOIMAPFetchParsedContentOperation * op = [session fetchParsedMessageOperationWithFolder:@"INBOX" uid:456];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:641: MCOIMAPFetchParsedContentOperation * op = [session fetchParsedMessageOperationWithFolder:@"INBOX" number:42 urgent:NO];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:654: MCOIMAPFetchParsedContentOperation * op = [session fetchParsedMessageOperationWithFolder:@"INBOX" number:42];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:669:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentByUIDOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:671:                                                                                          partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:689: MCOIMAPCustomCommandOperation * op = [session customCommandOperation:@"ACTIVATE SERVICE"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:701:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentByUIDOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:703:                                                                                          partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:711:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentByUIDOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:728:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:730:                                                                                          partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:748:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:750:                                                                                     partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:758:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:775:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:777:                                                                                          partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:795:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:797:                                                                                     partID:@"1.2"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:805:     MCOIMAPFetchContentOperation * op = [session fetchMessageAttachmentOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:824:     MCOIMAPIdleOperation * op = [session idleOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:853:     MCOIMAPIdentity * identity = [MCOIMAPIdentity identityWithVendor:@"Mozilla" name:@"Thunderbird" version:@"17.0.5"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:914:     MCOIMAPSearchOperation * op = [session searchOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:916:                                                         searchString:@"laura"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:928:     MCOIMAPSearchExpression * expr = [MCOIMAPSearchExpression searchFrom:@"laura@etpan.org"]
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:929:     MCOIMAPSearchOperation * op = [session searchExpressionOperationWithFolder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:944:                                                                            folder:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:957:                                                                                    folder:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:970:                                                                                     folder:@"INBOX"];
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:985:                                                                                         folder:@"INBOX"
Pods/mailcore2-ios/include/MailCore/MCOIMAPSession.h:1002: folder:@"INBOX"];
Pods/AFNetworking/README.md:94:[manager GET:@"http://example.com/resources.json" parameters:nil success:^(AFHTTPRequestOperation *operation, id responseObject) {
Pods/AFNetworking/README.md:95:    NSLog(@"JSON: %@", responseObject);
Pods/AFNetworking/README.md:97:    NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:105:NSDictionary *parameters = @{@"foo": @"bar"};
Pods/AFNetworking/README.md:106:[manager POST:@"http://example.com/resources.json" parameters:parameters success:^(AFHTTPRequestOperation *operation, id responseObject) {
Pods/AFNetworking/README.md:107:    NSLog(@"JSON: %@", responseObject);
Pods/AFNetworking/README.md:109:    NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:117:NSDictionary *parameters = @{@"foo": @"bar"};
Pods/AFNetworking/README.md:118:NSURL *filePath = [NSURL fileURLWithPath:@"file://path/to/image.png"];
Pods/AFNetworking/README.md:119:[manager POST:@"http://example.com/resources.json" parameters:parameters constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
Pods/AFNetworking/README.md:120:    [formData appendPartWithFileURL:filePath name:@"image" error:nil];
Pods/AFNetworking/README.md:122:    NSLog(@"Success: %@", responseObject);
Pods/AFNetworking/README.md:124:    NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:140:NSURL *URL = [NSURL URLWithString:@"http://example.com/download.zip"];
Pods/AFNetworking/README.md:147:    NSLog(@"File downloaded to: %@", filePath);
Pods/AFNetworking/README.md:158:NSURL *URL = [NSURL URLWithString:@"http://example.com/upload"];
Pods/AFNetworking/README.md:161:NSURL *filePath = [NSURL fileURLWithPath:@"file://path/to/image.png"];
Pods/AFNetworking/README.md:164:        NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:166:        NSLog(@"Success: %@ %@", response, responseObject);
Pods/AFNetworking/README.md:175:NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@"POST" URLString:@"http://example.com/upload" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
Pods/AFNetworking/README.md:176:        [formData appendPartWithFileURL:[NSURL fileURLWithPath:@"file://path/to/image.jpg"] name:@"file" fileName:@"filename.jpg" mimeType:@"image/jpeg" error:nil];
Pods/AFNetworking/README.md:184:        NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:186:        NSLog(@"%@ %@", response, responseObject);
Pods/AFNetworking/README.md:199:NSURL *URL = [NSURL URLWithString:@"http://example.com/upload"];
Pods/AFNetworking/README.md:204:        NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:206:        NSLog(@"%@ %@", response, responseObject);
Pods/AFNetworking/README.md:219:NSString *URLString = @"http://example.com";
Pods/AFNetworking/README.md:220:NSDictionary *parameters = @{@"foo": @"bar", @"baz": @[@1, @2, @3]};
Pods/AFNetworking/README.md:226:[[AFHTTPRequestSerializer serializer] requestWithMethod:@"GET" URLString:URLString parameters:parameters error:nil];
Pods/AFNetworking/README.md:234:[[AFHTTPRequestSerializer serializer] requestWithMethod:@"POST" URLString:URLString parameters:parameters];
Pods/AFNetworking/README.md:245:[[AFJSONRequestSerializer serializer] requestWithMethod:@"POST" URLString:URLString parameters:parameters];
Pods/AFNetworking/README.md:272:    NSLog(@"Reachability: %@", AFStringFromNetworkReachabilityStatus(status));
Pods/AFNetworking/README.md:281:NSURL *baseURL = [NSURL URLWithString:@"http://example.com/"];
Pods/AFNetworking/README.md:327:NSURL *URL = [NSURL URLWithString:@"http://example.com/resources/123.json"];
Pods/AFNetworking/README.md:332:    NSLog(@"JSON: %@", responseObject);
Pods/AFNetworking/README.md:334:    NSLog(@"Error: %@", error);
Pods/AFNetworking/README.md:344:    NSURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@"POST" URLString:@"http://example.com/upload" parameters:nil constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {
Pods/AFNetworking/README.md:345:        [formData appendPartWithFileURL:fileURL name:@"images[]" error:nil];
Pods/AFNetworking/README.md:354:    NSLog(@"%lu of %lu complete", numberOfFinishedOperations, totalNumberOfOperations);
Pods/AFNetworking/README.md:356:    NSLog(@"All operations in batch complete");
Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m:79:    [task addObserver:self forKeyPath:@"state" options:(NSKeyValueObservingOptions)0 context:AFTaskCountOfBytesSentContext];
Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m:80:    [task addObserver:self forKeyPath:@"countOfBytesSent" options:(NSKeyValueObservingOptions)0 context:AFTaskCountOfBytesSentContext];
Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m:88:    [task addObserver:self forKeyPath:@"state" options:(NSKeyValueObservingOptions)0 context:AFTaskCountOfBytesReceivedContext];
Pods/AFNetworking/UIKit+AFNetworking/UIProgressView+AFNetworking.m:89:    [task addObserver:self forKeyPath:@"countOfBytesReceived" options:(NSKeyValueObservingOptions)0 context:AFTaskCountOfBytesReceivedContext];
Pods/AFNetworking/UIKit+AFNetworking/UIAlertView+AFNetworking.m:42:        *title = NSLocalizedStringFromTable(@"Error", @"AFNetworking", @"Fallback Error Description");
Pods/AFNetworking/UIKit+AFNetworking/UIAlertView+AFNetworking.m:45:        *title = NSLocalizedStringFromTable(@"Error", @"AFNetworking", @"Fallback Error Description");
Pods/AFNetworking/UIKit+AFNetworking/UIAlertView+AFNetworking.m:46:        *message = [NSString stringWithFormat:NSLocalizedStringFromTable(@"%@ Error: %ld", @"AFNetworking", @"Fallback Error Failure Reason Format"), error.domain, (long)error.code];
Pods/AFNetworking/UIKit+AFNetworking/UIAlertView+AFNetworking.m:56:    [self showAlertViewForTaskWithErrorOnCompletion:task delegate:delegate cancelButtonTitle:NSLocalizedStringFromTable(@"Dismiss", @"AFNetworking", @"UIAlertView Cancel Button Title") otherButtonTitles:nil, nil];
Pods/AFNetworking/UIKit+AFNetworking/UIAlertView+AFNetworking.m:99:    [self showAlertViewForRequestOperationWithErrorOnCompletion:operation delegate:delegate cancelButtonTitle:NSLocalizedStringFromTable(@"Dismiss", @"AFNetworking", @"UIAlertView Cancel Button Title") otherButtonTitles:nil, nil];
Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m:71:    return [NSSet setWithObject:@"activityCount"];
Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m:130:    [self willChangeValueForKey:@"activityCount"];
Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m:134:    [self didChangeValueForKey:@"activityCount"];
Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m:142:    [self willChangeValueForKey:@"activityCount"];
Pods/AFNetworking/UIKit+AFNetworking/AFNetworkActivityIndicatorManager.m:149:    [self didChangeValueForKey:@"activityCount"];
Pods/AFNetworking/UIKit+AFNetworking/UIImageView+AFNetworking.m:117:    [request addValue:@"image/*" forHTTPHeaderField:@"Accept"];
Pods/AFNetworking/UIKit+AFNetworking/UIButton+AFNetworking.m:160:    [request addValue:@"image/*" forHTTPHeaderField:@"Accept"];
Pods/AFNetworking/UIKit+AFNetworking/UIButton+AFNetworking.m:226:    [request addValue:@"image/*" forHTTPHeaderField:@"Accept"];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:73:    NSURL *baseURL = [NSURL URLWithString:@"http://example.com/v1/"];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:74:    [NSURL URLWithString:@"foo" relativeToURL:baseURL];                  // http://example.com/v1/foo
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:75:    [NSURL URLWithString:@"foo?bar=baz" relativeToURL:baseURL];          // http://example.com/v1/foo?bar=baz
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:76:    [NSURL URLWithString:@"/foo" relativeToURL:baseURL];                 // http://example.com/foo
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:77:    [NSURL URLWithString:@"foo/" relativeToURL:baseURL];                 // http://example.com/v1/foo
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:78:    [NSURL URLWithString:@"/foo/" relativeToURL:baseURL];                // http://example.com/foo/
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.h:79:    [NSURL URLWithString:@"http://example2.com/" relativeToURL:baseURL]; // http://example2.com/
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:32:NSString * const AFURLResponseSerializationErrorDomain = @"com.alamofire.error.serialization.response";
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:33:NSString * const AFNetworkingOperationFailingURLResponseErrorKey = @"com.alamofire.serialization.response.error.response";
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:34:NSString * const AFNetworkingOperationFailingURLResponseDataErrorKey = @"com.alamofire.serialization.response.error.data";
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:119:                                                          NSLocalizedDescriptionKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@"Request failed: unacceptable content-type: %@", @"AFNetworking", nil), [response MIMEType]],
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:135:                                               NSLocalizedDescriptionKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@"Request failed: %@ (%ld)", @"AFNetworking", nil), [NSHTTPURLResponse localizedStringForStatusCode:response.statusCode], (long)response.statusCode],
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:224:    self.acceptableContentTypes = [NSSet setWithObjects:@"application/json", @"text/json", @"text/javascript", nil];
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:255:        if (responseString && ![responseString isEqualToString:@" "]) {
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:268:                                           NSLocalizedDescriptionKey: NSLocalizedStringFromTable(@"Data failed decoding as a UTF-8 string", @"AFNetworking", nil),
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:269:                                           NSLocalizedFailureReasonErrorKey: [NSString stringWithFormat:NSLocalizedStringFromTable(@"Could not decode string: %@", @"AFNetworking", nil), responseString]
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:337:    self.acceptableContentTypes = [[NSSet alloc] initWithObjects:@"application/xml", @"text/xml", nil];
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:382:    self.acceptableContentTypes = [[NSSet alloc] initWithObjects:@"application/xml", @"text/xml", nil];
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:465:    self.acceptableContentTypes = [[NSSet alloc] initWithObjects:@"application/x-plist", nil];
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:574:    if ([response.MIMEType isEqualToString:@"image/png"]) {
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:576:    } else if ([response.MIMEType isEqualToString:@"image/jpeg"]) {
Pods/AFNetworking/AFNetworking/AFURLResponseSerialization.m:668:    self.acceptableContentTypes = [[NSSet alloc] initWithObjects:@"image/tiff", @"image/jpeg", @"image/gif", @"image/png", @"image/ico", @"image/x-icon", @"image/bmp", @"image/x-bmp", @"image/x-xbitmap", @"image/x-win-bitmap", nil];
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:60:static NSString * const kAFNetworkingLockName = @"com.alamofire.networking.operation.lock";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:62:NSString * const AFNetworkingOperationDidStartNotification = @"com.alamofire.networking.operation.start";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:63:NSString * const AFNetworkingOperationDidFinishNotification = @"com.alamofire.networking.operation.finish";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:74:            return @"isReady";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:76:            return @"isExecuting";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:78:            return @"isFinished";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:80:            return @"isPaused";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:84:            return @"state";
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:159:        [[NSThread currentThread] setName:@"AFNetworking"];
Pods/AFNetworking/AFNetworking/AFURLConnectionOperation.m:584:    NSString *description = [NSString stringWithFormat:@"<%@: %p, state: %@, cancelled: %@ request: %@, response: %@>", NSStringFromClass([self class]), self, AFKeyPathFromOperationState(self.state), ([self isCancelled] ? @"YES" : @"NO"), self.request, self.response];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:78:    if ([[url path] length] > 0 && ![[url absoluteString] hasSuffix:@"/"]) {
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:79:        url = [url URLByAppendingPathComponent:@""];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:114:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"GET" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:126:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"HEAD" URLString:URLString parameters:parameters success:^(NSURLSessionDataTask *task, __unused id responseObject) {
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:142:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"POST" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:156:    NSMutableURLRequest *request = [self.requestSerializer multipartFormRequestWithMethod:@"POST" URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters constructingBodyWithBlock:block error:&serializationError];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:192:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"PUT" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:204:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"PATCH" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:216:    NSURLSessionDataTask *dataTask = [self dataTaskWithHTTPMethod:@"DELETE" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:263:    return [NSString stringWithFormat:@"<%@: %p, baseURL: %@, session: %@, operationQueue: %@>", NSStringFromClass([self class]), self, [self.baseURL absoluteString], self.session, self.operationQueue];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:274:    NSURLSessionConfiguration *configuration = [decoder decodeObjectOfClass:[NSURLSessionConfiguration class] forKey:@"sessionConfiguration"];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:276:        NSString *configurationIdentifier = [decoder decodeObjectOfClass:[NSString class] forKey:@"identifier"];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:306:        [coder encodeObject:self.session.configuration forKey:@"sessionConfiguration"];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.m:308:        [coder encodeObject:self.session.configuration.identifier forKey:@"identifier"];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:55:    if ([[url path] length] > 0 && ![[url absoluteString] hasSuffix:@"/"]) {
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:56:        url = [url URLByAppendingPathComponent:@""];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:142:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"GET" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:154:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"HEAD" URLString:URLString parameters:parameters success:^(AFHTTPRequestOperation *requestOperation, __unused id responseObject) {
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:170:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"POST" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:184:    NSMutableURLRequest *request = [self.requestSerializer multipartFormRequestWithMethod:@"POST" URLString:[[NSURL URLWithString:URLString relativeToURL:self.baseURL] absoluteString] parameters:parameters constructingBodyWithBlock:block error:&serializationError];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:210:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"PUT" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:222:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"PATCH" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:234:    AFHTTPRequestOperation *operation = [self HTTPRequestOperationWithHTTPMethod:@"DELETE" URLString:URLString parameters:parameters success:success failure:failure];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperationManager.m:244:    return [NSString stringWithFormat:@"<%@: %p, baseURL: %@, operationQueue: %@>", NSStringFromClass([self class]), self, [self.baseURL absoluteString], self.operationQueue];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:57:NSString * const AFNetworkingTaskDidResumeNotification = @"com.alamofire.networking.task.resume";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:58:NSString * const AFNetworkingTaskDidCompleteNotification = @"com.alamofire.networking.task.complete";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:59:NSString * const AFNetworkingTaskDidSuspendNotification = @"com.alamofire.networking.task.suspend";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:60:NSString * const AFURLSessionDidInvalidateNotification = @"com.alamofire.networking.session.invalidate";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:61:NSString * const AFURLSessionDownloadTaskDidFailToMoveFileNotification = @"com.alamofire.networking.session.download.file-manager-error";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:63:NSString * const AFNetworkingTaskDidStartNotification = @"com.alamofire.networking.task.resume"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:64:NSString * const AFNetworkingTaskDidFinishNotification = @"com.alamofire.networking.task.complete"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:66:NSString * const AFNetworkingTaskDidCompleteSerializedResponseKey = @"com.alamofire.networking.task.complete.serializedresponse";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:67:NSString * const AFNetworkingTaskDidCompleteResponseSerializerKey = @"com.alamofire.networking.task.complete.responseserializer";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:68:NSString * const AFNetworkingTaskDidCompleteResponseDataKey = @"com.alamofire.networking.complete.finish.responsedata";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:69:NSString * const AFNetworkingTaskDidCompleteErrorKey = @"com.alamofire.networking.task.complete.error";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:70:NSString * const AFNetworkingTaskDidCompleteAssetPathKey = @"com.alamofire.networking.task.complete.assetpath";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:72:NSString * const AFNetworkingTaskDidFinishSerializedResponseKey = @"com.alamofire.networking.task.complete.serializedresponse"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:73:NSString * const AFNetworkingTaskDidFinishResponseSerializerKey = @"com.alamofire.networking.task.complete.responseserializer"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:74:NSString * const AFNetworkingTaskDidFinishResponseDataKey = @"com.alamofire.networking.complete.finish.responsedata"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:75:NSString * const AFNetworkingTaskDidFinishErrorKey = @"com.alamofire.networking.task.complete.error"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:76:NSString * const AFNetworkingTaskDidFinishAssetPathKey = @"com.alamofire.networking.task.complete.assetpath"; // Deprecated
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:78:static NSString * const AFURLSessionManagerLockName = @"com.alamofire.networking.session.manager.lock";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:285:static NSString * const AFNSURLSessionTaskDidResumeNotification  = @"com.alamofire.networking.nsurlsessiontask.resume";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:286:static NSString * const AFNSURLSessionTaskDidSuspendNotification = @"com.alamofire.networking.nsurlsessiontask.suspend";
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:300:    if (NSClassFromString(@"NSURLSessionTask")) {
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:366:    NSAssert(NO, @"State method should never be called in the actual dummy class");
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:371:    NSAssert([self respondsToSelector:@selector(state)], @"Does not respond to state");
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:381:    NSAssert([self respondsToSelector:@selector(state)], @"Does not respond to state");
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:480:    return [NSString stringWithFormat:@"%p", self];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:550:        NSString *contentLength = [uploadTask.originalRequest valueForHTTPHeaderField:@"Content-Length"];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:629:            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:@"@unionOfArrays.self"];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:856:    return [NSString stringWithFormat:@"<%@: %p, session: %@, operationQueue: %@>", NSStringFromClass([self class]), self, self.session, self.operationQueue];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:990:        NSString *contentLength = [task.originalRequest valueForHTTPHeaderField:@"Content-Length"];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:1152:    NSURLSessionConfiguration *configuration = [decoder decodeObjectOfClass:[NSURLSessionConfiguration class] forKey:@"sessionConfiguration"];
Pods/AFNetworking/AFNetworking/AFURLSessionManager.m:1163:    [coder encodeObject:self.session.configuration forKey:@"sessionConfiguration"];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperation.m:164:    if ([self.response respondsToSelector:@selector(allHeaderFields)] && [[self.response allHeaderFields] valueForKey:@"ETag"]) {
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperation.m:165:        [mutableURLRequest setValue:[[self.response allHeaderFields] valueForKey:@"ETag"] forHTTPHeaderField:@"If-Range"];
Pods/AFNetworking/AFNetworking/AFHTTPRequestOperation.m:167:    [mutableURLRequest setValue:[NSString stringWithFormat:@"bytes=%llu-", offset] forHTTPHeaderField:@"Range"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:30:NSString * const AFURLRequestSerializationErrorDomain = @"com.alamofire.error.serialization.request";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:31:NSString * const AFNetworkingOperationFailingURLRequestErrorKey = @"com.alamofire.serialization.request.error.response";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:67:    - General Delimiters: ":", "#", "[", "]", "@", "?", "/"
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:77:    static NSString * const kAFCharactersGeneralDelimitersToEncode = @":#[]@"; // does not include "?" or "/" due to RFC 3986 - Section 3.4
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:78:    static NSString * const kAFCharactersSubDelimitersToEncode = @"!$&'()*+,;=";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:89:    NSMutableString *escaped = @"".mutableCopy;
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:140:        return [NSString stringWithFormat:@"%@=%@", AFPercentEscapedStringFromString([self.field description]), AFPercentEscapedStringFromString([self.value description])];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:157:    return [mutablePairs componentsJoinedByString:@"&"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:167:    NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@"description" ascending:YES selector:@selector(compare:)];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:175:                [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue((key ? [NSString stringWithFormat:@"%@[%@]", key, nestedKey] : nestedKey), nestedValue)];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:181:            [mutableQueryStringComponents addObjectsFromArray:AFQueryStringPairsFromKeyAndValue([NSString stringWithFormat:@"%@[]", key], nestedValue)];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:245:        [acceptLanguagesComponents addObject:[NSString stringWithFormat:@"%@;q=%0.1g", obj, q]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:248:    [self setValue:[acceptLanguagesComponents componentsJoinedByString:@", "] forHTTPHeaderField:@"Accept-Language"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:255:    userAgent = [NSString stringWithFormat:@"%@/%@ (%@; iOS %@; Scale/%0.2f)", [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleExecutableKey] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleIdentifierKey], [[NSBundle mainBundle] infoDictionary][@"CFBundleShortVersionString"] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleVersionKey], [[UIDevice currentDevice] model], [[UIDevice currentDevice] systemVersion], [[UIScreen mainScreen] scale]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:258:    userAgent = [NSString stringWithFormat:@"%@/%@ (%@; watchOS %@; Scale/%0.2f)", [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleExecutableKey] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleIdentifierKey], [[NSBundle mainBundle] infoDictionary][@"CFBundleShortVersionString"] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleVersionKey], [[WKInterfaceDevice currentDevice] model], [[WKInterfaceDevice currentDevice] systemVersion], [[WKInterfaceDevice currentDevice] screenScale]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:260:    userAgent = [NSString stringWithFormat:@"%@/%@ (Mac OS X %@)", [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleExecutableKey] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleIdentifierKey], [[NSBundle mainBundle] infoDictionary][@"CFBundleShortVersionString"] ?: [[NSBundle mainBundle] infoDictionary][(__bridge NSString *)kCFBundleVersionKey], [[NSProcessInfo processInfo] operatingSystemVersionString]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:266:            if (CFStringTransform((__bridge CFMutableStringRef)(mutableUserAgent), NULL, (__bridge CFStringRef)@"Any-Latin; Latin-ASCII; [:^ASCII:] Remove", false)) {
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:270:        [self setValue:userAgent forHTTPHeaderField:@"User-Agent"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:274:    self.HTTPMethodsEncodingParametersInURI = [NSSet setWithObjects:@"GET", @"HEAD", @"DELETE", nil];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:354:	NSString *basicAuthCredentials = [NSString stringWithFormat:@"%@:%@", username, password];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:355:    [self setValue:[NSString stringWithFormat:@"Basic %@", AFBase64EncodedStringFromString(basicAuthCredentials)] forHTTPHeaderField:@"Authorization"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:359:    [self setValue:[NSString stringWithFormat:@"Token token=\"%@\"", token] forHTTPHeaderField:@"Authorization"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:363:	[self.mutableHTTPRequestHeaders removeObjectForKey:@"Authorization"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:427:    NSParameterAssert(![method isEqualToString:@"GET"] && ![method isEqualToString:@"HEAD"]);
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:551:            mutableRequest.URL = [NSURL URLWithString:[[mutableRequest.URL absoluteString] stringByAppendingFormat:mutableRequest.URL.query ? @"&%@" : @"?%@", query]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:556:            query = @"";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:558:        if (![mutableRequest valueForHTTPHeaderField:@"Content-Type"]) {
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:559:            [mutableRequest setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:630:    return [NSString stringWithFormat:@"Boundary+%08X%08X", arc4random(), arc4random()];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:633:static NSString * const kAFMultipartFormCRLF = @"\r\n";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:636:    return [NSString stringWithFormat:@"--%@%@", boundary, kAFMultipartFormCRLF];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:640:    return [NSString stringWithFormat:@"%@--%@%@", kAFMultipartFormCRLF, boundary, kAFMultipartFormCRLF];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:644:    return [NSString stringWithFormat:@"%@--%@--%@", kAFMultipartFormCRLF, boundary, kAFMultipartFormCRLF];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:652:        return @"application/octet-stream";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:658:    return @"application/octet-stream";
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:747:        NSDictionary *userInfo = @{NSLocalizedFailureReasonErrorKey: NSLocalizedStringFromTable(@"Expected URL to be a file URL", @"AFNetworking", nil)};
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:754:        NSDictionary *userInfo = @{NSLocalizedFailureReasonErrorKey: NSLocalizedStringFromTable(@"File URL not reachable.", @"AFNetworking", nil)};
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:768:    [mutableHeaders setValue:[NSString stringWithFormat:@"form-data; name=\"%@\"; filename=\"%@\"", name, fileName] forKey:@"Content-Disposition"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:769:    [mutableHeaders setValue:mimeType forKey:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:793:    [mutableHeaders setValue:[NSString stringWithFormat:@"form-data; name=\"%@\"; filename=\"%@\"", name, fileName] forKey:@"Content-Disposition"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:794:    [mutableHeaders setValue:mimeType forKey:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:817:    [mutableHeaders setValue:[NSString stringWithFormat:@"form-data; name=\"%@\"; filename=\"%@\"", name, fileName] forKey:@"Content-Disposition"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:818:    [mutableHeaders setValue:mimeType forKey:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:829:    [mutableHeaders setValue:[NSString stringWithFormat:@"form-data; name=\"%@\"", name] forKey:@"Content-Disposition"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:865:    [self.request setValue:[NSString stringWithFormat:@"multipart/form-data; boundary=%@", self.boundary] forHTTPHeaderField:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:866:    [self.request setValue:[NSString stringWithFormat:@"%llu", [self.bodyStream contentLength]] forHTTPHeaderField:@"Content-Length"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:1116:        [headerString appendString:[NSString stringWithFormat:@"%@: %@%@", field, [self.headers valueForKey:field], kAFMultipartFormCRLF]];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:1308:        if (![mutableRequest valueForHTTPHeaderField:@"Content-Type"]) {
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:1309:            [mutableRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:1387:        if (![mutableRequest valueForHTTPHeaderField:@"Content-Type"]) {
Pods/AFNetworking/AFNetworking/AFURLRequestSerialization.m:1388:            [mutableRequest setValue:@"application/x-plist" forHTTPHeaderField:@"Content-Type"];
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:31:NSString * const AFNetworkingReachabilityDidChangeNotification = @"com.alamofire.networking.reachability.change";
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:32:NSString * const AFNetworkingReachabilityNotificationStatusItem = @"AFNetworkingReachabilityNotificationStatusItem";
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:39:            return NSLocalizedStringFromTable(@"Not Reachable", @"AFNetworking", nil);
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:41:            return NSLocalizedStringFromTable(@"Reachable via WWAN", @"AFNetworking", nil);
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:43:            return NSLocalizedStringFromTable(@"Reachable via WiFi", @"AFNetworking", nil);
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:46:            return NSLocalizedStringFromTable(@"Unknown", @"AFNetworking", nil);
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:240:    if ([key isEqualToString:@"reachable"] || [key isEqualToString:@"reachableViaWWAN"] || [key isEqualToString:@"reachableViaWiFi"]) {
Pods/AFNetworking/AFNetworking/AFNetworkReachabilityManager.m:241:        return [NSSet setWithObject:@"networkReachabilityStatus"];
Pods/AFNetworking/AFNetworking/AFSecurityPolicy.m:163:        NSArray *paths = [bundle pathsForResourcesOfType:@"cer" inDirectory:@"."];
Pods/AFNetworking/AFNetworking/AFSecurityPolicy.m:240:        NSLog(@"In order to validate a domain name for self signed certificates, you MUST use pinning.");
Pods/AFNetworking/AFNetworking/AFSecurityPolicy.m:304:    return [NSSet setWithObject:@"pinnedCertificates"];
Pods/SAMKeychain/Readme.markdown:61:query.service = @"MyService";
Pods/SAMKeychain/Readme.markdown:62:query.account = @"soffes";
Pods/SAMKeychain/Readme.markdown:66:    NSLog(@"Password not found");
Pods/SAMKeychain/Readme.markdown:68:	NSLog(@"Some other error occurred: %@", [error localizedDescription]);
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:69:    NSURL *baseURL = [NSURL URLWithString:@"http://example.com/v1/"];
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:70:    [NSURL URLWithString:@"foo" relativeToURL:baseURL];                  // http://example.com/v1/foo
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:71:    [NSURL URLWithString:@"foo?bar=baz" relativeToURL:baseURL];          // http://example.com/v1/foo?bar=baz
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:72:    [NSURL URLWithString:@"/foo" relativeToURL:baseURL];                 // http://example.com/foo
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:73:    [NSURL URLWithString:@"foo/" relativeToURL:baseURL];                 // http://example.com/v1/foo
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:74:    [NSURL URLWithString:@"/foo/" relativeToURL:baseURL];                // http://example.com/foo/
Pods/AFNetworking/AFNetworking/AFHTTPSessionManager.h:75:    [NSURL URLWithString:@"http://example2.com/" relativeToURL:baseURL]; // http://example2.com/
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:254:		NSURL *url = [[NSBundle bundleForClass:[SAMKeychainQuery class]] URLForResource:@"SAMKeychain" withExtension:@"bundle"];
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:261:		case SAMKeychainErrorBadArguments: message = NSLocalizedStringFromTableInBundle(@"SAMKeychainErrorBadArguments", @"SAMKeychain", resourcesBundle, nil); break;
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:265:			message = NSLocalizedStringFromTableInBundle(@"errSecUnimplemented", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:269:			message = NSLocalizedStringFromTableInBundle(@"errSecParam", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:273:			message = NSLocalizedStringFromTableInBundle(@"errSecAllocate", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:277:			message = NSLocalizedStringFromTableInBundle(@"errSecNotAvailable", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:281:			message = NSLocalizedStringFromTableInBundle(@"errSecDuplicateItem", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:285:			message = NSLocalizedStringFromTableInBundle(@"errSecItemNotFound", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:289:			message = NSLocalizedStringFromTableInBundle(@"errSecInteractionNotAllowed", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:293:			message = NSLocalizedStringFromTableInBundle(@"errSecDecode", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:297:			message = NSLocalizedStringFromTableInBundle(@"errSecAuthFailed", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychainQuery.m:301:			message = NSLocalizedStringFromTableInBundle(@"errSecDefault", @"SAMKeychain", resourcesBundle, nil);
Pods/SAMKeychain/Sources/SAMKeychain.m:12:NSString *const kSAMKeychainErrorDomain = @"com.samsoffes.samkeychain";
Pods/SAMKeychain/Sources/SAMKeychain.m:13:NSString *const kSAMKeychainAccountKey = @"acct";
Pods/SAMKeychain/Sources/SAMKeychain.m:14:NSString *const kSAMKeychainCreatedAtKey = @"cdat";
Pods/SAMKeychain/Sources/SAMKeychain.m:15:NSString *const kSAMKeychainClassKey = @"labl";
Pods/SAMKeychain/Sources/SAMKeychain.m:16:NSString *const kSAMKeychainDescriptionKey = @"desc";
Pods/SAMKeychain/Sources/SAMKeychain.m:17:NSString *const kSAMKeychainLabelKey = @"labl";
Pods/SAMKeychain/Sources/SAMKeychain.m:18:NSString *const kSAMKeychainLastModifiedKey = @"mdat";
Pods/SAMKeychain/Sources/SAMKeychain.m:19:NSString *const kSAMKeychainWhereKey = @"svce";
Pods/Fabric/Fabric.framework/run:5:    sh "${PODS_ROOT}/Fabric/run" "$@"
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:91:        [eventScanner scanUpToString:@":" intoString:&attributes];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:92:        [eventScanner scanUpToString:@"\n" intoString:&uri];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:96:        [eventScanner scanUpToString:@"ROLE=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:97:        [eventScanner scanUpToString:@";" intoString:&holder];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:98:        NSString *role = [holder stringByReplacingOccurrencesOfString:@"ROLE=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:102:        [eventScanner scanUpToString:@"CN=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:103:        [eventScanner scanUpToString:@";" intoString:&holder];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:104:        NSString *cn = [holder stringByReplacingOccurrencesOfString:@"CN=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:116:    NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"\n +" options:NSRegularExpressionCaseInsensitive error:&error];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:117:    NSString *icsStringWithoutNewlines = [regex stringByReplacingMatchesInString:icsString options:0 range:NSMakeRange(0, [icsString length]) withTemplate:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:120:    NSMutableArray *eventsArray = [NSMutableArray arrayWithArray:[icsStringWithoutNewlines componentsSeparatedByString:@"BEGIN:VEVENT"]];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:129:        [scanner scanUpToString:@"TZID:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:131:        [scanner scanUpToString:@"\n" intoString:&calendarString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:133:        calendarString = [[[calendarString stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""] stringByReplacingOccurrencesOfString:@"TZID:" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:164:        [eventScanner scanUpToString:@"DTSTART;TZID=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:165:        [eventScanner scanUpToString:@":" intoString:&timezoneIDString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:166:        timezoneIDString = [[timezoneIDString stringByReplacingOccurrencesOfString:@"DTSTART;TZID=" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:171:            [eventScanner scanUpToString:@"TZID:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:172:            [eventScanner scanUpToString:@"\n" intoString:&timezoneIDString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:173:            timezoneIDString = [[timezoneIDString stringByReplacingOccurrencesOfString:@"TZID:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:178:        [eventScanner scanUpToString:[NSString stringWithFormat:@"DTSTART;TZID=%@:", timezoneIDString] intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:179:        [eventScanner scanUpToString:@"\n" intoString:&startDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:180:        startDateTimeString = [[startDateTimeString stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"DTSTART;TZID=%@:", timezoneIDString] withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:184:            [eventScanner scanUpToString:@"DTSTART:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:185:            [eventScanner scanUpToString:@"\n" intoString:&startDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:186:            startDateTimeString = [[startDateTimeString stringByReplacingOccurrencesOfString:@"DTSTART:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:190:                [eventScanner scanUpToString:@"DTSTART;VALUE=DATE:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:191:                [eventScanner scanUpToString:@"\n" intoString:&startDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:192:                startDateTimeString = [[startDateTimeString stringByReplacingOccurrencesOfString:@"DTSTART;VALUE=DATE:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:198:        [eventScanner scanUpToString:[NSString stringWithFormat:@"DTEND;TZID=%@:", timezoneIDString] intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:199:        [eventScanner scanUpToString:@"\n" intoString:&endDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:200:        endDateTimeString = [[endDateTimeString stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"DTEND;TZID=%@:", timezoneIDString] withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:204:            [eventScanner scanUpToString:@"DTEND:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:205:            [eventScanner scanUpToString:@"\n" intoString:&endDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:206:            endDateTimeString = [[endDateTimeString stringByReplacingOccurrencesOfString:@"DTEND:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:210:                [eventScanner scanUpToString:@"DTEND;VALUE=DATE:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:211:                [eventScanner scanUpToString:@"\n" intoString:&endDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:212:                endDateTimeString = [[endDateTimeString stringByReplacingOccurrencesOfString:@"DTEND;VALUE=DATE:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:218:        [eventScanner scanUpToString:@"DTSTAMP:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:219:        [eventScanner scanUpToString:@"\n" intoString:&timeStampString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:220:        timeStampString = [[timeStampString stringByReplacingOccurrencesOfString:@"DTSTAMP:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:224:        [eventScanner scanUpToString:@"UID:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:225:        [eventScanner scanUpToString:@"\n" intoString:&eventUniqueIDString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:226:        eventUniqueIDString = [[eventUniqueIDString stringByReplacingOccurrencesOfString:@"UID:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:233:            if ([eventScanner scanUpToString:@"ATTENDEE;" intoString:nil]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:234:                scannerStatus = [eventScanner scanUpToString:@"\n" intoString:&attendeeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:236:                    attendeeString = [[attendeeString stringByReplacingOccurrencesOfString:@"ATTENDEE;" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:249:        [eventScanner scanUpToString:[NSString stringWithFormat:@"RECURRENCE-ID;TZID=%@:", timezoneIDString] intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:250:        [eventScanner scanUpToString:@"\n" intoString:&recurrenceIDString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:251:        recurrenceIDString = [[recurrenceIDString stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"RECURRENCE-ID;TZID=%@:", timezoneIDString] withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:255:        [eventScanner scanUpToString:@"CREATED:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:256:        [eventScanner scanUpToString:@"\n" intoString:&createdDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:257:        createdDateTimeString = [[createdDateTimeString stringByReplacingOccurrencesOfString:@"CREATED:" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:262:        [eventScanner scanUpToString:@"DESCRIPTION:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:263:        [eventScanner scanUpToString:@"\n" intoString:&descriptionString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:264:        descriptionString = [[[descriptionString stringByReplacingOccurrencesOfString:@"DESCRIPTION:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:268:        [eventScanner scanUpToString:@"LAST-MODIFIED:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:269:        [eventScanner scanUpToString:@"\n" intoString:&lastModifiedDateTimeString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:270:        lastModifiedDateTimeString = [[[lastModifiedDateTimeString stringByReplacingOccurrencesOfString:@"LAST-MODIFIED:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:274:        [eventScanner scanUpToString:@"LOCATION:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:275:        [eventScanner scanUpToString:@"\n" intoString:&locationString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:276:        locationString = [[[locationString stringByReplacingOccurrencesOfString:@"LOCATION:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:280:        [eventScanner scanUpToString:@"SEQUENCE:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:281:        [eventScanner scanUpToString:@"\n" intoString:&sequenceString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:282:        sequenceString = [[[sequenceString stringByReplacingOccurrencesOfString:@"SEQUENCE:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:286:        [eventScanner scanUpToString:@"STATUS:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:287:        [eventScanner scanUpToString:@"\n" intoString:&statusString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:288:        statusString = [[[statusString stringByReplacingOccurrencesOfString:@"STATUS:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:292:        [eventScanner scanUpToString:@"SUMMARY:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:293:        [eventScanner scanUpToString:@"\n" intoString:&summaryString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:294:        summaryString = [[[summaryString stringByReplacingOccurrencesOfString:@"SUMMARY:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:298:        [eventScanner scanUpToString:@"TRANSP:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:299:        [eventScanner scanUpToString:@"\n" intoString:&transString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:300:        transString = [[[transString stringByReplacingOccurrencesOfString:@"TRANSP:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:304:        [eventScanner scanUpToString:@"RRULE:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:305:        [eventScanner scanUpToString:@"\n" intoString:&repetitionString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:306:        repetitionString = [[[repetitionString stringByReplacingOccurrencesOfString:@"RRULE:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:310:        [eventScanner scanUpToString:@"EXRULE:" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:311:        [eventScanner scanUpToString:@"\n" intoString:&exceptionRuleString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:312:        exceptionRuleString = [[[exceptionRuleString stringByReplacingOccurrencesOfString:@"EXRULE:" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:316:        [eventScanner scanUpToString:@"EXDATE;" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:319:            [eventScanner scanUpToString:@":" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:321:            [eventScanner scanUpToString:@"\n" intoString:&exceptionString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:322:            exceptionString = [[[exceptionString stringByReplacingOccurrencesOfString:@":" withString:@""] stringByReplacingOccurrencesOfString:@"\n" withString:@""] stringByReplacingOccurrencesOfString:@"\r" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarManager.m:328:            [eventScanner scanUpToString:@"EXDATE;" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendar.m:47:    [formatter setDateFormat:@"yyyyddMM"];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendar.m:81:    [dateFormatter setDateFormat:@"yyyyddMM"];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendar.m:100:    [dateFormatter setDateFormat:@"yyyyddMM"];
Pods/MXLCalendarManager/MXLCalendarManager/NSTimeZone+ProperAbbreviation.m:15:    if ([[self abbreviation] isEqualToString:@"GMT"] || [[self abbreviation] isEqualToString:@"BST"]) {
Pods/MXLCalendarManager/MXLCalendarManager/NSTimeZone+ProperAbbreviation.m:23:		NSLog(@"%@",name);
Pods/MXLCalendarManager/MXLCalendarManager/NSTimeZone+ProperAbbreviation.m:27:    NSLog(@"%@", abbrev);
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:31:#define DAILY_FREQUENCY @"DAILY"
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:32:#define WEEKLY_FREQUENCY @"WEEKLY"
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:33:#define MONTHLY_FREQUENCY @"MONTHLY"
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:34:#define YEARLY_FREQUENCY @"YEARLY"
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:69:        [dateFormatter setDateFormat:@"yyyyMMdd HHmmss"];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:86:        self.eventSummary = [summary stringByReplacingOccurrencesOfString:@"\\" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:87:        self.eventDescription = [description stringByReplacingOccurrencesOfString:@"\\" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:88:        self.eventLocation = [location stringByReplacingOccurrencesOfString:@"\\" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:99:    dateString = [dateString stringByReplacingOccurrencesOfString:@"T" withString:@" "];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:101:    BOOL containsZone = [dateString rangeOfString:@"z" options:NSCaseInsensitiveSearch].location != NSNotFound;
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:104:        dateFormatter.dateFormat = @"yyyyMMdd HHmmssz";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:111:            dateFormatter.dateFormat = @"yyyyMMddz";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:114:            dateFormatter.dateFormat = @"yyyyMMdd";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:124:    dateFormatter.dateFormat = @"yyyyMMdd HHmmss";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:137:    NSArray *rulesArray = [rule componentsSeparatedByString:@";"]; // Split up rules string into array
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:155:        if ([rule rangeOfString:@"FREQ"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:156:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:157:            [ruleScanner scanUpToString:@";" intoString:&frequency];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:158:            frequency = [frequency stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:168:        if ([rule rangeOfString:@"COUNT"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:169:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:170:            [ruleScanner scanUpToString:@";" intoString:&count];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:171:            count = [count stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:181:        if ([rule rangeOfString:@"UNTIL"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:182:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:183:            [ruleScanner scanUpToString:@";" intoString:&untilString];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:184:            untilString = [untilString stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:194:        if ([rule rangeOfString:@"INTERVAL"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:195:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:196:            [ruleScanner scanUpToString:@";" intoString:&interval];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:197:            interval = [interval stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:207:        if ([rule rangeOfString:@"BYDAY"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:208:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:209:            [ruleScanner scanUpToString:@";" intoString:&byDay];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:210:            byDay = [byDay stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:213:                repeatRuleByDay = [byDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:215:                exRuleByDay = [byDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:221:        if ([rule rangeOfString:@"BYMONTHDAY"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:222:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:223:            [ruleScanner scanUpToString:@";" intoString:&byMonthDay];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:224:            byMonthDay = [byMonthDay stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:227:                repeatRuleByMonthDay = [byMonthDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:229:                exRuleByMonthDay = [byMonthDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:235:        if ([rule rangeOfString:@"BYYEARDAY"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:236:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:237:            [ruleScanner scanUpToString:@";" intoString:&byYearDay];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:238:            byYearDay = [byYearDay stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:241:                repeatRuleByYearDay = [byYearDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:243:                exRuleByYearDay = [byYearDay componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:248:        if ([rule rangeOfString:@"BYWEEKNO"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:249:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:250:            [ruleScanner scanUpToString:@";" intoString:&byWeekNo];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:251:            byWeekNo = [byWeekNo stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:254:                repeatRuleByWeekNo = [byWeekNo componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:256:                exRuleByWeekNo = [byWeekNo componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:261:        if ([rule rangeOfString:@"BYMONTH"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:262:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:263:            [ruleScanner scanUpToString:@";" intoString:&byMonth];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:264:            byMonth = [byMonth stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:267:                repeatRuleByMonth = [byMonth componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:269:                exRuleByMonth = [byMonth componentsSeparatedByString:@","];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:274:        if ([rule rangeOfString:@"WKST"].location != NSNotFound) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:275:            [ruleScanner scanUpToString:@"=" intoString:nil];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:276:            [ruleScanner scanUpToString:@";" intoString:&weekStart];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:277:            weekStart = [weekStart stringByReplacingOccurrencesOfString:@"=" withString:@""];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:333:    NSString *weekNumberString  = [NSString stringWithFormat:@"%li", (long)[components weekOfYear]];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:334:    NSString *monthString = [NSString stringWithFormat:@"%li", (long)m];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:340:        if (repeatRuleByDay && ![repeatRuleByDay containsObject:[NSString stringWithFormat:@"1%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:341:            if (repeatRuleByDay && ![repeatRuleByDay containsObject:[NSString stringWithFormat:@"2%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:342:                if (repeatRuleByDay && ![repeatRuleByDay containsObject:[NSString stringWithFormat:@"3%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:351:    if (repeatRuleByMonthDay && ![repeatRuleByMonthDay containsObject:[NSString stringWithFormat:@"%li", (long)d]])
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:354:    if (repeatRuleByYearDay && ![repeatRuleByYearDay containsObject:[NSString stringWithFormat:@"%li", (long)dayOfYear]])
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:365:    repeatRuleInterval = (repeatRuleInterval ? repeatRuleInterval : @"1");
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:535:    NSString *weekNumberString  = [NSString stringWithFormat:@"%li", (long)[components weekOfYear]];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:536:    NSString *monthString = [NSString stringWithFormat:@"%li", (long)m];
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:542:        if (exRuleByDay && ![exRuleByDay containsObject:[NSString stringWithFormat:@"1%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:543:            if (exRuleByDay && ![exRuleByDay containsObject:[NSString stringWithFormat:@"2%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:544:                if (exRuleByDay && ![exRuleByDay containsObject:[NSString stringWithFormat:@"3%@", dayString]]) {
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:553:    if (exRuleByMonthDay && ![exRuleByMonthDay containsObject:[NSString stringWithFormat:@"%li", (long)d]])
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:556:    if (exRuleByYearDay && ![exRuleByYearDay containsObject:[NSString stringWithFormat:@"%li", (long)dayOfYear]])
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:565:    exRuleInterval = (exRuleInterval ? exRuleInterval : @"1");
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:736:            return @"SU";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:739:            return @"MO";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:742:            return @"TU";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:745:            return @"WE";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:748:            return @"TH";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:751:            return @"FR";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:754:            return @"SA";
Pods/MXLCalendarManager/MXLCalendarManager/MXLCalendarEvent.m:757:            return @"";
Pods/NUI/README.md:81:After dropping in NUI, you can modify your app's styling by simply editing NUIStyle.nss. If you want to avoid modifying NUI's files, you can copy NUIStyle.nss into your app, rename it (e.g. MyTheme.nss), then replace `[NUISettings init]` with `[NUISettings initWithStylesheet:@"MyTheme"];` (step 4 in Installation).
Pods/NUI/README.md:92:[NUIRenderer renderButton:myButton withClass:@"LargeButton"]
Pods/NUI/README.md:129:myButton.nuiClass = @"LargeButton";
Pods/NUI/README.md:132:*N.B. A style class can inherit from an indefinite number of style rules, so if you want to create groups of style rules, you can set `nuiClass` to something like `@"MyStyleGroup1:MyStyleGroup2:MyButton"`.*
Pods/NUI/README.md:155:        [NUISettings setGlobalExclusions:@[@"ABMemberCell", @"ABMultiCell"]];
Pods/NUI/README.md:190:To do this, add the following line after `[NUISettings init];` in [main.m](https://github.com/tombenner/nui/blob/master/Demo/NUIDemo/main.m), replacing `@"/path/to/Style.nss"` with the absolute file path of your .nss file (e.g. `/Users/myusername/projects/ios/MyApp/Style.nss`):
Pods/NUI/README.md:193:[NUISettings setAutoUpdatePath:@"/path/to/Style.nss"];
Pods/NUI/NUI/UI/UILabel+NUI.m:16:        self.nuiClass = @"Label";
Pods/NUI/NUI/UI/UISwitch+NUI.m:16:        self.nuiClass = @"Switch";
Pods/NUI/NUI/UI/UIWindow+NUI.m:15:        self.nuiClass = @"Window";
Pods/NUI/NUI/UI/UIToolbar+NUI.m:16:        self.nuiClass = @"Toolbar";
Pods/NUI/NUI/UI/UIControl+NUI.m:16:        self.nuiClass = @"Control";
Pods/NUI/NUI/UI/UITextView+NUI.m:8:        self.nuiClass = @"TextView";
Pods/NUI/NUI/UI/UISlider+NUI.m:16:        self.nuiClass = @"Slider";
Pods/NUI/NUI/UI/UITextField+NUI.m:16:        self.nuiClass = @"TextField";
Pods/NUI/NUI/UI/UITextField+NUI.m:50:        [NUISettings hasProperty:@"padding" withClass:self.nuiClass]) {
Pods/NUI/NUI/UI/UITextField+NUI.m:51:        UIEdgeInsets insets = [NUISettings getEdgeInsets:@"padding" withClass:self.nuiClass];
Pods/NUI/NUI/UI/UISegmentedControl+NUI.m:16:        self.nuiClass = @"SegmentedControl";
Pods/NUI/NUI/UI/UITableView+NUI.m:16:        self.nuiClass = @"Table";
Pods/NUI/NUI/UI/UIButton+NUI.m:16:        self.nuiClass = @"Button";
Pods/NUI/NUI/UI/UIButton+NUI.m:26:    NSArray *bypassedClasses = [NSArray arrayWithObjects:@"UINavigationButton", nil];
Pods/NUI/NUI/UI/UIButton+NUI.m:28:                                         @"UICalloutBar",
Pods/NUI/NUI/UI/UIButton+NUI.m:29:                                         @"UISearchBarTextField",
Pods/NUI/NUI/UI/UIButton+NUI.m:30:                                         @"UIToolbarTextButton",
Pods/NUI/NUI/UI/UIButton+NUI.m:33:    if ([selfClass isEqualToString:@"UINavigationButton"] &&
Pods/NUI/NUI/UI/UIButton+NUI.m:34:        [superviewClass isEqualToString:@"UISearchBar"]) {
Pods/NUI/NUI/UI/UIButton+NUI.m:35:        if ([self.nuiClass isEqualToString:@"Button"]) {
Pods/NUI/NUI/UI/UIButton+NUI.m:36:            self.nuiClass = @"BarButton:SearchBarButton";
Pods/NUI/NUI/UI/UINavigationBar+NUI.m:16:        self.nuiClass = @"NavigationBar";
Pods/NUI/NUI/UI/UITabBarItem+NUI.m:18:        self.nuiClass = @"TabBarItem";
Pods/NUI/NUI/UI/UITableViewCell+NUI.m:16:        self.nuiClass = @"TableCell";
Pods/NUI/NUI/UI/UINavigationItem+NUI.m:18:        self.nuiClass = @"NavigationItem";
Pods/NUI/NUI/UI/UITabBar+NUI.m:16:        self.nuiClass = @"TabBar";
Pods/NUI/NUI/UI/UISearchBar+NUI.m:16:        self.nuiClass = @"SearchBar";
Pods/NUI/NUI/UI/UIView+NUI.m:18:        self.nuiClass = @"View";
Pods/NUI/NUI/UI/UIView+NUI.m:48:        NSMutableArray *excludeViews = [NSMutableArray arrayWithArray:[[NUISettings get:@"exclude-views" withClass:value] componentsSeparatedByString:@","]];
Pods/NUI/NUI/UI/UIView+NUI.m:60:        NSMutableArray *excludeSubviews = [NSMutableArray arrayWithArray:[[NUISettings get:@"exclude-subviews" withClass:value] componentsSeparatedByString:@","]];
Pods/NUI/NUI/UI/UIBarButtonItem+NUI.m:18:        self.nuiClass = @"BarButton";
Pods/NUI/NUI/UI/UIProgressView+NUI.m:16:        self.nuiClass = @"Progress";
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:21:    NSDictionary *selectedTextAttributes = [NUIUtilities titleTextAttributesForClass:className withSuffix:@"selected"];
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:27:    if ([NUISettings hasProperty:@"text-offset" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:28:        [item setTitlePositionAdjustment:[NUISettings getOffset:@"text-offset" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:32:    if ([NUISettings hasProperty:@"finished-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:33:        UIImage *unselectedFinishedImage = [[NUISettings getImage:@"finished-image" withClass:className] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:37:    if ([NUISettings hasProperty:@"finished-image-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:38:        UIImage *selectedFinishedImage = [[NUISettings getImage:@"finished-image-selected" withClass:className] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:42:    if ([NUISettings hasProperty:@"finished-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:43:        UIImage *unselectedFinishedImage = [NUISettings getImage:@"finished-image" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:46:        if ([NUISettings hasProperty:@"finished-image-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarItemRenderer.m:47:            selectedFinishedImage = [NUISettings getImage:@"finished-image-selected" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:28:        [NUIRenderer renderLabel:cell.detailTextLabel withClass:className withSuffix:@"Detail"];
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:43:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:44:        UIImage *colorImage = [NUISettings getImageFromColor:@"background-color" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:49:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:51:                                  gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:52:                                  bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:58:    if ([NUISettings hasProperty:@"background-color-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:59:        UIImage *colorImage = [NUISettings getImageFromColor:@"background-color-selected" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:64:    if ([NUISettings hasProperty:@"background-color-top-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:66:                                  gradientImageWithTop:[NUISettings getColor:@"background-color-top-selected" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITableViewCellRenderer.m:67:                                  bottom:[NUISettings getColor:@"background-color-bottom-selected" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:17:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:18:        [bar setBackgroundImage:[NUISettings getImageFromColor:@"background-color" withClass:className] forToolbarPosition:UIToolbarPositionAny barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:21:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:22:        [bar setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:25:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:26:        [bar setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forToolbarPosition:UIToolbarPositionAny barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:28:    if ([NUISettings hasProperty:@"background-image-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:29:        [bar setBackgroundImage:[NUISettings getImage:@"background-image-top" withClass:className] forToolbarPosition:UIToolbarPositionTop barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:31:    if ([NUISettings hasProperty:@"background-image-bottom" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:32:        [bar setBackgroundImage:[NUISettings getImage:@"background-image-bottom" withClass:className] forToolbarPosition:UIToolbarPositionBottom barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:34:    if ([NUISettings hasProperty:@"background-image-top-landscape" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:35:        [bar setBackgroundImage:[NUISettings getImage:@"background-image-top-landscape" withClass:className] forToolbarPosition:UIToolbarPositionTop barMetrics:UIBarMetricsLandscapePhone];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:37:    if ([NUISettings hasProperty:@"background-image-bottom-landscape" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:38:        [bar setBackgroundImage:[NUISettings getImage:@"background-image-bottom-landscape" withClass:className] forToolbarPosition:UIToolbarPositionBottom barMetrics:UIBarMetricsLandscapePhone];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:43:        if ([NUISettings hasProperty:@"shadow-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:44:            [bar setShadowImage:[NUISettings getImage:@"shadow-image" withClass:className] forToolbarPosition:UIToolbarPositionAny];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:46:        if ([NUISettings hasProperty:@"shadow-image-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:47:            [bar setShadowImage:[NUISettings getImage:@"shadow-image-top" withClass:className] forToolbarPosition:UIToolbarPositionTop];
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:49:        if ([NUISettings hasProperty:@"shadow-image-bottom" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIToolbarRenderer.m:50:            [bar setShadowImage:[NUISettings getImage:@"shadow-image-bottom" withClass:className] forToolbarPosition:UIToolbarPositionBottom];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:15:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:16:        [bar setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:19:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:20:        [bar setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:23:    if ([NUISettings hasProperty:@"selected-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:24:        [bar setSelectionIndicatorImage:[NUISettings getImage:@"selected-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:27:    if ([NUISettings hasProperty:@"selected-image-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:28:        [bar setSelectedImageTintColor:[NUISettings getColor:@"selected-image-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:36:        NSArray *firstItemClasses = [firstItem.nuiClass componentsSeparatedByString: @":"];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:38:            if ([NUISettings hasProperty:@"background-image-selected" withClass:itemClass]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:39:                [bar setSelectionIndicatorImage:[NUISettings getImage:@"background-image-selected" withClass:itemClass]];
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:54:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:57:                                  gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:58:                                  bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:61:    } else if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITabBarRenderer.m:63:        UIImage *colorImage = [NUIGraphics colorImage:[NUISettings getColor:@"background-color" withClass:className] withFrame:frame];
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:21:    if ([NUISettings hasProperty:@"font-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:22:        [textField setTextColor:[NUISettings getColor:@"font-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:26:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:27:        [textField setBackgroundColor:[NUISettings getColor:@"background-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:31:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:33:                             gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:34:                             bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:40:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:41:        [textField setBackground:[NUISettings getImage:@"background-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:44:    if ([NUISettings hasProperty:@"vertical-align" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:45:        [textField setContentVerticalAlignment:[NUISettings getControlContentVerticalAlignment:@"vertical-align" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:49:    if ([NUISettings hasProperty:@"border-style" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITextFieldRenderer.m:50:        [textField setBorderStyle:[NUISettings getBorderStyle:@"border-style" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:15:    [self render:progressView withClass:@"Progress"];
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:20:    if ([NUISettings hasProperty:@"progress-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:21:        [progressView setProgressTintColor:[NUISettings getColor:@"progress-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:24:    if ([NUISettings hasProperty:@"progress-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:25:        [progressView setProgressImage:[NUISettings getImage:@"progress-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:28:    if ([NUISettings hasProperty:@"track-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:29:        [progressView setTrackTintColor:[NUISettings getColor:@"track-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:32:    if ([NUISettings hasProperty:@"track-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIProgressViewRenderer.m:33:        [progressView setTrackImage:[NUISettings getImage:@"track-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:15:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:16:        [bar setBackgroundImage:[NUISettings getImageFromColor:@"background-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:19:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:20:        [bar setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:23:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:25:                                          gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:26:                                          bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:31:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:32:        [bar setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:37:    if ([NUISettings hasProperty:@"scope-background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:38:        [bar setScopeBarBackgroundImage:[NUISettings getImageFromColor:@"scope-background-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:41:    if ([NUISettings hasProperty:@"scope-background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:42:        [bar setScopeBarBackgroundImage:[NUISettings getImage:@"scope-background-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:45:    NSString *scopeBarClassName = [NSString stringWithFormat:@"SegmentedControl:%@ScopeBar", className];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:52:    if ([NUISettings hasProperty:@"background-color" withClass:scopeBarClassName] ||
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:53:        [NUISettings hasProperty:@"border-color" withClass:scopeBarClassName]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:57:        if ([NUISettings hasProperty:@"background-color-selected" withClass:scopeBarClassName]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:58:            [layer setBackgroundColor:[[NUISettings getColor:@"background-color-selected" withClass:scopeBarClassName] CGColor]];
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:64:        if ([NUISettings hasProperty:@"border-color" withClass:scopeBarClassName]) {
Pods/NUI/NUI/Core/Renderers/NUISearchBarRenderer.m:65:            [bar setScopeBarButtonDividerImage:[NUISettings getImageFromColor:@"border-color" withClass:scopeBarClassName] forLeftSegmentState:UIControlStateNormal rightSegmentState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:16:    if ([NUISettings hasProperty:@"separator-style" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:17:        [tableView setSeparatorStyle:[NUISettings getSeparatorStyle:@"separator-style" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:21:    if ([NUISettings hasProperty:@"separator-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:22:        [tableView setSeparatorColor:[NUISettings getColor:@"separator-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:26:    if ([NUISettings hasProperty:@"row-height" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:27:        [tableView setRowHeight:[NUISettings getFloat:@"row-height" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:41:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:42:        UIImage *colorImage = [NUISettings getImageFromColor:@"background-color" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:51:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:53:                                  gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUITableViewRenderer.m:54:                                  bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:17:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:18:        [item setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:19:    } else if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:20:        [item setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:21:    } else if ([NUISettings hasProperty:@"background-color" withClass:className] ||
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:22:               [NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:27:        if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:29:                                              gradientLayerWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:30:                                              bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:43:        if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:44:            [layer setBackgroundColor:[[NUISettings getColor:@"background-color" withClass:className] CGColor]];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:47:        if ([NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:48:            [layer setBorderColor:[[NUISettings getColor:@"border-color" withClass:className] CGColor]];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:51:        if ([NUISettings hasProperty:@"border-width" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:52:            [layer setBorderWidth:[NUISettings getFloat:@"border-width" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:55:        float cornerRadius = [NUISettings getFloat:@"corner-radius" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:63:        if ([NUISettings hasProperty:@"corner-radius" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:64:            [layer setCornerRadius:[NUISettings getFloat:@"corner-radius" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:77:        if ([NUISettings hasProperty:@"background-color-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIBarButtonItemRenderer.m:79:            highlightedLayer.backgroundColor = [NUISettings getColor:@"background-color-highlighted" withClass:className].CGColor;
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:15:    if ([NUISettings hasProperty:@"minimum-track-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:16:        [slider setMinimumTrackTintColor:[NUISettings getColor:@"minimum-track-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:18:    if ([NUISettings hasProperty:@"maximum-track-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:19:        [slider setMaximumTrackTintColor:[NUISettings getColor:@"maximum-track-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:21:    if ([NUISettings hasProperty:@"minimum-value-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:22:        [slider setMinimumValueImage:[NUISettings getImage:@"minimum-value-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:24:    if ([NUISettings hasProperty:@"maximum-value-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:25:        [slider setMaximumValueImage:[NUISettings getImage:@"maximum-value-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:27:    if ([NUISettings hasProperty:@"thumb-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:28:        [slider setThumbImage:[NUISettings getImage:@"thumb-image" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:30:    if ([NUISettings hasProperty:@"thumb-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISliderRenderer.m:31:        [slider setThumbTintColor:[NUISettings getColor:@"thumb-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:18:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:19:        if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:20:            [control setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:22:        if ([NUISettings hasProperty:@"background-image-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:23:            [control setBackgroundImage:[NUISettings getImage:@"background-image-selected" withClass:className] forState:UIControlStateSelected barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:25:    } else if ([NUISettings hasProperty:@"background-color" withClass:className] ||
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:26:               [NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:30:        if ([NUISettings hasProperty:@"background-color-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:31:            [layer setBackgroundColor:[[NUISettings getColor:@"background-color-selected" withClass:className] CGColor]];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:36:        if ([NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:37:            [control setDividerImage:[NUISettings getImageFromColor:@"border-color" withClass:className] forLeftSegmentState:UIControlStateNormal rightSegmentState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:42:    if ([NUISettings hasProperty:@"divider-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:43:        [control setDividerImage:[NUISettings getImage:@"divider-image" withClass:className] forLeftSegmentState:UIControlStateNormal rightSegmentState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:44:    } else if ([NUISettings hasProperty:@"divider-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:45:        [control setDividerImage:[NUISettings getImageFromColor:@"divider-color" withClass:className] forLeftSegmentState:UIControlStateNormal rightSegmentState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:49:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:54:        [control setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISegmentedControlRenderer.m:63:    NSDictionary *selectedSegmentAttributeOverrides = [NUIUtilities titleTextAttributesForClass:className withSuffix:@"selected"];
Pods/NUI/NUI/Core/Renderers/NUITextViewRenderer.m:9:    property = @"font-color";
Pods/NUI/NUI/Core/Renderers/NUITextViewRenderer.m:18:    property = @"padding";
Pods/NUI/NUI/Core/Renderers/NUITextViewRenderer.m:20:        [textView setContentInset:[NUISettings getEdgeInsets:@"padding" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIControlRenderer.m:16:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIControlRenderer.m:17:        [control setBackgroundColor: [NUISettings getColorFromImage:@"background-image" withClass: className]];
Pods/NUI/NUI/Core/Renderers/NUIControlRenderer.m:18:    } else if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIControlRenderer.m:19:        [control setBackgroundColor: [NUISettings getColor:@"background-color" withClass: className]];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:16:    [self render:label withClass:className withSuffix:@""];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:21:    if (![suffix isEqualToString:@""]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:22:        className = [NSString stringWithFormat:@"%@%@", className, suffix];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:25:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:26:        label.backgroundColor = [NUISettings getColor:@"background-color" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:34:    if ([NUISettings hasProperty:@"font-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:35:        label.textColor = [NUISettings getColor:@"font-color" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:38:    if ([NUISettings hasProperty:@"font-color-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:39:        label.highlightedTextColor = [NUISettings getColor:@"font-color-highlighted" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:56:    property = @"text-align";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:61:    property = @"text-alpha";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:66:    property = @"text-auto-fit";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:71:    property = @"text-shadow-color";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:76:    property = @"text-shadow-offset";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:84:    return [NUISettings hasProperty:@"text-transform" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:95:    property = @"text-transform";
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:100:        if ([transform isEqualToString:@"uppercase"]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:102:        } else if ([transform isEqualToString:@"lowercase"]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:104:        } else if ([transform isEqualToString:@"capitalize"]) {
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:120:        [attributes addObject:@{@"attrs":attrs, @"range":[NSValue valueWithRange:range]}];
Pods/NUI/NUI/Core/Renderers/NUILabelRenderer.m:129:        [transformedAttributedText setAttributes:attribute[@"attrs"] range:[attribute[@"range"] rangeValue]];
Pods/NUI/NUI/Core/Renderers/NUIWindowRenderer.m:14:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIWindowRenderer.m:15:        [window.rootViewController.view setBackgroundColor:[NUISettings getColor:@"background-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:29:    if ([NUISettings hasProperty:@"padding" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:30:        [button setTitleEdgeInsets:[NUISettings getEdgeInsets:@"padding" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:34:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:35:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:37:    if ([NUISettings hasProperty:@"background-color-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:38:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color-highlighted" withClass:className] forState:UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:40:    if ([NUISettings hasProperty:@"background-color-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:41:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color-selected" withClass:className] forState:UIControlStateSelected];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:43:    if ([NUISettings hasProperty:@"background-color-selected-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:44:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color-selected-highlighted" withClass:className] forState:UIControlStateSelected|UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:46:    if ([NUISettings hasProperty:@"background-color-selected-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:47:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color-selected-disabled" withClass:className] forState:UIControlStateSelected|UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:49:    if ([NUISettings hasProperty:@"background-color-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:50:        [button setBackgroundImage:[NUISettings getImageFromColor:@"background-color-disabled" withClass:className] forState:UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:54:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:56:                                          gradientLayerWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:57:                                          bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:71:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:72:        [button setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:74:    if ([NUISettings hasProperty:@"background-image-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:75:        [button setBackgroundImage:[NUISettings getImage:@"background-image-highlighted" withClass:className] forState:UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:77:    if ([NUISettings hasProperty:@"background-image-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:78:        [button setBackgroundImage:[NUISettings getImage:@"background-image-selected" withClass:className] forState:UIControlStateSelected];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:80:    if ([NUISettings hasProperty:@"background-image-selected-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:81:        [button setBackgroundImage:[NUISettings getImage:@"background-image-selected-highlighted" withClass:className] forState:UIControlStateSelected|UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:83:    if ([NUISettings hasProperty:@"background-image-selected-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:84:        [button setBackgroundImage:[NUISettings getImage:@"background-image-selected-disabled" withClass:className] forState:UIControlStateSelected|UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:86:    if ([NUISettings hasProperty:@"background-image-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:87:        [button setBackgroundImage:[NUISettings getImage:@"background-image-disabled" withClass:className] forState:UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:91:    if ([NUISettings hasProperty:@"image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:92:        [button setImage:[NUISettings getImage:@"image" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:94:    if ([NUISettings hasProperty:@"image-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:95:        [button setImage:[NUISettings getImage:@"image-highlighted" withClass:className] forState:UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:97:    if ([NUISettings hasProperty:@"image-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:98:        [button setImage:[NUISettings getImage:@"image-selected" withClass:className] forState:UIControlStateSelected];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:100:    if ([NUISettings hasProperty:@"image-selected-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:101:        [button setImage:[NUISettings getImage:@"image-selected-highlighted" withClass:className] forState:UIControlStateSelected|UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:103:    if ([NUISettings hasProperty:@"image-selected-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:104:        [button setImage:[NUISettings getImage:@"image-selected-disabled" withClass:className] forState:UIControlStateSelected|UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:106:    if ([NUISettings hasProperty:@"image-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:107:        [button setImage:[NUISettings getImage:@"image-disabled" withClass:className] forState:UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:113:    if ([NUISettings hasProperty:@"text-align" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:114:        [button setContentHorizontalAlignment:[NUISettings getControlContentHorizontalAlignment:@"text-align" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:118:    if ([NUISettings hasProperty:@"font-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:119:        [button setTitleColor:[NUISettings getColor:@"font-color" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:121:    if ([NUISettings hasProperty:@"font-color-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:122:        [button setTitleColor:[NUISettings getColor:@"font-color-highlighted" withClass:className] forState:UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:124:    if ([NUISettings hasProperty:@"font-color-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:125:        [button setTitleColor:[NUISettings getColor:@"font-color-selected" withClass:className] forState:UIControlStateSelected];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:127:    if ([NUISettings hasProperty:@"font-color-selected-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:128:        [button setTitleColor:[NUISettings getColor:@"font-color-selected-highlighted" withClass:className] forState:UIControlStateSelected|UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:130:    if ([NUISettings hasProperty:@"font-color-selected-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:131:        [button setTitleColor:[NUISettings getColor:@"font-color-selected-disabled" withClass:className] forState:UIControlStateSelected|UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:133:    if ([NUISettings hasProperty:@"font-color-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:134:        [button setTitleColor:[NUISettings getColor:@"font-color-disabled" withClass:className] forState:UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:138:    if ([NUISettings hasProperty:@"text-shadow-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:139:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color" withClass:className] forState:UIControlStateNormal];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:141:    if ([NUISettings hasProperty:@"text-shadow-color-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:142:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color-highlighted" withClass:className] forState:UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:144:    if ([NUISettings hasProperty:@"text-shadow-color-selected" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:145:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color-selected" withClass:className] forState:UIControlStateSelected];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:147:    if ([NUISettings hasProperty:@"text-shadow-color-selected-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:148:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color-selected-highlighted" withClass:className] forState:UIControlStateSelected|UIControlStateHighlighted];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:150:    if ([NUISettings hasProperty:@"text-shadow-color-selected-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:151:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color-selected-disabled" withClass:className] forState:UIControlStateSelected|UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:153:    if ([NUISettings hasProperty:@"text-shadow-color-disabled" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:154:        [button setTitleShadowColor:[NUISettings getColor:@"text-shadow-color-disabled" withClass:className] forState:UIControlStateDisabled];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:158:    if ([NUISettings hasProperty:@"title-insets" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:159:        [button setTitleEdgeInsets:[NUISettings getEdgeInsets:@"title-insets" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:163:    if ([NUISettings hasProperty:@"content-insets" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:164:        [button setContentEdgeInsets:[NUISettings getEdgeInsets:@"content-insets" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:171:        [NUISettings hasProperty:@"corner-radius" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIButtonRenderer.m:172:        CGFloat r = [NUISettings getFloat:@"corner-radius" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:15:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:16:        if ([NUISettings hasProperty:@"background-repeat" withClass:className] && ![NUISettings getBoolean:@"background-repeat" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:17:            view.layer.contents = (__bridge id)[NUISettings getImage:@"background-image" withClass:className].CGImage;
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:19:            [view setBackgroundColor: [NUISettings getColorFromImage:@"background-image" withClass: className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:21:    } else if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:22:        [view setBackgroundColor: [NUISettings getColor:@"background-color" withClass: className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:34:    if ([NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:35:        [layer setBorderColor:[[NUISettings getColor:@"border-color" withClass:className] CGColor]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:38:    if ([NUISettings hasProperty:@"border-width" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:39:        [layer setBorderWidth:[NUISettings getFloat:@"border-width" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:42:    if ([NUISettings hasProperty:@"corner-radius" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:43:        [layer setCornerRadius:[NUISettings getFloat:@"corner-radius" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:52:    if ([NUISettings hasProperty:@"shadow-radius" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:53:        [layer setShadowRadius:[NUISettings getFloat:@"shadow-radius" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:56:    if ([NUISettings hasProperty:@"shadow-offset" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:57:        [layer setShadowOffset:[NUISettings getSize:@"shadow-offset" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:60:    if ([NUISettings hasProperty:@"shadow-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:61:        [layer setShadowColor:[NUISettings getColor:@"shadow-color" withClass:className].CGColor];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:64:    if ([NUISettings hasProperty:@"shadow-opacity" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:65:        [layer setShadowOpacity:[NUISettings getFloat:@"shadow-opacity" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:72:    if ([NUISettings hasProperty:@"height" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:73:        height = [NUISettings getFloat:@"height" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:77:    if ([NUISettings hasProperty:@"width" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:78:        width = [NUISettings getFloat:@"width" withClass:className];
Pods/NUI/NUI/Core/Renderers/NUIViewRenderer.m:89:    for (NSString *property in @[@"shadow-radius", @"shadow-offset", @"shadow-color", @"shadow-opacity"]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:15:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:16:        [uiSwitch setBackgroundColor:[NUISettings getColor:@"background-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:19:    if ([NUISettings hasProperty:@"off-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:20:        [uiSwitch setOffImage:[NUISettings getImage:@"off-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:23:    if ([NUISettings hasProperty:@"on-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:24:        [uiSwitch setOnImage:[NUISettings getImage:@"on-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:27:    if ([NUISettings hasProperty:@"on-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:28:        [uiSwitch setOnTintColor:[NUISettings getColor:@"on-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:31:    if ([NUISettings hasProperty:@"thumb-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:32:        [uiSwitch setThumbTintColor:[NUISettings getColor:@"thumb-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:35:    if ([NUISettings hasProperty:@"tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUISwitchRenderer.m:36:        [uiSwitch setTintColor:[NUISettings getColor:@"tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:16:        if ([NUISettings hasProperty:@"bar-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:17:            [bar setBarTintColor:[NUISettings getColor:@"bar-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:21:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:22:        [bar setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:25:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:26:        [bar setBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forBarMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:28:    if ([NUISettings hasProperty:@"shadow-image" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:29:        [bar setShadowImage:[NUISettings getImage:@"shadow-image" withClass:className]];
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:32:    NSString *property = @"title-vertical-offset";
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:56:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:59:                                  gradientImageWithTop:[NUISettings getColor:@"background-color-top" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:60:                                  bottom:[NUISettings getColor:@"background-color-bottom" withClass:className]
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:63:    } else if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/Renderers/NUINavigationBarRenderer.m:65:        UIImage *colorImage = [NUIGraphics colorImage:[NUISettings getColor:@"background-color" withClass:className] withFrame:frame];
Pods/NUI/NUI/Core/NUIStyleParser.m:24:    NSString* path = [[NSBundle mainBundle] pathForResource:fileName ofType:@"nss"];
Pods/NUI/NUI/Core/NUIStyleParser.m:25:    NSAssert1(path != nil, @"File \"%@\" does not exist", fileName);
Pods/NUI/NUI/Core/NUIStyleParser.m:68:        if ([value hasPrefix:@"@"]) {
Pods/NUI/NUI/Core/NUIStyleParser.m:73:                [NSException raise:@"Undefined variable" format:@"Variable %@ is not defined", variable];
Pods/NUI/NUI/Core/NUIStyleParser.m:87:    NSString *mediaDevice = mediaOptions[@"device"];
Pods/NUI/NUI/Core/NUIStyleParser.m:91:            device = (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) ? @"ipad" : @"iphone";
Pods/NUI/NUI/Core/NUIStyleParser.m:98:    NSString *mediaOrientation = mediaOptions[@"orientation"];
Pods/NUI/NUI/Core/NUIStyleParser.m:116:    [tokeniser addTokenRecogniser:[NUIPQuotedRecogniser quotedRecogniserWithStartQuote:@"/*"
Pods/NUI/NUI/Core/NUIStyleParser.m:117:                                                                            endQuote:@"*/"
Pods/NUI/NUI/Core/NUIStyleParser.m:118:                                                                                name:@"Comment"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:120:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"@media"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:121:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"and"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:124:                                    @"abcdefghijklmnopqrstuvwxyz"
Pods/NUI/NUI/Core/NUIStyleParser.m:125:                                    @"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Pods/NUI/NUI/Core/NUIStyleParser.m:126:                                    @"0123456789"
Pods/NUI/NUI/Core/NUIStyleParser.m:127:                                    @"-_\\/."];
Pods/NUI/NUI/Core/NUIStyleParser.m:129:                                           @"abcdefghijklmnopqrstuvwxyz"
Pods/NUI/NUI/Core/NUIStyleParser.m:130:                                           @"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Pods/NUI/NUI/Core/NUIStyleParser.m:131:                                           @"0123456789"
Pods/NUI/NUI/Core/NUIStyleParser.m:132:                                           @"#@-_\\."];
Pods/NUI/NUI/Core/NUIStyleParser.m:135:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@":"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:136:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"{"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:137:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"}"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:138:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@"("]];
Pods/NUI/NUI/Core/NUIStyleParser.m:139:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@")"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:140:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@","]];
Pods/NUI/NUI/Core/NUIStyleParser.m:141:    [tokeniser addTokenRecogniser:[NUIPKeywordRecogniser recogniserForKeyword:@";"]];
Pods/NUI/NUI/Core/NUIStyleParser.m:147:       @"NUIStyleSheet            ::= items@<NUIStyleSheetItem>*;\n"
Pods/NUI/NUI/Core/NUIStyleParser.m:165:    NUIPGrammar *grammar = [NUIPGrammar grammarWithStart:@"NUIStyleSheet"
Pods/NUI/NUI/Core/NUIStyleParser.m:169:        NSLog(@"Error creating grammar:%@", err);
Pods/NUI/NUI/Core/NUIConstants.h:11:static NSString * const kNUIClassNone               = @"none";
Pods/NUI/NUI/Core/NUIConverter.m:17:        if ([value isEqualToString:@"true"]) {
Pods/NUI/NUI/Core/NUIConverter.m:20:        if ([value isEqualToString:@"false"]) {
Pods/NUI/NUI/Core/NUIConverter.m:39:    NSArray *strings = [value componentsSeparatedByString: @","];
Pods/NUI/NUI/Core/NUIConverter.m:55:    values = [values filteredArrayUsingPredicate: [NSPredicate predicateWithFormat:@"SELF != ''"]];
Pods/NUI/NUI/Core/NUIConverter.m:92:    } else if ([value isEqualToString:@"line"]) {
Pods/NUI/NUI/Core/NUIConverter.m:94:    } else if ([value isEqualToString:@"bezel"]) {
Pods/NUI/NUI/Core/NUIConverter.m:96:    } else if ([value isEqualToString:@"rounded"]) {
Pods/NUI/NUI/Core/NUIConverter.m:106:    } else if([value isEqualToString:@"single-line"]) {
Pods/NUI/NUI/Core/NUIConverter.m:108:    } else if([value isEqualToString:@"single-line-etched"]){
Pods/NUI/NUI/Core/NUIConverter.m:118:    SEL selector = NSSelectorFromString([NSString stringWithFormat:@"%@Color", value]);
Pods/NUI/NUI/Core/NUIConverter.m:131:                                 componentsJoinedByString:@""]
Pods/NUI/NUI/Core/NUIConverter.m:135:                                               withPattern:@"(?:0X|#)([0-9A-F]{6})"];
Pods/NUI/NUI/Core/NUIConverter.m:137:                                              withPattern:@"(RGB|RGBA|HSL|HSLA)\\((\\d{1,3}|[0-9.]+),(\\d{1,3}|[0-9.]+),(\\d{1,3}|[0-9.]+)(?:,(\\d{1,3}|[0-9.]+))?\\)"];
Pods/NUI/NUI/Core/NUIConverter.m:149:        BOOL isRGB = [[csStrings objectAtIndex:1] hasPrefix:@"RGB"];
Pods/NUI/NUI/Core/NUIConverter.m:150:        BOOL isAlpha = [[csStrings objectAtIndex:1] hasSuffix:@"A"];
Pods/NUI/NUI/Core/NUIConverter.m:181:    if ([s rangeOfString:@"."].location != NSNotFound) {
Pods/NUI/NUI/Core/NUIConverter.m:217:    if ([value isEqualToString:@"center"]) {
Pods/NUI/NUI/Core/NUIConverter.m:219:    } else if ([value isEqualToString:@"right"]) {
Pods/NUI/NUI/Core/NUIConverter.m:230:    if ([value isEqualToString:@"center"]) {
Pods/NUI/NUI/Core/NUIConverter.m:232:    } else if ([value isEqualToString:@"right"]) {
Pods/NUI/NUI/Core/NUIConverter.m:234:    } else if ([value isEqualToString:@"fill"]) {
Pods/NUI/NUI/Core/NUIConverter.m:245:    if ([value isEqualToString:@"center"]) {
Pods/NUI/NUI/Core/NUIConverter.m:247:    } else if ([value isEqualToString:@"bottom"]) {
Pods/NUI/NUI/Core/NUIConverter.m:249:    } else if ([value isEqualToString:@"fill"]) {
Pods/NUI/NUI/Core/NUIGraphics.m:32:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:33:        shape.fillColor = [[NUISettings getColor:@"background-color" withClass:className] CGColor];
Pods/NUI/NUI/Core/NUIGraphics.m:35:    if ([NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:36:        shape.fillColor = [[NUISettings getColor:@"background-color-top" withClass:className] CGColor];
Pods/NUI/NUI/Core/NUIGraphics.m:39:    if ([NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:40:        shape.strokeColor = [[NUISettings getColor:@"border-color" withClass:className] CGColor];
Pods/NUI/NUI/Core/NUIGraphics.m:43:    if ([NUISettings hasProperty:@"border-width" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:44:        shape.lineWidth = [NUISettings getFloat:@"border-width" withClass:className];
Pods/NUI/NUI/Core/NUIGraphics.m:47:    if ([NUISettings hasProperty:@"corner-radius" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:48:        cornerRadius = [NUISettings getFloat:@"corner-radius" withClass:className];
Pods/NUI/NUI/Core/NUIGraphics.m:81:    if ([NUISettings hasProperty:@"background-color" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:82:        [layer setBackgroundColor:[[NUISettings getColor:@"background-color" withClass:className] CGColor]];
Pods/NUI/NUI/Core/NUIGraphics.m:85:    if ([NUISettings hasProperty:@"border-color" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:86:        [layer setBorderColor:[[NUISettings getColor:@"border-color" withClass:className] CGColor]];
Pods/NUI/NUI/Core/NUIGraphics.m:89:    if ([NUISettings hasProperty:@"border-width" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:90:        [layer setBorderWidth:[NUISettings getFloat:@"border-width" withClass:className]];
Pods/NUI/NUI/Core/NUIGraphics.m:93:    if ([NUISettings hasProperty:@"corner-radius" withClass:className]) {
Pods/NUI/NUI/Core/NUIGraphics.m:94:        [layer setCornerRadius:[NUISettings getFloat:@"corner-radius" withClass:className]];
Pods/NUI/NUI/Core/NUIGraphics.m:108:    float cornerRadius = [NUISettings getFloat:@"corner-radius" withClass:className];
Pods/NUI/NUI/Core/NUIGraphics.m:158:    CIFilter *monochromeFilter = [CIFilter filterWithName:@"CIColorMonochrome"];
Pods/NUI/NUI/Core/NUIGraphics.m:161:    [monochromeFilter setValue:baseImage forKey:@"inputImage"];        
Pods/NUI/NUI/Core/NUIGraphics.m:162:    [monochromeFilter setValue:[CIColor colorWithRed:0.75 green:0.75 blue:0.75] forKey:@"inputColor"];
Pods/NUI/NUI/Core/NUIGraphics.m:163:    [monochromeFilter setValue:[NSNumber numberWithFloat:1.0] forKey:@"inputIntensity"];
Pods/NUI/NUI/Core/NUIGraphics.m:165:    CIFilter *compositingFilter = [CIFilter filterWithName:@"CIMultiplyCompositing"];
Pods/NUI/NUI/Core/NUIGraphics.m:167:    CIFilter *colorGenerator = [CIFilter filterWithName:@"CIConstantColorGenerator"];
Pods/NUI/NUI/Core/NUIGraphics.m:168:    [colorGenerator setValue:color forKey:@"inputColor"];
Pods/NUI/NUI/Core/NUIGraphics.m:170:    [compositingFilter setValue:[colorGenerator valueForKey:@"outputImage"] forKey:@"inputImage"];
Pods/NUI/NUI/Core/NUIGraphics.m:171:    [compositingFilter setValue:[monochromeFilter valueForKey:@"outputImage"] forKey:@"inputBackgroundImage"];
Pods/NUI/NUI/Core/NUIGraphics.m:173:    CIImage *outputImage = [compositingFilter valueForKey:@"outputImage"];
Pods/NUI/NUI/Core/NUISwizzler.m:33:    [self swizzle:[UITextField class] methodName:@"textRectForBounds:"];
Pods/NUI/NUI/Core/NUISwizzler.m:34:    [self swizzle:[UITextField class] methodName:@"editingRectForBounds:"];
Pods/NUI/NUI/Core/NUISwizzler.m:35:    [self swizzle:[UIWindow class] methodName:@"becomeKeyWindow"];
Pods/NUI/NUI/Core/NUISwizzler.m:37:    [self swizzle:[UILabel class] methodName:@"setText:"];
Pods/NUI/NUI/Core/NUISwizzler.m:38:    [self swizzle:[UIButton class] methodName:@"setTitle:forState:"];
Pods/NUI/NUI/Core/NUISwizzler.m:41:        [self swizzle:[UILabel class] methodName:@"setAttributedText:"];
Pods/NUI/NUI/Core/NUISwizzler.m:42:        [self swizzle:[UIButton class] methodName:@"setAttributedTitle:forState:"];
Pods/NUI/NUI/Core/NUISwizzler.m:53:    [self swizzle:class methodName:@"didMoveToWindow"];
Pods/NUI/NUI/Core/NUISwizzler.m:57:    [self swizzle:class methodName:@"dealloc"];
Pods/NUI/NUI/Core/NUISwizzler.m:63:    SEL newMethod = NSSelectorFromString([NSString stringWithFormat:@"%@%@", @"override_", methodName]);
Pods/NUI/NUI/Core/NUIUtilities.m:17:    NSString *fontColorSelector = [NUIUtilities selector:@"font-color" withSuffix:suffix];
Pods/NUI/NUI/Core/NUIUtilities.m:18:    NSString *textShadowColorSelector = [NUIUtilities selector:@"text-shadow-color" withSuffix:suffix];
Pods/NUI/NUI/Core/NUIUtilities.m:19:    NSString *textShadowOffsetSelector = [NUIUtilities selector:@"text-shadow-offset" withSuffix:suffix];
Pods/NUI/NUI/Core/NUIUtilities.m:74:        return [NSString stringWithFormat:@"%@-%@", selector, suffix];
Pods/NUI/NUI/Core/Parser/NUIDefinition.m:20:        self.variable = [[syntaxTree valueForTag:@"variable"] variable];
Pods/NUI/NUI/Core/Parser/NUIDefinition.m:21:        self.value    = [syntaxTree valueForTag:@"value"];
Pods/NUI/NUI/Core/Parser/NUIDefinition.m:29:    return [NSString stringWithFormat:@"<NUIDefinition: %@ = %@>", self.variable, self.value];
Pods/NUI/NUI/Core/Parser/NUIRuleSet.m:20:        self.selectors = [[syntaxTree valueForTag:@"selectors"] selectors];
Pods/NUI/NUI/Core/Parser/NUIRuleSet.m:22:        NSArray *declarationList = [syntaxTree valueForTag:@"declarations"];
Pods/NUI/NUI/Core/Parser/NUIRuleSet.m:38:    return [NSString stringWithFormat:@"<NUIRuleSet: %@ { %@ } >", self.selectors, self.declarations];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:22:        self.property = [[syntaxTree valueForTag:@"property"] identifier];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:23:        self.value    = [[syntaxTree valueForTag:@"value"] identifier];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:31:    return [NSString stringWithFormat:@"<NUIMediaOption: %@ = %@>", self.property, self.value];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:43:        self.mediaOption = [syntaxTree valueForTag:@"mediaOption"];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:51:    return [NSString stringWithFormat:@"<NUIDelimitedMediaOption: %@>", self.mediaOption];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:63:        NUIMediaOption *firstMediaOption = [syntaxTree valueForTag:@"firstMediaOption"];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:66:        NSArray *delimitedMediaOptions = [syntaxTree valueForTag:@"otherMediaOptions"];
Pods/NUI/NUI/Core/Parser/NUIMediaOptionSet.m:83:    return [NSString stringWithFormat:@"<NUIMediaOptionSet: %@>", self.mediaOptions];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:26:        self.name = [[syntaxTree valueForTag:@"name"] identifier];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:34:    return [NSString stringWithFormat:@"<NUISelector: %@>", self.name];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:46:        self.selector = [syntaxTree valueForTag:@"selector"];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:54:    return [NSString stringWithFormat:@"<NUIDelimitedSelector: %@>", self.selector];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:66:        NUISelector *firstSelector = [syntaxTree valueForTag:@"firstSelector"];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:69:        NSArray *delimitedSelectors = [syntaxTree valueForTag:@"otherSelectors"];
Pods/NUI/NUI/Core/Parser/NUISelectorSet.m:85:    return [NSString stringWithFormat:@"<NUISelectorSet: %@>", self.selectors];
Pods/NUI/NUI/Core/Parser/NUIStyleSheetItem.m:20:        NUIMediaBlock *mediaBlock = [syntaxTree valueForTag:@"mediaBlock"];
Pods/NUI/NUI/Core/Parser/NUIStyleSheetItem.m:21:        NUIRuleSet *ruleSet       = [syntaxTree valueForTag:@"ruleSet"];
Pods/NUI/NUI/Core/Parser/NUIStyleSheetItem.m:22:        NUIDefinition *definition = [syntaxTree valueForTag:@"definition"];
Pods/NUI/NUI/Core/Parser/NUIStyleSheetItem.m:39:    return [NSString stringWithFormat:@"<NUIStylesheetItem: %@ %@>", self.ruleSets, self.definitions];
Pods/NUI/NUI/Core/Parser/NUIDeclaration.m:19:        self.property = [[syntaxTree valueForTag:@"property"] identifier];
Pods/NUI/NUI/Core/Parser/NUIDeclaration.m:20:        self.value    = [syntaxTree valueForTag:@"value"];
Pods/NUI/NUI/Core/Parser/NUIDeclaration.m:28:    return [NSString stringWithFormat:@"<NUIDeclaration: %@ = %@>", self.property, self.value];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:27:        self.ruleSet    = [syntaxTree valueForTag:@"ruleSet"];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:28:        self.definition = [syntaxTree valueForTag:@"definition"];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:36:    return [NSString stringWithFormat:@"<NUIMediaBlockItem: %@, %@>", self.ruleSet, self.definition];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:49:        NUIMediaOptionSet *mediaOptionSet = [syntaxTree valueForTag:@"mediaOptions"];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:54:        NSArray *items = [syntaxTree valueForTag:@"items"];
Pods/NUI/NUI/Core/Parser/NUIMediaBlock.m:75:    return [NSString stringWithFormat:@"<NUIMediaBlock: %@, %@>", self.ruleSets, self.definitions];
Pods/NUI/NUI/Core/Parser/NUITokeniserDelegate.m:20:    if ([token isWhiteSpaceToken] || [[token name] isEqualToString:@"Comment"])
Pods/NUI/NUI/Core/Parser/NUITokeniserDelegate.m:26:        if ([idToken.identifier hasPrefix:@"@"]) {
Pods/NUI/NUI/Core/Parser/NUIParserDelegate.m:44:            [NSException raise:@"Unexpected value token" format:nil];
Pods/NUI/NUI/Core/Parser/NUIParserDelegate.m:48:            [contents appendFormat:@" %@", tokenString];
Pods/NUI/NUI/Core/Parser/NUIStyleSheet.m:21:        NSArray *items = [syntaxTree valueForTag:@"items"];
Pods/NUI/NUI/Core/Parser/NUIStyleSheet.m:43:    return [NSString stringWithFormat:@"<NUIStyleSheet ruleSets: %@, definitions: %@>", self.ruleSets, self.definitions];
Pods/NUI/NUI/Core/NUIAppearance.m:20:    NSString *className = @"BarButton:BarButtonBack";
Pods/NUI/NUI/Core/NUIAppearance.m:29:    if ([NUISettings hasProperty:@"background-tint-color" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:30:        [[uiClass appearance] setTintColor:[NUISettings getColor:@"background-tint-color" withClass:className]];
Pods/NUI/NUI/Core/NUIAppearance.m:33:    if ([NUISettings hasProperty:@"background-color" withClass:className] ||
Pods/NUI/NUI/Core/NUIAppearance.m:34:               [NUISettings hasProperty:@"background-color-top" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:38:    if ([NUISettings hasProperty:@"background-image" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:39:        [[uiClass appearance] setBackButtonBackgroundImage:[NUISettings getImage:@"background-image" withClass:className] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/NUIAppearance.m:41:    if ([NUISettings hasProperty:@"background-image-selected" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:42:        [[uiClass appearance] setBackButtonBackgroundImage:[NUISettings getImage:@"background-image-selected" withClass:className] forState:UIControlStateSelected barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/NUIAppearance.m:44:    if ([NUISettings hasProperty:@"background-image-highlighted" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:45:        [[uiClass appearance] setBackButtonBackgroundImage:[NUISettings getImage:@"background-image-highlighted" withClass:className] forState:UIControlStateHighlighted barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/NUIAppearance.m:47:    if ([NUISettings hasProperty:@"background-image-disabled" withClass:className]) {
Pods/NUI/NUI/Core/NUIAppearance.m:48:        [[uiClass appearance] setBackButtonBackgroundImage:[NUISettings getImage:@"background-image-disabled" withClass:className] forState:UIControlStateDisabled barMetrics:UIBarMetricsDefault];
Pods/NUI/NUI/Core/Parser/NUIVariableToken.m:14:    return @"Variable";
Pods/NUI/NUI/Core/NUISettings.m:23:    [self initWithStylesheet:@"NUIStyle"];
Pods/NUI/NUI/Core/NUISettings.m:141:    return [self hasProperty:@"font-name" withClass:className] ||
Pods/NUI/NUI/Core/NUISettings.m:142:           [self hasProperty:@"font-size" withClass:className];
Pods/NUI/NUI/Core/NUISettings.m:208:    propertyName = @"font-size";
Pods/NUI/NUI/Core/NUISettings.m:211:        fontSize = [self getFloat:@"font-size" withClass:className];
Pods/NUI/NUI/Core/NUISettings.m:216:    propertyName = @"font-name";
Pods/NUI/NUI/Core/NUISettings.m:221:        if ([fontName isEqualToString:@"system"]) {
Pods/NUI/NUI/Core/NUISettings.m:223:        } else if ([fontName isEqualToString:@"boldSystem"]) {
Pods/NUI/NUI/Core/NUISettings.m:225:        } else if ([fontName isEqualToString:@"italicSystem"]) {
Pods/NUI/NUI/Core/NUISettings.m:255:    NSString *insetsProperty = [NSString stringWithFormat:@"%@%@", property, @"-insets"];
Pods/NUI/NUI/Core/NUISettings.m:280:    NSArray *classes = [[[className componentsSeparatedByString: @":"] reverseObjectEnumerator] allObjects];
Pods/NUI/NUI/Core/NUISettings.m:305:    return UIInterfaceOrientationIsLandscape(orientation) ? @"landscape" : @"portrait";
Pods/NUI/NUI/Core/NUIRenderer.m:18:    [NUIBarButtonItemRenderer render:item withClass:@"BarButton"];
Pods/NUI/NUI/Core/NUIRenderer.m:28:    [NUIButtonRenderer render:button withClass:@"Button"];
Pods/NUI/NUI/Core/NUIRenderer.m:38:    [NUIControlRenderer render:control withClass:@"Control"];
Pods/NUI/NUI/Core/NUIRenderer.m:48:    [NUILabelRenderer render:label withClass:@"Label"];
Pods/NUI/NUI/Core/NUIRenderer.m:63:    [NUINavigationBarRenderer render:bar withClass:@"NavigationBar"];
Pods/NUI/NUI/Core/NUIRenderer.m:83:    [NUINavigationItemRenderer render:item withClass:@"NavigationBar"];
Pods/NUI/NUI/Core/NUIRenderer.m:93:    [NUISearchBarRenderer render:bar withClass:@"SearchBar"];
Pods/NUI/NUI/Core/NUIRenderer.m:103:    [NUISegmentedControlRenderer render:control withClass:@"SegmentedControl"];
Pods/NUI/NUI/Core/NUIRenderer.m:113:    [NUISliderRenderer render:slider withClass:@"Slider"];
Pods/NUI/NUI/Core/NUIRenderer.m:123:    [NUISwitchRenderer render:uiSwitch withClass:@"Switch"];
Pods/NUI/NUI/Core/NUIRenderer.m:133:    [NUITabBarRenderer render:bar withClass:@"TabBar"];
Pods/NUI/NUI/Core/NUIRenderer.m:143:    [NUITabBarItemRenderer render:item withClass:@"TabBarItem"];
Pods/NUI/NUI/Core/NUIRenderer.m:153:    [NUITableViewRenderer render:tableView withClass:@"Table"];
Pods/NUI/NUI/Core/NUIRenderer.m:163:    [NUITableViewCellRenderer render:cell withClass:@"TableCell"];
Pods/NUI/NUI/Core/NUIRenderer.m:173:    [NUIToolbarRenderer render:bar withClass:@"Toolbar"];
Pods/NUI/NUI/Core/NUIRenderer.m:183:    [NUITextFieldRenderer render:textField withClass:@"TextField"];
Pods/NUI/NUI/Core/NUIRenderer.m:193:    [NUITextViewRenderer render:textView withClass:@"TextView"];
Pods/NUI/NUI/Core/NUIRenderer.m:203:    [NUIViewRenderer render:view withClass:@"View"];
Pods/NUI/NUI/Core/NUIRenderer.m:213:    [NUIWindowRenderer render:window withClass:@"Window"];
Pods/EDSemver/README.md:10:EDSemver *left  = [[EDSemver alloc] initWithString:@"1.2.3-foo"];
Pods/EDSemver/README.md:11:EDSemver *right = [[EDSemver alloc] initWithString:@"1.2.3"];
Pods/EDSemver/README.md:16:EDSemver *version  = [[EDSemver alloc] initWithString:@"v22.0.4-alpha+1234"];
Pods/AugustAPI/August API/AGOperationItem.m:90:        NSError *error = [NSError errorWithDomain:@"OperationItem" code:errorID userInfo:[NSDictionary dictionaryWithObject:msg forKey:@"msg"]];
Pods/AugustAPI/August API/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
Pods/AugustAPI/August API/AGGuestbookEntry.m:14:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/guestbookentries/%d/%d", houseID, (int)count, (int)start] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGGuestbookEntry.m:22:                guestbookEntry.objectId = responseDictionary[@"EntryID"];
Pods/AugustAPI/August API/AGGuestbookEntry.m:23:                NSDictionary *userDict = responseDictionary[@"author"];
Pods/AugustAPI/August API/AGGuestbookEntry.m:27:                guestbookEntry.content = [AGClient stringByDecodingXMLEntities:responseDictionary[@"snippet"]];
Pods/AugustAPI/August API/AGGuestbookEntry.m:28:                long long timeIntervalSince1970 = [responseDictionary[@"date"] longLongValue];
Pods/AugustAPI/August API/AGGuestbookEntry.m:43:            //DLog(@"locks fail %@", error.description);
Pods/AugustAPI/August API/AGGuestbookEntry.m:53:    NSString * path = [NSString stringWithFormat:@"houses/%@/guestbook", houseID];
Pods/AugustAPI/August API/AGGuestbookEntry.m:55:	[[AGClient sharedClient] postPath:path parameters:@{@"content":content} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGGuestbookEntry.m:69:    NSString * path = [NSString stringWithFormat:@"houses/guestbookentry/%@", entryID];
Pods/AugustAPI/August API/AGHouse.m:20:static NSString* kAGDiaryCategory = @"AGHouse";
Pods/AugustAPI/August API/AGHouse.m:44:    NSString *userType = isOwner?@"superuser":@"user";
Pods/AugustAPI/August API/AGHouse.m:45:    NSString * path = [NSString stringWithFormat:@"houses/adduser/%@/%@/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
Pods/AugustAPI/August API/AGHouse.m:69:    NSString *userType = isOwner?@"superuser":@"user";
Pods/AugustAPI/August API/AGHouse.m:70:    NSString * path = [NSString stringWithFormat:@"houses/%@/users/%@/setusertype/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
Pods/AugustAPI/August API/AGHouse.m:89:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
Pods/AugustAPI/August API/AGHouse.m:107:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
Pods/AugustAPI/August API/AGHouse.m:126:    NSString * path = [NSString stringWithFormat:@"houses/%@/image", houseId];
Pods/AugustAPI/August API/AGHouse.m:129:    [[AGClient sharedClient] putFile:path fileData:imageData mimeType:@"image/jpeg" augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:146:	NSString * path = [NSString stringWithFormat:@"houses/%@",houseID];
Pods/AugustAPI/August API/AGHouse.m:183:    return [NSDictionary dictionaryWithObjectsAndKeys:self.objectId, kHouseIdKey, self.name, kHouseNameKey, locks, @"locks", doorbells, @"doorbells", @{kImageURLKey: self.imageURL}, kImageInfoKey, self.houseType, kUserTypeKeyHouse, nil];
Pods/AugustAPI/August API/AGHouse.m:201:    [[AGClient sharedClient] getPath:@"users/houses/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:202:        //DLog(@"houses %@", responseArray.description);
Pods/AugustAPI/August API/AGHouse.m:255:            //DLog(@"houses fail %@", error.description);
Pods/AugustAPI/August API/AGHouse.m:269:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
Pods/AugustAPI/August API/AGHouse.m:329:	[[AGClient sharedClient] postPath:@"houses" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:330:		//DLog(@"houses %@", responseObject.description);
Pods/AugustAPI/August API/AGHouse.m:363:            //DLog(@"houses fail %@", error.description);
Pods/AugustAPI/August API/AGHouse.m:413:    NSDictionary *locksResponse = responseDictionary[@"locks"];
Pods/AugustAPI/August API/AGHouse.m:434:    NSArray *camerasResponseArray = responseDictionary[@"cameras"];
Pods/AugustAPI/August API/AGHouse.m:442:    NSDictionary *doorbellsResponseArray = responseDictionary[@"doorbells"];
Pods/AugustAPI/August API/AGHouse.m:466:	NSString * path = [@"houses/" stringByAppendingString:houseId];
Pods/AugustAPI/August API/AGHouse.m:667:        AGDiaryDebug(@"HouseDataRefreshComplete", @"House Data has successfully Refreshed for Locks and Merged -> House Id: %@", self.objectId);
Pods/AugustAPI/August API/AGHouse.m:670:    AGDiaryDebug(@"HouseDataRefresh", @"House Id: %@, Refresh Type: %@", self.objectId, refreshType);
Pods/AugustAPI/August API/AGHouse.m:747:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld&endDate=%ld", houseID, (long)count, (long)endDate];
Pods/AugustAPI/August API/AGHouse.m:751:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld", houseID, (long)count];
Pods/AugustAPI/August API/AGHouse.m:791:                                        AGDiaryDebug(@"ActivityLogRefreshError", @"Error when attempting to Refresh Activity Log for Lock Id: %@", lock.objectId);
Pods/AugustAPI/August API/AGHouse.m:841:                        if (![[existingHouseRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
Pods/AugustAPI/August API/AGHouse.m:842:                            if ([[newRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
Pods/AugustAPI/August API/AGHouse.m:886:            if (![user.type.lowercaseString isEqualToString:@"limited"]) {
Pods/AugustAPI/August API/AGHouse.m:913:                if (![ruleID isEqualToString:@"always"]) {
Pods/AugustAPI/August API/AGHouse.m:974:        if ([[rule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
Pods/AugustAPI/August API/AGHouse.m:1026:    NSArray *orderArray = @[@"earlier", @"the past week", @"yesterday", @"today", @"tomorrow", @"upcoming"];
Pods/AugustAPI/August API/AGHouse.m:1043:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Pods/AugustAPI/August API/AGHouse.m:1052:        return @"today";
Pods/AugustAPI/August API/AGHouse.m:1055:        return @"tomorrow";
Pods/AugustAPI/August API/AGHouse.m:1058:        return @"yesterday";
Pods/AugustAPI/August API/AGHouse.m:1061:        return @"upcoming";
Pods/AugustAPI/August API/AGHouse.m:1064:        return @"the past week";
Pods/AugustAPI/August API/AGHouse.m:1067:        return @"earlier";
Pods/AugustAPI/August API/AGHouse.m:1074:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"houses/%@/neststructure/%@", houseID, structureID] parameters:@{@"StructureName":structureName} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:1090:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"houses/%@/neststructure/%@", houseID, structureID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:1105:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/nestawaystatus", houseID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:1120:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"houses/%@/nestawaystatus/%@", houseID, awayStatus] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:1135:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/temperature", houseID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGHouse.m:1141:                        [temperatures addObject:[tempDict objectForKey:@"farenheit"]];
Pods/AugustAPI/August API/AGGeofenceLimits.m:31:            d = [d objectForKey:@"ios"];
Pods/AugustAPI/August API/AGGeofenceLimits.m:51:            if ([d objectForKey:@"thresholds"]) {
Pods/AugustAPI/August API/AGGeofenceLimits.m:52:                self.thresholds = [d objectForKey:@"thresholds"];
Pods/AugustAPI/August API/AGGeofenceLimits.m:55:            if ([d objectForKey:@"probabilities"]) {
Pods/AugustAPI/August API/AGGeofenceLimits.m:56:                self.probabilities = [d objectForKey:@"probabilities"];
Pods/AugustAPI/August API/AGGeofenceLimits.m:68:    [dict3 setObject:self.thresholds forKey:@"thresholds"];
Pods/AugustAPI/August API/AGGeofenceLimits.m:69:    [dict3 setObject:self.probabilities forKey:@"probabilities"];
Pods/AugustAPI/August API/AGGeofenceLimits.m:88:    _versionID = @"default4"; // If the server provided version does not match this version id, then the local params are overriden in the AutoUnlock code that stores the geofence limits to persisten memeory.
Pods/AugustAPI/August API/AGGeofenceLimits.m:105:    self.thresholds = @{@"wifi": @{@"val":@"wifionexit" , @"min":@1},
Pods/AugustAPI/August API/AGGeofenceLimits.m:106:                        @"fastexit" :  @{@"val":@"exitdiff" , @"max":@1},
Pods/AugustAPI/August API/AGGeofenceLimits.m:107:                        @"20minout" :  @{@"val":@"outsideseconds" , @"max":@(20.0*60.0)},
Pods/AugustAPI/August API/AGGeofenceLimits.m:108:                        @"over2hours" :  @{@"val":@"outsideseconds" , @"min":@(2*60.0*60.0)},
Pods/AugustAPI/August API/AGGeofenceLimits.m:109:                        @"over4hours" :  @{@"val":@"outsideseconds" , @"min":@(4*60.0*60.0)},
Pods/AugustAPI/August API/AGGeofenceLimits.m:110:                        @"gpsexitverifyfailed" :  @{@"val":@"gpsexitverifyfailed" , @"min":@1},
Pods/AugustAPI/August API/AGGeofenceLimits.m:111:                        @"walkedabit" :  @{@"val":@"walkseconds" , @"min":@180},
Pods/AugustAPI/August API/AGGeofenceLimits.m:112:                        @"othertransport" :  @{@"val":@"othertransseconds" , @"min":@1},
Pods/AugustAPI/August API/AGGeofenceLimits.m:113:                        @"nightowlexit" : @{@"val":@"hour24exit", @"max":@6},
Pods/AugustAPI/August API/AGGeofenceLimits.m:114:                        @"nightowlenter" : @{@"val":@"hour24enter", @"max":@6}
Pods/AugustAPI/August API/AGGeofenceLimits.m:116:     @"notothertransport" :  @{@"val":@"othertransseconds" , @"max":@60.0},
Pods/AugustAPI/August API/AGGeofenceLimits.m:117:     @"notwalkedabit" :  @{@"val":@"walkseconds" , @"max":@300.0},
Pods/AugustAPI/August API/AGGeofenceLimits.m:125:    self.probabilities = @[@{@"or":@[@"wifi"], @"p":@0.75},
Pods/AugustAPI/August API/AGGeofenceLimits.m:126:                           @{@"or":@[@"fastexit"], @"p":@0.45},
Pods/AugustAPI/August API/AGGeofenceLimits.m:127:                           @{@"or":@[@"gpsexitverifyfailed"], @"p":@0.4},
Pods/AugustAPI/August API/AGGeofenceLimits.m:128:                           @{@"and":@[@"20minout"], @"p":@0.49}, // a short 20 min exit
Pods/AugustAPI/August API/AGGeofenceLimits.m:129:                           @{@"and":@[@"over2hours"], @"p":@0.4}, // over 2 hours
Pods/AugustAPI/August API/AGGeofenceLimits.m:130:                           @{@"and":@[@"over4hours"], @"p":@0.33}, // over 4 hours
Pods/AugustAPI/August API/AGGeofenceLimits.m:131:                           @{@"and":@[@"othertransport"], @"p":@0.01},
Pods/AugustAPI/August API/AGGeofenceLimits.m:132:                           @{@"and":@[@"walkedabit"], @"p":@0.1},
Pods/AugustAPI/August API/AGGeofenceLimits.m:133:                           @{@"and":@[@"nightowlexit",@"nightowlenter"], @"p": @0.6},
Pods/AugustAPI/August API/AGGeofenceLimits.m:135:     @{@"and":@[@"notwalkedabit",@"notothertransport"], @"p": @0.999}
Pods/AugustAPI/August API/AGGeofenceLimits.m:196:    NSLog(@"min %f max %f multiplier %f ", self.minimumGeofence, self.maximumGeofence, self.gpsAccuracyMultiplier);
Pods/AugustAPI/August API/AGGeofenceLimits.m:202:        NSLog(@"accuracy: %f computed default: %f",  accuracy, rad);
Pods/EDSemver/EDSemver/EDSemver.m:26:static NSString *const BUILD_DELIMITER          = @"+";
Pods/EDSemver/EDSemver/EDSemver.m:27:static NSString *const PRERELEASE_DELIMITER     = @"-";
Pods/EDSemver/EDSemver/EDSemver.m:28:static NSString *const VERSION_DELIMITER        = @".";
Pods/EDSemver/EDSemver/EDSemver.m:29:static NSString *const IGNORE_PREFIX            = @"v";
Pods/EDSemver/EDSemver/EDSemver.m:30:static NSString *const IGNORE_EQ                = @"=";
Pods/EDSemver/EDSemver/EDSemver.m:48:	return @"2.0.0";
Pods/EDSemver/EDSemver/EDSemver.m:83:		[[NSException exceptionWithName:NSInvalidArgumentException reason:@"nil argument" userInfo:nil] raise];
Pods/EDSemver/EDSemver/EDSemver.m:136:	return [[super debugDescription] stringByReplacingOccurrencesOfString:@">" withString:[NSString stringWithFormat:@" (%@)>", self.original]];
Pods/EDSemver/EDSemver/EDSemver.m:158:    NSString *build         = @"";
Pods/EDSemver/EDSemver/EDSemver.m:159:    NSString *prerelease    = @"";
Pods/EDSemver/EDSemver/EDSemver.m:163:        aString = [aString stringByReplacingOccurrencesOfString:@" " withString:@""];
Pods/EDSemver/EDSemver/EDSemver.m:198:        [v addObject:@"0"];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:14:static NSString* kAGDiaryCategory = @"EuropaLockOTA";
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:46:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:54:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:72:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:91:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageStart");
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:102:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageGetProgress response: %d", packet->state);
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:111:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:175:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStagePrepareDownload");
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:186:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageDownload");
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:269:        AGDiaryDebug(@"EuropaOTAStatusResponseOk", @"Status response Ok");
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:275:        AGDiaryError(@"EuropaOTAStatusResponseError", @"Status response Error: %d, currentStage: %d, currentWriteIndex: %d, numberOfBytesToWrite: %d", packet->status, self.currentStage, self.currentWriteIndex, self.numberOfBytesToWrite);
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:282:    AGDiaryError(@"JupiterOTAError", @"Error, aborting");
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:340:    AGDiaryDebug(@"JupiterOTASendCommand", @"Sending Jupiter OTA command: %d", command);
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:376:    NSLog(@"OTA Current Write Index: %lu", (unsigned long)self.currentWriteIndex);
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:377:    NSLog(@"OTA Number of Bytes: %lu", (unsigned long)self.numberOfBytesToWrite);
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:390:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
Pods/AugustAPI/August API/lockcomm/EuropaLockOTA.m:399:    NSString *newVersion = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)newVersionMajor.bytes, *(uint8_t *)newVersionMinor.bytes, *(uint8_t *)newVersionPatch.bytes];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:54:    NSDictionary *headers = [response objectForKey:@"header"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:55:    NSString *command = [headers objectForKey:@"command"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:74:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:87:                    NSDictionary *headers = [queryResponse objectForKey:@"header"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:88:                    NSString *indexStr = [headers objectForKey:@"index"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:92:                    NSDictionary *otaStatusBitmap = [queryResponse objectForKey:@"otaStatusBitmap"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:93:                    NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:126:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:191:        NSDictionary *headers = [response objectForKey:@"header"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:192:        NSString *indexStr = [headers objectForKey:@"index"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:196:        NSDictionary *otaStatusBitmap = [response objectForKey:@"otaStatusBitmap"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:197:        NSArray *bitmap = [otaStatusBitmap objectForKey:@"bitmap"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:198:        NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:303:            NSLog(@"writing bytes at %ld", indexInOverallFileToWrite);
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:325:    if (([self.chip isEqualToString:@"arm"]) || ([self.chip isEqualToString:@"st"])) {
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:333:    else if ([self.chip isEqualToString:@"ti"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockOTA.m:373:        if ([self.chip isEqualToString:@"st"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:20:NSString * const kLockCommOfflineKeyLoadedNotification = @"kLockCommOfflineKeyLoadedNotification";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:21:NSString * const kLockCommOfflineKeyDeletedNotification = @"kLockCommOfflineKeyDeletedNotification";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:24:static NSString* kAGDiaryCategory = @"Bluetooth";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:127:    AGDiaryInfo(@"LockResponse", @"Got response from lock: %@", lockDictionary);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:133:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket0" ] forKey:@"LockEventPacket0"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:136:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket1" ] forKey:@"LockEventPacket1"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:139:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket2" ] forKey:@"LockEventPacket2"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:142:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket3" ] forKey:@"LockEventPacket3"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:151:            NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadMagic userInfo:@{@"Error":@"Bad Magic"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:167:        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadMagic userInfo:@{@"Error":@"Bad Magic"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:197:    AGDiaryInfo(@"StartDiscoverServices", @"Starting to discover Bluetooth LE Services on the lock");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:232:            AGDiaryDebug(@"NoAuthForUser", @"Unauthorized command");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:251:        AGDiaryInfo(@"SendDataPacket", @"Writing to data channel peripheral: %@", self.lock.peripheral);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:260:        AGDiaryDebug(@"SendJupiterOTACommandPacket", @"Writing to jupiter OTA command channel peripheral: %@", self.lock.peripheral);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:305:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel checksum: %@", [packet validateSecurityChecksum] ? @"GOOD" : @"BAD");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:310:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel");        }
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:313:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel checksum: %@", [packet validateSecurityChecksum] ? @"GOOD" : @"BAD");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:355:    AGDiaryInfo(@"PeripheralDidUpdateName",@"New name for peripherial = %@", peripheral);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:368:    AGDiaryInfo(@"PeripheralDioInvalidateServices", @"Peripheral '%@' did invalidate services", peripheral);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:399:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:400:        AGDiaryError(@"ErrorDiscoveringServices", errorMsg);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:401:        NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDiscoverServices userInfo:@{@"Error":errorMsg}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:410:            AGDiaryInfo(@"AugustLockServiceFound", @"August Lock service found, UUID: %@", aService.UUID);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:421:            AGDiaryInfo(@"StartDiscoverCharacteristics", @"Starting to discover Bluetooth LE Characteristics for the AugustService");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:426:            AGDiaryInfo(@"AugustLockServiceFound", @"August Lock service found, UUID: %@", aService.UUID);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:434:            AGDiaryInfo(@"StartDiscoverCharacteristics", @"Starting to discover Bluetooth LE Characteristics for the AugustService");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:438:        if ([aService.UUID isEqual:[CBUUID UUIDWithString:@"180A"]])
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:442:            NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:443:            NSDictionary *modelNumberDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:451:                AGDiaryDebug(@"DiscoverVersionAndSerialCharacteristics", @"Discovering both because we don't have serial number yet");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:452:                charArray = [NSArray arrayWithObjects: [CBUUID UUIDWithString:@"2A26"], [CBUUID UUIDWithString:@"2A25"], [CBUUID UUIDWithString:@"2A24"], nil];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:456:                AGDiaryDebug(@"DiscoverVersionCharacteristicOnly", @"Discover version characteristics only.");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:457:                charArray = [NSArray arrayWithObjects: [CBUUID UUIDWithString:@"2A26"], nil];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:484:    AGDiaryInfo(@"PeripheralDiscoverIncludedServices", @"peripheral:%@ didDiscoverIncludedServicesForService:%@ error:%@", peripheral, service, error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:503:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:504:            AGDiaryError(@"ErrorDiscoveringCharacteristics", errorMsg);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:505:            NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDiscoverCharacteristics userInfo:@{@"Error":errorMsg}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:514:                AGDiaryInfo(@"FoundCharacteristic", @"Found writeable characteristic kAugustLockWriteUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:521:                AGDiaryInfo(@"FoundCharacteristic", @"Found read/notify characteristic kAugustLockReadUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:528:                AGDiaryInfo(@"FoundCharacteristic", @"Found security read/notify characteristic kAugustLockSecReadUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:533:                AGDiaryInfo(@"FoundCharacteristic", @"Found security write characteristic kAugustLockSecWriteUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:539:                AGDiaryInfo(@"FoundCharacteristic", @"Found jupiter OTA command characteristic kJupiterOTACommandUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:545:                AGDiaryInfo(@"FoundCharacteristic", @"Found jupiter OTA data characteristic kJupiterOTADataUUID");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:557:                AGDiaryInfo(@"FoundCharacteristic", @"Found writeable characteristic kAugustLockWriteUUID2");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:564:                AGDiaryInfo(@"FoundCharacteristic", @"Found read/notify characteristic kAugustLockReadUUID2");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:571:                AGDiaryInfo(@"FoundCharacteristic", @"Found security read/notify characteristic kAugustLockSecReadUUID2");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:576:                AGDiaryInfo(@"FoundCharacteristic", @"Found security write characteristic kAugustLockSecWriteUUID2");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:581:    if ([service.UUID isEqual:[CBUUID UUIDWithString:@"180A"]])
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:585:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A26"]])
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:589:                AGDiaryDebug(@"FoundCharacteristic", @"Found firmware revision characteristic");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:591:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A25"]])
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:595:                AGDiaryDebug(@"FoundCharacteristic", @"Found serial number characteristic");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:597:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A24"]])
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:600:                AGDiaryDebug(@"FoundCharacteristic", @"Found model number characteristic");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:613:    AGDiaryInfo(@"FinishedDiscoverCharacteristics", @"Finished discovering characteristics");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:626:    return [NSString stringWithFormat:@"%0.8X", randomResult];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:654:    AGDiaryInfo(@"StartNetwork1", @"Starting API communication - getInitiateComm");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:660:        NSString *offlineKeyStr = [offlineKeyDict objectForKey:@"key"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:661:        NSUInteger slot = [[offlineKeyDict objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:667:        AGDiaryInfo(@"EndNetwork1", @"End of network #1 - we have an offline key");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:668:        AGDiaryInfo(@"StartCommunication1", @"Start of communication #1");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:674:        NSString *onlineKeyUsageReason = self.lock.onlineKeyUsageReason == AGBLELockOnlineKeyUsageReason_InvalidOfflineKey ? @"wrong_offline_key" : nil;
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:678:                AGDiaryInfo(@"EndNetwork1", @"End of network #1 - Received InitiateComm Packet, writing mobile keys");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:680:                NSString *packetStr = [dict objectForKey:@"packet"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:684:                AGDiaryInfo(@"StartCommunication1", @"Start of communication #1 - sending security packet");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:688:                AGDiaryError(@"NetworkError", @"Error during initiateComm: %@", error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:690:                if ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:702:                    errorMsg = NSLocalizedString(@"Security error", nil);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:704:                NSError *errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorInitiateCommunication userInfo:@{@"Error":errorMsg}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:754:        slot = [[offlineKeyDict objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:759:    AGDiaryInfo(@"SendSecurityInit", @"Sending security initialization command: %@", packet.data);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:789:    command = [command stringByReplacingOccurrencesOfString:@" " withString:@""];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:813:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:896:        AGDiaryInfo(@"UpdateValueForCharacteristic", @"peripheral:%@ didUpdateValueForCharacteristic:%@ error:%@", peripheral, characteristic, error);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:899:            AGDiaryError(@"UpdateValueForCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:909:                NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadChecksum userInfo:@{@"Error":@"Bad Checksum"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:918:                AGDiaryInfo(@"ReceivedMobileKeysResponse", @"Received mobile keys response");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:919:                AGDiaryInfo(@"StartNetwork2", @"Getting lock rands");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:928:                    AGDiaryInfo(@"EndNetwork2", @"End of network2 communication - we have offline key");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:933:                            AGDiaryInfo(@"EndNetwork2", @"End of network2 communication - got lock rands");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:936:                            self.lRand1 = [[dict objectForKey:@"lRand1"] unsignedIntValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:937:                            self.lRand2 = [[dict objectForKey:@"lRand2"] unsignedIntValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:938:                            NSUInteger slot = [[dict objectForKey:@"slot"] unsignedIntValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:942:                            AGDiaryInfo(@"NetworkError", @"Error getting lock rands: %@", error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:945:                            if ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:959:                                errorMsg = NSLocalizedString(@"Security error", nil);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:962:                                errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorLockRandsErrorConflict userInfo:@{@"Error":errorMsg}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:964:                                errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorLockRandsErrorGeneric userInfo:@{@"Error":errorMsg}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:975:                AGDiaryInfo(@"ReceivedInitiateCommResponse", @"Received InitiateComm response, connection state = SEC_CONNECTED_UNSECURE_KEY");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:994:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorDeviceBlacklisted userInfo:@{@"Error":@"Device has been blacklisted"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:999:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorKeyChanged userInfo:@{@"Error":@"Key number has changed"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1004:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorChecksumDoesntWork userInfo:@{@"Error":@"Checksum doesn't work"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1009:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorKeyNotDefinedInTable userInfo:@{@"Error":@"Key not defined in table"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1014:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadLockresponse userInfo:@{@"Error":@"Wrong response from lock"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1020:                    NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadChecksum userInfo:@{@"Error":@"Unable to validate checksum"}];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1032:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A26"]]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1035:            AGDiaryDebug(@"ReadFirmwareVersionCharacteristic", @"%@ for service %@", self.lock.bleFirmwareVersion, [characteristic.service.UUID UUIDString]);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1037:            self.lock.bleFirmwareVersion = @"undefined";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1040:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A25"]]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1043:            AGDiaryDebug(@"ReadSerialNumberCharacteristic", @"%@ for service %@", self.lock.serialNumber, [characteristic.service.UUID UUIDString]);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1044:            NSMutableDictionary *uuidsToSerialNumbersDictionary = [[[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"] mutableCopy];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1051:            [[NSUserDefaults standardUserDefaults] setObject:uuidsToSerialNumbersDictionary forKey:@"UUIDsToSerialNumbersDictionary"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1054:            self.lock.serialNumber = @"undefined";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1057:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A24"]]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1061:            AGDiaryDebug(@"ReadModelNumberCharacteristic", @"%@ for service %@", self.lock.serialNumber, [characteristic.service.UUID UUIDString]);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1062:            NSMutableDictionary *uuidsToSerialNumbersDictionary = [[[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"] mutableCopy];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1069:            [[NSUserDefaults standardUserDefaults] setObject:uuidsToSerialNumbersDictionary forKey:@"UUIDsToModelNumbersDictionary"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1072:            self.lock.serialNumber = @"undefined";
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1076:        AGDiaryDebug(@"UpdateJupiterOTACommandCharacteristic", @"peripheral:%@ didUpdateValueForJupiterOTACommandCharacteristic:%@ error:%@", peripheral, characteristic, error);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1079:            AGDiaryError(@"UpdateJupiterOTACommandCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1089:            AGDiaryError(@"UpdateJupiterOTADataCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1100:    AGDiaryInfo(@"SecurityResponse", @"received security response");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1115:            AGDiaryInfo(@"SecurityInitComplete" , @"Security initialization complete");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1126:            AGDiaryInfo(@"SecurityHandshakeLowerBytes", @"Successfully wrote lower bytes of handshake key");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1133:            AGDiaryInfo(@"SecurityHandshakeUpperBytes", @"Successfully wrote upper bytes of handshake key");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1141:            AGDiaryInfo(@"SecurityHandshakeKeyCommit", @"Successfully committed handshake key %@", [offlineKey objectForKey:@"slot"]);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1150:            AGDiaryInfo(@"SecurityDeleteHandshakeKey", @"Successfully deleted handshake key %@", [offlineKey objectForKey:@"slot"]);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1166:            AGDiaryWarn(@"SecurityUnhandledResponse", @"Received unhandled, but valid response on security read channel");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1172:            AGDiaryError(@"SecurityUnknownResponse", @"Received unknown response on security channel (%d)", *wordPtr);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1211:    AGDiaryInfo(@"DidUpdateNotificationStateForCharacteristic", @"peripheral:%@ didUpdateNotificationStateForCharacteristic:%@ error:%@ (%d)", peripheral, characteristic, error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1236:    AGDiaryInfo(@"DidDiscoverDescriptorsForCharacteristic", @"peripheral:%@ didDiscoverDescriptorsForCharacteristic:%@ error:%@", peripheral, characteristic, error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1252:    AGDiaryInfo(@"DidUpdateValueForDescriptor", @"peripheral:%@ didUpdateValueForDescriptor:%@ error:%@", peripheral, descriptor, error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1266:    AGDiaryInfo(@"DidWriteValueForDescriptor", @"peripheral:%@ didWriteValueForDescriptor:%@ error:%@", peripheral, descriptor, error.description);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1390:    if ([chip isEqualToString:@"bcm"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1394:    } else if ([chip isEqualToString:@"dlg"] || [chip isEqualToString:@"sd"]) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1434:    if ([[[UIDevice currentDevice] systemVersion] compare:@"8.1" options:NSNumericSearch] == NSOrderedAscending) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1451:        AGDiaryInfo(@"StartingKeyUpdate", @"Starting offline key update. We have %d keys to add and %d to delete", self.lock.offlineKeysToLoad.count, self.lock.offlineKeysToDelete.count);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1486:        NSUInteger slot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1488:            AGDiaryVerbose(@"DeleteOfflineKey", @"slot %d", slot);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1495:        NSUInteger slot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1496:        AGDiaryVerbose(@"AddOfflineKey", @"slot %d", slot);
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1498:        NSString *key = [offlineKey objectForKey:@"key"];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1527:            [AGLock putOfflineKey:self.lock.name action:@"deleted" offlineKey:offlineKey block:^(BOOL succeeded, NSError *error) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1530:                    AGDiaryDebug(@"RemovedKey", @"Succeded at removing offline key.");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1538:            NSUInteger addedSlot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1542:                NSUInteger deletedSlot = [[deleteKeyPotentialMatch objectForKey:@"slot"] unsignedIntegerValue];
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1543:                AGDiaryDebug(@"AddAndDelete", @"We added a key that was also in 'deleted'. We will tell server it was deleted after processing the add.");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1551:            AGDiaryDebug(@"AddedKey", @"Succeded at adding offline key. Simutaneously notifying server and going on to next key.");
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1552:            [AGLock putOfflineKey:self.lock.name action:@"loaded" offlineKey:offlineKey block:^(BOOL succeeded, NSError *error) {
Pods/AugustAPI/August API/lockcomm/AugustLockComm.m:1554:                    [AGLock putOfflineKey:self.lock.name action:@"deleted" offlineKey:keyEffectivelyDeleted block:nil];
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:14:static NSString* kAGDiaryCategory = @"JupiterLockOTA";
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:55:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:63:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:81:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:100:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageStart");
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:111:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageGetProgress response: %d", packet->state);
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:120:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:184:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStagePrepareDownload");
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:195:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageDownload");
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:280:        AGDiaryDebug(@"JupiterOTAStatusResponseOk", @"Status response Ok");
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:286:        AGDiaryError(@"JupiterOTAStatusResponseError", @"Status response Error: %d, currentStage: %d, currentWriteIndex: %d, numberOfBytesToWrite: %d", packet->status, self.currentStage, self.currentWriteIndex, self.numberOfBytesToWrite);
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:293:    AGDiaryError(@"JupiterOTAError", @"Error, aborting");
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:347:    AGDiaryDebug(@"JupiterOTASendCommand", @"Sending Jupiter OTA command: %d", command);
Pods/AugustAPI/August API/lockcomm/JupiterLockOTA.m:392:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
Pods/AugustAPI/August API/lockcomm/BLELock.m:18:static NSString* kAGDiaryCategory = @"Bluetooth";
Pods/AugustAPI/August API/lockcomm/BLELock.m:52:    AGDiaryInfo(@"SendCommand", @"sending command packet: %@", packet);
Pods/AugustAPI/August API/lockcomm/BLELock.m:58:    AGDiaryInfo(@"SendCommand", @"sending command packet (without response): %@", packet);
Pods/AugustAPI/August API/lockcomm/BLELock.m:68:    AGDiaryInfo(@"ConnectAttempt", @"Attempting to connect to peripheral, %@ with central: %@, state: %d", self.peripheral, self.cbCentral, (int)self.cbCentral.state);
Pods/AugustAPI/August API/lockcomm/BLELock.m:74:        AGDiaryError(@"BluetoothStateUnknown", @"BT state is unkonwn and so we won't connect. This shouldn't happen.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:86:    NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorTimeout userInfo:@{@"Error":@"Connection soft timeout"}];
Pods/AugustAPI/August API/lockcomm/BLELock.m:95:        AGDiaryWarn(@"UpdateKeysWhileUpdating", @"Not updating offline keys because we have an update already in progress");
Pods/AugustAPI/August API/lockcomm/BLELock.m:267:        AGDiaryInfo(@"BLEInitialization", @"Instantiating BLELockManager and CBCentral.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:302:    AGDiaryInfo(@"ConnectedPeripheral", @"CoreBluetooth Connected peripheral.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:314:    AGDiaryInfo(@"DisconnectedPeripheral", @"DISCONNECTED: %@, peripheral: %@", error.description, peripheral);
Pods/AugustAPI/August API/lockcomm/BLELock.m:320:        AGDiaryWarn(@"OfflineKeyFailed", @"Offline key is suspected to be invalid");
Pods/AugustAPI/August API/lockcomm/BLELock.m:345:            NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDisconnects userInfo:@{@"Error":@"We have received repeated disconnects from the lock. Please verify that the bluetooth radios on the central and peripheral are working correctly."}];
Pods/AugustAPI/August API/lockcomm/BLELock.m:354:    AGDiaryInfo(@"FailedToConnect", @"didFailToConnectPeripheral");
Pods/AugustAPI/August API/lockcomm/BLELock.m:360:    AGDiaryInfo(@"RetrieveConnectedPeripherals", @"didRetrieveConnectedPeripherals");
Pods/AugustAPI/August API/lockcomm/BLELock.m:378:            AGDiaryInfo(@"CentralManagerStateUnknown", @"centralManagerDidUpdateState:  CBCentralManagerStateUnknown. Disconnecting connection of discovered locks.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:383:            AGDiaryInfo(@"CentralManagerStateResetting", @"centralManagerDidUpdateState:  CBCentralManagerStateResetting");
Pods/AugustAPI/August API/lockcomm/BLELock.m:388:            AGDiaryInfo(@"CentralManagerStateUnsupported", @"centralManagerDidUpdateState:  CBCentralManagerStateUnsupported");
Pods/AugustAPI/August API/lockcomm/BLELock.m:392:            AGDiaryInfo(@"CentralManagerStateUnauthorized", @"centralManagerDidUpdateState:  CBCentralManagerStateUnauthorized");
Pods/AugustAPI/August API/lockcomm/BLELock.m:396:            AGDiaryInfo(@"CentralManagerStatePoweredOff", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOff");
Pods/AugustAPI/August API/lockcomm/BLELock.m:401:            AGDiaryInfo(@"CentralManagerStatePoweredOn", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOn");
Pods/AugustAPI/August API/lockcomm/BLELock.m:433:    NSString *MSID = [advertisementData valueForKey:@"kCBAdvDataManufacturerData"];
Pods/AugustAPI/August API/lockcomm/BLELock.m:435:    AGDiaryDebug(@"didDiscoverPeripheral", @"advertisedName: %@", advertisedName);
Pods/AugustAPI/August API/lockcomm/BLELock.m:439:        AGDiaryError(@"MissingLockNameError", @"Missing peripheral name or UUID");
Pods/AugustAPI/August API/lockcomm/BLELock.m:457:        AGDiaryDebug(@"didDiscoverPeripheral", @"old lock str: %@", advertisedName);
Pods/AugustAPI/August API/lockcomm/BLELock.m:463:            AGDiaryDebug(@"didDiscoverPeripheral", @"lock whole str: %@", str);
Pods/AugustAPI/August API/lockcomm/BLELock.m:484:                    if (![[lockID substringWithRange:NSMakeRange(curChar,1)] isEqual:@"0"]) {
Pods/AugustAPI/August API/lockcomm/BLELock.m:516:		[hexEncoded appendString:[NSString stringWithFormat:@"%02X", bytes[i]]];
Pods/AugustAPI/August API/lockcomm/BLELock.m:550:            AGDiaryError(@"CentralStateUnknown", @"Bluetooth state is unknown or resetting and we can't scan. This shouldn't happen.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:572:            [self.delegate bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:@{@"Error":@"Bluetooth is powered off"}]];
Pods/AugustAPI/August API/lockcomm/BLELock.m:591:            [self.delegate bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:@{@"Error":@"Bluetooth is powered off"}]];
Pods/AugustAPI/August API/lockcomm/BLELock.m:599:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Pods/AugustAPI/August API/lockcomm/BLELock.m:621:    AGDiaryInfo(@"LockConnectAttempt", @"Attempting to connect to lock %@", lock.name);
Pods/AugustAPI/August API/lockcomm/BLELock.m:632:        AGDiaryInfo(@"CleanUp", @"Cleaning up %d discovered locks. %@", [self.discoveredLocks count], (lockToSave)?@"Will save one of them.":@"");
Pods/AugustAPI/August API/lockcomm/BLELock.m:666:            AGDiaryError(@"CentralManagerStateUnsupported", @"The platform/hardware doesn't support Bluetooth Low Energy.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:669:            AGDiaryError(@"CentralManagerStateUnauthorized", @"The app is not authorized to use Bluetooth Low Energy.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:672:            AGDiaryError(@"CentralManagerStatePoweredOff", @"Bluetooth is currently powered off.");
Pods/AugustAPI/August API/lockcomm/BLELock.m:689:    NSMutableDictionary *lockIDToUUIDMap = [[[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"] mutableCopy];
Pods/AugustAPI/August API/lockcomm/BLELock.m:696:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
Pods/AugustAPI/August API/lockcomm/BLELock.m:701:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
Pods/AugustAPI/August API/AGNotificationRule.m:13:NSString * const kAGNotificationRuleIDKey = @"ruleID";
Pods/AugustAPI/August API/AGNotificationRule.m:14:NSString * const kAGNotificationRuleDeviceIDKey = @"deviceID";
Pods/AugustAPI/August API/AGNotificationRule.m:15:NSString * const kAGNotificationRuleDeviceTypeKey = @"deviceType";
Pods/AugustAPI/August API/AGNotificationRule.m:16:NSString * const kAGNotificationRuleOtherUserIDKey = @"otherUserID";
Pods/AugustAPI/August API/AGNotificationRule.m:17:NSString * const kAGNotificationRuleScheduleKey = @"schedule";
Pods/AugustAPI/August API/AGNotificationRule.m:38:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules?deviceID=%@", lockID];
Pods/AugustAPI/August API/AGNotificationRule.m:42:                              header:@{@"accept-version":@"2.0.0"}
Pods/AugustAPI/August API/AGNotificationRule.m:60:    NSString *path = @"/smartalert/rules";
Pods/AugustAPI/August API/AGNotificationRule.m:64:    [[AGClient sharedClient] postPath:path parameters:notificationRuleDict header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGNotificationRule.m:83:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
Pods/AugustAPI/August API/AGNotificationRule.m:88:    [[AGClient sharedClient] putPath:path parameters:scheduleOnlyDict header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGNotificationRule.m:109:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
Pods/AugustAPI/August API/AGNotificationRule.m:111:    [[AGClient sharedClient] deletePath:path parameters:nil header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLog.m:38:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
Pods/AugustAPI/August API/AGLog.m:47:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
Pods/AugustAPI/August API/AGLog.m:61:    if ([key rangeOfString:@"error" options:NSCaseInsensitiveSearch].location == NSNotFound) {
Pods/AugustAPI/August API/AGLog.m:62:        DDLogVerbose(@"%@", value);
Pods/AugustAPI/August API/AGLog.m:65:        DDLogError(@"%@", value);
Pods/AugustAPI/August API/AGLog.m:77:    NSString *path = [NSString stringWithFormat:@"/clientlogdata"];
Pods/AugustAPI/August API/AGLog.m:79:    [[AGClient sharedClient] postPath:path parameters:@{@"log": self.logArray} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLog.m:118:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockoperatedata", lockId];
Pods/AugustAPI/August API/AGLog.m:122:    [parameters setObject:self.timeLogUUID forKey:@"ID"];
Pods/AugustAPI/August API/AGLog.m:152:    NSDictionary* details = @{@"action": action,
Pods/AugustAPI/August API/AGLog.m:153:                              @"event": event,
Pods/AugustAPI/August API/AGLog.m:154:                              @"timestamp": [NSNumber numberWithLong:timestamp]};
Pods/AugustAPI/August API/AGCamera.m:14:    [[AGClient sharedClient] getPath:@"users/cameras/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGCamera.m:36:    camera.objectId = [responseDictionary objectForKey:@"CameraID"];
Pods/AugustAPI/August API/AGCamera.m:37:    camera.name = [responseDictionary objectForKey:@"CameraName"];
Pods/AugustAPI/August API/AGCamera.m:38:    camera.manufacturerID = [responseDictionary objectForKey:@"ManufacturerCameraID"];
Pods/AugustAPI/August API/AGCamera.m:39:    camera.manufacturer = [responseDictionary objectForKey:@"manufacturer"];
Pods/AugustAPI/August API/AGCamera.m:40:    camera.manufacturerData = [responseDictionary objectForKey:@"manufacturerData"];
Pods/AugustAPI/August API/AGCamera.m:41:    camera.lockIDs = [responseDictionary objectForKey:@"locks"];
Pods/AugustAPI/August API/AGCamera.m:42:    camera.doorbellIDs = [responseDictionary objectForKey:@"doorbells"];
Pods/AugustAPI/August API/AGCamera.m:43:    camera.houseID = [responseDictionary objectForKey:@"HouseID"];
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:29:            self.host = @"";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:31:        } else if ([messagingProtocol isEqual:@"pubnub"]) {
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:34:            self.host = @"";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:36:        } else if ([messagingProtocol isEqual:@"mqtt"]) {
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:38:            if (messagingURL == nil || [messagingURL isEqual:@""]) {
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:39:                self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:40:                self.host = @"dev-mqtt.august.com";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:43:                NSArray* urlComponentsArray = [messagingURL componentsSeparatedByString: @":"];
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:45:                    self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:46:                    self.host = @"dev-mqtt.august.com";
Pods/AugustAPI/August API/AGPubSubMessageBrokerClientDetails.m:51:                    self.host = [hostURLString stringByReplacingOccurrencesOfString:@"/" withString:@""];
Pods/AugustAPI/August API/AGDiary.h:13: *     AGDiaryInfo(@"FinishedScan", @"Starting scan for bridges, scanCount = %d", scanCount);
Pods/AugustAPI/August API/AGDiary.h:60: *          static NSString* kAGDiaryCategory = @"VenusSetup";
Pods/AugustAPI/August API/AGDiary.h:63: *          AGDiaryDebug(nil, @"Parsing Bridge SSID '%@'", bridgeSSID);
Pods/AugustAPI/August API/AGDiary.h:64: *          AGDiaryInfo(@"StartRegisterBridge", @"Registering bridge %@ with the ACS server", bridgeAddress);
Pods/AugustAPI/August API/AGDiary.h:203:#define AG_DIARY_CATEGORY_DIARY    @"Diary"
Pods/AugustAPI/August API/AGLockLogEntry.h:175: * This is @"self" for missed and declined calls. And a userId for answered and intiated calls.
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.h:12: *The loose parser will return an NSDate for this string: @" \t\r\n\f\t  2006-03-02!!!"
Pods/AugustAPI/August API/AGKibanaLogger.m:20:NSString *const kKibanaLoggingEndpoint = @"https://logger.august.com/";
Pods/AugustAPI/August API/AGKibanaLogger.m:45:        [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Pods/AugustAPI/August API/AGKibanaLogger.m:47:        NSString *authStr = [NSString stringWithFormat:@"%@:%@", @"august_logger", @"TOqpr'jGl;9|ZVM"];
Pods/AugustAPI/August API/AGKibanaLogger.m:49:        NSString *authValue = [NSString stringWithFormat:@"Basic %@", [authData base64EncodedStringWithOptions:0]];
Pods/AugustAPI/August API/AGKibanaLogger.m:50:        [self.requestSerializer setValue:authValue forHTTPHeaderField:@"Authorization"];
Pods/AugustAPI/August API/AGKibanaLogger.m:53:        responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"text/plain"]];
Pods/AugustAPI/August API/AGKibanaLogger.m:107:    NSString *customBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGKibanaLogger.m:108:    if (customBaseURL && ![customBaseURL containsString:@"prod"]) {//Don't log unless pointed at production
Pods/AugustAPI/August API/AGKibanaLogger.m:115:    NSURLRequest *request = [[AGKibanaLoggerSessionManager sharedManager].requestSerializer requestWithMethod:@"POST" URLString:kKibanaLoggingEndpoint parameters:json error:&error];
Pods/AugustAPI/August API/AGKibanaLogger.m:120:            AGDiary(AGDiaryLevel_Debug, @"KibanaLogging", @"NetworkError", [NSString stringWithFormat:@"Error while logging event:%@ with error: %@", event, error]);
Pods/AugustAPI/August API/AGKibanaLogger.m:129:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Pods/AugustAPI/August API/AGKibanaLogger.m:130:    appVersion = appVersion == nil ? @"not_ios_app" : appVersion;//The version will be nil during unit testing
Pods/AugustAPI/August API/AGKibanaLogger.m:133:    NSString *time =  [NSString stringWithFormat:@"%li", epochMillis];
Pods/AugustAPI/August API/AGKibanaLogger.m:141:                                     @"device_model":[[UIDevice currentDevice] platformString],
Pods/AugustAPI/August API/AGKibanaLogger.m:142:                                     @"ios_version":[[UIDevice currentDevice] systemVersion],
Pods/AugustAPI/August API/AGKibanaLogger.m:143:                                     @"app_version":appVersion,
Pods/AugustAPI/August API/AGKibanaLogger.m:144:                                     @"time":time,
Pods/AugustAPI/August API/AGKibanaLogger.m:145:                                     @"log_level":[self stringForLogLevel:logLevel],
Pods/AugustAPI/August API/AGKibanaLogger.m:146:                                     @"session_id":[self loggingSessionID]
Pods/AugustAPI/August API/AGKibanaLogger.m:152:        [mdataJSON setObject:event forKey:@"event"];
Pods/AugustAPI/August API/AGKibanaLogger.m:156:        [mdataJSON setObject:category forKey:@"category"];
Pods/AugustAPI/August API/AGKibanaLogger.m:161:        [mdataJSON setObject:hwVersion forKey:@"hw_version"];
Pods/AugustAPI/August API/AGKibanaLogger.m:165:                              @"type":@"app-ios",
Pods/AugustAPI/August API/AGKibanaLogger.m:166:                              @"mdata1":mdataJSON
Pods/AugustAPI/August API/AGKibanaLogger.m:186:        return @"FATAL";
Pods/AugustAPI/August API/AGKibanaLogger.m:188:        return @"ERROR";
Pods/AugustAPI/August API/AGKibanaLogger.m:190:        return @"WARN";
Pods/AugustAPI/August API/AGKibanaLogger.m:192:        return @"INFO";
Pods/AugustAPI/August API/AGKibanaLogger.m:194:        return @"DEBUG";
Pods/AugustAPI/August API/AGKibanaLogger.m:200:    NSDate *sessionExpirationDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
Pods/AugustAPI/August API/AGKibanaLogger.m:201:    NSString *sessionID = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID"];
Pods/AugustAPI/August API/AGKibanaLogger.m:207:        [[NSUserDefaults standardUserDefaults] setObject:sessionID forKey:@"AGKibanaLoggerSessionID"];
Pods/AugustAPI/August API/AGKibanaLogger.m:213:        [[NSUserDefaults standardUserDefaults] setObject:nextDate forKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
Pods/AugustAPI/August API/AGKibanaLogger.m:240:        hwVersion = @"unknown";
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:12:static NSString* kAGDiaryCategory = @"ISO8601DateFormatter";
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:21:#define ISO_CALENDAR_DATE_FORMAT @"yyyy-MM-dd"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:22://#define ISO_WEEK_DATE_FORMAT @"YYYY-'W'ww-ee" //Doesn't actually work because NSDateComponents counts the weekday starting at 1.
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:23:#define ISO_ORDINAL_DATE_FORMAT @"yyyy-DDD"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:24:#define ISO_TIME_FORMAT @"HH:mm:ss"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:25:#define ISO_TIME_WITH_TIMEZONE_FORMAT  ISO_TIME_FORMAT @"Z"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:27:#define ISO_TIMEZONE_UTC_FORMAT @"Z"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:28:#define ISO_TIMEZONE_OFFSET_FORMAT @"%+.2d%.2d"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:191:	NSAssert(timeSep != '\0', @"Time separator must not be NUL.");
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:372:                                    AGDiaryDebug(@"DateParse", @"(%@) parsing month; segment is %lu and ch is %s", string, (unsigned long)segment, ch);
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:429:                            AGDiaryDebug(@"DateParse", @"(%@) found %lu digits and one hyphen, so this is either -YY or -YY-MM; segment (year) is %lu", string, (unsigned long)num_digits, (unsigned long)segment);
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:531:						timeZone = [NSTimeZone timeZoneWithAbbreviation:@"UTC"];
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:651:		[timeFormatMutable replaceOccurrencesOfString:@":"
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:675:			[NSException raise:NSInternalInconsistencyException format:@"self.format was %lu, not calendar (%d), week (%d), or ordinal (%d)", (unsigned long)self.format, ISO8601DateFormatCalendar, ISO8601DateFormatWeek, ISO8601DateFormatOrdinal];
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:682:		dateFormat = [dateFormat stringByAppendingFormat:@"'T'%@", [self replaceColonsInString:ISO_TIME_FORMAT withTimeSeparator:self.timeSeparator]];
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:793:		timeString = @"";
Pods/AugustAPI/August API/ISO8601DateFormatter/ISO8601DateFormatter.m:795:	return [NSString stringWithFormat:@"%lu-W%02lu-%02lu%@", (unsigned long)year, (unsigned long)week, ((unsigned long)dayOfWeek) + 1U, timeString];
Pods/AugustAPI/August API/AGLockCapability.m:74:                self.lockInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:75:                self.doorSenseInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:78:                self.definedVersion = @"0.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:82:                                         kLockSettingsIcon : @"LockSettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:83:                                         kLockSetupHeroImage : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:84:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:85:                                         kCalibrationImageStart : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:86:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
Pods/AugustAPI/August API/AGLockCapability.m:87:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
Pods/AugustAPI/August API/AGLockCapability.m:88:                                         kCalibrationImageDoorWideOpenDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:89:                                         kCalibrationImageDoorAjarDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:90:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:91:                                         kCalibrationImageFinished : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:110:                self.onboardCPUs = @[@"arm", @"ti"];
Pods/AugustAPI/August API/AGLockCapability.m:116:                self.lockInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:117:                self.doorSenseInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:120:                self.definedVersion = @"1.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:125:                                         kLockSettingsIcon : @"LockSettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:126:                                         kLockSetupHeroImage : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:127:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:128:                                         kCalibrationImageStart : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:129:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
Pods/AugustAPI/August API/AGLockCapability.m:130:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
Pods/AugustAPI/August API/AGLockCapability.m:131:                                         kCalibrationImageDoorWideOpenDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:132:                                         kCalibrationImageDoorAjarDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:133:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:134:                                         kCalibrationImageFinished : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:153:                self.onboardCPUs = @[@"bcm", @"st"];
Pods/AugustAPI/August API/AGLockCapability.m:159:                self.lockInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:160:                self.doorSenseInstallationInstructionURL = @"";
Pods/AugustAPI/August API/AGLockCapability.m:163:                self.definedVersion = @"2.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:168:                                         kLockSettingsIcon : @"LockSettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:169:                                         kLockSetupHeroImage : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:170:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:171:                                         kCalibrationImageStart : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:172:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
Pods/AugustAPI/August API/AGLockCapability.m:173:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
Pods/AugustAPI/August API/AGLockCapability.m:174:                                         kCalibrationImageDoorWideOpenDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:175:                                         kCalibrationImageDoorAjarDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:176:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
Pods/AugustAPI/August API/AGLockCapability.m:177:                                         kCalibrationImageFinished : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:196:                self.onboardCPUs = @[@"dlg",@"sd"];
Pods/AugustAPI/August API/AGLockCapability.m:202:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/";
Pods/AugustAPI/August API/AGLockCapability.m:203:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl3";
Pods/AugustAPI/August API/AGLockCapability.m:206:                self.definedVersion = @"3.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:211:                                         kLockSettingsIcon : @"LockSettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:212:                                         kLockSetupHeroImage : @"basic_lock_setup",
Pods/AugustAPI/August API/AGLockCapability.m:213:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:214:                                         kCalibrationImageStart : @"DoorStateCalibrationClosedAndUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:215:                                         kCalibrationImageClosedAndLockedLock : @"DoorStateCalibrationClosedAndHandLocked",
Pods/AugustAPI/August API/AGLockCapability.m:216:                                         kCalibrationImageClosedAndUnlockedLock : @"DoorStateCalibrationClosedAndHandUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:217:                                         kCalibrationImageDoorWideOpenDoor : @"DoorStateCalibrationDoorOpen",
Pods/AugustAPI/August API/AGLockCapability.m:218:                                         kCalibrationImageDoorAjarDoor : @"DoorStateCalibrationDoorAjar",
Pods/AugustAPI/August API/AGLockCapability.m:219:                                         kCalibrationImageClosedAndUnlockedDoor : @"DoorStateCalibrationClosedAndUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:220:                                         kCalibrationImageFinished : @"EuropaCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:239:                self.onboardCPUs = @[@"dlg"];
Pods/AugustAPI/August API/AGLockCapability.m:245:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl4/";
Pods/AugustAPI/August API/AGLockCapability.m:246:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl4";
Pods/AugustAPI/August API/AGLockCapability.m:249:                self.definedVersion = @"4.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:254:                                         kLockSettingsIcon : @"CallistoSettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:255:                                         kLockSetupHeroImage : @"CallistoLockSetup",
Pods/AugustAPI/August API/AGLockCapability.m:256:                                         kCalibrationImageLockAndDoorQuestion : @"CallistoCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:257:                                         kCalibrationImageStart : @"CallistoCalibrationClosedAndUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:258:                                         kCalibrationImageClosedAndLockedLock : @"CallistoCalibrationClosedAndHandLocked",
Pods/AugustAPI/August API/AGLockCapability.m:259:                                         kCalibrationImageClosedAndUnlockedLock : @"CallistoCalibrationClosedAndHandUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:260:                                         kCalibrationImageDoorWideOpenDoor : @"CallistoCalibrationDoorOpen",
Pods/AugustAPI/August API/AGLockCapability.m:261:                                         kCalibrationImageDoorAjarDoor : @"CallistoCalibrationDoorAjar",
Pods/AugustAPI/August API/AGLockCapability.m:262:                                         kCalibrationImageClosedAndUnlockedDoor : @"CallistoCalibrationClosedAndUnlocked",
Pods/AugustAPI/August API/AGLockCapability.m:263:                                         kCalibrationImageFinished : @"CallistoCalibrationHero",
Pods/AugustAPI/August API/AGLockCapability.m:282:                self.onboardCPUs = @[@"dlg",@"yale"];
Pods/AugustAPI/August API/AGLockCapability.m:288:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/md01/";
Pods/AugustAPI/August API/AGLockCapability.m:289:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-md01-yale/";
Pods/AugustAPI/August API/AGLockCapability.m:292:                self.definedVersion = @"1001.0.0";
Pods/AugustAPI/August API/AGLockCapability.m:296:                                         kLockSettingsIcon : @"UnitySettingsIcon",
Pods/AugustAPI/August API/AGLockCapability.m:297:                                         kLockSetupHeroImage : @"unity_setup",
Pods/AugustAPI/August API/AGLockCapability.m:298:                                         kCalibrationImageLockAndDoorQuestion : @"unity_setup",
Pods/AugustAPI/August API/AGLockCapability.m:299:                                         kCalibrationImageStart : @"unity_calibration1",
Pods/AugustAPI/August API/AGLockCapability.m:300:                                         kCalibrationImageClosedAndLockedLock : @"calibration_yale_lock_door",
Pods/AugustAPI/August API/AGLockCapability.m:301:                                         kCalibrationImageClosedAndUnlockedLock : @"calibration_yale_closed_unlocked",
Pods/AugustAPI/August API/AGLockCapability.m:302:                                         kCalibrationImageDoorWideOpenDoor : @"calibration_yale_open_door",
Pods/AugustAPI/August API/AGLockCapability.m:303:                                         kCalibrationImageDoorAjarDoor : @"calibration_yale_ajar_door",
Pods/AugustAPI/August API/AGLockCapability.m:304:                                         kCalibrationImageClosedAndUnlockedDoor : @"calibration_yale_closed_unlocked",
Pods/AugustAPI/August API/AGLockCapability.m:305:                                         kCalibrationImageFinished : @"doorsense_yale",
Pods/AugustAPI/August API/AGLockCapability.m:315:    [loggingDictionary setObject:[NSNumber numberWithInt:self.lockPlanetType] forKey:@"LockType"];
Pods/AugustAPI/August API/AGPartnerCategory.m:19:        self.name = dict[@"tag"];
Pods/AugustAPI/August API/AGPartnerCategory.m:20:        self.partnerIDs = dict[@"appItems"];
Pods/AugustAPI/August API/BLELockOperation.m:16:static NSString* kAGLastOldLockLogVersion = @"1.0.99";      // After this version is the new log format.
Pods/AugustAPI/August API/BLELockOperation.m:18:static NSString* kAGDiaryCategory = @"Bluetooth";
Pods/AugustAPI/August API/BLELockOperation.m:20:static NSString* kErrorCategoryLockOperation = @"BLELockOperation";
Pods/AugustAPI/August API/BLELockOperation.m:22:#define STATUS_LOCK_IN_USE              NSLocalizedString(@"LOCK IN USE", nil)
Pods/AugustAPI/August API/BLELockOperation.m:23:#define STATUS_AUTHORIZING              NSLocalizedString(@"AUTHORIZING", nil)
Pods/AugustAPI/August API/BLELockOperation.m:24:#define STATUS_SCANNING                 NSLocalizedString(@"OUT OF RANGE", nil)       // Note this is localized to SCANNING FOR LOCK
Pods/AugustAPI/August API/BLELockOperation.m:29:#define kAGLockRequestLockItemCommandLabel @"RequestLockLogItemCmd"
Pods/AugustAPI/August API/BLELockOperation.m:120:    AGDiaryDebug(@"AppResignState", @"state");
Pods/AugustAPI/August API/BLELockOperation.m:181:    AGDiaryInfo(@"InitEpic", @"Processing %d commands for Epic", [commands count]);
Pods/AugustAPI/August API/BLELockOperation.m:209:                            AGDiaryInfo(@"FinishedEpic", @"Executing last command for epic");
Pods/AugustAPI/August API/BLELockOperation.m:213:                        AGDiaryInfo(@"FailedEpic", @"Aborted epic and clearing commands");
Pods/AugustAPI/August API/BLELockOperation.m:225:                            AGDiaryInfo(@"FinishedEpic", @"Executing last command for epic");
Pods/AugustAPI/August API/BLELockOperation.m:229:                        AGDiaryInfo(@"FailedEpic", @"Aborted epic and clearing commands");
Pods/AugustAPI/August API/BLELockOperation.m:239:        AGDiaryInfo(@"QueueEpic", @"Queuing %d commands for Epic", [commands count]);
Pods/AugustAPI/August API/BLELockOperation.m:297:                            AGDiaryVerbose(@"PinDeletedOnLock", @"Deleted pin %@ from lock. Notifying server", pinEntry.pinCode);
Pods/AugustAPI/August API/BLELockOperation.m:300:                            AGDiaryVerbose(@"PinDeleteOnLockFail", @"Error deleting pin %@ from lock.", pinEntry.pinCode);
Pods/AugustAPI/August API/BLELockOperation.m:312:                            AGDiaryWarn(@"PinDeleteOnLockFail", @"Error deleting pin from lock.");
Pods/AugustAPI/August API/BLELockOperation.m:359:                            block([NSError errorWithDomain: @"AGCoreBluetooth" code:-1 userInfo:nil]);
Pods/AugustAPI/August API/BLELockOperation.m:367:            block([NSError errorWithDomain: @"AGCoreBluetooth" code:-1 userInfo:nil]);
Pods/AugustAPI/August API/BLELockOperation.m:384:            NSNumber *errorResponse = [responseDict objectForKey:@"error"];
Pods/AugustAPI/August API/BLELockOperation.m:386:                AGDiaryWarn(@"PinAddOnLockFail", @"Error adding pin from lock. Error code from lock: %d", [errorResponse integerValue]);
Pods/AugustAPI/August API/BLELockOperation.m:391:            AGDiaryWarn(@"PinAddOnLockFail", @"Error adding pin to lock.");
Pods/AugustAPI/August API/BLELockOperation.m:412:    AGDiaryDebug(@"AttachLock", @"About to attach lock.");
Pods/AugustAPI/August API/BLELockOperation.m:443:            AGDiaryError(@"InteralInconsistencyError", @"BLELock is not connected during attach");
Pods/AugustAPI/August API/BLELockOperation.m:459:           AGDiaryInfo(@"AttachWhileConnecting", @"Attached to lock while connecting to or authorizing same lock.");
Pods/AugustAPI/August API/BLELockOperation.m:470:                AGDiaryInfo(@"DoubleAttach", @"Attached to another lock connecting or connected to another lock. Forcing off lock.");
Pods/AugustAPI/August API/BLELockOperation.m:473:                AGDiaryInfo(@"DoubleAttach", @"Attached to another lock connecting or connected to another lock. Letting lock be.");
Pods/AugustAPI/August API/BLELockOperation.m:495:                AGDiaryInfo(@"NoKeysChanged", @"Keep connected because there are no keys to change.");
Pods/AugustAPI/August API/BLELockOperation.m:501:                AGDiaryInfo(@"ForceDisconnectForKeys", @"Force a lock disconnect so we can reconnect with the online key.");
Pods/AugustAPI/August API/BLELockOperation.m:509:    AGDiaryInfo(@"FindNewLockForConnection", @"Finding new lock for connection");
Pods/AugustAPI/August API/BLELockOperation.m:516:        AGDiaryError(@"StillConnected", [NSString stringWithFormat:@"Error: Trying to connect to new lock while currentConnectedLockID is %@", self.currentConnectedLockID]);
Pods/AugustAPI/August API/BLELockOperation.m:529:    AGDiaryDebug(@"CleanupPreviousConnection", @"Cleaning up previous connection to prepare for %@", lockID);
Pods/AugustAPI/August API/BLELockOperation.m:543:                AGDiaryDebug(@"LeaveAuthorizing", @"Leaving other lock because it's AGLockStatusAuthorizing or AGLockStatusConnected");
Pods/AugustAPI/August API/BLELockOperation.m:548:                AGDiaryDebug(@"ForceOffConnectingLock", @"Delegate is has not connected to lock yet. Give up on this lock.");
Pods/AugustAPI/August API/BLELockOperation.m:556:                AGDiaryDebug(@"ForceOffOrphanLock", @"Giving up on a scan for a lock");
Pods/AugustAPI/August API/BLELockOperation.m:566:                AGDiaryDebug(@"SimpleDisconnectOrphan", @"Doing a disconnect on connected lock. We will reconnect to another lock later.");
Pods/AugustAPI/August API/BLELockOperation.m:578:                     AGDiaryWarn(@"Connecting", @"Disconnect during connecting");
Pods/AugustAPI/August API/BLELockOperation.m:591:    NSString *statusString = @"Unknown";
Pods/AugustAPI/August API/BLELockOperation.m:594:            statusString = @"AGLockStatusConnecting";
Pods/AugustAPI/August API/BLELockOperation.m:597:            statusString = @"AGLockStatusAuthorizing";
Pods/AugustAPI/August API/BLELockOperation.m:600:            statusString = @"AGLockStatusConnected";
Pods/AugustAPI/August API/BLELockOperation.m:603:            statusString = @"AGLockStatusSoftScan";
Pods/AugustAPI/August API/BLELockOperation.m:606:            statusString = @"AGLockStatusUndefined";
Pods/AugustAPI/August API/BLELockOperation.m:613:    AGDiaryInfo(@"ChangedConnectStatus", @"Status: %@ Lock: %@", statusString, self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:624:            [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:nil]];
Pods/AugustAPI/August API/BLELockOperation.m:628:            [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsTemporarilyDown userInfo:nil]];
Pods/AugustAPI/August API/BLELockOperation.m:637:        AGDiaryError(@"MissingLockObect", @"Missing AGLock Object for %@", lockID);
Pods/AugustAPI/August API/BLELockOperation.m:650:        AGDiaryWarn(@"UnexpectedlyConnected", @"Trying a connection when connected");
Pods/AugustAPI/August API/BLELockOperation.m:671:    AGDiaryInfo(@"StartScanForLock", @"Starting scan or direct connect for lock %@", lockID);
Pods/AugustAPI/August API/BLELockOperation.m:703:                [operItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
Pods/AugustAPI/August API/BLELockOperation.m:722:                [item failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected while command queued."];
Pods/AugustAPI/August API/BLELockOperation.m:787:    AGDiaryDebug(@"StatInfoStart",@"** Printing Attached Locks **");
Pods/AugustAPI/August API/BLELockOperation.m:791:        AGDiaryDebug(@"StatInfo",@"Lock ID %@ %@ %d delegates", lockID, lockInfo.name,  [delegateSet count]);
Pods/AugustAPI/August API/BLELockOperation.m:793:    AGDiaryDebug(@"StatInfoEnd",@"----");
Pods/AugustAPI/August API/BLELockOperation.m:801:    AGDiaryInfo(@"RelinquishLock", @"Lock %@", agLock.objectId);
Pods/AugustAPI/August API/BLELockOperation.m:825:            AGDiaryInfo(@"RelinquishLockTimer", @"Setting 5 second relinquish timer");
Pods/AugustAPI/August API/BLELockOperation.m:834:            AGDiaryInfo(@"RelinqushDisconnect", @"Checking %@ if matches %@ to force disconnect current lock", agLock.objectId, self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:837:                AGDiaryInfo(@"RelinqushDisconnectConfirmed", @"Decided do disconnect the current lock");
Pods/AugustAPI/August API/BLELockOperation.m:869:    AGDiaryInfo(@"CleanupQueue", @"Removing all queued operations for %@", oldLock);
Pods/AugustAPI/August API/BLELockOperation.m:878:            [self.currentOperationItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
Pods/AugustAPI/August API/BLELockOperation.m:897:            [item failWithError:kLockOperationErrorDisconnectedWhileCommandQueued msg:@"Disconnected"];
Pods/AugustAPI/August API/BLELockOperation.m:902:             AGDiaryInfo(@"NotDeletedItem", @"Queued item was already deleted because of an epic or group");
Pods/AugustAPI/August API/BLELockOperation.m:914:    AGDiaryInfo(@"ForceDisconnect", @"Forcing disconnect of current lock");
Pods/AugustAPI/August API/BLELockOperation.m:916:        AGDiaryInfo(@"ForceDisconnect", @"Exiting because Current lock id is nil");
Pods/AugustAPI/August API/BLELockOperation.m:944:            if (([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedDescending) || ([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedSame)) {
Pods/AugustAPI/August API/BLELockOperation.m:946:                AGDiaryDebug(@"SimulateDisconnect", @"Will call initiate fake Disconnect call to clean up the lock.");
Pods/AugustAPI/August API/BLELockOperation.m:995:    AGDiaryInfo(@"CommandExecute", @"Executing next command. Queue size %d", [self.queue count]);
Pods/AugustAPI/August API/BLELockOperation.m:998:        AGDiaryInfo(@"NotConnectedExecutingCommand", @"executeNextCommand while not connected");
Pods/AugustAPI/August API/BLELockOperation.m:1004:        AGDiaryDebug(@"QueueNotEmpty", @"Not running next command because another operation active");
Pods/AugustAPI/August API/BLELockOperation.m:1022:        AGDiaryError(@"NotConnectedExecutingCommand", @"BLELock not found for lock ID %@", _currentOperationItem.lockID);
Pods/AugustAPI/August API/BLELockOperation.m:1027:        AGDiaryInfo(@"NotConnectedExecutingCommand", @"BLELock not connected yet for %@", _currentOperationItem.lockID);
Pods/AugustAPI/August API/BLELockOperation.m:1032:        AGDiaryDebug(@"CommandExecute", _currentOperationItem.label);
Pods/AugustAPI/August API/BLELockOperation.m:1039:        AGDiaryDebug(@"CommandExecute", @"Executing set param %@", [self.commandDecoder encodeStringFromParamNumber:_currentOperationItem.paramToGetOrSet]);
Pods/AugustAPI/August API/BLELockOperation.m:1049:            AGDiaryError(@"InvalidParam", @"setParam value is improper class type");
Pods/AugustAPI/August API/BLELockOperation.m:1050:            _currentOperationItem.genericResponseBlock(nil, [NSError errorWithDomain:kErrorCategoryLockOperation code:kLockOperationErrorInvalidParam userInfo:[NSDictionary dictionaryWithObject:value forKey:@"badparam"]]);
Pods/AugustAPI/August API/BLELockOperation.m:1062:        AGDiaryDebug(@"CommandExecute", @"Executing get param %@", [self.commandDecoder encodeStringFromParamNumber:_currentOperationItem.paramToGetOrSet]);
Pods/AugustAPI/August API/BLELockOperation.m:1070:        AGDiaryDebug(@"CommandExecute", @"Executing get status %@", [self.commandDecoder encodeStringFromStatusNumber:_currentOperationItem.paramToGetOrSet]);
Pods/AugustAPI/August API/BLELockOperation.m:1074:        AGDiaryDebug(@"CommandExecute", @"Executing special command");
Pods/AugustAPI/August API/BLELockOperation.m:1106:        AGDiaryError(@"InvalidOperationType", @"Bluetooth packet not set in OperationItem");
Pods/AugustAPI/August API/BLELockOperation.m:1122:    AGDiaryInfo(@"CommandTimeout", @"Timeout receiving response to command.");
Pods/AugustAPI/August API/BLELockOperation.m:1129:        AGDiaryInfo(@"CommandTimeoutDisconnect", @"Forcing disconnect due to lack of response from lock");
Pods/AugustAPI/August API/BLELockOperation.m:1132:        AGDiaryInfo(@"MissingCommand", @"Timeout receiving response to command when there is no command. Disconnecting lock.");
Pods/AugustAPI/August API/BLELockOperation.m:1139:    [[NSUserDefaults standardUserDefaults]  setObject:[NSMutableDictionary dictionaryWithCapacity:3] forKey:@"lockIDToUUIDMap"];
Pods/AugustAPI/August API/BLELockOperation.m:1145:    AGDiaryDebug(@"SendCommand", @"Queuing up new command");
Pods/AugustAPI/August API/BLELockOperation.m:1147:        AGDiaryDebug(@"SendingWhileNotConnected", @"Warning. Queuing a command when not connected to a lock is not reccomended.");
Pods/AugustAPI/August API/BLELockOperation.m:1173:        AGDiaryError(@"UnexpectedConnection", @"didOpenConnectionToLock to %@ not expected when we were expecting %@", lock.name, self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:1187:        AGDiaryDebug(@"ConnectDirect", @"Connecting directly to a lock from its UUID");
Pods/AugustAPI/August API/BLELockOperation.m:1215:    AGDiaryDebug(@"LockConnectionTimeout", @"Timeout connecting to lock for %@", self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:1224:        AGDiaryDebug(nil, @"lockConnectionTimeout - disconnecting");
Pods/AugustAPI/August API/BLELockOperation.m:1231:        AGDiaryInfo(@"StartReconnectAttempt",  @"Will try again to find the lock");
Pods/AugustAPI/August API/BLELockOperation.m:1242:    AGDiaryInfo(@"DiscoveredLock", @"Discovered lock named '%@'", lock.name);
Pods/AugustAPI/August API/BLELockOperation.m:1263:    NSNumber *canConnectToLock = [advertisementData objectForKey:@"kCBAdvDataIsConnectable"];
Pods/AugustAPI/August API/BLELockOperation.m:1265:        AGDiaryInfo(@"DiscoveredDesiredLock", @"Discovered the lock that we're looking for lock.name = '%@'", lock.name);
Pods/AugustAPI/August API/BLELockOperation.m:1306:    AGDiaryInfo(@"EndScanForLock", @"Done scanning for lock");
Pods/AugustAPI/August API/BLELockOperation.m:1307:    AGDiaryInfo(@"StartConnectForLock", @"Connecting to lock");
Pods/AugustAPI/August API/BLELockOperation.m:1313:    AGDiaryInfo(@"DidConnectToLock", @"Got lock connection for %@", lock.name);
Pods/AugustAPI/August API/BLELockOperation.m:1315:        AGDiaryInfo(@"DidConnectToLockFail", @"Lock name %@ is not CurrentConnectedLockID %@", lock.name, self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:1334:            AGDiaryInfo(@"QueueOldItem", @"Queueing recent pending item on a reconnect");
Pods/AugustAPI/August API/BLELockOperation.m:1340:    AGDiaryInfo(@"LockConnected", @"Lock '%@' is connected with %@ key", lock, lock.actualConnectionUsedOnlineKey?@"ONLINE":@"OFFLINE");
Pods/AugustAPI/August API/BLELockOperation.m:1364:    AGDiaryInfo(@"LockResponse", @"Lock responded with dict '%@'", lockDictionary);
Pods/AugustAPI/August API/BLELockOperation.m:1370:    NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
Pods/AugustAPI/August API/BLELockOperation.m:1371:    NSString *lockState = [lockStatusDict objectForKey:@"AUG_STAT_LOCK_STATE"];
Pods/AugustAPI/August API/BLELockOperation.m:1372:    NSString *doorStateResponse = [lockStatusDict objectForKey:@"AUG_STAT_DOOR_STATE"];
Pods/AugustAPI/August API/BLELockOperation.m:1380:        if (([lockState isEqualToString:@"kAugLockState_Locked"]) || ([lockState isEqualToString:@"kAugLockState_Locking"])) {
Pods/AugustAPI/August API/BLELockOperation.m:1383:            AGDiaryInfo(@"Locked", @"");
Pods/AugustAPI/August API/BLELockOperation.m:1384:        } else if ([lockState isEqualToString:@"kAugLockState_Unlocked"] || ([lockState isEqualToString:@"kAugLockState_Unlocking"])) {
Pods/AugustAPI/August API/BLELockOperation.m:1386:            AGDiaryInfo(@"Unlocked", @"");
Pods/AugustAPI/August API/BLELockOperation.m:1388:        } else if ([lockState isEqualToString:@"kAugLockState_UnknownStaticPosition"] ||[lockState isEqualToString:@"kAugLockState_Init"]) {
Pods/AugustAPI/August API/BLELockOperation.m:1390:            AGDiaryInfo(@"NotCalibrated", @"");
Pods/AugustAPI/August API/BLELockOperation.m:1393:            AGDiaryError(@"UnexpectedLockedState", @"Lock state %@ is unexpected. Treating as locked", lockState);
Pods/AugustAPI/August API/BLELockOperation.m:1462:                NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
Pods/AugustAPI/August API/BLELockOperation.m:1473:                        AGDiaryError(@"GetStatusMissing", @"Status value %@ is missing from param request response", statusStr);
Pods/AugustAPI/August API/BLELockOperation.m:1479:                    AGDiaryDebug(@"GetStatusMatched", @"Status value %@ response matches request", statusStr);
Pods/AugustAPI/August API/BLELockOperation.m:1497:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"getParameter"];
Pods/AugustAPI/August API/BLELockOperation.m:1503:                    AGDiaryError(@"GetParamMissing", @"Parameter %@ is missing from param request response", paramStr);
Pods/AugustAPI/August API/BLELockOperation.m:1505:                    AGDiaryDebug(@"GetParamMatched", @"Parameter %@ response matches request", paramStr);
Pods/AugustAPI/August API/BLELockOperation.m:1515:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"setParameter"];
Pods/AugustAPI/August API/BLELockOperation.m:1519:                    AGDiaryError(@"SetParamMissing", @"Parameter %@ is missing from response to setparam request", paramStr);
Pods/AugustAPI/August API/BLELockOperation.m:1525:                    AGDiaryDebug(@"SetParamMatched", @"Parameter %@ response matches request", paramStr);
Pods/AugustAPI/August API/BLELockOperation.m:1542:                AGDiaryError(@"UnkownOperationItem", @"This operation item type not handled");
Pods/AugustAPI/August API/BLELockOperation.m:1597:    AGDiaryDebug(@"didDisconnectFromLock", @"LockName: %@ CurrentConnectedLockID: %@", lock.name, self.currentConnectedLockID);
Pods/AugustAPI/August API/BLELockOperation.m:1620:                AGDiaryDebug(@"DisconnectingWhileConnecting", @"Disconnected while connecting to %@  %@", lock.name, lock.peripheral);
Pods/AugustAPI/August API/BLELockOperation.m:1624:                    AGDiaryDebug(@"DisconnectingWhileConnecting", @"This has happened too many times. Give up");
Pods/AugustAPI/August API/BLELockOperation.m:1629:                    AGDiaryDebug(@"FiredConnectionTimer", @"Fired connection timeout");
Pods/AugustAPI/August API/BLELockOperation.m:1638:                AGDiaryDebug(@"PhantomDisconnect", @"Got possible phantom message for %@ with connection status %d %@", lock.name, (int)self.connectionStatus, lock.peripheral);
Pods/AugustAPI/August API/BLELockOperation.m:1643:    AGDiaryDebug(@"Disconnected", @"Disconnected from lock %@", lock.name);
Pods/AugustAPI/August API/BLELockOperation.m:1715:            AGDiaryInfo(@"ConnectionInhibit", @"Inhibiting connection");
Pods/AugustAPI/August API/BLELockOperation.m:1726:        AGDiaryInfo(@"StartReconnectAtempt", @"Will attempt to reconnect to any locks that attached delegates are interested in.");
Pods/AugustAPI/August API/BLELockOperation.m:1732:        AGDiaryInfo(@"SkipReconnectAtempt", @"Skipping reconnection attempt because we are in the background.");
Pods/AugustAPI/August API/BLELockOperation.m:1751:        AGDiaryInfo(@"BluetoothEnabled", @"Bluetooth turned on. Find new lock to connect to");
Pods/AugustAPI/August API/BLELockOperation.m:1758:        [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsTemporarilyDown userInfo:nil]];
Pods/AugustAPI/August API/BLELockOperation.m:1763:    AGDiaryInfo(@"Error", @"%@ recoverable:%@",[error description], isRecoverable?@"YES":@"NO");
Pods/AugustAPI/August API/BLELockOperation.m:1808:    NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
Pods/AugustAPI/August API/BLELockOperation.m:1809:    if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
Pods/AugustAPI/August API/BLELockOperation.m:1812:        errorStr = [NSString stringWithFormat:NSLocalizedString(@"Not authorized to use this lock.\ncode: %ld",nil), (long)error.code];
Pods/AugustAPI/August API/BLELockOperation.m:1814:    AGDiaryInfo(@"LockSecurityError", @"Lock Security error '%@'", errorStr);
Pods/AugustAPI/August API/BLELockOperation.m:1824:    AGDiaryInfo(@"ReconnectionInhibitForOTA", @"Inhibiting connection %@ for %@", doInihibitReconnection?@"ON":@"OFF", lockID);
Pods/AugustAPI/August API/BLELockOperation.m:1877:        AGDiaryError(@"LockOperationTimeout", @"Lock/Unlock timeout triggered unexpectedly");
Pods/AugustAPI/August API/BLELockOperation.m:1884:    AGDiaryError(@"LockOperationFailure", @"Lock ");
Pods/AugustAPI/August API/BLELockOperation.m:1890:    AGDiaryInfo(@"LockOperateSendCommand", @"Sending command to lock");
Pods/AugustAPI/August API/BLELockOperation.m:1893:        AGDiaryError(@"LockOperateSendCommand", @"Trying to lock/unlock while operation in progress.");
Pods/AugustAPI/August API/BLELockOperation.m:1900:        AGDiaryError(@"LockOperateSendCommand", @"Trying to lock/unlock while not connected to lock.");
Pods/AugustAPI/August API/BLELockOperation.m:1919:            NSInteger errorCode = [dict[@"error"] integerValue];
Pods/AugustAPI/August API/BLELockOperation.m:1921:                error = [NSError errorWithDomain:@"BLELockError" code:errorCode userInfo:nil];
Pods/AugustAPI/August API/BLELockOperation.m:1951:    oper.label = @"LockUnlockCommand";
Pods/AugustAPI/August API/BLELockOperation.m:1961:    NSAssert(situation != AGLockActionSituationWatch, @"AGLockActionSituationWatch not supported");
Pods/AugustAPI/August API/BLELockOperation.m:1982:                    NSNumber *offsetInitial = [dict objectForKey:@"timeZoneOffsetInitial"];
Pods/AugustAPI/August API/BLELockOperation.m:1983:                    NSNumber *offsetT1 = [dict objectForKey:@"timeZoneOffsetTransition1"];
Pods/AugustAPI/August API/BLELockOperation.m:1984:                    NSNumber *offsetT2 = [dict objectForKey:@"timeZoneOffsetTransition2"];
Pods/AugustAPI/August API/BLELockOperation.m:1985:                    NSNumber *transitionTime1 = [dict objectForKey:@"transitionTime1"];
Pods/AugustAPI/August API/BLELockOperation.m:1986:                    NSNumber *transitionTime2 = [dict objectForKey:@"transitionTime2"];
Pods/AugustAPI/August API/BLELockOperation.m:2031:        AGDiaryInfo(@"LogPullCooldownInEffect", @"Skipping pulling logs");
Pods/AugustAPI/August API/BLELockOperation.m:2044:    AGDiaryInfo(@"LogRequest", @"Adding a request to the lock for Log data");
Pods/AugustAPI/August API/BLELockOperation.m:2069:                AGDiaryInfo(@"ProcessedLogEvent", @"Posted log. %d log items left to get", (int)self.remainingLogItemsOnLock);
Pods/AugustAPI/August API/BLELockOperation.m:2074:                AGDiaryError(@"UnknownOperationItem", @"Unexpected response from lock when expecting log packet LockEventPacket0");
Pods/AugustAPI/August API/BLELockOperation.m:2123:            AGDiaryInfo(@"UnreadLogEvents", [NSString stringWithFormat:@"There are %d unread log events to process", self.remainingLogItemsOnLock]);
Pods/AugustAPI/August API/BLELockOperation.m:2136:    oper.label = @"UnreadLogItems";
Pods/AugustAPI/August API/BLELockOperation.m:2162:    NSString *atomicGroupIdentifier = @"SetParamsGroup";
Pods/AugustAPI/August API/BLELockOperation.m:2221:    AGDiaryDebug(@"OTAUpdateComplete", @"BLELockOperation got the otaUpdateComplete callback");
Pods/AugustAPI/August API/BLELockOperation.m:2231:            AGDiaryDebug(@"SkippingFindNewLock", @"Everything about the current connection seems in order so we'll skip reconnecting to the lock.");
Pods/AugustAPI/August API/BLELockOperation.m:2292:        NSString *logMessage = [NSString stringWithFormat:@"Offline key handshake failed %li attempt(s) but can try again with offline key", (long)self.numberOfOfflineKeyFailuresSinceAttach];
Pods/AugustAPI/August API/BLELockOperation.m:2293:        AGDiaryInfo(@"AutoUnlock", logMessage);
Pods/AugustAPI/August API/BLELockOperation.m:2332:    if ([statusResponse isEqualToString:@"kAugDoorState_Init"]) {
Pods/AugustAPI/August API/BLELockOperation.m:2334:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Closed"]) {
Pods/AugustAPI/August API/BLELockOperation.m:2336:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Ajar"]) {
Pods/AugustAPI/August API/BLELockOperation.m:2338:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Open"]) {
Pods/AugustAPI/August API/BLELockOperation.m:2340:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Unknown"]) {
Pods/AugustAPI/August API/AGKeyStorage.m:15:#define kAGDiaryCategory @"KeyStorage"
Pods/AugustAPI/August API/AGKeyStorage.m:17:#define kAugustKeychainService @"AugustKeys"
Pods/AugustAPI/August API/AGKeyStorage.m:23:        return @"HK";
Pods/AugustAPI/August API/AGKeyStorage.m:26:        return @"OK";
Pods/AugustAPI/August API/AGKeyStorage.m:61:    [SAMKeychain setPassword:serializedData forService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:67:    [SAMKeychain deletePasswordForService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:78:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"]];
Pods/AugustAPI/August API/AGKeyStorage.m:81:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:83:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"] accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:99:        NSString *accountID = [curAccount objectForKey:@"acct"];
Pods/AugustAPI/August API/AGKeyStorage.m:105:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:107:        NSString *accountID = [curAccount objectForKey:@"acct"];
Pods/AugustAPI/August API/AGKeyStorage.m:109:            [SAMKeychain deletePasswordForService:kAugustKeychainService account:accountID accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGKeyStorage.m:115:    return !([[[NSUserDefaults standardUserDefaults] stringForKey:@"KeysMigrated"] boolValue]);
Pods/AugustAPI/August API/AGKeyStorage.m:136:        [[NSUserDefaults standardUserDefaults]  setObject:[NSNumber numberWithBool:TRUE] forKey:@"KeysMigrated"];
Pods/AugustAPI/August API/AGClient.m:14:static NSString* kAGDiaryCategory = @"ApiClient";
Pods/AugustAPI/August API/AGClient.m:34:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGClient.m:48:    if ([url rangeOfString:@"https://"].location != 0) {
Pods/AugustAPI/August API/AGClient.m:52:    return [theURL.host hasSuffix:@".august.com"];
Pods/AugustAPI/August API/AGClient.m:62:        NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGClient.m:91:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];
Pods/AugustAPI/August API/AGClient.m:92:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Pods/AugustAPI/August API/AGClient.m:93:    [self.requestSerializer setValue:kSezamAPIVersion forHTTPHeaderField:@"accept-version"];
Pods/AugustAPI/August API/AGClient.m:111:    [[NSUserDefaults standardUserDefaults] setObject:urlString forKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGClient.m:114:    NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
Pods/AugustAPI/August API/AGClient.m:115:    [crossProcessDefaults setObject:urlString forKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGClient.m:124:    NSMutableDictionary *userInfo = @{@"clientSerial": clientSerial, @"requestTime" : [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000]}.mutableCopy;
Pods/AugustAPI/August API/AGClient.m:132:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:145:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
Pods/AugustAPI/August API/AGClient.m:161:                else if ((response.statusCode == 400) && ([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:167:                            serverErrorCode = [(NSDictionary *)localizedRecoverySuggestion objectForKey:@"code"];
Pods/AugustAPI/August API/AGClient.m:169:                        if ([serverErrorCode isEqualToString:@"InvalidVersion"]) {
Pods/AugustAPI/August API/AGClient.m:183:                else if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && (response.statusCode != 404) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:192:                    if ((error.userInfo!=nil) && ([error.userInfo objectForKey:@"NSLocalizedDescription"] != nil)) {
Pods/AugustAPI/August API/AGClient.m:193:                        errorUserInfo = @{@"NSLocalizedDescription":error.userInfo[@"NSLocalizedDescription"]};
Pods/AugustAPI/August API/AGClient.m:195:                    error = [NSError errorWithDomain:@"GeneralNetworkFailure" code:error.code userInfo:errorUserInfo];
Pods/AugustAPI/August API/AGClient.m:204:                if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:219:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {         // don't log the log requests!
Pods/AugustAPI/August API/AGClient.m:226:                        NSLog(@"dataTaskWithRequest HTTP status code: %ld", (long)statusCode);
Pods/AugustAPI/August API/AGClient.m:231:                    NSString *accessToken = [allHTTPHeaderFields objectForKey:@"x-august-access-token"];
Pods/AugustAPI/August API/AGClient.m:238:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
Pods/AugustAPI/August API/AGClient.m:263:    [self logRequest:request logType:@"LOG SYNCHRONOUS REQUEST"];
Pods/AugustAPI/August API/AGClient.m:269:    [self logResponse:response responseBody:data request:request error:error logType:@"LOG SYNCHRONOUS RESPONSE"];
Pods/AugustAPI/August API/AGClient.m:270:    if ((error != nil) && ([error.localizedDescription rangeOfString:@"401"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:318:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"GET" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:320:    if (([URLString.lowercaseString rangeOfString:@"locks/firmware"].location != NSNotFound) || ([URLString.lowercaseString rangeOfString:@"firmware/arm"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:322:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/octet-stream"}];
Pods/AugustAPI/August API/AGClient.m:324:    else if ([URLString.lowercaseString rangeOfString:@"firmware/ti"].location != NSNotFound) {
Pods/AugustAPI/August API/AGClient.m:326:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/x-gzip"}];
Pods/AugustAPI/August API/AGClient.m:362:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:377:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:URLString parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:378:    [request setValue:nil forHTTPHeaderField:@"accept-version"];
Pods/AugustAPI/August API/AGClient.m:389:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:402:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:417:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:436:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"DELETE" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:452:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PATCH" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
Pods/AugustAPI/August API/AGClient.m:461:    [self uploadFileWithType:@"POST" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
Pods/AugustAPI/August API/AGClient.m:468:    [self uploadFileWithType:@"PUT" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
Pods/AugustAPI/August API/AGClient.m:480:    [request setValue:mimeType forHTTPHeaderField:@"Content-Type"];
Pods/AugustAPI/August API/AGClient.m:481:    [request setValue:@"" forHTTPHeaderField:@"Accept-Encoding"];
Pods/AugustAPI/August API/AGClient.m:487:    if ([path rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) {
Pods/AugustAPI/August API/AGClient.m:488:        return [NSString stringWithFormat:@"%@%@clientSerial=%@", path,
Pods/AugustAPI/August API/AGClient.m:489:                [path rangeOfString:@"?"].length > 0 ? @"&" : @"?", clientSerial];
Pods/AugustAPI/August API/AGClient.m:497:    NSUInteger location = [path rangeOfString:@"?clientSerial="].location;
Pods/AugustAPI/August API/AGClient.m:507:    [[AGClient sharedClient] postPath:@"/logrequesttime" parameters:userInfo augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGClient.m:521:    [[NSUserDefaults standardUserDefaults] setObject:@"1" forKey:@"GotAccessTokenAfterInstall"];
Pods/AugustAPI/August API/AGClient.m:523:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" error:nil];
Pods/AugustAPI/August API/AGClient.m:524:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" accessGroup:@"group.com.august.general-cross-process" error:nil];
Pods/AugustAPI/August API/AGClient.m:538:    NSUInteger ampIndex = [stringToDecode rangeOfString:@"&" options:NSLiteralSearch].location;
Pods/AugustAPI/August API/AGClient.m:552:    NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];
Pods/AugustAPI/August API/AGClient.m:557:        if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {
Pods/AugustAPI/August API/AGClient.m:564:        if ([scanner scanString:@"&amp;" intoString:NULL])
Pods/AugustAPI/August API/AGClient.m:565:            [result appendString:@"&"];
Pods/AugustAPI/August API/AGClient.m:566:        else if ([scanner scanString:@"&apos;" intoString:NULL])
Pods/AugustAPI/August API/AGClient.m:567:            [result appendString:@"'"];
Pods/AugustAPI/August API/AGClient.m:568:        else if ([scanner scanString:@"&quot;" intoString:NULL])
Pods/AugustAPI/August API/AGClient.m:569:            [result appendString:@"\""];
Pods/AugustAPI/August API/AGClient.m:570:        else if ([scanner scanString:@"&lt;" intoString:NULL])
Pods/AugustAPI/August API/AGClient.m:571:            [result appendString:@"<"];
Pods/AugustAPI/August API/AGClient.m:572:        else if ([scanner scanString:@"&gt;" intoString:NULL])
Pods/AugustAPI/August API/AGClient.m:573:            [result appendString:@">"];
Pods/AugustAPI/August API/AGClient.m:574:        else if ([scanner scanString:@"&#" intoString:NULL]) {
Pods/AugustAPI/August API/AGClient.m:577:            NSString *xForHex = @"";
Pods/AugustAPI/August API/AGClient.m:580:            if ([scanner scanString:@"x" intoString:&xForHex]) {
Pods/AugustAPI/August API/AGClient.m:588:                [result appendFormat:@"%C", (unichar)charCode];
Pods/AugustAPI/August API/AGClient.m:590:                [scanner scanString:@";" intoString:NULL];
Pods/AugustAPI/August API/AGClient.m:593:                NSString *unknownEntity = @"";
Pods/AugustAPI/August API/AGClient.m:598:                [result appendFormat:@"&#%@%@", xForHex, unknownEntity];
Pods/AugustAPI/August API/AGClient.m:600:                //[scanner scanUpToString:@";" intoString:&unknownEntity];
Pods/AugustAPI/August API/AGClient.m:601:                //[result appendFormat:@"&#%@%@;", xForHex, unknownEntity];
Pods/AugustAPI/August API/AGClient.m:602:                NSLog(@"Expected numeric character entity but got &#%@%@;", xForHex, unknownEntity);
Pods/AugustAPI/August API/AGClient.m:610:            [scanner scanString:@"&" intoString:&amp];  //an isolated & symbol
Pods/AugustAPI/August API/AGClient.m:614:             NSString *unknownEntity = @"";
Pods/AugustAPI/August API/AGClient.m:615:             [scanner scanUpToString:@";" intoString:&unknownEntity];
Pods/AugustAPI/August API/AGClient.m:616:             NSString *semicolon = @"";
Pods/AugustAPI/August API/AGClient.m:617:             [scanner scanString:@";" intoString:&semicolon];
Pods/AugustAPI/August API/AGClient.m:618:             [result appendFormat:@"%@%@", unknownEntity, semicolon];
Pods/AugustAPI/August API/AGClient.m:619:             NSLog(@"Unsupported XML character entity %@%@", unknownEntity, semicolon);
Pods/AugustAPI/August API/AGClient.m:632:    encodedString = [encodedString stringByReplacingOccurrencesOfString:@"+" withString:@"%2B"];
Pods/AugustAPI/August API/AGClient.m:638:    NSMutableDictionary *requestURLDataTypesDict = [[NSMutableDictionary alloc] initWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"]];
Pods/AugustAPI/August API/AGClient.m:640:    [[NSUserDefaults standardUserDefaults] setObject:requestURLDataTypesDict forKey:@"requestURLDataTypes"];
Pods/AugustAPI/August API/AGClient.m:645:    NSDictionary *requestURLDataTypesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"];
Pods/AugustAPI/August API/AGClient.m:667:    NSArray *cachedNetworkObjectKeys = [[NSUserDefaults standardUserDefaults] objectForKey:@"CachedNetworkObjectKeys"];
Pods/AugustAPI/August API/AGClient.m:679:    NSString *agNetworkCacheFolder = [documentsDirectory stringByAppendingPathComponent:@"AGResponseCache"];
Pods/AugustAPI/August API/AGClient.m:685:    return (([requestURL rangeOfString:@"nest"].location != NSNotFound) || ([requestURL rangeOfString:@"temperature"].location != NSNotFound) || ([requestURL rangeOfString:@"airbnb"].location != NSNotFound));
Pods/AugustAPI/August API/AGClient.m:696:    return @[@"logrequesttime", @"clientlogdata", @"lockoperatedata", @"/log", @"/session"];
Pods/AugustAPI/August API/AGClient.m:709:    [self logRequest:request logType:@"LOG REQUEST"];
Pods/AugustAPI/August API/AGClient.m:719:    if (([[request.allHTTPHeaderFields objectForKey:@"Content-Type"] rangeOfString:@"application/json"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGClient.m:720:        AGDiaryDebug(@"NetworkRequest", @"Sending API request: %@", [self logDictionaryForRequest:request logType:logType]);
Pods/AugustAPI/August API/AGClient.m:726:        [logDictionary setObject:@"<data>" forKey:@"Body"];
Pods/AugustAPI/August API/AGClient.m:727:        AGDiaryDebug(@"NetworkRequest", @"Sending API request: %@", logDictionary);
Pods/AugustAPI/August API/AGClient.m:735:                                                                                        @"Type": type,
Pods/AugustAPI/August API/AGClient.m:736:                                                                                        @"Request": request.URL.absoluteString
Pods/AugustAPI/August API/AGClient.m:740:        [logEntryDict setObject:[self.logCleaner cleanedJSON:request.allHTTPHeaderFields] forKey:@"Headers"];
Pods/AugustAPI/August API/AGClient.m:745:            [logEntryDict setObject:cleanedJSON forKey:@"Body"];
Pods/AugustAPI/August API/AGClient.m:753:    [self logResponse:response responseBody:body request:request error:error logType:@"LOG RESPONSE"];
Pods/AugustAPI/August API/AGClient.m:764:        AGDiaryDebug(@"NetworkErrorResponse", @"Got API response: %@", [self logDictionaryForResponse:response responseBody:body request:request error:error logType:logType]);
Pods/AugustAPI/August API/AGClient.m:766:        AGDiaryDebug(@"NetworkSuccessResponse", @"Got API response: %@", [self logDictionaryForResponse:response responseBody:body request:request error:error logType:logType]);
Pods/AugustAPI/August API/AGClient.m:781:                                                                                        @"Type": type,
Pods/AugustAPI/August API/AGClient.m:782:                                                                                        @"Request": request.URL.absoluteString
Pods/AugustAPI/August API/AGClient.m:785:        [logEntryDict setObject:[NSString stringWithFormat:@"%ld", (long)[response statusCode]] forKey:@"Response"];
Pods/AugustAPI/August API/AGClient.m:788:        [logEntryDict setObject:[self.logCleaner cleanedJSON:response.allHeaderFields] forKey:@"Headers"];
Pods/AugustAPI/August API/AGClient.m:791:        [logEntryDict setObject:cleanedJSON forKey:@"Body"];
Pods/AugustAPI/August API/AGClient.m:794:        [logEntryDict setObject:error.localizedDescription forKey:@"Error"];
Pods/AugustAPI/August API/NSString+SecureLogging.m:48:        NSString *logString = [@"h" stringByAppendingString:[fullHash substringToIndex:idealOutputLength]];
Pods/AugustAPI/August API/NSString+SecureLogging.m:89:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
Pods/AugustAPI/August API/AGPartner.m:18:        self.serverId = dict[@"_id"];
Pods/AugustAPI/August API/AGPartner.m:19:        self.name = dict[@"name"];
Pods/AugustAPI/August API/AGPartner.m:20:        self.heroImageURL = dict[@"heroImageURL"];
Pods/AugustAPI/August API/AGPartner.m:21:        self.partnerURL = dict[@"partnerURL"];
Pods/AugustAPI/August API/AGPartner.m:22:        self.logoURL = dict[@"logoURL"];
Pods/AugustAPI/August API/AGPartner.m:23:        self.wordmarkURL = dict[@"wordmarkURL"];
Pods/AugustAPI/August API/AGPartner.m:24:        self.partnerTagline = dict[@"partnerTagline"];
Pods/AugustAPI/August API/AGPartner.m:25:        self.jointTagline = dict[@"jointTagline"];
Pods/AugustAPI/August API/AGPartner.m:26:        self.partnerDescription = dict[@"partnerDescription"];
Pods/AugustAPI/August API/AGPartner.m:27:        self.jointDescription = dict[@"jointDescription"];
Pods/AugustAPI/August API/AGPartner.m:28:        self.promotion = dict[@"promotion"];
Pods/AugustAPI/August API/AGPartner.m:29:        self.locations = dict[@"locations"];
Pods/AugustAPI/August API/AGPartner.m:30:        self.type = dict[@"type"];
Pods/AugustAPI/August API/AGLockServerStatus.m:19:    NSString *status = (NSString *)dictionary[@"status"];
Pods/AugustAPI/August API/AGLockServerStatus.m:20:    NSString *lastUpdatedAt = (NSString *)dictionary[@"dateTime"];
Pods/AugustAPI/August API/AGLockServerStatus.m:21:    if ([status isEqualToString:@"locked"]) {
Pods/AugustAPI/August API/AGLockServerStatus.m:23:    } else if ([status isEqualToString:@"unlocked"]) {
Pods/AugustAPI/August API/AGLockServerStatus.m:28:    if ((lastUpdatedAt != nil) && (![lastUpdatedAt isEqualToString:@""])) {
Pods/AugustAPI/August API/AGNestCamera.m:14:    [[AGClient sharedClient] getPath:@"nest/cameras" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGNestCamera.m:39:        nestCamera.name = [nestCameraDictionary objectForKey:@"name"];
Pods/AugustAPI/August API/AGNestCamera.m:40:        nestCamera.nestDeviceID = [nestCameraDictionary objectForKey:@"device_id"];
Pods/AugustAPI/August API/AGNestCamera.m:41:        nestCamera.nestStructureID = [nestCameraDictionary objectForKey:@"structure_id"];
Pods/AugustAPI/August API/AGNestCamera.m:42:        nestCamera.nameLong = [nestCameraDictionary objectForKey:@"name_long"];
Pods/AugustAPI/August API/AGNestCamera.m:43:        nestCamera.webURL = [nestCameraDictionary objectForKey:@"web_url"];
Pods/AugustAPI/August API/AGNestCamera.m:44:        nestCamera.appURL = [nestCameraDictionary objectForKey:@"app_url"];
Pods/AugustAPI/August API/AGNestCamera.m:52:    [[AGClient sharedClient] postPath:@"nest/camera" parameters:self.nestResponseData augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGNestCamera.m:54:            self.objectId = [responseObject objectForKey:@"CameraID"];
Pods/AugustAPI/August API/AGUser.m:9:static NSString* kAGDiaryCategory = @"UserModel";
Pods/AugustAPI/August API/AGUser.m:26:		return [NSString stringWithFormat:@"%@ %@", self.firstName , self.lastName];
Pods/AugustAPI/August API/AGUser.m:43:		return [NSString stringWithFormat:@"%@", self.email];
Pods/AugustAPI/August API/AGUser.m:50:    if ([self.type.lowercaseString isEqualToString:@"superuser"]) {
Pods/AugustAPI/August API/AGUser.m:51:        return @"Owner";
Pods/AugustAPI/August API/AGUser.m:53:    else if ([self.type.lowercaseString isEqualToString:@"manager"]) {
Pods/AugustAPI/August API/AGUser.m:54:        return @"Host";
Pods/AugustAPI/August API/AGUser.m:56:    else if ([self.type.lowercaseString isEqualToString:@"limited"] || [self.type.lowercaseString isEqualToString:@"user"]) {
Pods/AugustAPI/August API/AGUser.m:57:        return @"Guest";
Pods/AugustAPI/August API/AGUser.m:60:    return @"";
Pods/AugustAPI/August API/AGUser.m:65:	NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
Pods/AugustAPI/August API/AGUser.m:92:	user.username = dictionary[@"UserID"];
Pods/AugustAPI/August API/AGUser.m:93:	user.password = dictionary[@"UserPassword"];
Pods/AugustAPI/August API/AGUser.m:103:	NSString * path = [@"users/" stringByAppendingString:userId];
Pods/AugustAPI/August API/AGUser.m:144:        [parameters setObject:firstName forKey:@"FirstName"];
Pods/AugustAPI/August API/AGUser.m:147:        [parameters setObject:lastName forKey:@"LastName"];
Pods/AugustAPI/August API/AGUser.m:150:        [parameters setObject:email forKey:@"Email"];
Pods/AugustAPI/August API/AGUser.m:153:        [parameters setObject:phoneNumber forKey:@"PhoneNo"];
Pods/AugustAPI/August API/AGUser.m:156:        [parameters setObject:password forKey:@"UserPassword"];
Pods/AugustAPI/August API/AGUser.m:159:	NSString * path = [NSString stringWithFormat:@"users"];
Pods/AugustAPI/August API/AGUser.m:203:	NSString * path = @"users/me" ;
Pods/AugustAPI/August API/AGUser.m:248:    NSString * gotAccessTokenAfterInstall = [[NSUserDefaults standardUserDefaults] objectForKey:@"GotAccessTokenAfterInstall"];
Pods/AugustAPI/August API/AGUser.m:255:    NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
Pods/AugustAPI/August API/AGUser.m:263:        AGDiaryError(@"AuthError", @"Initiate access token error: %@, localizedDescription: %@", error, error.localizedDescription);
Pods/AugustAPI/August API/AGUser.m:275:            NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
Pods/AugustAPI/August API/AGUser.m:276:            AGDiaryInfo(@"AuthTest", @"Got accessToken:%@ from SAMKeychain, kSezam:%@, account:%@", kAccessToken, kSezam, @"AugustAccessToken");
Pods/AugustAPI/August API/AGUser.m:279:                AGDiaryInfo(@"AuthSuccess", @"Available access token");
Pods/AugustAPI/August API/AGUser.m:284:                user.objectId = @"me";
Pods/AugustAPI/August API/AGUser.m:292:                    NSString *lastLoggedOutUserPhoneNumber = [[NSUserDefaults standardUserDefaults] objectForKey:@"LastLoggedOutUserPhoneNumber"];
Pods/AugustAPI/August API/AGUser.m:295:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"AutoUnlockRegions"];
Pods/AugustAPI/August API/AGUser.m:296:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"ExitRegionLockEventDetail"];
Pods/AugustAPI/August API/AGUser.m:297:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastLoggedOutUserPhoneNumber"];
Pods/AugustAPI/August API/AGUser.m:300:                    [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:user];
Pods/AugustAPI/August API/AGUser.m:306:                AGDiaryError(@"AuthError", @"Session token error: %@, localizedDescription: %@", error, error.localizedDescription);
Pods/AugustAPI/August API/AGUser.m:320:	NSString * path = @"apns/devtoken";
Pods/AugustAPI/August API/AGUser.m:323:                                 @"apnstoken": token,
Pods/AugustAPI/August API/AGUser.m:324:                                 @"deviceID":deviceID
Pods/AugustAPI/August API/AGUser.m:335:    NSString * path = [NSString stringWithFormat:@"users/%@/image", userId];
Pods/AugustAPI/August API/AGUser.m:339:    [[AGClient sharedClient] postFile:path fileData:imageData mimeType:@"image/jpeg" augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:353:    NSString * path = [NSString stringWithFormat:@"users/%@", phoneNumber];
Pods/AugustAPI/August API/AGUser.m:464:                                        //  @"FirstName":self.email,
Pods/AugustAPI/August API/AGUser.m:465:                                        //  @"LastName":self.email,
Pods/AugustAPI/August API/AGUser.m:466:                                        //  @"MacAddress":self.email,
Pods/AugustAPI/August API/AGUser.m:467:                                        //  @"PhoneNo":self.email,
Pods/AugustAPI/August API/AGUser.m:468:                                        //  @"Type":self.email,
Pods/AugustAPI/August API/AGUser.m:477:	[[AGClient sharedClient] postPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:529:        [paramsDict setObject:firstName forKey:@"FirstName"];
Pods/AugustAPI/August API/AGUser.m:532:        [paramsDict setObject:lastName forKey:@"LastName"];
Pods/AugustAPI/August API/AGUser.m:535:        [paramsDict setObject:password forKey:@"password"];
Pods/AugustAPI/August API/AGUser.m:538:	[[AGClient sharedClient] postPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:556:        [paramsDict setObject:firstName forKey:@"FirstName"];
Pods/AugustAPI/August API/AGUser.m:559:        [paramsDict setObject:lastName forKey:@"LastName"];
Pods/AugustAPI/August API/AGUser.m:562:        [paramsDict setObject:password forKey:@"password"];
Pods/AugustAPI/August API/AGUser.m:565:	[[AGClient sharedClient] putPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:586:    [[AGClient sharedClient] getPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:589:            if ([responseObject objectForKey:@"exists"] != nil) {
Pods/AugustAPI/August API/AGUser.m:590:                exists = [[responseObject objectForKey:@"exists"] boolValue];
Pods/AugustAPI/August API/AGUser.m:610:        paramsDict = @{@"value":[email lowercaseString]};
Pods/AugustAPI/August API/AGUser.m:613:	[[AGClient sharedClient] postPath:@"validation/email" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:629:                                        @"code":code
Pods/AugustAPI/August API/AGUser.m:633:        [paramsDict setObject:[email lowercaseString]  forKey:@"email"];
Pods/AugustAPI/August API/AGUser.m:636:	[[AGClient sharedClient] postPath:@"validate/email" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:654:        paramsDict = @{@"value":phone};
Pods/AugustAPI/August API/AGUser.m:657:	[[AGClient sharedClient] postPath:@"validation/phone" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:673:                                 @"code":code
Pods/AugustAPI/August API/AGUser.m:677:        [paramsDict setObject:phone forKey:@"phone"];
Pods/AugustAPI/August API/AGUser.m:680:	[[AGClient sharedClient] postPath:@"validate/phone" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:696:    NSMutableDictionary *paramsDict = @{@"installId":installToken
Pods/AugustAPI/August API/AGUser.m:700:        [paramsDict setObject:identifier forKey:@"identifier"];
Pods/AugustAPI/August API/AGUser.m:703:        [paramsDict setObject:password forKey:@"password"];
Pods/AugustAPI/August API/AGUser.m:706:    [[AGClient sharedClient] postPath:@"session" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:721:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"augustappversionok/ios/%@", version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:724:                NSString *message = [responseObject objectForKey:@"message"];
Pods/AugustAPI/August API/AGUser.m:772://		NSLog(@"Password not found");
Pods/AugustAPI/August API/AGUser.m:774://		NSLog(@"Some other error occurred: %@", error);
Pods/AugustAPI/August API/AGUser.m:825:	[[AGClient sharedClient] getPath:@"session" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:867:            //			NSLog(@"Password not found");
Pods/AugustAPI/August API/AGUser.m:870:                AGDiaryError(@"KeychainError", @"Error = %@", error);
Pods/AugustAPI/August API/AGUser.m:924:        id account = [accountDict objectForKey:@"acct"];
Pods/AugustAPI/August API/AGUser.m:926:        if (([[account class] isSubclassOfClass:[NSString class]]) && (![account isEqualToString:@"AugustInstallToken"])) {
Pods/AugustAPI/August API/AGUser.m:932:    NSString *apiBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGUser.m:935:    NSDictionary *autoUnlockRegions = [[NSUserDefaults standardUserDefaults] objectForKey:@"AutoUnlockRegions"];
Pods/AugustAPI/August API/AGUser.m:936:    NSDictionary *exitRegionLockEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Pods/AugustAPI/August API/AGUser.m:937:    BOOL doDisableOTA = [[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"];
Pods/AugustAPI/August API/AGUser.m:938:    BOOL doDebugAddLock =  [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
Pods/AugustAPI/August API/AGUser.m:939:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
Pods/AugustAPI/August API/AGUser.m:944:    if(![[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] containsObject:@"PairingEnabled"]){
Pods/AugustAPI/August API/AGUser.m:946:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"PairingEnabled"];
Pods/AugustAPI/August API/AGUser.m:950:        [[NSUserDefaults standardUserDefaults] setObject:apiBaseURL forKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGUser.m:952:        NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
Pods/AugustAPI/August API/AGUser.m:953:        [crossProcessDefaults setObject:apiBaseURL forKey:@"APIBaseURL"];
Pods/AugustAPI/August API/AGUser.m:959:    [[NSUserDefaults standardUserDefaults] setObject:autoUnlockRegions forKey:@"AutoUnlockRegions"];
Pods/AugustAPI/August API/AGUser.m:961:    [[NSUserDefaults standardUserDefaults] setObject:exitRegionLockEventDetail forKey:@"ExitRegionLockEventDetail"];
Pods/AugustAPI/August API/AGUser.m:962:    [[NSUserDefaults standardUserDefaults] setBool:doDisableOTA forKey:@"DisableOTA"];
Pods/AugustAPI/August API/AGUser.m:963:    [[NSUserDefaults standardUserDefaults] setBool:doDebugAddLock forKey:@"DebugAddLock"];
Pods/AugustAPI/August API/AGUser.m:964:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
Pods/AugustAPI/August API/AGUser.m:967:        [[NSUserDefaults standardUserDefaults] setObject:[AGUser currentUser].phoneNumber forKey:@"LastLoggedOutUserPhoneNumber"];
Pods/AugustAPI/August API/AGUser.m:1050:            if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
Pods/AugustAPI/August API/AGUser.m:1052:            }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGUser.m:1071:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"session/%@", identifier] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1083:    NSString *installTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustInstallToken" error:nil];
Pods/AugustAPI/August API/AGUser.m:1086:        [SAMKeychain setPassword:installTokenStr forService:kSezam account:@"AugustInstallToken" error:nil];
Pods/AugustAPI/August API/AGUser.m:1093:    [SAMKeychain deletePasswordForService:kSezam account:@"AugustInstallToken"];
Pods/AugustAPI/August API/AGUser.m:1097:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
Pods/AugustAPI/August API/AGUser.m:1101:    NSArray *accessTokenChunks = [accessTokenStr componentsSeparatedByString: @"."];
Pods/AugustAPI/August API/AGUser.m:1106:    NSString *paddingEqualsStr = @"";
Pods/AugustAPI/August API/AGUser.m:1109:            paddingEqualsStr = @"";
Pods/AugustAPI/August API/AGUser.m:1112:            paddingEqualsStr = @"=";
Pods/AugustAPI/August API/AGUser.m:1115:            paddingEqualsStr = @"==";
Pods/AugustAPI/August API/AGUser.m:1118:            paddingEqualsStr = @"===";
Pods/AugustAPI/August API/AGUser.m:1124:    NSString *accessTokenMeatStrWithPadding = [NSString stringWithFormat:@"%@%@", accessTokenMeatStr, paddingEqualsStr];
Pods/AugustAPI/August API/AGUser.m:1137:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
Pods/AugustAPI/August API/AGUser.m:1148:        NSNumber *isPhoneVerified = [accessTokenDict objectForKey:@"vPhone"];
Pods/AugustAPI/August API/AGUser.m:1159:        NSNumber *isEmailVerified = [accessTokenDict objectForKey:@"vEmail"];
Pods/AugustAPI/August API/AGUser.m:1170:        NSNumber *isPasswordVerified = [accessTokenDict objectForKey:@"vPassword"];
Pods/AugustAPI/August API/AGUser.m:1181:        NSNumber *isInstallIdVerified = [accessTokenDict objectForKey:@"vInstallId"];
Pods/AugustAPI/August API/AGUser.m:1192:        NSNumber *isPhonePresent = [accessTokenDict objectForKey:@"hasPhone"];
Pods/AugustAPI/August API/AGUser.m:1203:        NSNumber *isEmailPresent = [accessTokenDict objectForKey:@"hasEmail"];
Pods/AugustAPI/August API/AGUser.m:1214:        NSNumber *isPasswordPresent = [accessTokenDict objectForKey:@"hasPassword"];
Pods/AugustAPI/August API/AGUser.m:1225:        NSNumber *isInstallIdPresent = [accessTokenDict objectForKey:@"hasInstallId"];
Pods/AugustAPI/August API/AGUser.m:1254:    NSString *final = [emailOrPhone stringByReplacingOccurrencesOfString:@"email:" withString:@""];
Pods/AugustAPI/August API/AGUser.m:1255:    final = [final stringByReplacingOccurrencesOfString:@"phone:" withString:@""];
Pods/AugustAPI/August API/AGUser.m:1256:    final = [final stringByReplacingOccurrencesOfString:@"tel:" withString:@""];
Pods/AugustAPI/August API/AGUser.m:1265:    if ([emailOrPhone rangeOfString:@"@"].location == NSNotFound) {
Pods/AugustAPI/August API/AGUser.m:1267:        return [NSString stringWithFormat:@"phone:%@", updatedString];
Pods/AugustAPI/August API/AGUser.m:1271:        return [NSString stringWithFormat:@"email:%@", updatedString];
Pods/AugustAPI/August API/AGUser.m:1284:    [[NSUserDefaults standardUserDefaults] setObject:userID forKey:@"CurrentUserID"];
Pods/AugustAPI/August API/AGUser.m:1289:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentUserID"];
Pods/AugustAPI/August API/AGUser.m:1293:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"nest/authtoken/%@", authToken] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1308:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"nest/authtoken/deleted"] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1323:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"airbnb/authtoken"] parameters:authDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1338:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"airbnb"] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1353:    [[AGClient sharedClient] getPath:@"nest/structures" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1368:    [[AGClient sharedClient] getPath:@"apps/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1379:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"apps/%@", appID] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1390:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"appfeatures/ios/%@", [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1405:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"users/me/legal"] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGUser.m:1420:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"users/me/legal"] parameters:@{@"approved":[NSNumber numberWithBool:YES]} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/NSString+HTMLEscape.m:15:    [escapedString replaceOccurrencesOfString:@"&amp;"  withString:@"&"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:16:    [escapedString replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:17:    [escapedString replaceOccurrencesOfString:@"&#x27;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:18:    [escapedString replaceOccurrencesOfString:@"&#39;"  withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:19:    [escapedString replaceOccurrencesOfString:@"&#x92;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:20:    [escapedString replaceOccurrencesOfString:@"&#x96;" withString:@"-"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:21:    [escapedString replaceOccurrencesOfString:@"&gt;"   withString:@">"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/NSString+HTMLEscape.m:22:    [escapedString replaceOccurrencesOfString:@"&lt;"   withString:@"<"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
Pods/AugustAPI/August API/AGRule.m:26:    NSRange range = [recurrenceString rangeOfString:@"BYDAY="];
Pods/AugustAPI/August API/AGRule.m:33:    [ruleScanner scanUpToString:@"BYDAY=" intoString:nil];
Pods/AugustAPI/August API/AGRule.m:34:    [ruleScanner scanUpToString:@";" intoString:&dayStr];
Pods/AugustAPI/August API/AGRule.m:35:    dayStr = [dayStr stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Pods/AugustAPI/August API/AGRule.m:36:    NSArray* daysSplit = [dayStr componentsSeparatedByString: @","];
Pods/AugustAPI/August API/UIDevice+HardwareName.h:9:#define IFPGA_NAMESTRING                @"iFPGA"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:11:#define IPHONE_1G_NAMESTRING            @"iPhone 1"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:12:#define IPHONE_3G_NAMESTRING            @"iPhone 3G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:13:#define IPHONE_3GS_NAMESTRING           @"iPhone 3GS" 
Pods/AugustAPI/August API/UIDevice+HardwareName.h:14:#define IPHONE_4_NAMESTRING             @"iPhone 4" 
Pods/AugustAPI/August API/UIDevice+HardwareName.h:15:#define IPHONE_4S_NAMESTRING            @"iPhone 4S"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:16:#define IPHONE_5_NAMESTRING             @"iPhone 5"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:17:#define IPHONE_5C_NAMESTRING            @"iPhone 5c"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:18:#define IPHONE_5S_NAMESTRING            @"iPhone 5s"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:19:#define IPHONE_6_NAMESTRING             @"iPhone 6"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:20:#define IPHONE_6PLUS_NAMESTRING         @"iPhone 6 Plus"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:21:#define IPHONE_6S_NAMESTRING            @"iPhone 6s"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:22:#define IPHONE_6SPLUS_NAMESTRING        @"iPhone 6s Plus"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:23:#define IPHONE_SE_NAMESTRING            @"iPhone SE"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:24:#define IPHONE_7_NAMESTRING             @"iPhone 7"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:25:#define IPHONE_7PLUS_NAMESTRING         @"iPhone 7 Plus"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:26:#define IPHONE_8_NAMESTRING             @"iPhone 8"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:27:#define IPHONE_8PLUS_NAMESTRING         @"iPhone 8 Plus"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:28:#define IPHONE_X_NAMESTRING             @"iPhone X"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:30:#define IPHONE_UNKNOWN_NAMESTRING       @"Unknown iPhone"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:32:#define IPOD_1G_NAMESTRING              @"iPod touch 1G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:33:#define IPOD_2G_NAMESTRING              @"iPod touch 2G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:34:#define IPOD_3G_NAMESTRING              @"iPod touch 3G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:35:#define IPOD_4G_NAMESTRING              @"iPod touch 4G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:36:#define IPOD_5G_NAMESTRING              @"iPod touch 5G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:37:#define IPOD_6G_NAMESTRING              @"iPod touch 6G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:38:#define IPOD_UNKNOWN_NAMESTRING         @"Unknown iPod"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:40:#define IPAD_1G_NAMESTRING              @"iPad 1G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:41:#define IPAD_2G_NAMESTRING              @"iPad 2"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:42:#define IPAD_3G_NAMESTRING              @"iPad 3"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:43:#define IPAD_Air_NAMESTRING             @"iPad Air"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:44:#define IPAD_Air2_NAMESTRING            @"iPad Air 2"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:45:#define IPAD_UNKNOWN_NAMESTRING         @"Unknown iPad"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:47:#define IPAD_MINI_1G_NAMESTRING         @"iPad mini 1G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:48:#define IPAD_MINI_2G_NAMESTRING         @"iPad mini 2G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:49:#define IPAD_MINI_3G_NAMESTRING         @"iPad mini 3G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:50:#define IPAD_MINI_4G_NAMESTRING         @"iPad mini 4G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:51:#define IPAD_MINI_UNKNOWN_NAMESTRING    @"Unknown iPad Mini"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:53:#define IPAD_PRO_1G_NAMESTRING          @"iPad Pro 1G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:54:#define IPAD_PRO_UNKNOWN_NAMESTRING     @"Unknown iPad Pro"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:56:#define APPLETV_2G_NAMESTRING           @"Apple TV 2G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:57:#define APPLETV_3G_NAMESTRING           @"Apple TV 3G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:58:#define APPLETV_4G_NAMESTRING           @"Apple TV 4G"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:59:#define APPLETV_UNKNOWN_NAMESTRING      @"Unknown Apple TV"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:61:#define IOS_FAMILY_UNKNOWN_DEVICE       @"Unknown iOS device"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:63:#define SIMULATOR_NAMESTRING            @"iPhone Simulator"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:64:#define SIMULATOR_IPHONE_NAMESTRING     @"iPhone Simulator"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:65:#define SIMULATOR_IPAD_NAMESTRING       @"iPad Simulator"
Pods/AugustAPI/August API/UIDevice+HardwareName.h:66:#define SIMULATOR_APPLETV_NAMESTRING    @"Apple TV Simulator" // :)
Pods/AugustAPI/August API/AGBridge.m:13:static NSString* kAGDiaryCategory = @"BridgeSetup";
Pods/AugustAPI/August API/AGBridge.m:18:NSString* const kAGBridgeModelVenus = @"august-connect";
Pods/AugustAPI/August API/AGBridge.m:19:NSString* const kAGBridgeModelLogitechHarmony = @"logitech-harmony-hub";
Pods/AugustAPI/August API/AGBridge.m:20:NSString* const kAGBridgeNotificationTypeSystemString = @"system";
Pods/AugustAPI/August API/AGBridge.m:21:NSString* const kAGBridgeNotificationChannelPushString = @"push";
Pods/AugustAPI/August API/AGBridge.m:22:NSString* const kAGBridgeNotificationChannelEmailString = @"email";
Pods/AugustAPI/August API/AGBridge.m:89:    if ([bridgeStatus isEqual:@"online"]) {
Pods/AugustAPI/August API/AGBridge.m:91:    }else if ([bridgeStatus isEqual:@"offline"]) {
Pods/AugustAPI/August API/AGBridge.m:109:        AGDiaryError(@"BridgeIdIsNil", @"Creating/updating bridge with bridgeId=nil.  This is not allowed - you will not be able to update/delete the bridge");
Pods/AugustAPI/August API/AGBridge.m:123:                                         userInfo:@{@"mfgBridgeId":@"mfgBridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:129:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:136:                                         userInfo:@{@"bridgeModel":@"bridgeModel cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:149:    [[AGClient sharedClient] postPath:@"bridges" parameters:parameters
Pods/AugustAPI/August API/AGBridge.m:159:                    bridge.objectId = [responseObject valueForKey:@"bridgeID"];
Pods/AugustAPI/August API/AGBridge.m:185:    [[AGClient sharedClient] getPath:@"users/bridges/mine" parameters:nil
Pods/AugustAPI/August API/AGBridge.m:201:                     NSArray *lockIds = (NSArray *)[bridgeDictionary objectForKey:@"locks"];
Pods/AugustAPI/August API/AGBridge.m:238:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:244:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
Pods/AugustAPI/August API/AGBridge.m:272:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:278:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
Pods/AugustAPI/August API/AGBridge.m:306:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:314:    NSString *type = typeAndChannelDictionary[@"type"];
Pods/AugustAPI/August API/AGBridge.m:315:    //NSString *channel = typeAndChannelDictionary[@"channel"];
Pods/AugustAPI/August API/AGBridge.m:318:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
Pods/AugustAPI/August API/AGBridge.m:348:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:356:    NSString *type = typeAndChannelDictionary[@"type"];
Pods/AugustAPI/August API/AGBridge.m:357:    //NSString *channel = typeAndChannelDictionary[@"channel"];
Pods/AugustAPI/August API/AGBridge.m:360:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
Pods/AugustAPI/August API/AGBridge.m:405:    NSDictionary *typeAndChannelDictionary = [[NSDictionary alloc] initWithObjectsAndKeys:type, @"type", channel, @"channel",nil];
Pods/AugustAPI/August API/AGBridge.m:420:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
Pods/AugustAPI/August API/AGBridge.m:426:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications", self.objectId];
Pods/AugustAPI/August API/AGLock.m:19:static NSString* kAGDiaryCategory = @"AGLock";
Pods/AugustAPI/August API/AGLock.m:59:    NSDictionary *parameters = @{@"LockName": name};
Pods/AugustAPI/August API/AGLock.m:61:    NSString *path = [NSString stringWithFormat:@"locks/acquire/%@/%@/%@", lockID, houseID, code];
Pods/AugustAPI/August API/AGLock.m:95:                                 kLockTypeKey:@"1",
Pods/AugustAPI/August API/AGLock.m:101:	NSString * path = [@"locks/" stringByAppendingString:houseID];
Pods/AugustAPI/August API/AGLock.m:104:		//DLog(@"create lock %@", responseObject.description);
Pods/AugustAPI/August API/AGLock.m:147:            NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
Pods/AugustAPI/August API/AGLock.m:151:            [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
Pods/AugustAPI/August API/AGLock.m:153:            NSString* updatedDateString = [NSString stringWithFormat:@"%@",responseObject[kUpdatedKey]];
Pods/AugustAPI/August API/AGLock.m:164:            //DLog(@" fail %@", error.description);
Pods/AugustAPI/August API/AGLock.m:191:    [[AGClient sharedClient] getPath:[NSString stringWithFormat: @"locks/%@/status", self.objectId] parameters:nil
Pods/AugustAPI/August API/AGLock.m:205://[[AGClient sharedClient] postPath:@"add_user" parameters:paramsDict success:^(AFHTTPRequestOperation *operation, NSDictionary* responseObject) {
Pods/AugustAPI/August API/AGLock.m:214:    //@"users/:userID/locks"
Pods/AugustAPI/August API/AGLock.m:215:    //	NSString * path = @"users/";
Pods/AugustAPI/August API/AGLock.m:217:    //	//path = [path stringByAppendingString:@":"];
Pods/AugustAPI/August API/AGLock.m:219:    //	path = [path stringByAppendingString:@"/locks"];
Pods/AugustAPI/August API/AGLock.m:222:    [[AGClient sharedClient] getPath:@"users/locks/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:224:            //DLog(@"locks %@", responseDictionary.description);
Pods/AugustAPI/August API/AGLock.m:305:            //DLog(@"locks fail %@", error.description);
Pods/AugustAPI/August API/AGLock.m:311:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
Pods/AugustAPI/August API/AGLock.m:376:        NSString *identifier = [invitationInfo objectForKey:@"identifier"];
Pods/AugustAPI/August API/AGLock.m:377:        if (([identifier rangeOfString:@"phone:"].location != NSNotFound) || ([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGLock.m:380:        if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
Pods/AugustAPI/August API/AGLock.m:383:        NSString *ruleId = [invitationInfo objectForKey:@"rule"];
Pods/AugustAPI/August API/AGLock.m:388:        invitedUser.firstName = [AGClient stringByDecodingXMLEntities:[invitationInfo objectForKey:@"Name"]];
Pods/AugustAPI/August API/AGLock.m:390:        invitedUser.type = [invitationInfo objectForKey:@"type"];
Pods/AugustAPI/August API/AGLock.m:399:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
Pods/AugustAPI/August API/AGLock.m:400:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
Pods/AugustAPI/August API/AGLock.m:414:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
Pods/AugustAPI/August API/AGLock.m:415:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
Pods/AugustAPI/August API/AGLock.m:437:    NSArray *createdArray = [dictionary objectForKey:@"created"];
Pods/AugustAPI/August API/AGLock.m:438:    NSArray *loadedArray = [dictionary objectForKey:@"loaded"];
Pods/AugustAPI/August API/AGLock.m:439:    NSArray *deletedArray = [dictionary objectForKey:@"deleted"];
Pods/AugustAPI/August API/AGLock.m:441:    NSArray *hkCreatedArray = [dictionary objectForKey:@"createdhk"];
Pods/AugustAPI/August API/AGLock.m:442:    NSArray *hkLoadedArray = [dictionary objectForKey:@"loadedhk"];
Pods/AugustAPI/August API/AGLock.m:443:    NSArray *hkDeletedArray = [dictionary objectForKey:@"deletedhk"];
Pods/AugustAPI/August API/AGLock.m:496:        if ([[curLoadedKey objectForKey:@"slot"] isEqual:[newlyLoadedOfflineKey objectForKey:@"slot"]]) {
Pods/AugustAPI/August API/AGLock.m:512:    NSString * path = [NSString stringWithFormat: @"locks/%@/pins", lockId];
Pods/AugustAPI/August API/AGLock.m:553:    NSString * path = [@"locks/" stringByAppendingString:lockId];
Pods/AugustAPI/August API/AGLock.m:607:        self.messagingProtocol = @"pubnub";
Pods/AugustAPI/August API/AGLock.m:612:        self.messagingURL = @"";
Pods/AugustAPI/August API/AGLock.m:755:	NSString * path = [NSString stringWithFormat:@"locks/%@",lockId];
Pods/AugustAPI/August API/AGLock.m:777:	NSString * path = [@"locks/" stringByAppendingString:lockId];
Pods/AugustAPI/August API/AGLock.m:778:	path = [path stringByAppendingString:@"/key"];
Pods/AugustAPI/August API/AGLock.m:869:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@/%@", lockId, userId, type];
Pods/AugustAPI/August API/AGLock.m:907:	NSString * path = [NSString stringWithFormat:@"locks/adduser/%@/%@/%@", lockId, userId, type];
Pods/AugustAPI/August API/AGLock.m:909:    NSDictionary *parameters = @{@"Name":[user displayName]};
Pods/AugustAPI/August API/AGLock.m:958:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@", lockId, userId];
Pods/AugustAPI/August API/AGLock.m:979:    NSString *path = [NSString stringWithFormat:@"locks/log/%@/lockcommand", lockID];
Pods/AugustAPI/August API/AGLock.m:998:	NSString * path = [NSString stringWithFormat:@"/locks/log/before/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
Pods/AugustAPI/August API/AGLock.m:1017:	NSString * path = [NSString stringWithFormat:@"/locks/log/after/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
Pods/AugustAPI/August API/AGLock.m:1035:    NSString *path = [NSString stringWithFormat:@"rules/rulewithuser/%@/%@", lockID, userID];
Pods/AugustAPI/August API/AGLock.m:1039:    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
Pods/AugustAPI/August API/AGLock.m:1043:    [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
Pods/AugustAPI/August API/AGLock.m:1047:                                        @"startTime":[dateFormatter stringFromDate:startTime],
Pods/AugustAPI/August API/AGLock.m:1048:                                        @"endTime":[dateFormatter stringFromDate:endTime],
Pods/AugustAPI/August API/AGLock.m:1049:                                        @"Name":[user displayName]
Pods/AugustAPI/August API/AGLock.m:1052:        [parameters setObject:recurrence forKey:@"recurrence"];
Pods/AugustAPI/August API/AGLock.m:1075:    NSString *path = [NSString stringWithFormat:@"rules/%@/%@", ruleID, userID];
Pods/AugustAPI/August API/AGLock.m:1092:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/lockmessages", lockID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1107:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
Pods/AugustAPI/August API/AGLock.m:1109:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?",  self.bridge.mfgBridgeId];
Pods/AugustAPI/August API/AGLock.m:1111:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
Pods/AugustAPI/August API/AGLock.m:1115:        endpointString = [NSString stringWithFormat:@"%@%@type=async", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
Pods/AugustAPI/August API/AGLock.m:1118:        endpointString = [NSString stringWithFormat:@"%@%@connection=persistent", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
Pods/AugustAPI/August API/AGLock.m:1126:                intentString = @"intent=regular";
Pods/AugustAPI/August API/AGLock.m:1129:                intentString = @"intent=wakeup";;
Pods/AugustAPI/August API/AGLock.m:1132:                intentString = @"intent=keepalive";;
Pods/AugustAPI/August API/AGLock.m:1135:                intentString = @"intent=lockstateunknown";
Pods/AugustAPI/August API/AGLock.m:1140:            endpointString = [NSString stringWithFormat:@"%@%@%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", intentString];
Pods/AugustAPI/August API/AGLock.m:1158:                               NSString* lockStatus = [responseDict objectForKey:@"status"];
Pods/AugustAPI/August API/AGLock.m:1173:                                   userInfo = @{@"response":httpResponse};
Pods/AugustAPI/August API/AGLock.m:1187:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
Pods/AugustAPI/August API/AGLock.m:1189:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", self.bridge.mfgBridgeId];
Pods/AugustAPI/August API/AGLock.m:1191:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
Pods/AugustAPI/August API/AGLock.m:1195:        endpointString = [NSString stringWithFormat:@"%@%@state=setup", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
Pods/AugustAPI/August API/AGLock.m:1197:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"remoteoperate/%@/%@?sn=%@&v=%@", self.objectId, command, self.bridge.mfgBridgeId, self.bridge.firmwareVersion] parameters:@{} waitTime:90.0
Pods/AugustAPI/August API/AGLock.m:1209:                                         NSString* lockStatus = [responseDict objectForKey:@"status"];
Pods/AugustAPI/August API/AGLock.m:1247:    NSDictionary *parameters = @{@"deviceModel": deviceModel,
Pods/AugustAPI/August API/AGLock.m:1248:                                 @"movedCenter": movedCenter?@"true":@"false",
Pods/AugustAPI/August API/AGLock.m:1249:                                 @"changedRadius": changedRadius?@"true":@"false",
Pods/AugustAPI/August API/AGLock.m:1250:                                 @"newRadius": [NSString stringWithFormat:@"%f", radius],
Pods/AugustAPI/August API/AGLock.m:1251:                                 @"distance": [NSString stringWithFormat:@"%f", distance]};
Pods/AugustAPI/August API/AGLock.m:1252:    NSString *path = [NSString stringWithFormat:@"/locks/geofenceinfo/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1292:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/firmware/%@", self.objectId, version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1308:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/firmware/%@/%@", self.objectId, chip, version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1337:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/firmware/keypadcheck", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1340:                NSNumber *resBool = [responseObject objectForKey:@"supported"];
Pods/AugustAPI/August API/AGLock.m:1358:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/keypads/%@/%@/offlinekey", keypadID, self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1376:    NSDictionary *params = @{@"serialNumber":serialNumber, @"lockID":self.objectId, @"supportsEncryption":[NSNumber numberWithBool:true]};
Pods/AugustAPI/August API/AGLock.m:1377:    [[AGClient sharedClient] postPath:@"/keypads" parameters:params augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1380:            block([resultDict objectForKey:@"keypadID"], nil);
Pods/AugustAPI/August API/AGLock.m:1396:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/keypads/%@", self.associatedKeypad.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1417:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/locks/%@/pin", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1433:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/pins/sync", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1451:        returnVal = @"load";
Pods/AugustAPI/August API/AGLock.m:1454:        returnVal = @"delete";
Pods/AugustAPI/August API/AGLock.m:1457:        returnVal = @"disable";
Pods/AugustAPI/August API/AGLock.m:1460:        returnVal = @"enable";
Pods/AugustAPI/August API/AGLock.m:1463:        returnVal = @"UnkownPinState";
Pods/AugustAPI/August API/AGLock.m:1470:    AGDiaryVerbose(@"PinChangeComplete", @"Updating internal state for %@ pin %@ to the lock",[AGLock stringForPinState:action], pinEntry.pinCode);
Pods/AugustAPI/August API/AGLock.m:1498:            AGDiaryInfo(@"PinAddedServer", @"Notified server of %@ pin to the lock",[AGLock stringForPinState:action]);
Pods/AugustAPI/August API/AGLock.m:1500:            AGDiaryInfo(@"ErrorPinAddedServer", @"Error notifying server of %@ pin", [AGLock stringForPinState:action]);
Pods/AugustAPI/August API/AGLock.m:1507:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/locks/%@/pins", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1538:    NSString *stateMessage = @"";
Pods/AugustAPI/August API/AGLock.m:1541:        stateMessage = @"load";
Pods/AugustAPI/August API/AGLock.m:1544:        stateMessage = @"delete";
Pods/AugustAPI/August API/AGLock.m:1547:        stateMessage = @"disable";
Pods/AugustAPI/August API/AGLock.m:1550:        stateMessage = @"enable";
Pods/AugustAPI/August API/AGLock.m:1554:            @"pin": pinCode,
Pods/AugustAPI/August API/AGLock.m:1555:            @"state": stateMessage,
Pods/AugustAPI/August API/AGLock.m:1556:            @"action": (action==AGPinActionIntent)?@"intent":@"commit"} mutableCopy];
Pods/AugustAPI/August API/AGLock.m:1558:        parameters[@"slot"] = slot;
Pods/AugustAPI/August API/AGLock.m:1563:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/users/%@/pin", self.objectId, userID] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1587:    [parameters setObject: firstName?firstName:@"" forKey: @"firstName"];
Pods/AugustAPI/August API/AGLock.m:1588:    [parameters setObject:lastName?lastName:@"" forKey: @"lastName"];
Pods/AugustAPI/August API/AGLock.m:1589:    [parameters setObject:self.objectId forKey: @"lockID"];
Pods/AugustAPI/August API/AGLock.m:1591:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/unverifiedusers/%@", pinUserID]  parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1614:    NSMutableDictionary *parameters = [NSMutableDictionary  dictionaryWithObjectsAndKeys: pinCode, @"pin" ,
Pods/AugustAPI/August API/AGLock.m:1615:                                self.objectId,  @"lockID", nil];
Pods/AugustAPI/August API/AGLock.m:1618:        [parameters setObject: firstName forKey: @"firstName"];
Pods/AugustAPI/August API/AGLock.m:1622:        [parameters setObject:lastName forKey: @"lastName"];
Pods/AugustAPI/August API/AGLock.m:1626:        [parameters setObject:optionalPhonenumber forKey: @"phone"];
Pods/AugustAPI/August API/AGLock.m:1630:    [[AGClient sharedClient] postPath:@"/unverifiedusers" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1649:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/locks/%@/pin/%@", self.objectId, pinCode] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1664:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"locks/cameras/%@/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1683:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"locks/cameras/%@/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1699:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"locks/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1718:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"locks/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1736:                                                @"mRand1": [NSNumber numberWithUnsignedInt:mRand1],
Pods/AugustAPI/August API/AGLock.m:1737:                                                @"mRand2": [NSNumber numberWithUnsignedInt:mRand2]}];
Pods/AugustAPI/August API/AGLock.m:1739:    NSString *initiateCommEndpoint = [NSString stringWithFormat:@"/locks/initiatecomm/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1742:        initiateCommEndpoint = [NSString stringWithFormat:@"%@?intent=%@", initiateCommEndpoint, onlineKeyUsageReason];
Pods/AugustAPI/August API/AGLock.m:1760:    NSDictionary *parameters = @{@"LockResponse": lockResponse};
Pods/AugustAPI/August API/AGLock.m:1762:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/getlockrands/%@", lockID] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1778:    NSString *path = [NSString stringWithFormat:@"/locks/setnotification/%@/%@/%@", lockID, userID, on];
Pods/AugustAPI/August API/AGLock.m:1796:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/%@", lockID, userID];
Pods/AugustAPI/August API/AGLock.m:1810:            NSString *notificationType = [notifDict objectForKey:@"NotificationType"];
Pods/AugustAPI/August API/AGLock.m:1815:            if ([notificationType isEqualToString:@"neither"]) {
Pods/AugustAPI/August API/AGLock.m:1836:    NSString *path = [NSString stringWithFormat:@"/locks/%@/timezone", self.objectId];
Pods/AugustAPI/August API/AGLock.m:1837:    [[AGClient sharedClient] putPath:path parameters:@{@"zone":timeZoneName} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:1855:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/status", lockID];
Pods/AugustAPI/August API/AGLock.m:1872:    NSString *path = [NSString stringWithFormat:@"/private/locks/status/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1873:    if (([lockStatusDictionary objectForKey:@"status"] == NO) && ([lockStatusDictionary objectForKey:kDoorStateKey] == NO)) {
Pods/AugustAPI/August API/AGLock.m:1877:    if ([lockStatusDictionary objectForKey:@"status"] && [lockStatusDictionary objectForKey:kDoorStateKey]) {
Pods/AugustAPI/August API/AGLock.m:1878:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"], kDoorStateKey: [lockStatusDictionary objectForKey:kDoorStateKey]};
Pods/AugustAPI/August API/AGLock.m:1879:    } else if ([lockStatusDictionary objectForKey:@"status"]) {
Pods/AugustAPI/August API/AGLock.m:1880:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"]};
Pods/AugustAPI/August API/AGLock.m:1900:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/params", lockID];
Pods/AugustAPI/August API/AGLock.m:1917:    NSString *path = [NSString stringWithFormat:@"locks/%@/offlinekeys/%@", lockID, action];
Pods/AugustAPI/August API/AGLock.m:1934:    NSString *path = [NSString stringWithFormat:@"locks/acknowledgeparamupdate/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1952:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1973:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:1994:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:2015:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:2017:    NSDictionary *params = @{@"hostLockInfo": infoDict};
Pods/AugustAPI/August API/AGLock.m:2023:                               AGDiaryDebug(@"postUnityHostInfoError", @"error is %@", [error localizedDescription]);
Pods/AugustAPI/August API/AGLock.m:2038:    return [NSString stringWithFormat:@"AGCurrentUserOfflineKey_%@", lockID];
Pods/AugustAPI/August API/AGLock.m:2043:    return [NSString stringWithFormat:@"AGCurrentUserHomeKitKey_%@", lockID];
Pods/AugustAPI/August API/AGLock.m:2051:    NSMutableDictionary *parameters = @{@"event":event, @"date":dateAsMSFromEpoch, @"LockID":lockID, @"UserID":userID}.mutableCopy;
Pods/AugustAPI/August API/AGLock.m:2054:        [parameters setObject:description forKey:@"description"];
Pods/AugustAPI/August API/AGLock.m:2057:    [[AGClient sharedClient] postPath:@"telemetry/logautounlockaction" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGLock.m:2074:    NSString *path = [NSString stringWithFormat:@"locks/%@", lockID];
Pods/AugustAPI/August API/AGLock.m:2110:             AGDiaryError(@"FailedRefreshLock", @"Failed to refresh lock data.");
Pods/AugustAPI/August API/AGLock.m:2114:                 NSString *path = [NSString stringWithFormat:@"locks/setnotification/%@/%@/%@", self.objectId, type, action];
Pods/AugustAPI/August API/AGLock.m:2151:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
Pods/AugustAPI/August API/AGLock.m:2157:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/manuallock", self.objectId];
Pods/AugustAPI/August API/AGLock.m:2185:                    if ([type isEqualToString:@"both"]) {
Pods/AugustAPI/August API/AGPinCodeInfo.m:11:#define  kInternalCachePinKey  @"_internalCachedPins"
Pods/AugustAPI/August API/AGPinCodeInfo.m:27:        self.created = [self makePinEntryArrayFromArray:[dict objectForKey:@"created"] state: AGPinStateCreated];
Pods/AugustAPI/August API/AGPinCodeInfo.m:28:        self.deleting = [self makePinEntryArrayFromArray:[dict objectForKey:@"deleting"] state: AGPinStateDeleting];
Pods/AugustAPI/August API/AGPinCodeInfo.m:29:        self.disabled = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabled"] state: AGPinStateDisabled];
Pods/AugustAPI/August API/AGPinCodeInfo.m:30:        self.disabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabling"] state: AGPinStateDisabling];
Pods/AugustAPI/August API/AGPinCodeInfo.m:31:        self.enabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"enabling"] state: AGPinStateEnabling];
Pods/AugustAPI/August API/AGPinCodeInfo.m:32:        self.loaded = [self makePinEntryArrayFromArray:[dict objectForKey:@"loaded"] state: AGPinStateLoaded];
Pods/AugustAPI/August API/AGPinCodeInfo.m:80:    if ([invitationPhoneNumber rangeOfString:@"phone:"].location == 0) {
Pods/AugustAPI/August API/AGUserPinEntry.m:23:        self.firstName = [dict objectForKey:@"firstName"];
Pods/AugustAPI/August API/AGUserPinEntry.m:24:        self.lastName = [dict objectForKey:@"lastName"];
Pods/AugustAPI/August API/AGUserPinEntry.m:25:        self.pinCode = [dict objectForKey:@"pin"];
Pods/AugustAPI/August API/AGUserPinEntry.m:26:        self.slot = [dict objectForKey:@"slot"];
Pods/AugustAPI/August API/AGUserPinEntry.m:27:        self.userID = [dict objectForKey:@"userID"];
Pods/AugustAPI/August API/AGUserPinEntry.m:28:        self.phoneNumber = [dict objectForKey:@"phone"];
Pods/AugustAPI/August API/AGUserPinEntry.m:29:        NSNumber *vNum = [dict objectForKey:@"unverified"];
Pods/AugustAPI/August API/AGUserPinEntry.m:58:        return @"created";
Pods/AugustAPI/August API/AGUserPinEntry.m:61:        return  @"deleting";
Pods/AugustAPI/August API/AGUserPinEntry.m:64:        return @"disabled";
Pods/AugustAPI/August API/AGUserPinEntry.m:67:        return  @"disabling";
Pods/AugustAPI/August API/AGUserPinEntry.m:70:        return  @"loaded";
Pods/AugustAPI/August API/AGUserPinEntry.m:73:        return @"enabling";
Pods/AugustAPI/August API/AGUserPinEntry.m:75:    return @"undefined";
Pods/AugustAPI/August API/AGUserPinEntry.m:79:    if ([state isEqualToString:@"loaded"]) {
Pods/AugustAPI/August API/AGUserPinEntry.m:82:    if ([state isEqualToString:@"deleting"]) {
Pods/AugustAPI/August API/AGUserPinEntry.m:85:    if ([state isEqualToString:@"created"]) {
Pods/AugustAPI/August API/AGUserPinEntry.m:88:    if ([state isEqualToString:@"enabling"]) {
Pods/AugustAPI/August API/AGUserPinEntry.m:91:    if ([state isEqualToString:@"disabling"]) {
Pods/AugustAPI/August API/AGUserPinEntry.m:94:    if ([state isEqualToString:@"created"]) {
Pods/AugustAPI/August API/AGAPIUtility.m:15:    NSString *modelVersion = @"0";
Pods/AugustAPI/August API/AGAPIUtility.m:19:    NSString *pattern = @"^[A-Za-z]([0-9]+)[A-Za-z]";
Pods/AugustAPI/August API/AGAPIUtility.m:29:    return [NSString stringWithFormat:@"%@.0.0", modelVersion];
Pods/AugustAPI/August API/AGAugustAccess.m:17:    [[AGClient sharedClient] getPath:@"partners"
Pods/AugustAPI/August API/AGAugustAccess.m:19:                              header:@{@"accept-version" : @"2.0.0"}
Pods/AugustAPI/August API/AGAugustAccess.m:42:                                         userInfo:@{@"partnerId":@"partnerId cannot be nil"}];
Pods/AugustAPI/August API/AGAugustAccess.m:45:    NSDictionary *parameters = @{@"partnerID":partnerId, @"platform":@"ios"};
Pods/AugustAPI/August API/AGAugustAccess.m:46:    [[AGClient sharedClient] getPath:@"partners/oauthurl"
Pods/AugustAPI/August API/AGAugustAccess.m:53:                               NSString *partnerOAuthUrl = [respDictionary objectForKey:@"url"];
Pods/AugustAPI/August API/AGAugustAccess.m:66:    [[AGClient sharedClient] getPath:@"partners/tags"
Pods/AugustAPI/August API/AGAugustAccess.m:91:    NSString *path = [NSString stringWithFormat:@"partners/%@/mailinglist", partnerId];
Pods/AugustAPI/August API/AGAugustAccess.m:93:                           parameters:@{ @"email": email}
Pods/AugustAPI/August API/AGSubscriptions.m:15:    [[AGClient sharedClient] getPath:@"subscriptions" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGSubscriptions.m:36:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"subscriptions/%@", subscriptionId]
Pods/AugustAPI/August API/AGSubscriptions.m:42:                           if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
Pods/AugustAPI/August API/AGSubscriptions.m:52:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"subscriptions/%@/enable", subscriptionId]
Pods/AugustAPI/August API/AGSubscriptions.m:58:                              if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
Pods/AugustAPI/August API/AGSubscriptions.m:67:    [[AGClient sharedClient] getPath:@"users/tokens/subscription-management" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGSubscriptions.m:69:            NSString *token = [(NSDictionary *)responseObject objectForKey:@"token"];
Pods/AugustAPI/August API/AGDateUtils.m:23:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
Pods/AugustAPI/August API/AGDateUtils.m:25:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Pods/AugustAPI/August API/AGDateUtils.m:26:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
Pods/AugustAPI/August API/AGDateUtils.m:32:    NSArray* daysOfTheWeek = [[NSArray alloc] initWithObjects: @"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA", nil];
Pods/AugustAPI/August API/AGDateUtils.m:44:    NSArray *orderedDayStrings = [[setToOrder array] valueForKey:@"description"];
Pods/AugustAPI/August API/AGDateUtils.m:45:    NSString *joinedDaysString = [orderedDayStrings componentsJoinedByString:@","];
Pods/AugustAPI/August API/AGDateUtils.m:48:        joinedDaysString = [orderedDayStrings componentsJoinedByString:@"/"];
Pods/AugustAPI/August API/AGDateUtils.m:62:    if (days.count == 1 && ([[days objectAtIndex:0] isEqualToString:@"SU"] || [[days objectAtIndex:0] isEqualToString:@"SA"])) {
Pods/AugustAPI/August API/AGDateUtils.m:66:    if (![days containsObject:@"WE"]) {//Wednesday isn't present. Wedneday's presence makes it obvious what a "T" stands for.
Pods/AugustAPI/August API/AGDateUtils.m:69:    if ([days containsObject:@"TU"] && [days containsObject:@"TH"]) {
Pods/AugustAPI/August API/AGDateUtils.m:74:                                                              @"SU":(satSunShouldBeFullAbbreviation ? @"SU": @"S"),
Pods/AugustAPI/August API/AGDateUtils.m:75:                                                              @"MO":@"M",
Pods/AugustAPI/August API/AGDateUtils.m:76:                                                              @"TU":(tuesThursShouldBeFullAbbreviation ? @"TU": @"T"),
Pods/AugustAPI/August API/AGDateUtils.m:77:                                                              @"WE":@"W",
Pods/AugustAPI/August API/AGDateUtils.m:78:                                                              @"TR":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),//Defensive against any one mistakinlgy calling this using "TR" abbrviations
Pods/AugustAPI/August API/AGDateUtils.m:79:                                                              @"TH":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),
Pods/AugustAPI/August API/AGDateUtils.m:80:                                                              @"FR":@"F",
Pods/AugustAPI/August API/AGDateUtils.m:81:                                                              @"SA":(satSunShouldBeFullAbbreviation ? @"SA": @"S")
Pods/AugustAPI/August API/AGCache.m:76:    return [NSString stringWithFormat:@"user_%@", user.objectId];
Pods/AugustAPI/August API/AGLockLogEntry.m:13:static NSString* kAGDiaryCategory = @"ActivityLog";
Pods/AugustAPI/August API/AGLockLogEntry.m:22:    if ([@"lock" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:25:    else if ([@"unlock" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:28:    else if ([@"dooropen" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:31:    else if ([@"doorclosed" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:34:    else if ([@"add" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:37:    else if ([@"remove" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:40:    else if ([@"addtorule" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:43:    else if ([@"removefromrule" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:46:    else if ([@"addedpin" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:49:    else if ([@"removedpin" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:52:    else if ([@"disabledpin" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:55:    else if ([@"enabledpin" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:58:    else if ([@"invalidcode" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:61:    else if ([@"onetouchlock" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:64:    else if ([ @"camera" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:67:    else if ([ @"doorbell_call_missed" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:70:    else if ([ @"doorbell_call_declined" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:73:    else if ([ @"doorbell_call_hangup" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:76:    else if ([ @"doorbell_call_initiated" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:79:    else if ([ @"doorbell_motion_detected" isEqualToString:actionString]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:82:        AGDiaryError(@"BadLockLogAction", @"Action '%@' is not recognized by AGLockLogEntry", actionString);
Pods/AugustAPI/August API/AGLockLogEntry.m:89:    NSArray *stringArray = @[@"AGLockLogAction_Locked",
Pods/AugustAPI/August API/AGLockLogEntry.m:90:                             @"AGLockLogAction_Unlocked",
Pods/AugustAPI/August API/AGLockLogEntry.m:91:                             @"AGLockLogAction_DoorOpen",
Pods/AugustAPI/August API/AGLockLogEntry.m:92:                             @"AGLockLogAction_DoorClosed",
Pods/AugustAPI/August API/AGLockLogEntry.m:93:                             @"AGLockLogAction_AddUser",
Pods/AugustAPI/August API/AGLockLogEntry.m:94:                             @"AGLockLogAction_RemoveUser",
Pods/AugustAPI/August API/AGLockLogEntry.m:95:                             @"AGLockLogAction_AddUserToRule",
Pods/AugustAPI/August API/AGLockLogEntry.m:96:                             @"AGLockLogAction_RemoveUserFromRule",
Pods/AugustAPI/August API/AGLockLogEntry.m:97:                             @"AGLockLogAction_AddedPin",
Pods/AugustAPI/August API/AGLockLogEntry.m:98:                             @"AGLockLogAction_RemovedPin",
Pods/AugustAPI/August API/AGLockLogEntry.m:99:                             @"AGLockLogAction_EnabledPin",
Pods/AugustAPI/August API/AGLockLogEntry.m:100:                             @"AGLockLogAction_DisabledPin",
Pods/AugustAPI/August API/AGLockLogEntry.m:101:                             @"AGLockLogAction_InvalidKeypadCode",
Pods/AugustAPI/August API/AGLockLogEntry.m:102:                             @"AGLockLogAction_Camera",
Pods/AugustAPI/August API/AGLockLogEntry.m:103:                             @"AGLockLogAction_OneTouchLock",
Pods/AugustAPI/August API/AGLockLogEntry.m:104:                             @"AGDoorbellLogAction_Call_Missed",
Pods/AugustAPI/August API/AGLockLogEntry.m:105:                             @"AGDoorbellLogAction_Call_Declined",
Pods/AugustAPI/August API/AGLockLogEntry.m:106:                             @"AGDoorbellLogAction_Call_Hangup",
Pods/AugustAPI/August API/AGLockLogEntry.m:107:                             @"AGDoorbellLogAction_Call_Initiated",
Pods/AugustAPI/August API/AGLockLogEntry.m:108:                             @"AGDoorbellLogAction_Motion_Detected",
Pods/AugustAPI/August API/AGLockLogEntry.m:109:                             @"AGLockLogAction_Unrecognized" ];
Pods/AugustAPI/August API/AGLockLogEntry.m:123:    NSDictionary *userData = [dictionary objectForKey:@"callingUser"];
Pods/AugustAPI/August API/AGLockLogEntry.m:128:    NSDictionary *otherUserData = [dictionary objectForKey:@"otherUser"];
Pods/AugustAPI/August API/AGLockLogEntry.m:132:    long long timeIntervalSince1970 = [[dictionary objectForKey:@"dateTime"] longLongValue];
Pods/AugustAPI/August API/AGLockLogEntry.m:135:    NSString* actionString = [dictionary objectForKey:@"action"];
Pods/AugustAPI/August API/AGLockLogEntry.m:139:    self.deviceName = [AGClient stringByDecodingXMLEntities:[dictionary objectForKey:@"deviceName"]];
Pods/AugustAPI/August API/AGLockLogEntry.m:140:    NSDictionary* infoDict = [dictionary objectForKey:@"info"];
Pods/AugustAPI/August API/AGLockLogEntry.m:141:    self.isRemote = [[infoDict objectForKey:@"remote"] boolValue];
Pods/AugustAPI/August API/AGLockLogEntry.m:142:    if ([infoDict objectForKey:@"agent"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:143:        NSString *agent = (NSString *)[infoDict objectForKey:@"agent"];
Pods/AugustAPI/August API/AGLockLogEntry.m:144:        if ([agent isEqualToString:@"homekit"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:146:        } else if ([agent isEqualToString:@"zwave"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:151:    self.isUsingKeypad = [[infoDict objectForKey:@"keypad"] boolValue];
Pods/AugustAPI/August API/AGLockLogEntry.m:152:    self.isPINOnlyKeypadUser = [[infoDict objectForKey:@"pinonlyuser"] boolValue];
Pods/AugustAPI/August API/AGLockLogEntry.m:153:    self.hasVideoAvailable = [[infoDict objectForKey:@"videoAvailable"] boolValue];
Pods/AugustAPI/August API/AGLockLogEntry.m:154:    self.dvrEventID = [infoDict objectForKey:@"dvrID"];
Pods/AugustAPI/August API/AGLockLogEntry.m:155:    self.callID = [infoDict objectForKey:@"callID"];
Pods/AugustAPI/August API/AGLockLogEntry.m:162:            self.user.firstName = @"One-Touch";
Pods/AugustAPI/August API/AGLockLogEntry.m:163:            self.user.lastName = @"Lock";
Pods/AugustAPI/August API/AGLockLogEntry.m:164:            self.user.objectId = @"onetouchlock";
Pods/AugustAPI/August API/AGLockLogEntry.m:171:                self.doorbellImageUrl = infoDict[@"image"];
Pods/AugustAPI/August API/AGLockLogEntry.m:173:            self.doorbellUserId = @"self";
Pods/AugustAPI/August API/AGLockLogEntry.m:177:                self.doorbellImageUrl = infoDict[@"image"];
Pods/AugustAPI/August API/AGLockLogEntry.m:179:            NSDictionary *users = infoDict[@"users"];
Pods/AugustAPI/August API/AGLockLogEntry.m:181:                self.doorbellUserId = users[@"answered_user"];
Pods/AugustAPI/August API/AGLockLogEntry.m:187:                self.doorbellImageUrl = infoDict[@"image"];
Pods/AugustAPI/August API/AGLockLogEntry.m:189:            NSDictionary *users = infoDict[@"users"];
Pods/AugustAPI/August API/AGLockLogEntry.m:191:                self.doorbellUserId = users[@"initiated_user"];
Pods/AugustAPI/August API/AGLockLogEntry.m:197:                if ([infoDict[@"activityZones"] isKindOfClass:[NSArray class]]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:198:                    self.activityZones = infoDict[@"activityZones"];
Pods/AugustAPI/August API/AGLockLogEntry.m:200:                self.doorbellImageUrl = infoDict[@"imageURL"];
Pods/AugustAPI/August API/AGLockLogEntry.m:206:                self.doorbellImageUrl = infoDict[@"image"][@"secure_url"];
Pods/AugustAPI/August API/AGLockLogEntry.m:208:            self.doorbellUserId = @"self";
Pods/AugustAPI/August API/AGLockLogEntry.m:214:    self.animatedURL = [infoDict objectForKey:@"animatedURL"];
Pods/AugustAPI/August API/AGLockLogEntry.m:215:    self.webURL = [infoDict objectForKey:@"webURL"];
Pods/AugustAPI/August API/AGLockLogEntry.m:216:    self.appURL = [infoDict objectForKey:@"appURL"];
Pods/AugustAPI/August API/AGLockLogEntry.m:218:    self.deviceID = [dictionary objectForKey:@"deviceID"];
Pods/AugustAPI/August API/AGLockLogEntry.m:219:    NSDictionary *house = dictionary[@"house"];
Pods/AugustAPI/August API/AGLockLogEntry.m:221:        self.houseID = house[@"houseID"];
Pods/AugustAPI/August API/AGLockLogEntry.m:235:            if ([self.user.objectId isEqualToString:@"manuallock"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:238:            else if ([self.user.objectId isEqualToString:@"automaticrelock"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:241:            else if ([self.user.objectId isEqualToString:@"onetouchlock"]) {
Pods/AugustAPI/August API/AGLockLogEntry.m:251:            if ([self.user.objectId isEqualToString:@"manualunlock"]) {
Pods/AugustAPI/August API/AGAirbnbListing.m:14:    [[AGClient sharedClient] getPath:@"airbnb/listings" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGAirbnbListing.m:36:    listing.listingID = [responseDictionary objectForKey:@"id"];
Pods/AugustAPI/August API/AGAirbnbListing.m:37:    listing.name = [responseDictionary objectForKey:@"name"];
Pods/AugustAPI/August API/AGAirbnbListing.m:38:    NSArray <NSDictionary *> *lockAccesses = [[NSMutableArray alloc] initWithArray:[responseDictionary objectForKey:@"access"]];
Pods/AugustAPI/August API/AGAirbnbListing.m:44:        if ([lockDictionary objectForKey:@"lockID"]) {
Pods/AugustAPI/August API/AGAirbnbListing.m:45:            lockId = (NSString *)[lockDictionary objectForKey:@"lockID"];
Pods/AugustAPI/August API/AGAirbnbListing.m:47:        if ([lockDictionary objectForKey:@"appAccess"]) {
Pods/AugustAPI/August API/AGAirbnbListing.m:48:            appAccess = [[lockDictionary objectForKey:@"appAccess"] boolValue];
Pods/AugustAPI/August API/AGAirbnbListing.m:50:        if ([lockDictionary objectForKey:@"keypadAccess"]) {
Pods/AugustAPI/August API/AGAirbnbListing.m:51:            keypadAccess = [[lockDictionary objectForKey:@"keypadAccess"] boolValue];
Pods/AugustAPI/August API/AGAirbnbListing.m:62:    NSDictionary *parameters = @{@"appAccess": [NSNumber numberWithBool:airbnbLockAccess.appAccess], @"keypadAccess": [NSNumber numberWithBool:airbnbLockAccess.keypadAccess]};
Pods/AugustAPI/August API/AGAirbnbListing.m:63:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"airbnb/listings/%@/locks/%@", airbnbListingID, airbnbLockAccess.lockId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDiary.m:67:        case AGDiaryLevel_Error:            return @"Error";
Pods/AugustAPI/August API/AGDiary.m:68:        case AGDiaryLevel_Warn:             return @"Warn";
Pods/AugustAPI/August API/AGDiary.m:69:        case AGDiaryLevel_Info:             return @"Info";
Pods/AugustAPI/August API/AGDiary.m:70:        case AGDiaryLevel_Debug:            return @"Debug";
Pods/AugustAPI/August API/AGDiary.m:71:        case AGDiaryLevel_Verbose:          return @"Verbose";
Pods/AugustAPI/August API/AGDiary.m:73:            AGDiaryWarn(nil, @"Unrecognized AGDiaryLevel %d", level);
Pods/AugustAPI/August API/AGDiary.m:74:            NSAssert(NO, @"Unrecognized AGDiaryLevel %u", level);
Pods/AugustAPI/August API/AGDiary.m:83:    return ([categoryName rangeOfString:@"^[a-zA-Z0-9]+$" options:NSRegularExpressionSearch].length != 0);
Pods/AugustAPI/August API/AGDiary.m:95:    return ([eventName rangeOfString:@"^[a-zA-Z0-9\\+]+$" options:NSRegularExpressionSearch].length != 0);
Pods/AugustAPI/August API/AGDiary.m:104:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
Pods/AugustAPI/August API/AGDiary.m:124:    NSAssert([self isAcceptableCategoryName:category], @"Can't create canonical event name with bad category name '%@'", category);
Pods/AugustAPI/August API/AGDiary.m:125:    NSAssert([self isAcceptableEventName:event], @"Can't create canonical event name with bad event name '%@'", event);
Pods/AugustAPI/August API/AGDiary.m:126:    return [NSString stringWithFormat:@"%@.%@", category, event];
Pods/AugustAPI/August API/AGDiary.m:135:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
Pods/AugustAPI/August API/AGDiary.m:154:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
Pods/AugustAPI/August API/AGDiary.m:182:        AGDiaryError(@"BadCategoryName", @"Can't log category named '%@' because it has illegal characters", category);
Pods/AugustAPI/August API/AGDiary.m:183:        NSAssert(false, @"Can't log category named '%@' because it has illegal characters", category);
Pods/AugustAPI/August API/AGDiary.m:190:        AGDiaryError(@"BadEventName", @"Can't log event named '%@' because it has illegal characters", event);
Pods/AugustAPI/August API/AGDiary.m:191:        NSAssert(false, @"Can't log event named '%@' because it has illegal characters", event);
Pods/AugustAPI/August API/AGDiary.m:197:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or a message.  Cannot have both be nil");
Pods/AugustAPI/August API/AGDiary.m:198:        NSAssert(false, @"You need to specify either an event or a message.  Cannot have both be nil");
Pods/AugustAPI/August API/AGKey.m:33:	NSString * path = [@"locks/" stringByAppendingString:lockID];
Pods/AugustAPI/August API/AGKey.m:36:		//DLog(@"locks %@", responseObject.description);
Pods/AugustAPI/August API/AGKey.m:54:            key.objectId = responseObject[@"key"];//not sure I'm understanding what is being returned here
Pods/AugustAPI/August API/AGLockLog.m:54:        fileName = [[NSString alloc] initWithFormat:@"%@/bleLockLogsToUpload.plist", documentsDirectory];
Pods/AugustAPI/August API/AGLockLog.m:65:    recursiveLock.name = [NSString stringWithFormat:@"<%@: %p> recursiveLock", NSStringFromClass([self class]), self];
Pods/AugustAPI/August API/AGLockLog.m:97:    NSDictionary *parameters = @{@"action": action,
Pods/AugustAPI/August API/AGLockLog.m:98:                                 @"mechanical": mechanical,
Pods/AugustAPI/August API/AGLockLog.m:99:                                 @"crypto": crypto,
Pods/AugustAPI/August API/AGLockLog.m:100:                                 @"dateTime": [AGDateUtils ISO8601UTCDateTimeStringFromDate:[NSDate date]]};
Pods/AugustAPI/August API/AGLockLog.m:101:    NSString *path = [NSString stringWithFormat:@"/locks/usage/%@", lockID];
Pods/AugustAPI/August API/AGLockLog.m:102:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", parameters, @"parameters", nil];
Pods/AugustAPI/August API/AGLockLog.m:103:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
Pods/AugustAPI/August API/AGLockLog.m:109:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockdata", lockID];
Pods/AugustAPI/August API/AGLockLog.m:110:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", lockData, @"parameters", nil];
Pods/AugustAPI/August API/AGLockLog.m:111:    [log setObject:@"POST" forKey: @"HTTPMethod"];
Pods/AugustAPI/August API/AGLockLog.m:117:    NSString *path = [NSString stringWithFormat:@"/locks/timeadustment/%@/%d/%d", lockID, realTimeSentToLock, lockTimeStamp];
Pods/AugustAPI/August API/AGLockLog.m:118:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", nil, @"parameters", nil];
Pods/AugustAPI/August API/AGLockLog.m:119:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
Pods/AugustAPI/August API/AGLockLog.m:162:                if([log objectForKey:@"HTTPMethod"] != nil) {
Pods/AugustAPI/August API/AGLockLog.m:163:                    [[AGClient sharedClient] sendSynchronousRequestWithPath:[log objectForKey:@"path"] parameters:[log objectForKey:@"parameters"] httpMthod:[log objectForKey:@"HTTPMethod"]];
Pods/AugustAPI/August API/AGLogCleaner.m:65:                 @"pin",
Pods/AugustAPI/August API/AGLogCleaner.m:66:                 @"key",
Pods/AugustAPI/August API/AGLogCleaner.m:67:                 @"x-august-api-key",
Pods/AugustAPI/August API/AGLogCleaner.m:68:                 @"x-august-api-session-token",
Pods/AugustAPI/August API/AGLogCleaner.m:69:                 @"x-august-access-token",
Pods/AugustAPI/August API/AGLogCleaner.m:70:                 @"lRand1",
Pods/AugustAPI/August API/AGLogCleaner.m:71:                 @"lRand2",
Pods/AugustAPI/August API/AGLogCleaner.m:72:                 @"mRand1",
Pods/AugustAPI/August API/AGLogCleaner.m:73:                 @"mRand2",
Pods/AugustAPI/August API/AGLogCleaner.m:74:                 @"LockResponse",
Pods/AugustAPI/August API/AGLogCleaner.m:75:                 @"packet"
Pods/AugustAPI/August API/AGLogCleaner.m:87:                 @"x-august-api-key",
Pods/AugustAPI/August API/AGLogCleaner.m:88:                 @"x-august-api-session-token",
Pods/AugustAPI/August API/AGLogCleaner.m:89:                 @"x-august-access-token",
Pods/AugustAPI/August API/AGLogCleaner.m:90:                 @"publishKey",
Pods/AugustAPI/August API/AGLogCleaner.m:91:                 @"secretKey",
Pods/AugustAPI/August API/AGLogCleaner.m:92:                 @"subscribeKey",
Pods/AugustAPI/August API/AGLogCleaner.m:93:                 @"password"
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:19:        NSString *accessTypeString = [dict objectForKey:@"accessType"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:21:        if ([accessTypeString isEqualToString:@"onetime"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:25:        NSString *timeStrings = [dict objectForKey:@"accessTimes"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:28:            times = [timeStrings componentsSeparatedByString:@";"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:31:        if ([accessTypeString isEqualToString:@"recurring"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:33:            self.daysOfWeek = [[AGRule new] recurrenceDaySetFromString:[dict objectForKey:@"accessRecurrence"]];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:35:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:39:                    if ([dateType isEqualToString:@"STARTSEC"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:42:                    if ([dateType isEqualToString:@"ENDSEC"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:50:        if ([accessTypeString isEqualToString:@"temporary"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:54:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:58:                    if ([dateType isEqualToString:@"DTSTART"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:61:                    if ([dateType isEqualToString:@"DTEND"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:68:        if ([accessTypeString isEqualToString:@"onetime"]) {
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:79:        [dict setObject:@"always" forKey:@"accessType"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:83:        [dict setObject:@"onetime" forKey:@"accessType"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:87:        [dict setObject:@"temporary" forKey:@"accessType"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:89:        NSString *timeString = [NSString stringWithFormat:@"DTSTART=%@;DTEND=%@", [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.startDate], [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.endDate]];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:90:        [dict setObject:timeString forKey:@"accessTimes"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:94:        [dict setObject:@"recurring" forKey:@"accessType"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:95:        NSString *timeString = [NSString stringWithFormat:@"STARTSEC=%d;ENDSEC=%d", (int) _recurStartSec, (int) _recurEndSec];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:96:        [dict setObject:timeString forKey:@"accessTimes"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:99:        [dict setObject:[NSString stringWithFormat:@"FREQ=WEEKLY;INTERVAL=1;BYDAY=%@", recurrenceDays] forKey:@"accessRecurrence"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:173:        NSArray *daysOfWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Pods/AugustAPI/August API/AGKeypadPinAccessInfo.m:181:                if ([day isEqualToString:@"TR"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:15:    if ([statusString isEqualToString:@"paid"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:18:    if ([statusString isEqualToString:@"trial"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:21:    if ([statusString isEqualToString:@"trial_expired"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:24:    if ([statusString isEqualToString:@"past_due"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:27:    if ([statusString isEqualToString:@"expired"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:30:    if ([statusString isEqualToString:@"cancelled"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:33:    if ([statusString isEqualToString:@"created"]) {
Pods/AugustAPI/August API/AGSubscriptionItem.m:42:            return @"trial";
Pods/AugustAPI/August API/AGSubscriptionItem.m:46:            return @"trial_expired";
Pods/AugustAPI/August API/AGSubscriptionItem.m:50:            return @"paid";
Pods/AugustAPI/August API/AGSubscriptionItem.m:54:            return @"past_due";
Pods/AugustAPI/August API/AGSubscriptionItem.m:58:            return @"expired";
Pods/AugustAPI/August API/AGSubscriptionItem.m:62:            return @"cancelled";
Pods/AugustAPI/August API/AGSubscriptionItem.m:66:            return @"created";
Pods/AugustAPI/August API/AGSubscriptionItem.m:70:            return @"Unknown";
Pods/AugustAPI/August API/AGSubscriptionItem.m:78:    sub.userID = [dict objectForKey:@"userID"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:82:    sub.type = [dict objectForKey:@"type"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:83:    sub.status = [AGSubscriptionItem subStatusFromString:[dict objectForKey:@"status"]];
Pods/AugustAPI/August API/AGSubscriptionItem.m:84:    NSString *dateString = [dict objectForKey:@"expiresAt"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:118:        [dict setObject:self.userID forKey:@"userID"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:121:        [dict setObject:self.type forKey:@"type"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:124:    [dict setObject:[AGSubscriptionItem infoStringFromSubscriptionStatus:self.status] forKey:@"status"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:128:                 forKey:@"expiresAt"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:137:        return @"Premium";
Pods/AugustAPI/August API/AGSubscriptionItem.m:139:        return @"Basic";
Pods/AugustAPI/August API/AGSubscriptionItem.m:158:        return [NSString stringWithFormat:@"%d day%@", daysLeft, (daysLeft==1)?@"":@"s"];
Pods/AugustAPI/August API/AGSubscriptionItem.m:162:        return [NSString stringWithFormat:@"%d month%@", months, (months==1)?@"":@"s"];
Pods/AugustAPI/August API/AGKeypad.m:19:        self.objectId = [dict objectForKey:@"_id"];
Pods/AugustAPI/August API/AGKeypad.m:28:    [keypadDictionary setObject:self.objectId forKey:@"_id"];
Pods/AugustAPI/August API/AGKeypad.m:30:        [keypadDictionary setObject:self.serialNumber forKey:@"serialNumber"];
Pods/AugustAPI/August API/AGKeypad.m:33:        [keypadDictionary setObject:self.currentFirmwareVersion forKey:@"currentFirmwareVersion"];
Pods/AugustAPI/August API/AGKeypad.m:36:        [keypadDictionary setObject:self.batteryLevel forKey:@"batteryLevel"];
Pods/AugustAPI/August API/AGKeypad.m:39:        [keypadDictionary setObject:self.associatedLockId forKey:@"lockID"];
Pods/AugustAPI/August API/AGKeypad.m:46:    self.serialNumber = [dict objectForKey:@"serialNumber"];
Pods/AugustAPI/August API/AGKeypad.m:47:    self.currentFirmwareVersion =  [dict objectForKey:@"currentFirmwareVersion"];
Pods/AugustAPI/August API/AGKeypad.m:49:        self.currentFirmwareVersion = @"0.0";
Pods/AugustAPI/August API/AGKeypad.m:51:    self.batteryLevel = [dict objectForKey:@"batteryLevel"];
Pods/AugustAPI/August API/AGKeypad.m:53:        self.batteryLevel = @"Unknown";
Pods/AugustAPI/August API/AGKeypad.m:55:    self.associatedLockId = [dict objectForKey:@"lockID"];
Pods/AugustAPI/August API/AGKeypad.m:60:    NSString * path = [@"keypads/" stringByAppendingString:self.objectId];
Pods/AugustAPI/August API/AGKeypad.m:80:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/handshakeKey", self.objectId];
Pods/AugustAPI/August API/AGKeypad.m:82:        [[AGClient sharedClient] putPath:path parameters:@{@"nextHandshakeKey":updatedHandshakeKey} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGKeypad.m:100:        [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/keypads/firmware/%@/%@", self.objectId, myCurrentFirmwareVersion] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGKeypad.m:103:                    block([NSDictionary dictionaryWithObject:responseObject forKey:@"data"] ,nil);
Pods/AugustAPI/August API/AGKeypad.m:121:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
Pods/AugustAPI/August API/AGKeypad.m:133:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
Pods/AugustAPI/August API/AGKeypad.m:139:                                        block([responseDictionary objectForKey:@"resetCode"], nil);
Pods/AugustAPI/August API/AGKeypad.m:159:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
Pods/AugustAPI/August API/AGKeypad.m:167:                                         NSString *newFirmwareVersion =  [((NSDictionary *)[responseDictionary objectForKey:@"updateInfo"]) objectForKey:@"version"];
Pods/AugustAPI/August API/AGKeypad.m:170:                                             block(false, [NSError errorWithDomain:@"AGKeypad" code:-1 userInfo:nil]);
Pods/AugustAPI/August API/AGKeypad.m:193:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
Pods/AugustAPI/August API/AGKeypad.m:201:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
Pods/AugustAPI/August API/AGKeypad.m:216:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
Pods/AugustAPI/August API/AGKeypad.m:217:    [[AGClient sharedClient] putPath:path parameters:@{@"resetCode":resetCode} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGKeypad.m:233:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
Pods/AugustAPI/August API/AGClient.h:10:static NSString * const kInternalCacheMarkerFlag = @"_InternalClientCached";
Pods/AugustAPI/August API/AGClient.h:12:static NSString * const kSezamAPIBaseURLString = @"https://api-production.august.com";
Pods/AugustAPI/August API/AGClient.h:13:static NSString * const kSezamAPIVersion = @"0.0.1";
Pods/AugustAPI/August API/AGClient.h:43://Posts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
Pods/AugustAPI/August API/AGClient.h:58://Puts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
Pods/AugustAPI/August API/AGClient.h:65://Deletes the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
Pods/AugustAPI/August API/AGConstants.m:3:NSString* const kAGUserDefaultsHasShownLockViewCoachMarksKey = @"AGUserDefaultsHasShownLockViewCoachMarks";
Pods/AugustAPI/August API/AGConstants.m:5:NSString* const kSezam = @"Sezam";
Pods/AugustAPI/August API/AGConstants.m:6:NSString* const kUsername = @"username";
Pods/AugustAPI/August API/AGConstants.m:7:NSString* const kPassword = @"password";
Pods/AugustAPI/August API/AGConstants.m:8:NSString* const kApiKey = @"x-august-api-key";
Pods/AugustAPI/August API/AGConstants.m:9:NSString* const kApiKeyValue = @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
Pods/AugustAPI/August API/AGConstants.m:10:NSString* const kToken = @"token";
Pods/AugustAPI/August API/AGConstants.m:11:NSString* const kAccessToken = @"x-august-access-token";
Pods/AugustAPI/August API/AGConstants.m:13:NSString* const kCreatedKey = @"Created";
Pods/AugustAPI/August API/AGConstants.m:14:NSString* const kUpdatedKey = @"Updated";
Pods/AugustAPI/August API/AGConstants.m:17:NSString* const kUserNameKey = @"UserName";
Pods/AugustAPI/August API/AGConstants.m:18:NSString* const kUserPasswordKey = @"UserPassword";
Pods/AugustAPI/August API/AGConstants.m:19:NSString* const kUserIDKey = @"UserID";
Pods/AugustAPI/August API/AGConstants.m:20:NSString* const kEmailKey = @"Email";
Pods/AugustAPI/August API/AGConstants.m:21:NSString* const kInvitationCodeKey = @"InvitationCode";
Pods/AugustAPI/August API/AGConstants.m:22:NSString* const kFirstNameKey = @"FirstName";
Pods/AugustAPI/August API/AGConstants.m:23:NSString* const kLastNameKey = @"LastName";
Pods/AugustAPI/August API/AGConstants.m:24:NSString* const kMacAddressKey = @"MacAddress";
Pods/AugustAPI/August API/AGConstants.m:26:NSString* const kHouseNameKey = @"HouseName";
Pods/AugustAPI/August API/AGConstants.m:27:NSString* const kHouseIdKey = @"HouseID";
Pods/AugustAPI/August API/AGConstants.m:28:NSString* const kCityKey = @"City";
Pods/AugustAPI/August API/AGConstants.m:29:NSString* const kStateKey = @"State";
Pods/AugustAPI/August API/AGConstants.m:30:NSString* const kPostalCodeKey = @"PostalCode";
Pods/AugustAPI/August API/AGConstants.m:31:NSString* const kStreetKey = @"Street";
Pods/AugustAPI/August API/AGConstants.m:32:NSString* const kApartmentKey = @"Apartment";
Pods/AugustAPI/August API/AGConstants.m:33:NSString* const kPhoneNoKey = @"PhoneNo";
Pods/AugustAPI/August API/AGConstants.m:34:NSString* const kPartnerTokensKey = @"tokens";
Pods/AugustAPI/August API/AGConstants.m:35:NSString* const kNotificationKey = @"notification";
Pods/AugustAPI/August API/AGConstants.m:36:NSString* const kImageInfoKey = @"imageInfo";
Pods/AugustAPI/August API/AGConstants.m:37:NSString* const kImageOriginalKey = @"original";
Pods/AugustAPI/August API/AGConstants.m:38:NSString* const kImageThumbKey = @"thumbnail";
Pods/AugustAPI/August API/AGConstants.m:39:NSString* const kImageURLKey = @"secure_url";
Pods/AugustAPI/August API/AGConstants.m:40:NSString* const kNestEnabledKey = @"nestEnabled";
Pods/AugustAPI/August API/AGConstants.m:41:NSString* const kTimeZoneKey = @"timeZone";
Pods/AugustAPI/August API/AGConstants.m:42:NSString* const kUserIdentifiers = @"identifiers";
Pods/AugustAPI/August API/AGConstants.m:43:NSString* const kUserIdentifier = @"identifier";
Pods/AugustAPI/August API/AGConstants.m:44:NSString* const kUserTypeKeyLock = @"UserType";
Pods/AugustAPI/August API/AGConstants.m:45:NSString* const kUserTypeKeyHouse = @"type";
Pods/AugustAPI/August API/AGConstants.m:46:NSString* const kUserVerificationCodeKey = @"VerificationCode";
Pods/AugustAPI/August API/AGConstants.m:47:NSString* const kUserVerificationPhoneNumberKey = @"VerificationPhoneNumber";
Pods/AugustAPI/August API/AGConstants.m:48:NSString* const kRuleIDsKey = @"rules";
Pods/AugustAPI/August API/AGConstants.m:51:NSString* const kLockNameKey = @"LockName";
Pods/AugustAPI/August API/AGConstants.m:52:NSString* const kLockStatusKey = @"LockStatus";
Pods/AugustAPI/August API/AGConstants.m:53:NSString* const kLockHomeKitEnabledKey = @"homeKitEnabled";
Pods/AugustAPI/August API/AGConstants.m:54:NSString* const kLockZWaveEnabledKey = @"zWaveEnabled";
Pods/AugustAPI/August API/AGConstants.m:55:NSString* const kLockFirmwareVersionKey = @"FirmwareVersion";
Pods/AugustAPI/August API/AGConstants.m:56:NSString* const kLockFirmwareVersionFromServerKey = @"currentFirmwareVersion";
Pods/AugustAPI/August API/AGConstants.m:57:NSString* const kLockPubsubChannelKey = @"pubsubChannel";
Pods/AugustAPI/August API/AGConstants.m:58:NSString* const kLockIdKey = @"LockID";
Pods/AugustAPI/August API/AGConstants.m:59:NSString* const kLockTypeKey = @"Type";
Pods/AugustAPI/August API/AGConstants.m:60:NSString* const kLockKIVKey = @"KIV";
Pods/AugustAPI/August API/AGConstants.m:61:NSString* const kLockBatteryLevelKey = @"battery";
Pods/AugustAPI/August API/AGConstants.m:62:NSString* const kLockIsGalileoKey = @"isGalileo";
Pods/AugustAPI/August API/AGConstants.m:63:NSString* const kZWaveDSKKey = @"zWaveDSK";
Pods/AugustAPI/August API/AGConstants.m:64:NSString* const kLockDoorStateOpenTimeoutKey = @"doorStateOpenTimeout";
Pods/AugustAPI/August API/AGConstants.m:66:NSString* const kMessagingProtocol = @"messagingProtocol";
Pods/AugustAPI/August API/AGConstants.m:67:NSString* const KMessagingURL = @"messagingURL";
Pods/AugustAPI/August API/AGConstants.m:69:NSString* const kDoorStateKey = @"doorState";
Pods/AugustAPI/August API/AGConstants.m:70:NSString* const kDoorStateInitKey = @"init";
Pods/AugustAPI/August API/AGConstants.m:71:NSString* const kDoorStateClosedKey = @"closed";
Pods/AugustAPI/August API/AGConstants.m:72:NSString* const kDoorStateAjarKey = @"ajar";
Pods/AugustAPI/August API/AGConstants.m:73:NSString* const kDoorStateOpenKey = @"open";
Pods/AugustAPI/August API/AGConstants.m:74:NSString* const kDoorStateUnknownKey = @"unknown";
Pods/AugustAPI/August API/AGConstants.m:76:NSString* const kLockKeyKey = @"key";
Pods/AugustAPI/August API/AGConstants.m:78:NSString* const kBridgeKey = @"Bridge";  //identifies bridge data within the response to GET /locks/:lockId
Pods/AugustAPI/August API/AGConstants.m:79:NSString* const kBridgeIdKey = @"_id";
Pods/AugustAPI/August API/AGConstants.m:80:NSString* const kBridgeMfgIdKey = @"mfgBridgeID";
Pods/AugustAPI/August API/AGConstants.m:81:NSString* const kBridgeModelKey = @"deviceModel";
Pods/AugustAPI/August API/AGConstants.m:82:NSString* const kBridgeFirmwareVersionKey = @"firmwareVersion";
Pods/AugustAPI/August API/AGConstants.m:83:NSString* const KBridgeNotificationTypeKey = @"category";
Pods/AugustAPI/August API/AGConstants.m:84:NSString* const kBridgeNotificationChannelKey = @"channel";
Pods/AugustAPI/August API/AGConstants.m:85:NSString* const kBridgeStatusDictKey = @"status";
Pods/AugustAPI/August API/AGConstants.m:86:NSString* const kBridgeCurrentStatusKey = @"current";
Pods/AugustAPI/August API/AGConstants.m:87:NSString* const kBridgeHyperBridgeKey = @"hyperBridge";
Pods/AugustAPI/August API/AGConstants.m:90:NSString* const kDoorbellIdKey = @"doorbellID";
Pods/AugustAPI/August API/AGConstants.m:91:NSString* const kDoorbellSerialNumber = @"serialNumber";
Pods/AugustAPI/August API/AGConstants.m:92:NSString* const kDoorbellFirmwareVersion = @"firmwareVersion";
Pods/AugustAPI/August API/AGConstants.m:93:NSString* const kDoorbellName = @"name";
Pods/AugustAPI/August API/AGConstants.m:94:NSString* const kDoorbellModel = @"model";
Pods/AugustAPI/August API/AGConstants.m:95:NSString* const kDoorbellPubsubChannel = @"pubsubChannel";
Pods/AugustAPI/August API/AGConstants.m:96:NSString* const kDoorbellStatus = @"status";
Pods/AugustAPI/August API/AGConstants.m:97:NSString* const kDoorbellOTAStatus = @"ota_status";
Pods/AugustAPI/August API/AGConstants.m:98:NSString* const kDoorbellPubnubPresence = @"pubnubPresence";
Pods/AugustAPI/August API/AGConstants.m:99:NSString* const kDoorbellAction = @"action";
Pods/AugustAPI/August API/AGConstants.m:100:NSString* const kDoorbellAssociatedLockId = @"LockID";
Pods/AugustAPI/August API/AGConstants.m:101:NSString* const kDoorbellCallNotification = @"buttonpush_notifications";
Pods/AugustAPI/August API/AGConstants.m:102:NSString* const kDoorbellMotionNotification = @"motion_notifications";
Pods/AugustAPI/August API/AGConstants.m:103:NSString* const kDoorbellOfflineNotification = @"notify_when_offline";
Pods/AugustAPI/August API/AGConstants.m:104:NSString* const kDoorbellSound = @"ringSoundEnabled";
Pods/AugustAPI/August API/AGConstants.m:105:NSString* const kSpeakerVolume = @"speakerVolume";
Pods/AugustAPI/August API/AGConstants.m:106:NSString* const kMotionSensitivity = @"irConfiguration";
Pods/AugustAPI/August API/AGConstants.m:107:NSString* const kMotionDoorbellDeviceSetting = @"IREnabled";
Pods/AugustAPI/August API/AGConstants.m:108:NSString* const kTurnOffCamera = @"turnOffCamera";
Pods/AugustAPI/August API/AGConstants.m:109:NSString* const kKeepEncoderRunning = @"keepEncoderRunning";
Pods/AugustAPI/August API/AGConstants.m:110:NSString* const kDoorbellTelemetry = @"telemetry";
Pods/AugustAPI/August API/AGConstants.m:111:NSString* const kDoorbellServerURL = @"doorbellServerURL";
Pods/AugustAPI/August API/AGConstants.m:112:NSString* const kVideoResolution = @"videoResolution";
Pods/AugustAPI/August API/AGConstants.m:114:NSString* const kLogoBrightness = @"flashBrightness";
Pods/AugustAPI/August API/AGConstants.m:115:NSString* const kLogoDuringCall = @"flashDuringCall";
Pods/AugustAPI/August API/AGConstants.m:116:NSString* const kHaloBrightnessX = @"haloBrightnessX";
Pods/AugustAPI/August API/AGConstants.m:118:NSString* const kBluetoothPinKey = @"BluetoothPin";
Pods/AugustAPI/August API/AGConstants.m:119:NSString* const kMCUDataKey = @"MCUData";
Pods/AugustAPI/August API/AGConstants.m:120:NSString* const kRFDataKey = @"RFData";
Pods/AugustAPI/August API/AGConstants.m:121:NSString* const kSetupKey = @"Setup";
Pods/AugustAPI/August API/AGConstants.m:123:NSString* const kUsersKey = @"users";
Pods/AugustAPI/August API/AGConstants.m:124:NSString* const kInvitationsKey = @"invitations";
Pods/AugustAPI/August API/AGConstants.m:125:NSString* const kRuleHashKey = @"ruleHash";
Pods/AugustAPI/August API/AGConstants.m:126:NSString* const kOfflineKeysKey = @"OfflineKeys";
Pods/AugustAPI/August API/AGConstants.m:127:NSString* const kParametersToSetKey = @"parametersToSet";
Pods/AugustAPI/August API/AGConstants.m:129:NSString* const kRuleStartTime = @"startTime";
Pods/AugustAPI/August API/AGConstants.m:130:NSString* const kRuleDuration = @"duration";
Pods/AugustAPI/August API/AGConstants.m:131:NSString* const kRuleRecurrence = @"recurrence";
Pods/AugustAPI/August API/AGConstants.m:132:NSString* const kRuleSchedule = @"schedule";
Pods/AugustAPI/August API/AGConstants.m:134:NSString* const kLockUserTypeSuperUser = @"superuser";
Pods/AugustAPI/August API/AGConstants.m:135:NSString* const kLockUserTypeManager = @"manager";
Pods/AugustAPI/August API/AGConstants.m:136:NSString* const kLockUserTypeUser = @"user";
Pods/AugustAPI/August API/AGConstants.m:137:NSString* const kLockUserTypeLimited = @"limited";
Pods/AugustAPI/August API/AGConstants.m:138:NSString* const KManualLockNotificationTypeKey = @"NotificationType";
Pods/AugustAPI/August API/AGConstants.m:140:NSString* const kRemoteOperateCommand_Status = @"status";
Pods/AugustAPI/August API/AGConstants.m:141:NSString* const kRemoteOperateCommand_Lock = @"lock";
Pods/AugustAPI/August API/AGConstants.m:142:NSString* const kRemoteOperateCommand_Unlock = @"unlock";
Pods/AugustAPI/August API/AGConstants.m:144:NSString* const kRemoteOperateStatus_Locked = @"kAugLockState_Locked";
Pods/AugustAPI/August API/AGConstants.m:145:NSString* const kRemoteOperateStatus_Unlocked = @"kAugLockState_Unlocked";
Pods/AugustAPI/August API/AGConstants.m:146:NSString* const kRemoteOperateStatus_Locking = @"kAugLockState_Locking";
Pods/AugustAPI/August API/AGConstants.m:147:NSString* const kRemoteOperateStatus_Unlocking = @"kAugLockState_Unlocking";
Pods/AugustAPI/August API/AGConstants.m:148:NSString* const kRemoteOperateStatus_Unknown = @"kAugLockState_UnknownStaticPosition";
Pods/AugustAPI/August API/AGConstants.m:150:NSString* const kPinsKey = @"pins";
Pods/AugustAPI/August API/AGConstants.m:151:NSString* const kKeypadKey = @"keypad";
Pods/AugustAPI/August API/AGConstants.m:152:NSString* const kGeofenceLimitsKey = @"geofenceLimits";
Pods/AugustAPI/August API/AGConstants.m:153:NSString* const kDebounceIntervalKey = @"debounceInterval";
Pods/AugustAPI/August API/AGConstants.m:154:NSString* const kGpsAccuracyMultiplierKey = @"gpsAccuracyMultiplier";
Pods/AugustAPI/August API/AGConstants.m:155:NSString* const kMaximumGeofenceKey = @"maximumGeofence" ;
Pods/AugustAPI/August API/AGConstants.m:156:NSString* const kMinimumGeofenceKey = @"minimumGeofence";
Pods/AugustAPI/August API/AGConstants.m:157:NSString* const kMinGPSAccuracyRequiredKey = @"minGPSAccuracyRequired";
Pods/AugustAPI/August API/AGConstants.m:158:NSString* const kGeofenceLimitsVersionKey = @"version";
Pods/AugustAPI/August API/AGConstants.m:161:NSString* const kAGErrorDomain = @"AGError";
Pods/AugustAPI/August API/AGConstants.m:167:NSString* const kInvalidCredentials = @"InvalidCredentials";
Pods/AugustAPI/August API/AGConstants.m:190:NSString* const kSubscriptionIDKey = @"subscriptionID";
Pods/AugustAPI/August API/AGConstants.m:191:NSString* const kSubscriptionDeviceIDKey = @"deviceID";
Pods/AugustAPI/August API/AGConstants.m:192:NSString* const kSubscriptionDeviceTypeKey = @"deviceType";
Pods/AugustAPI/August API/AGConstants.m:194:NSString* const kLockSettingsIcon = @"LockSettingsIcon";
Pods/AugustAPI/August API/AGConstants.m:195:NSString* const kLockSetupHeroImage = @"LockSetupHeroImage";
Pods/AugustAPI/August API/AGConstants.m:196:NSString* const kCalibrationImageLockAndDoorQuestion = @"CalibrationImage-LockAndDoorQuestion";
Pods/AugustAPI/August API/AGConstants.m:197:NSString* const kCalibrationImageStart = @"CalibrationImage-Start";
Pods/AugustAPI/August API/AGConstants.m:198:NSString* const kCalibrationImageClosedAndLockedLock = @"CalibrationImage-ClosedAndLockedLock";
Pods/AugustAPI/August API/AGConstants.m:199:NSString* const kCalibrationImageClosedAndUnlockedLock = @"CalibrationImage-ClosedAndUnlockedLock";
Pods/AugustAPI/August API/AGConstants.m:200:NSString* const kCalibrationImageDoorWideOpenDoor = @"CalibrationImage-DoorWideOpenDoor";
Pods/AugustAPI/August API/AGConstants.m:201:NSString* const kCalibrationImageDoorAjarDoor = @"CalibrationImage-DoorAjarDoor";
Pods/AugustAPI/August API/AGConstants.m:202:NSString* const kCalibrationImageClosedAndUnlockedDoor = @"CalibrationImage-ClosedAndUnlockedDoor";
Pods/AugustAPI/August API/AGConstants.m:203:NSString* const kCalibrationImageFinished = @"CalibrationImage-Finished";
Pods/AugustAPI/August API/AGObject.m:20:	return [NSString stringWithFormat:@"%@ %@", NSStringFromClass([self class]), self.objectId];
Pods/AugustAPI/August API/AGObject.m:30:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
Pods/AugustAPI/August API/AGObject.m:56:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
Pods/AugustAPI/August API/AGObject.m:84:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
Pods/AugustAPI/August API/AGObject.m:93:    if ([str isEqualToString:@"lock"]) {
Pods/AugustAPI/August API/AGObject.m:96:    if ([str isEqualToString:@"doorbell"]) {
Pods/AugustAPI/August API/AGObject.m:104:            return @"lock";
Pods/AugustAPI/August API/AGObject.m:108:            return @"doorbell";
Pods/AugustAPI/August API/AGObject.m:112:            return @"unknown";
Pods/AugustAPI/August API/AGDoorbell.m:21:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:27:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:45:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
Pods/AugustAPI/August API/AGDoorbell.m:70:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:76:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:93:        [parameters setObject:doorbellType forKey:@"type"];
Pods/AugustAPI/August API/AGDoorbell.m:97:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
Pods/AugustAPI/August API/AGDoorbell.m:128:        [dict setObject:self.type forKey:@"type"];
Pods/AugustAPI/August API/AGDoorbell.m:148:            [caps addObject:@"join"];
Pods/AugustAPI/August API/AGDoorbell.m:151:            [caps addObject:@"webrtc"];
Pods/AugustAPI/August API/AGDoorbell.m:153:        [dict setObject:caps forKey:@"caps"];
Pods/AugustAPI/August API/AGDoorbell.m:160:        [intellivisionCreds setObject:self.deviceId forKey:@"deviceID"];
Pods/AugustAPI/August API/AGDoorbell.m:161:        [dict setObject:intellivisionCreds.copy forKey:@"intellivisionCreds"];
Pods/AugustAPI/August API/AGDoorbell.m:165:        [settings setObject:@"1" forKey:kTurnOffCamera];
Pods/AugustAPI/August API/AGDoorbell.m:167:        [settings setObject:@"0" forKey:kTurnOffCamera];
Pods/AugustAPI/August API/AGDoorbell.m:170:        [settings setObject:@"1" forKey:kKeepEncoderRunning];
Pods/AugustAPI/August API/AGDoorbell.m:172:        [settings setObject:@"0" forKey:kKeepEncoderRunning];
Pods/AugustAPI/August API/AGDoorbell.m:174:    [dict setObject:settings.copy forKey:@"settings"];
Pods/AugustAPI/August API/AGDoorbell.m:183:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:191:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:parameters
Pods/AugustAPI/August API/AGDoorbell.m:210:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:231:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:237:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:nil
Pods/AugustAPI/August API/AGDoorbell.m:265:    NSDictionary *intellivisionCreds = (NSDictionary *)[response objectForKey:@"intellivisionCreds"];
Pods/AugustAPI/August API/AGDoorbell.m:267:        NSString *deviceID = [intellivisionCreds objectForKey:@"deviceID"];
Pods/AugustAPI/August API/AGDoorbell.m:278:    self.type = [response objectForKey:@"type"];
Pods/AugustAPI/August API/AGDoorbell.m:281:            if ([self.type isEqualToString:@"homekit"]) {
Pods/AugustAPI/August API/AGDoorbell.m:285:            if ([self.type isEqualToString:@"mars"] || [self.type isEqualToString:@"mars2"]) {
Pods/AugustAPI/August API/AGDoorbell.m:291:        if ([self.serialNumber hasPrefix:@"D2"]) {
Pods/AugustAPI/August API/AGDoorbell.m:292:            self.type = @"mars2";
Pods/AugustAPI/August API/AGDoorbell.m:294:            self.type = @"mars";
Pods/AugustAPI/August API/AGDoorbell.m:303:    if (response[@"currentDoorbellAppVersion"]) {
Pods/AugustAPI/August API/AGDoorbell.m:304:        doorbell.firmwareVersion = response[@"currentDoorbellAppVersion"];
Pods/AugustAPI/August API/AGDoorbell.m:307:        self.firmwareVersion = @"Unknown";
Pods/AugustAPI/August API/AGDoorbell.m:314:        self.messagingProtocol = @"pubnub";
Pods/AugustAPI/August API/AGDoorbell.m:319:        self.messagingURL = @"";
Pods/AugustAPI/August API/AGDoorbell.m:330:    NSDictionary *settingsDictionary = (NSDictionary *)[response objectForKey:@"settings"];
Pods/AugustAPI/August API/AGDoorbell.m:371:        if (settingsDictionary[@"saturation"]) {
Pods/AugustAPI/August API/AGDoorbell.m:372:            doorbell.saturation = [settingsDictionary[@"saturation"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:374:        if (settingsDictionary[@"brightness"]) {
Pods/AugustAPI/August API/AGDoorbell.m:375:            doorbell.brightness = [settingsDictionary[@"brightness"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:377:        if (settingsDictionary[@"hue"]) {
Pods/AugustAPI/August API/AGDoorbell.m:378:            doorbell.hue = [settingsDictionary[@"hue"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:380:        if (settingsDictionary[@"contrast"]) {
Pods/AugustAPI/August API/AGDoorbell.m:381:            doorbell.contrast = [settingsDictionary[@"contrast"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:383:        if (settingsDictionary[@"sharpness"]) {
Pods/AugustAPI/August API/AGDoorbell.m:384:            doorbell.sharpness = [settingsDictionary[@"sharpness"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:386:        if (settingsDictionary[@"auto_contrast_mode"]) {
Pods/AugustAPI/August API/AGDoorbell.m:387:            doorbell.autoContrastMode = [settingsDictionary[@"auto_contrast_mode"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:389:        if (settingsDictionary[@"backlight_comp"]) {
Pods/AugustAPI/August API/AGDoorbell.m:390:            doorbell.BacklightComp = [settingsDictionary[@"backlight_comp"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:395:    if ([[response objectForKey:@"caps"] isKindOfClass:[NSArray class]]) {
Pods/AugustAPI/August API/AGDoorbell.m:396:        NSArray *capabilitiesArray = (NSArray *)[response objectForKey:@"caps"];
Pods/AugustAPI/August API/AGDoorbell.m:398:            if ([capability isEqualToString:@"join"]) {
Pods/AugustAPI/August API/AGDoorbell.m:401:            if([capability isEqualToString:@"webrtc"]){
Pods/AugustAPI/August API/AGDoorbell.m:407:    NSDictionary *recentImage = (NSDictionary *)[response objectForKey:@"recentImage"];
Pods/AugustAPI/August API/AGDoorbell.m:409:        NSString *url = [recentImage objectForKey:@"secure_url"];
Pods/AugustAPI/August API/AGDoorbell.m:410:        NSNumber *height = [NSNumber numberWithInt:[[recentImage objectForKey:@"height"] intValue]];
Pods/AugustAPI/August API/AGDoorbell.m:411:        NSNumber *width = [NSNumber numberWithInt:[[recentImage objectForKey:@"width"] intValue]];
Pods/AugustAPI/August API/AGDoorbell.m:412:        NSString *dateString = [recentImage objectForKey:@"created_at"];
Pods/AugustAPI/August API/AGDoorbell.m:414:        if ((dateString != nil) && (![dateString isEqualToString:@""])) {
Pods/AugustAPI/August API/AGDoorbell.m:420:        if (url) {doorbellImageDictionary[@"url"] = url;}
Pods/AugustAPI/August API/AGDoorbell.m:421:        if (height) {doorbellImageDictionary[@"height"] = height;}
Pods/AugustAPI/August API/AGDoorbell.m:422:        if (width) {doorbellImageDictionary[@"width"] = width;}
Pods/AugustAPI/August API/AGDoorbell.m:423:        if (date) {doorbellImageDictionary[@"date"] = date;}
Pods/AugustAPI/August API/AGDoorbell.m:426:    NSDictionary *usersDictionary = (NSDictionary *)[response objectForKey:@"users"];
Pods/AugustAPI/August API/AGDoorbell.m:430:    NSArray *invitationsArray = (NSArray *)[response objectForKey:@"invitations"];
Pods/AugustAPI/August API/AGDoorbell.m:440:    if ([videoResolution isEqualToString:@"640x480"]) {
Pods/AugustAPI/August API/AGDoorbell.m:442:    } else if ([videoResolution isEqualToString:@"960x720"]) {
Pods/AugustAPI/August API/AGDoorbell.m:444:    } else if ([videoResolution isEqualToString:@"1280x960"]) {
Pods/AugustAPI/August API/AGDoorbell.m:456:            videoResolution = @"640x480";
Pods/AugustAPI/August API/AGDoorbell.m:459:            videoResolution = @"960x720";
Pods/AugustAPI/August API/AGDoorbell.m:462:            videoResolution = @"1280x960";
Pods/AugustAPI/August API/AGDoorbell.m:465:            videoResolution = @"640x480";
Pods/AugustAPI/August API/AGDoorbell.m:476:            videoResolutionString = @"Good (480p)";
Pods/AugustAPI/August API/AGDoorbell.m:479:            videoResolutionString = @"Better (720p)";
Pods/AugustAPI/August API/AGDoorbell.m:482:            videoResolutionString = @"Best (960p)";
Pods/AugustAPI/August API/AGDoorbell.m:485:            videoResolutionString = @"480p";
Pods/AugustAPI/August API/AGDoorbell.m:497:        user.firstName = [AGClient stringByDecodingXMLEntities:[invite objectForKey:@"Name"]];
Pods/AugustAPI/August API/AGDoorbell.m:498:        user.type = [invite objectForKey:@"type"];
Pods/AugustAPI/August API/AGDoorbell.m:522:                    if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
Pods/AugustAPI/August API/AGDoorbell.m:524:                    }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
Pods/AugustAPI/August API/AGDoorbell.m:547:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:565:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:584:            param[@"saturation"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:587:            param[@"brightness"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:590:            param[@"hue"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:593:            param[@"contrast"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:596:            param[@"sharpness"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:599:            param[@"auto_contrast_mode"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:602:            param[@"backlight_comp"] = value;
Pods/AugustAPI/August API/AGDoorbell.m:607:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId]
Pods/AugustAPI/August API/AGDoorbell.m:624:    NSDictionary *parameters = @{@"fields":@"mp4url"};
Pods/AugustAPI/August API/AGDoorbell.m:625:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/video/%@", self.objectId, event] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:628:                block([responseObject objectForKey:@"transactionID"], nil);
Pods/AugustAPI/August API/AGDoorbell.m:641:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:658:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:675:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:692:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:709:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:726:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:761:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:778:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:794:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:810:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:825:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:842:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:861:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:869:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
Pods/AugustAPI/August API/AGDoorbell.m:891:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:899:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
Pods/AugustAPI/August API/AGDoorbell.m:920:    NSDictionary *parameters = @{@"Name":[user displayName]};
Pods/AugustAPI/August API/AGDoorbell.m:922:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/adduser/%@", doorbellID, userId];
Pods/AugustAPI/August API/AGDoorbell.m:944:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/%@", doorbellID, userId];
Pods/AugustAPI/August API/AGDoorbell.m:963:    NSDictionary *parameters = @{@"dvrID": dvrID, @"description":description};
Pods/AugustAPI/August API/AGDoorbell.m:964:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/videoevent/share", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:984:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/log", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:1003:    [[AGClient sharedClient] getPath:@"users/doorbells/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:1013:            //DLog(@"locks fail %@", error.description);
Pods/AugustAPI/August API/AGDoorbell.m:1019:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
Pods/AugustAPI/August API/AGDoorbell.m:1057:    NSString *action = @"initiate";
Pods/AugustAPI/August API/AGDoorbell.m:1058:    NSString *tokenKey = @"token";
Pods/AugustAPI/August API/AGDoorbell.m:1060:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:1078:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/videoevent", self.objectId] parameters:@{@"dvrID":dvrEventID}
Pods/AugustAPI/August API/AGDoorbell.m:1100:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1104:    NSString *action = @"status";
Pods/AugustAPI/August API/AGDoorbell.m:1106:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil waitTime:5.0
Pods/AugustAPI/August API/AGDoorbell.m:1113:                 NSDictionary *callStats = responseDictionary[@"callStats"];
Pods/AugustAPI/August API/AGDoorbell.m:1115:                     if (callStats[@"answered_user"] == nil) {
Pods/AugustAPI/August API/AGDoorbell.m:1119:                         doorbellCallStatus.answeredByUserId = callStats[@"answered_user"];
Pods/AugustAPI/August API/AGDoorbell.m:1121:                     NSDictionary *image = callStats[@"image"];
Pods/AugustAPI/August API/AGDoorbell.m:1123:                         doorbellCallStatus.imageHeight = [image[@"height"]intValue];
Pods/AugustAPI/August API/AGDoorbell.m:1124:                         doorbellCallStatus.imageWidth = [image[@"width"] intValue];
Pods/AugustAPI/August API/AGDoorbell.m:1125:                         doorbellCallStatus.imageUrl = image[@"secure_url"];
Pods/AugustAPI/August API/AGDoorbell.m:1149:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1153:    NSString *action = @"respond";
Pods/AugustAPI/August API/AGDoorbell.m:1160:            [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbell.objectId, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:1164:                     if (responseObject[@"videoAvailable"] != nil) {
Pods/AugustAPI/August API/AGDoorbell.m:1165:                         doorbell.videoAvailable = [responseObject[@"videoAvailable"] boolValue];
Pods/AugustAPI/August API/AGDoorbell.m:1190:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1194:    NSString *action = @"token";
Pods/AugustAPI/August API/AGDoorbell.m:1196:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:1202:                 doorbellCallCredentials.customerID = intellivisionSessionInfo[@"customerID"];
Pods/AugustAPI/August API/AGDoorbell.m:1203:                 doorbellCallCredentials.expiresAt = intellivisionSessionInfo[@"expiresAt"];
Pods/AugustAPI/August API/AGDoorbell.m:1204:                 NSDictionary *session = (NSDictionary *)intellivisionSessionInfo[@"session"];
Pods/AugustAPI/August API/AGDoorbell.m:1206:                     doorbellCallCredentials.apiKey = session[@"apiKey"];
Pods/AugustAPI/August API/AGDoorbell.m:1207:                     doorbellCallCredentials.localID = session[@"localId"];
Pods/AugustAPI/August API/AGDoorbell.m:1208:                     doorbellCallCredentials.partnerID = session[@"partnerId"];
Pods/AugustAPI/August API/AGDoorbell.m:1209:                     doorbellCallCredentials.refreshToken = session[@"refreshToken"];
Pods/AugustAPI/August API/AGDoorbell.m:1210:                     doorbellCallCredentials.sessionKey = session[@"sessionKey"];
Pods/AugustAPI/August API/AGDoorbell.m:1211:                     doorbellCallCredentials.sessionSecret = session[@"sessionSecret"];
Pods/AugustAPI/August API/AGDoorbell.m:1233:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1237:    NSString *action = @"decline";
Pods/AugustAPI/August API/AGDoorbell.m:1238:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil
Pods/AugustAPI/August API/AGDoorbell.m:1260:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1264:    NSString *action = @"hangup";
Pods/AugustAPI/August API/AGDoorbell.m:1266:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
Pods/AugustAPI/August API/AGDoorbell.m:1286:    NSString *action = @"heartbeat";
Pods/AugustAPI/August API/AGDoorbell.m:1287:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:log
Pods/AugustAPI/August API/AGDoorbell.m:1307:    NSString *action = @"join";
Pods/AugustAPI/August API/AGDoorbell.m:1308:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
Pods/AugustAPI/August API/AGDoorbell.m:1328:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1332:    NSString *action = @"leave";
Pods/AugustAPI/August API/AGDoorbell.m:1334:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
Pods/AugustAPI/August API/AGDoorbell.m:1353:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/reboot", self.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:1368:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@", self.objectId] parameters:@{kDoorbellName:name} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:1387:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1393:                                         userInfo:@{@"callID":@"callID cannot be nil"}];
Pods/AugustAPI/August API/AGDoorbell.m:1398:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/calls/%@/image", doorbellID, callID] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:1407:            //DLog(@"locks fail %@", error.description);
Pods/AugustAPI/August API/AGDoorbell.m:1413:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
Pods/AugustAPI/August API/AGDoorbell.m:1428:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGDoorbell.m:1447:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
Pods/AugustAPI/August API/AGOctetStreamResponseSerializer.m:37:    return [NSSet setWithObject:@"application/octet-stream"];
Pods/AugustAPI/August API/UIDevice+HardwareName.m:188:    if ([platform isEqualToString:@"iFPGA"])        return UIDeviceIFPGA;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:191:    if ([platform isEqualToString:@"iPhone1,1"])    return UIDevice1GiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:192:    if ([platform isEqualToString:@"iPhone1,2"])    return UIDevice3GiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:193:    if ([platform isEqualToString:@"iPhone2,1"])    return UIDevice3GSiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:194:    if ([platform isEqualToString:@"iPhone3,1"])    return UIDevice4iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:195:    if ([platform isEqualToString:@"iPhone3,2"])    return UIDevice4iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:196:    if ([platform isEqualToString:@"iPhone3,3"])    return UIDevice4iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:197:    if ([platform isEqualToString:@"iPhone4,1"])    return UIDevice4SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:198:    if ([platform isEqualToString:@"iPhone4,2"])    return UIDevice4SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:199:    if ([platform isEqualToString:@"iPhone4,3"])    return UIDevice4SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:200:    if ([platform isEqualToString:@"iPhone5,1"])    return UIDevice5iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:201:    if ([platform isEqualToString:@"iPhone5,2"])    return UIDevice5iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:202:    if ([platform isEqualToString:@"iPhone5,3"])    return UIDevice5CiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:203:    if ([platform isEqualToString:@"iPhone5,4"])    return UIDevice5CiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:204:    if ([platform isEqualToString:@"iPhone6,1"])    return UIDevice5SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:205:    if ([platform isEqualToString:@"iPhone6,2"])    return UIDevice5SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:206:    if ([platform isEqualToString:@"iPhone7,1"])    return UIDevice6iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:207:    if ([platform isEqualToString:@"iPhone7,2"])    return UIDevice6PlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:208:    if ([platform isEqualToString:@"iPhone8,1"])    return UIDevice6SiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:209:    if ([platform isEqualToString:@"iPhone8,2"])    return UIDevice6SPlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:210:    if ([platform isEqualToString:@"iPhone8,4"])    return UIDeviceSEiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:211:    if ([platform isEqualToString:@"iPhone9,1"])    return UIDevice7iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:212:    if ([platform isEqualToString:@"iPhone9,2"])    return UIDevice7PlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:213:    if ([platform isEqualToString:@"iPhone9,3"])    return UIDevice7iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:214:    if ([platform isEqualToString:@"iPhone9,4"])    return UIDevice7PlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:215:    if ([platform isEqualToString:@"iPhone10,1"])    return UIDevice8iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:216:    if ([platform isEqualToString:@"iPhone10,2"])    return UIDevice8PlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:217:    if ([platform isEqualToString:@"iPhone10,3"])    return UIDeviceXiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:218:    if ([platform isEqualToString:@"iPhone10,4"])    return UIDevice8iPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:219:    if ([platform isEqualToString:@"iPhone10,5"])    return UIDevice8PlusiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:220:    if ([platform isEqualToString:@"iPhone10,6"])    return UIDeviceXiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:223:    if ([platform isEqualToString:@"iPod1,1"])    return UIDevice1GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:224:    if ([platform isEqualToString:@"iPod2,1"])    return UIDevice2GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:225:    if ([platform isEqualToString:@"iPod2,2"])    return UIDevice2GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:226:    if ([platform isEqualToString:@"iPod3,1"])    return UIDevice3GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:227:    if ([platform isEqualToString:@"iPod4,1"])    return UIDevice4GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:228:    if ([platform isEqualToString:@"iPod5,1"])    return UIDevice5GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:229:    if ([platform isEqualToString:@"iPod7,1"])    return UIDevice6GiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:232:    if ([platform isEqualToString:@"iPad1,1"])    return UIDevice1GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:233:    if ([platform isEqualToString:@"iPad2,1"])    return UIDevice2GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:234:    if ([platform isEqualToString:@"iPad2,2"])    return UIDevice2GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:235:    if ([platform isEqualToString:@"iPad2,3"])    return UIDevice2GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:236:    if ([platform isEqualToString:@"iPad2,4"])    return UIDevice2GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:237:    if ([platform isEqualToString:@"iPad3,1"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:238:    if ([platform isEqualToString:@"iPad3,2"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:239:    if ([platform isEqualToString:@"iPad3,3"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:240:    if ([platform isEqualToString:@"iPad3,4"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:241:    if ([platform isEqualToString:@"iPad3,5"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:242:    if ([platform isEqualToString:@"iPad3,6"])    return UIDevice3GiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:243:    if ([platform isEqualToString:@"iPad4,1"])    return UIDeviceAiriPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:244:    if ([platform isEqualToString:@"iPad4,2"])    return UIDeviceAiriPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:245:    if ([platform isEqualToString:@"iPad4,3"])    return UIDeviceAiriPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:246:    if ([platform isEqualToString:@"iPad5,3"])    return UIDeviceAir2iPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:247:    if ([platform isEqualToString:@"iPad5,4"])    return UIDeviceAir2iPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:249:    if ([platform isEqualToString:@"iPad2,5"])    return UIDevice1GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:250:    if ([platform isEqualToString:@"iPad2,6"])    return UIDevice1GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:251:    if ([platform isEqualToString:@"iPad2,7"])    return UIDevice1GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:252:    if ([platform isEqualToString:@"iPad4,4"])    return UIDevice2GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:253:    if ([platform isEqualToString:@"iPad4,5"])    return UIDevice2GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:254:    if ([platform isEqualToString:@"iPad4,6"])    return UIDevice2GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:255:    if ([platform isEqualToString:@"iPad4,7"])    return UIDevice3GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:256:    if ([platform isEqualToString:@"iPad4,8"])    return UIDevice3GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:257:    if ([platform isEqualToString:@"iPad4,9"])    return UIDevice3GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:258:    if ([platform isEqualToString:@"iPad5,1"])    return UIDevice4GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:259:    if ([platform isEqualToString:@"iPad5,2"])    return UIDevice4GiPadMini;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:262:    if ([platform isEqualToString:@"iPad6,3"])    return UIDevice1GiPadPro;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:263:    if ([platform isEqualToString:@"iPad6,4"])    return UIDevice1GiPadPro;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:264:    if ([platform isEqualToString:@"iPad6,7"])    return UIDevice1GiPadPro;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:265:    if ([platform isEqualToString:@"iPad6,8"])    return UIDevice1GiPadPro;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:268:    if ([platform isEqualToString:@"AppleTV2,1"])    return UIDeviceAppleTV2;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:269:    if ([platform isEqualToString:@"AppleTV3,1"])    return UIDeviceAppleTV3;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:270:    if ([platform isEqualToString:@"AppleTV3,2"])    return UIDeviceAppleTV4;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:272:    if ([platform hasPrefix:@"iPhone"])             return UIDeviceUnknowniPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:273:    if ([platform hasPrefix:@"iPod"])               return UIDeviceUnknowniPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:274:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:275:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:276:    if ([platform hasPrefix:@"AppleTV"])            return UIDeviceUnknownAppleTV;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:279:    if ([platform hasSuffix:@"86"] || [platform isEqual:@"x86_64"])
Pods/AugustAPI/August API/UIDevice+HardwareName.m:365:    if ([platform hasPrefix:@"iPhone"]) return UIDeviceFamilyiPhone;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:366:    if ([platform hasPrefix:@"iPod"]) return UIDeviceFamilyiPod;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:367:    if ([platform hasPrefix:@"iPad"]) return UIDeviceFamilyiPad;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:368:    if ([platform hasPrefix:@"AppleTV"]) return UIDeviceFamilyAppleTV;
Pods/AugustAPI/August API/UIDevice+HardwareName.m:416:    NSString *outstring = [NSString stringWithFormat:@"%02X:%02X:%02X:%02X:%02X:%02X", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
Pods/AugustAPI/August API/UIDevice+HardwareName.m:424:Class  btclass = NSClassFromString(@"GKBluetoothSupport");
Pods/AugustAPI/August API/AGAnalyticsDiary.m:11:static NSString* const kAGDiaryCategory = @"AnalyticsDiary";
Pods/AugustAPI/August API/AGAnalyticsDiary.m:65:        AGDiaryError(@"BadCategoryName", @"Can't log category named '%@' because it has illegal characters", category);
Pods/AugustAPI/August API/AGAnalyticsDiary.m:66:        NSAssert(false, @"Can't log category named '%@' because it has illegal characters", category);
Pods/AugustAPI/August API/AGAnalyticsDiary.m:73:        AGDiaryError(@"BadEventName", @"Can't log event named '%@' because it has illegal characters", event);
Pods/AugustAPI/August API/AGAnalyticsDiary.m:74:        NSAssert(false, @"Can't log event named '%@' because it has illegal characters", event);
Pods/AugustAPI/August API/AGAnalyticsDiary.m:88:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or a message.  Cannot have both be nil");
Pods/AugustAPI/August API/AGAnalyticsDiary.m:89:        NSAssert(false, @"You need to specify either an event or a message.  Cannot have both be nil");
Pods/AugustAPI/August API/AGAnalyticsDiary.m:116:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or data.  Cannot have both be nil");
Pods/AugustAPI/August API/AGAnalyticsDiary.m:117:        NSAssert(false, @"You need to specify either an event or data.  Cannot have both be nil");
AGDebugPickKeypadViewController.m:43:    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PickKeypadCell"];
AGDebugPickKeypadViewController.m:45:        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"PickKeypadCell"];
AGDebugPickKeypadViewController.m:47:    NSString *keypadSerial = [((NSDictionary *)[self.foundKeypads objectAtIndex:indexPath.row]) objectForKey:@"serial"];
DialView.m:381:	NSLog(@"PER: %f", _percentageCompleted);
Scripts/xctool.sh:64:"${AUGUST_XCTOOL_COMMAND}" "$@"
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:26:NSString * const AGWatchOperateEmptyStatusString = @" ";//A blank space prevents a UI jitter because a blank space has intrinsic height and width
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:75:    NSString *statusDescription = @"";
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:79:        statusDescription = [statusDescription stringByAppendingString:@" | "];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:95:    [self.lockImage setImageNamed:@"lock_pulse"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:107:                    [self postLockUsageSuccessForAction:@"lock"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:127:    [self.unlockImage setImageNamed:@"unlock_pulse"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:139:                    [self postLockUsageSuccessForAction:@"unlock"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:167:        [self.statusLoadingImage setImageNamed:@"loading_indicator"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:232:    NSString *urlPath = [NSString stringWithFormat:@"/locks/usage/%@", self.lock.lockID];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:234:    request.HTTPMethod = @"PUT";
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:237:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:239:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:240:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:245:                                 @"action": action,
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:246:                                 @"mechanical": @"success",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:247:                                 @"crypto": @"success",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:248:                                 @"dateTime": dateStr
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:270:             @(AGBLELockState_Locked):@"Locked",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:271:             @(AGBLELockState_Locking):@"Locking...",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:272:             @(AGBLELockState_Unlocked):@"Unlocked",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:273:             @(AGBLELockState_Unlocking):@"Unlocking..."
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:280:             @(AGBLEDoorState_Closed):@"Closed",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:281:             @(AGBLEDoorState_Open):@"Open",
AugustWatch/AugustWatchApp Extension/UI/AGWatchLockListVisibilityController.m:25:    [self setTitle:@"Show Locks"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchLockListVisibilityController.m:38:    [self.table setNumberOfRows:self.lockListVisibilityItems.count withRowType:@"AGWatchLockVisibilityRowControllerDefault"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchRefreshStateController.m:43:    [self.loadingImage setImageNamed:@"loading_indicator"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockListController.m:43:        [self.table setRowTypes:@[@"AGWatchOperateLockRowControllerFullScreen"]];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockListController.m:45:        [self.table setNumberOfRows:self.locks.count withRowType:@"AGWatchOperateLockRowControllerCompact"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:27:    AGBasicNetworkClient *networkClient = [[AGBasicNetworkClient alloc] initWithBaseURL:@"https://api-production.august.com" accessToken:[AGWatchKeyStorage accessToken]];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:46:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:47:    [updatedRequest setValue:@"en-US;q=1" forHTTPHeaderField:@"Accept-Language"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:48:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:49:    [updatedRequest setValue:[self apiKey] forHTTPHeaderField:@"x-august-api-key"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:51:            [updatedRequest setValue:[self accessToken] forHTTPHeaderField:@"x-august-access-token"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:63:    NSString *fullPathURL = [NSString stringWithFormat:@"%@%@", self.baseURLPath, relativeURLPath];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:68:    return @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:58:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"NoAccessTokenController"] contexts:@[refreshStateControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:65:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"NoLocksToOperateController"] contexts:@[refreshStateControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:83:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"AGWatchOperateLockListController"] contexts:@[operateLockListControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:88:    [WKInterfaceController reloadRootPageControllersWithNames:@[@"AGWatchOperateLockListController" ,@"AGWatchLockListVisibilityController"] contexts:@[operateLockListControllerContext, lockListVisibilityControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:168:    NSMutableURLRequest *request = [self.networkClient baseRequestWithRelativeURL:@"/users/me"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:169:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:197:        NSString *userID = jsonResp[@"UserID"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:206:    NSMutableURLRequest *request = [self.networkClient baseRequestWithRelativeURL:@"/users/locks/mine"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:207:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:239:            if ([curLockDict[@"UserType"] isEqual:@"user"] ||
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:240:                [curLockDict[@"UserType"] isEqual:@"limited"]) {
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:246:            curLock.lockName = curLockDict[@"LockName"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:247:            curLock.houseName = curLockDict[@"HouseName"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:269:    NSString *relativeURL = [NSString stringWithFormat:@"/locks/%@", lock.lockID];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:271:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:293:        NSDictionary *offlineKeys = jsonResp[@"OfflineKeys"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:294:        NSArray *loadedKeys = offlineKeys[@"loaded"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:297:            NSString *curUserID = curLoadedKeyDict[@"UserID"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:299:                NSNumber *slotNum = curLoadedKeyDict[@"slot"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:300:                NSString *keyStr = curLoadedKeyDict[@"key"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:392:        return [NSError errorWithDomain:@"AGWatchRefresh" code:-7504 userInfo:@{@"AGError":@"AGWatchGeneralNetworkError", @"HTTPStatusCode":@(httpStatusCode)}];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:398:    return [NSError errorWithDomain:@"AGWatchRefresh" code:-7501 userInfo:@{@"AGError":@"AGWatchFetchAccessTokenError"}];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:402:    return [NSError errorWithDomain:@"AGWatchRefresh" code:-7502 userInfo:@{@"AGError":@"AGWatchGeneralNetworkError"}];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:406:    return [NSError errorWithDomain:@"AGWatchRefresh" code:-7503 userInfo:@{@"AGError":@"AGWatchAugustUserAuthorizationError"}];
AugustWatch/AugustWatchApp Extension/Networking/AGBasicNetworkClient+WatchClient.m:17:    AGBasicNetworkClient *networkClient = [[AGBasicNetworkClient alloc] initWithBaseURL:@"https://api-production.august.com" accessTokenProvider:[AGWatchKeyStorage new]];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:19:    [SAMKeychain setPassword:accessToken forService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:23:    return [SAMKeychain passwordForService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:27:    [SAMKeychain deletePasswordForService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:34:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:40:    [offlineKeyDict nilSafeSetObject:offlineKeyHexStr forKey:@"key"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:41:    [offlineKeyDict setObject:[NSNumber numberWithInteger:offlineKey.slot] forKey:@"slot"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:46:    [SAMKeychain setPasswordData:jsonData forService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:52:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:53:    NSData *offlineKeyJSONData = [SAMKeychain passwordDataForService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:62:    NSNumber *slotNum = offlineKeyDict[@"slot"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:64:    NSString *offlineKeyHexStr = offlineKeyDict[@"key"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:74:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:75:    [SAMKeychain deletePasswordForService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:80:    NSArray *offlineKeyAccounts = [SAMKeychain accountsForService:@"AGWatchOfflineKeyService"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:83:        [SAMKeychain deletePasswordForService:@"AGWatchOfflineKeyService" account:curAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:88:    return @"AGOfflineKey-";
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:15:    [[NSUserDefaults standardUserDefaults] setObject:userID forKey:@"AGCurrentUserID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:20:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"AGCurrentUserID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:32:    [[NSUserDefaults standardUserDefaults] setObject:lockDictsToSave forKey:@"AGAllWatchLocks"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:40:    NSArray *savedLockDicts = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGAllWatchLocks"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:53:    [[NSUserDefaults standardUserDefaults] setObject:lockIDs forKey:@"AGWatchLocksToShow"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:58:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"AGWatchLocksToShow"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:64:    lock.lockID = dict[@"lockID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:65:    lock.lockName = dict[@"lockName"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:66:    lock.houseName = dict[@"houseName"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:75:        lockDict[@"lockID"] = lock.lockID;
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:79:        lockDict[@"lockName"] = lock.lockName;
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:83:        lockDict[@"houseName"] = lock.houseName;
AugustWatch/AugustWatchApp Extension/AGWatchBLELockConnectionFactory.m:38:        logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message?:@""];
AugustWatch/AugustWatchApp Extension/AGWatchBLELockConnectionFactory.m:40:        logMessage = [NSString stringWithFormat:@"[%@] %@", event, message?:@""];
AugustWatch/AugustWatchApp Extension/AGWatchBLELockConnectionFactory.m:43:    NSLog(@"%@", logMessage);
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityWatchManager.m:83:    return [NSError errorWithDomain:@"AGWatchMessenger" code:-7401 userInfo:@{@"AGError":@"AGWatchMessageOperationTimeout"}];
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityUtility.m:11:NSString *const AGWatchMessageRequestTypeKey = @"MessageType";
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityUtility.m:12:NSString *const AGWatchMessageResponseErrorKey = @"Error";
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityUtility.m:13:NSString *const AGWatchMessageBodyKey = @"Body";
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityUtility.m:15:NSString *const AGWatchAccessTokenRequestMessageType = @"AGWatchAccessTokenRequest";
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityAppManager.m:47:    NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityAppManager.m:48:    replyHandler(@{AGWatchMessageBodyKey:accessToken ?: @""});
AugustWatch/AugustWatchApp Extension/Utility/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:15:    [escapedString replaceOccurrencesOfString:@"&amp;"  withString:@"&"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:16:    [escapedString replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:17:    [escapedString replaceOccurrencesOfString:@"&#x27;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:18:    [escapedString replaceOccurrencesOfString:@"&#39;"  withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:19:    [escapedString replaceOccurrencesOfString:@"&#x92;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:20:    [escapedString replaceOccurrencesOfString:@"&#x96;" withString:@"-"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:21:    [escapedString replaceOccurrencesOfString:@"&gt;"   withString:@">"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:22:    [escapedString replaceOccurrencesOfString:@"&lt;"   withString:@"<"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:42:        if ([[messageData objectForKey:@"status"] isEqual:@"imagecapture"]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:43:            NSDictionary *dataDict = [messageData objectForKey:@"data"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:44:            NSDictionary *imageDict = [dataDict objectForKey:@"cloudinaryResult"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:45:            NSString *secureImageURL = [imageDict objectForKey:@"secure_url"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:91:    NSDictionary *imageDict = [userInfo objectForKey:@"image"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:93:        imageURL = [imageDict objectForKey:@"secure_url"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:95:    NSString *doorbellID = [userInfo objectForKey:@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:121:                NSString *tmpFile = [NSString stringWithFormat:@"file://%@%@", tmpDir, request.identifier];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:133:                UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"doorbell_image" URL:tmpFileURL options:attachmentOptions error:&attachmentError];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:158:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:159:    BOOL isMotionEvent = [status isEqualToString:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:61:    NSDictionary *simulateButtonPress = @{@"status":@"simulate_button_press", @"origin":@"iOS"};
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:71:        if ([[messageData objectForKey:@"status"] isEqualToString:@"buttonpush"] &&
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:72:            [[messageData objectForKey:@"doorbellID"] isEqualToString:self.curDoorbellToListenFor]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:82:    NSDictionary *dataDict = [messageDict objectForKey:@"data"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:83:    NSString *doorbellName = [dataDict objectForKey:@"doorbellName"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:84:    NSString *houseName = [dataDict objectForKey:@"houseName"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:85:    NSString *pushBody = [NSString stringWithFormat:@"%@ doorbell is ringing at %@", doorbellName, houseName];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:86:    NSString *imageURL = @"";//@"https://res.cloudinary.com/august-com/image/upload/v1477599834/yvv40d2wumn3rgarvh26.jpg"; //@"https://i.imgur.com/yomz9DLb.jpg"
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:92:                                  @"aps":@{
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:93:                                          @"alert":@{
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:94:                                                  @"title":@"",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:95:                                                  @"body":pushBody
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:97:                                          @"sound":@"doorbell",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:98:                                          @"category":kDoorbellNotificationCategory,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:100:                                  @"status":@"buttonpush",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:101:                                  @"doorbellName":doorbellName,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:102:                                  @"houseName":houseName,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:103:                                  @"imageURL":imageURL,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:104:                                  @"callID":messageDict[@"callID"],
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:105:                                  @"doorbellID":messageDict[@"doorbellID"],
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:122:            AGDoorbell *doorbell = [[AGSharedData sharedInstance] findDoorbellWithID:@"a1b4cd368901"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:24:#define kAGDiaryCategory @"AGDoorbellNotificationFlow"
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:64:    BOOL isMotionEvent = [[pushNotificationDict treatNSNullAsNilObjectForKey:@"event"] isEqual:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:87:    AGDiaryDebug(@"APNSEnter",@"%@ %@", apnsDictionary, [NSDate date]);
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:88:    NSString *status = apnsDictionary[@"status"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:89:    NSString *doorbellID = apnsDictionary[@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:93:    if (apnsDictionary[@"doorbellName"] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:94:        doorbellName = [AGClient stringByDecodingXMLEntities:apnsDictionary[@"doorbellName"]];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:96:    if (apnsDictionary[@"houseName"] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:97:        houseName = [AGClient stringByDecodingXMLEntities:apnsDictionary[@"houseName"]];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:99:    if  (apnsDictionary[@"callID" ] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:100:        callID = apnsDictionary[@"callID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:105:        AGDiaryInfo(@"DoorbellNotifications", @"Type: %@, House Name, %@, DoorbellName: %@, Call ID; %@", status, houseName, doorbellName, callID);
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:109:        if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:115:                [[AGVideoCallSummary sharedInstance] addVideoCallEventV2:@"APNS" andStatus:status andPath:nil andError:nil];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:164:    NSString *doorbellID = pushNotificationDict[@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:172:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:173:            self.houseTabBarController = [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:182:        AGDiaryInfo(nil, @"The house has locks. Go to the LockPagingationViewController & HouseTabBar");
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:198:        BOOL isMotionEvent = [[self.currentNotification treatNSNullAsNilObjectForKey:@"event"] isEqual:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:202:            NSString *dvrID = [self.currentNotification treatNSNullAsNilObjectForKey:@"dvrID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:205:            NSString *callID = [self.currentNotification treatNSNullAsNilObjectForKey:@"callID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:211:                [self.logBookViewController performSegueWithIdentifier:@"logBookToMotionActivity" sender:matchingEvent];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:213:                [self.logBookViewController performSegueWithIdentifier:@"logBookToDoorbellActivity" sender:matchingEvent];
AugustNotifications/AGNotificationHandler.m:55:NSString *const kDoorbellNotificationOriginDateKey = @"creationDate";
AugustNotifications/AGNotificationHandler.m:56:NSString *const kDoorbellNotificationCategory = @"DoorbellNotification";
AugustNotifications/AGNotificationHandler.m:57:NSString *const kDoorbellNotificationViewAction = @"view";
AugustNotifications/AGNotificationHandler.m:58:NSString *const kStandardNotificationFeature = @"standard-notifications";
AugustNotifications/AGNotificationHandler.m:59:NSString *const kDisableDoorbellMissedEventNotifFlowFeature = @"disable-doorbell-missed-event-notif-flow";
AugustNotifications/AGNotificationHandler.m:62:static NSString* kAGDiaryCategory = @"AGNotificationHandler";
AugustNotifications/AGNotificationHandler.m:126:    AGDiaryDebug(@"voip", [NSString stringWithFormat:@"voip push token:%@", [credentials.token hexString]]);
AugustNotifications/AGNotificationHandler.m:130:    NSMutableDictionary *parameters = [NSMutableDictionary dictionaryWithDictionary:@{@"deviceID":[AGUtility persistentDeviceID]}];
AugustNotifications/AGNotificationHandler.m:132:        [parameters setObject:voipToken forKey:@"voiptoken"];
AugustNotifications/AGNotificationHandler.m:135:        [parameters setObject:apnsToken forKey:@"apnstoken"];
AugustNotifications/AGNotificationHandler.m:138:    [[AGClient sharedClient] postPath:@"apns/devtoken" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustNotifications/AGNotificationHandler.m:140:            AGDiaryDebug(@"voip", @"Could not register voip token");
AugustNotifications/AGNotificationHandler.m:143:            AGDiaryDebug(@"voip", @"voip registration successful");
AugustNotifications/AGNotificationHandler.m:149:    AGDiaryDebug(@"voip", @"Did receive voip notification");
AugustNotifications/AGNotificationHandler.m:150:    if ([payload.dictionaryPayload[@"aps"][@"category"] isEqualToString:kDoorbellNotificationCategory]) {
AugustNotifications/AGNotificationHandler.m:160:    NSDictionary *apsDict = [payload objectForKey:@"aps"];
AugustNotifications/AGNotificationHandler.m:161:    NSDictionary *alertDict = [[apsDict objectForKey:@"alert"] isKindOfClass:[NSDictionary class]] ? [apsDict objectForKey:@"alert"] : nil;
AugustNotifications/AGNotificationHandler.m:163:    notifContent.title = alertDict ? [alertDict objectForKey:@"title"] : [apsDict objectForKey:@"alert"];
AugustNotifications/AGNotificationHandler.m:164:    notifContent.subtitle = alertDict ? [alertDict objectForKey:@"subtitle"] : nil;
AugustNotifications/AGNotificationHandler.m:165:    notifContent.body = alertDict ? [alertDict objectForKey:@"body"] : nil;
AugustNotifications/AGNotificationHandler.m:166:    notifContent.sound = [UNNotificationSound soundNamed:[apsDict objectForKey:@"sound"]];
AugustNotifications/AGNotificationHandler.m:167:    notifContent.categoryIdentifier = [apsDict objectForKey:@"category"];
AugustNotifications/AGNotificationHandler.m:175:    if (NSClassFromString(@"UNNotificationCategory")) {
AugustNotifications/AGNotificationHandler.m:176:        UNNotificationAction *viewAction = [UNNotificationAction actionWithIdentifier:kDoorbellNotificationViewAction title:@"View" options:(UNNotificationActionOptionAuthenticationRequired | UNNotificationActionOptionForeground)];
AugustNotifications/AGNotificationHandler.m:188:    NSString *curEpochTimeStr = [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970]*1000.0];//Put the time in millis
AugustNotifications/AGNotificationHandler.m:203:    content.sound = [UNNotificationSound soundNamed:@"doorbell.caf"];
AugustNotifications/AGNotificationHandler.m:236:    NSDictionary *aps = [userInfo objectForKey:@"aps"];
AugustNotifications/AGNotificationHandler.m:237:    NSString *message = [aps objectForKey:@"alert"];
AugustNotifications/AGNotificationHandler.m:238:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/AGNotificationHandler.m:242:    if ([notification.request.content.categoryIdentifier isEqualToString:kDoorbellNotificationCategory] || [notification.request.content.categoryIdentifier isEqualToString:@"doorbellSetupReminder"] || isAutoUnlockForegroundNotification) {
AugustNotifications/AGNotificationHandler.m:247:            UIAlertController * alert=   [UIAlertController alertControllerWithTitle:@"30 Minute Reminder"
AugustNotifications/AGNotificationHandler.m:248:                                                                             message:@"Your Doorbell battery has charged for 30 minutes. Please continue setup."
AugustNotifications/AGNotificationHandler.m:251:            UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
AugustNotifications/AGNotificationHandler.m:259:    }else if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]){
AugustNotifications/AGNotificationHandler.m:264:            BOOL messageIsEmpty = message == nil || [[message stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] isEqualToString:@""];
AugustNotifications/AGNotificationHandler.m:266:                UIAlertController * alert=   [UIAlertController alertControllerWithTitle:@"August" message:message preferredStyle:UIAlertControllerStyleAlert];
AugustNotifications/AGNotificationHandler.m:267:                UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
AugustNotifications/AGNotificationHandler.m:283:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/AGNotificationHandler.m:287:    }else if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]){
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationPersistanceManager.m:12:NSString * const appGroup = @"group.com.august.notifications.doorbell";
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationPersistanceManager.m:13:NSString * const dataFolder = @"data";
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationPersistanceManager.m:76:            NSString *filePath = [NSString stringWithFormat:@"%@/%@", [self dataFolderURL].path, fileName];
NUI/UI/UITableView+NUI.m:16:        self.nuiClass = @"Table";
NUI/UI/UITableView+NUI.m:23:    if (![self.nuiClass isEqualToString:@"none"]) {
NUI/UI/UIProgressView+NUI.m:16:        self.nuiClass = @"Progress";
NUI/UI/UIProgressView+NUI.m:24:        if (![self.nuiClass isEqualToString:@"none"]) {
AugustAPI/august-api/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
AugustAPI/august-api/AGGuestbookEntry.m:14:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/guestbookentries/%d/%d", houseID, (int)count, (int)start] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGGuestbookEntry.m:22:                guestbookEntry.objectId = responseDictionary[@"EntryID"];
AugustAPI/august-api/AGGuestbookEntry.m:23:                NSDictionary *userDict = responseDictionary[@"author"];
AugustAPI/august-api/AGGuestbookEntry.m:27:                guestbookEntry.content = [AGClient stringByDecodingXMLEntities:responseDictionary[@"snippet"]];
AugustAPI/august-api/AGGuestbookEntry.m:28:                long long timeIntervalSince1970 = [responseDictionary[@"date"] longLongValue];
AugustAPI/august-api/AGGuestbookEntry.m:43:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGGuestbookEntry.m:53:    NSString * path = [NSString stringWithFormat:@"houses/%@/guestbook", houseID];
AugustAPI/august-api/AGGuestbookEntry.m:55:	[[AGClient sharedClient] postPath:path parameters:@{@"content":content} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGGuestbookEntry.m:69:    NSString * path = [NSString stringWithFormat:@"houses/guestbookentry/%@", entryID];
AugustAPI/august-api/AGNotificationRule.m:13:NSString * const kAGNotificationRuleIDKey = @"ruleID";
AugustAPI/august-api/AGNotificationRule.m:14:NSString * const kAGNotificationRuleDeviceIDKey = @"deviceID";
AugustAPI/august-api/AGNotificationRule.m:15:NSString * const kAGNotificationRuleDeviceTypeKey = @"deviceType";
AugustAPI/august-api/AGNotificationRule.m:16:NSString * const kAGNotificationRuleOtherUserIDKey = @"otherUserID";
AugustAPI/august-api/AGNotificationRule.m:17:NSString * const kAGNotificationRuleScheduleKey = @"schedule";
AugustAPI/august-api/AGNotificationRule.m:38:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules?deviceID=%@", lockID];
AugustAPI/august-api/AGNotificationRule.m:42:                              header:@{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGNotificationRule.m:60:    NSString *path = @"/smartalert/rules";
AugustAPI/august-api/AGNotificationRule.m:64:    [[AGClient sharedClient] postPath:path parameters:notificationRuleDict header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGNotificationRule.m:83:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
AugustAPI/august-api/AGNotificationRule.m:88:    [[AGClient sharedClient] putPath:path parameters:scheduleOnlyDict header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGNotificationRule.m:109:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
AugustAPI/august-api/AGNotificationRule.m:111:    [[AGClient sharedClient] deletePath:path parameters:nil header:@{@"accept-version":@"2.0.0"} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGGeofenceLimits.m:31:            d = [d objectForKey:@"ios"];
AugustAPI/august-api/AGGeofenceLimits.m:51:            if ([d objectForKey:@"thresholds"]) {
AugustAPI/august-api/AGGeofenceLimits.m:52:                self.thresholds = [d objectForKey:@"thresholds"];
AugustAPI/august-api/AGGeofenceLimits.m:55:            if ([d objectForKey:@"probabilities"]) {
AugustAPI/august-api/AGGeofenceLimits.m:56:                self.probabilities = [d objectForKey:@"probabilities"];
AugustAPI/august-api/AGGeofenceLimits.m:68:    [dict3 setObject:self.thresholds forKey:@"thresholds"];
AugustAPI/august-api/AGGeofenceLimits.m:69:    [dict3 setObject:self.probabilities forKey:@"probabilities"];
AugustAPI/august-api/AGGeofenceLimits.m:88:    _versionID = @"default4"; // If the server provided version does not match this version id, then the local params are overriden in the AutoUnlock code that stores the geofence limits to persisten memeory.
AugustAPI/august-api/AGGeofenceLimits.m:105:    self.thresholds = @{@"wifi": @{@"val":@"wifionexit" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:106:                        @"fastexit" :  @{@"val":@"exitdiff" , @"max":@1},
AugustAPI/august-api/AGGeofenceLimits.m:107:                        @"20minout" :  @{@"val":@"outsideseconds" , @"max":@(20.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:108:                        @"over2hours" :  @{@"val":@"outsideseconds" , @"min":@(2*60.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:109:                        @"over4hours" :  @{@"val":@"outsideseconds" , @"min":@(4*60.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:110:                        @"gpsexitverifyfailed" :  @{@"val":@"gpsexitverifyfailed" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:111:                        @"walkedabit" :  @{@"val":@"walkseconds" , @"min":@180},
AugustAPI/august-api/AGGeofenceLimits.m:112:                        @"othertransport" :  @{@"val":@"othertransseconds" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:113:                        @"nightowlexit" : @{@"val":@"hour24exit", @"max":@6},
AugustAPI/august-api/AGGeofenceLimits.m:114:                        @"nightowlenter" : @{@"val":@"hour24enter", @"max":@6}
AugustAPI/august-api/AGGeofenceLimits.m:116:     @"notothertransport" :  @{@"val":@"othertransseconds" , @"max":@60.0},
AugustAPI/august-api/AGGeofenceLimits.m:117:     @"notwalkedabit" :  @{@"val":@"walkseconds" , @"max":@300.0},
AugustAPI/august-api/AGGeofenceLimits.m:125:    self.probabilities = @[@{@"or":@[@"wifi"], @"p":@0.75},
AugustAPI/august-api/AGGeofenceLimits.m:126:                           @{@"or":@[@"fastexit"], @"p":@0.45},
AugustAPI/august-api/AGGeofenceLimits.m:127:                           @{@"or":@[@"gpsexitverifyfailed"], @"p":@0.4},
AugustAPI/august-api/AGGeofenceLimits.m:128:                           @{@"and":@[@"20minout"], @"p":@0.49}, // a short 20 min exit
AugustAPI/august-api/AGGeofenceLimits.m:129:                           @{@"and":@[@"over2hours"], @"p":@0.4}, // over 2 hours
AugustAPI/august-api/AGGeofenceLimits.m:130:                           @{@"and":@[@"over4hours"], @"p":@0.33}, // over 4 hours
AugustAPI/august-api/AGGeofenceLimits.m:131:                           @{@"and":@[@"othertransport"], @"p":@0.01},
AugustAPI/august-api/AGGeofenceLimits.m:132:                           @{@"and":@[@"walkedabit"], @"p":@0.1},
AugustAPI/august-api/AGGeofenceLimits.m:133:                           @{@"and":@[@"nightowlexit",@"nightowlenter"], @"p": @0.6},
AugustAPI/august-api/AGGeofenceLimits.m:135:     @{@"and":@[@"notwalkedabit",@"notothertransport"], @"p": @0.999}
AugustAPI/august-api/AGGeofenceLimits.m:196:    NSLog(@"min %f max %f multiplier %f ", self.minimumGeofence, self.maximumGeofence, self.gpsAccuracyMultiplier);
AugustAPI/august-api/AGGeofenceLimits.m:202:        NSLog(@"accuracy: %f computed default: %f",  accuracy, rad);
AugustAPI/august-api/AGHouse.m:20:static NSString* kAGDiaryCategory = @"AGHouse";
AugustAPI/august-api/AGHouse.m:44:    NSString *userType = isOwner?@"superuser":@"user";
AugustAPI/august-api/AGHouse.m:45:    NSString * path = [NSString stringWithFormat:@"houses/adduser/%@/%@/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
AugustAPI/august-api/AGHouse.m:69:    NSString *userType = isOwner?@"superuser":@"user";
AugustAPI/august-api/AGHouse.m:70:    NSString * path = [NSString stringWithFormat:@"houses/%@/users/%@/setusertype/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
AugustAPI/august-api/AGHouse.m:89:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
AugustAPI/august-api/AGHouse.m:107:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
AugustAPI/august-api/AGHouse.m:126:    NSString * path = [NSString stringWithFormat:@"houses/%@/image", houseId];
AugustAPI/august-api/AGHouse.m:129:    [[AGClient sharedClient] putFile:path fileData:imageData mimeType:@"image/jpeg" augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:146:	NSString * path = [NSString stringWithFormat:@"houses/%@",houseID];
AugustAPI/august-api/AGHouse.m:183:    return [NSDictionary dictionaryWithObjectsAndKeys:self.objectId, kHouseIdKey, self.name, kHouseNameKey, locks, @"locks", doorbells, @"doorbells", @{kImageURLKey: self.imageURL}, kImageInfoKey, self.houseType, kUserTypeKeyHouse, nil];
AugustAPI/august-api/AGHouse.m:201:    [[AGClient sharedClient] getPath:@"users/houses/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:202:        //DLog(@"houses %@", responseArray.description);
AugustAPI/august-api/AGHouse.m:255:            //DLog(@"houses fail %@", error.description);
AugustAPI/august-api/AGHouse.m:269:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
AugustAPI/august-api/AGHouse.m:329:	[[AGClient sharedClient] postPath:@"houses" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:330:		//DLog(@"houses %@", responseObject.description);
AugustAPI/august-api/AGHouse.m:363:            //DLog(@"houses fail %@", error.description);
AugustAPI/august-api/AGHouse.m:413:    NSDictionary *locksResponse = responseDictionary[@"locks"];
AugustAPI/august-api/AGHouse.m:434:    NSArray *camerasResponseArray = responseDictionary[@"cameras"];
AugustAPI/august-api/AGHouse.m:442:    NSDictionary *doorbellsResponseArray = responseDictionary[@"doorbells"];
AugustAPI/august-api/AGHouse.m:466:	NSString * path = [@"houses/" stringByAppendingString:houseId];
AugustAPI/august-api/AGHouse.m:667:        AGDiaryDebug(@"HouseDataRefreshComplete", @"House Data has successfully Refreshed for Locks and Merged -> House Id: %@", self.objectId);
AugustAPI/august-api/AGHouse.m:670:    AGDiaryDebug(@"HouseDataRefresh", @"House Id: %@, Refresh Type: %@", self.objectId, refreshType);
AugustAPI/august-api/AGHouse.m:747:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld&endDate=%ld", houseID, (long)count, (long)endDate];
AugustAPI/august-api/AGHouse.m:751:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld", houseID, (long)count];
AugustAPI/august-api/AGHouse.m:791:                                        AGDiaryDebug(@"ActivityLogRefreshError", @"Error when attempting to Refresh Activity Log for Lock Id: %@", lock.objectId);
AugustAPI/august-api/AGHouse.m:841:                        if (![[existingHouseRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:842:                            if ([[newRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:886:            if (![user.type.lowercaseString isEqualToString:@"limited"]) {
AugustAPI/august-api/AGHouse.m:913:                if (![ruleID isEqualToString:@"always"]) {
AugustAPI/august-api/AGHouse.m:974:        if ([[rule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:1026:    NSArray *orderArray = @[@"earlier", @"the past week", @"yesterday", @"today", @"tomorrow", @"upcoming"];
AugustAPI/august-api/AGHouse.m:1043:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
AugustAPI/august-api/AGHouse.m:1052:        return @"today";
AugustAPI/august-api/AGHouse.m:1055:        return @"tomorrow";
AugustAPI/august-api/AGHouse.m:1058:        return @"yesterday";
AugustAPI/august-api/AGHouse.m:1061:        return @"upcoming";
AugustAPI/august-api/AGHouse.m:1064:        return @"the past week";
AugustAPI/august-api/AGHouse.m:1067:        return @"earlier";
AugustAPI/august-api/AGHouse.m:1074:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"houses/%@/neststructure/%@", houseID, structureID] parameters:@{@"StructureName":structureName} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:1090:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"houses/%@/neststructure/%@", houseID, structureID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:1105:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/nestawaystatus", houseID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:1120:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"houses/%@/nestawaystatus/%@", houseID, awayStatus] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:1135:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"houses/%@/temperature", houseID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGHouse.m:1141:                        [temperatures addObject:[tempDict objectForKey:@"farenheit"]];
AugustAPI/august-api/AGLog.m:38:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
AugustAPI/august-api/AGLog.m:47:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
AugustAPI/august-api/AGLog.m:61:    if ([key rangeOfString:@"error" options:NSCaseInsensitiveSearch].location == NSNotFound) {
AugustAPI/august-api/AGLog.m:62:        DDLogVerbose(@"%@", value);
AugustAPI/august-api/AGLog.m:65:        DDLogError(@"%@", value);
AugustAPI/august-api/AGLog.m:77:    NSString *path = [NSString stringWithFormat:@"/clientlogdata"];
AugustAPI/august-api/AGLog.m:79:    [[AGClient sharedClient] postPath:path parameters:@{@"log": self.logArray} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLog.m:118:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockoperatedata", lockId];
AugustAPI/august-api/AGLog.m:122:    [parameters setObject:self.timeLogUUID forKey:@"ID"];
AugustAPI/august-api/AGLog.m:152:    NSDictionary* details = @{@"action": action,
AugustAPI/august-api/AGLog.m:153:                              @"event": event,
AugustAPI/august-api/AGLog.m:154:                              @"timestamp": [NSNumber numberWithLong:timestamp]};
AugustAPI/august-api/AGCamera.m:14:    [[AGClient sharedClient] getPath:@"users/cameras/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGCamera.m:36:    camera.objectId = [responseDictionary objectForKey:@"CameraID"];
AugustAPI/august-api/AGCamera.m:37:    camera.name = [responseDictionary objectForKey:@"CameraName"];
AugustAPI/august-api/AGCamera.m:38:    camera.manufacturerID = [responseDictionary objectForKey:@"ManufacturerCameraID"];
AugustAPI/august-api/AGCamera.m:39:    camera.manufacturer = [responseDictionary objectForKey:@"manufacturer"];
AugustAPI/august-api/AGCamera.m:40:    camera.manufacturerData = [responseDictionary objectForKey:@"manufacturerData"];
AugustAPI/august-api/AGCamera.m:41:    camera.lockIDs = [responseDictionary objectForKey:@"locks"];
AugustAPI/august-api/AGCamera.m:42:    camera.doorbellIDs = [responseDictionary objectForKey:@"doorbells"];
AugustAPI/august-api/AGCamera.m:43:    camera.houseID = [responseDictionary objectForKey:@"HouseID"];
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:29:            self.host = @"";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:31:        } else if ([messagingProtocol isEqual:@"pubnub"]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:34:            self.host = @"";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:36:        } else if ([messagingProtocol isEqual:@"mqtt"]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:38:            if (messagingURL == nil || [messagingURL isEqual:@""]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:39:                self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:40:                self.host = @"dev-mqtt.august.com";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:43:                NSArray* urlComponentsArray = [messagingURL componentsSeparatedByString: @":"];
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:45:                    self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:46:                    self.host = @"dev-mqtt.august.com";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:51:                    self.host = [hostURLString stringByReplacingOccurrencesOfString:@"/" withString:@""];
AugustAPI/august-api/AGDiary.h:13: *     AGDiaryInfo(@"FinishedScan", @"Starting scan for bridges, scanCount = %d", scanCount);
AugustAPI/august-api/AGDiary.h:60: *          static NSString* kAGDiaryCategory = @"VenusSetup";
AugustAPI/august-api/AGDiary.h:63: *          AGDiaryDebug(nil, @"Parsing Bridge SSID '%@'", bridgeSSID);
AugustAPI/august-api/AGDiary.h:64: *          AGDiaryInfo(@"StartRegisterBridge", @"Registering bridge %@ with the ACS server", bridgeAddress);
AugustAPI/august-api/AGDiary.h:203:#define AG_DIARY_CATEGORY_DIARY    @"Diary"
AugustAPI/august-api/ISO8601DateFormatter.m:12:static NSString* kAGDiaryCategory = @"ISO8601DateFormatter";
AugustAPI/august-api/ISO8601DateFormatter.m:21:#define ISO_CALENDAR_DATE_FORMAT @"yyyy-MM-dd"
AugustAPI/august-api/ISO8601DateFormatter.m:22://#define ISO_WEEK_DATE_FORMAT @"YYYY-'W'ww-ee" //Doesn't actually work because NSDateComponents counts the weekday starting at 1.
AugustAPI/august-api/ISO8601DateFormatter.m:23:#define ISO_ORDINAL_DATE_FORMAT @"yyyy-DDD"
AugustAPI/august-api/ISO8601DateFormatter.m:24:#define ISO_TIME_FORMAT @"HH:mm:ss"
AugustAPI/august-api/ISO8601DateFormatter.m:25:#define ISO_TIME_WITH_TIMEZONE_FORMAT  ISO_TIME_FORMAT @"Z"
AugustAPI/august-api/ISO8601DateFormatter.m:27:#define ISO_TIMEZONE_UTC_FORMAT @"Z"
AugustAPI/august-api/ISO8601DateFormatter.m:28:#define ISO_TIMEZONE_OFFSET_FORMAT @"%+.2d%.2d"
AugustAPI/august-api/ISO8601DateFormatter.m:191:	NSAssert(timeSep != '\0', @"Time separator must not be NUL.");
AugustAPI/august-api/ISO8601DateFormatter.m:372:                                    AGDiaryDebug(@"DateParse", @"(%@) parsing month; segment is %lu and ch is %s", string, (unsigned long)segment, ch);
AugustAPI/august-api/ISO8601DateFormatter.m:429:                            AGDiaryDebug(@"DateParse", @"(%@) found %lu digits and one hyphen, so this is either -YY or -YY-MM; segment (year) is %lu", string, (unsigned long)num_digits, (unsigned long)segment);
AugustAPI/august-api/ISO8601DateFormatter.m:531:						timeZone = [NSTimeZone timeZoneWithAbbreviation:@"UTC"];
AugustAPI/august-api/ISO8601DateFormatter.m:651:		[timeFormatMutable replaceOccurrencesOfString:@":"
AugustAPI/august-api/ISO8601DateFormatter.m:675:			[NSException raise:NSInternalInconsistencyException format:@"self.format was %lu, not calendar (%d), week (%d), or ordinal (%d)", (unsigned long)self.format, ISO8601DateFormatCalendar, ISO8601DateFormatWeek, ISO8601DateFormatOrdinal];
AugustAPI/august-api/ISO8601DateFormatter.m:682:		dateFormat = [dateFormat stringByAppendingFormat:@"'T'%@", [self replaceColonsInString:ISO_TIME_FORMAT withTimeSeparator:self.timeSeparator]];
AugustAPI/august-api/ISO8601DateFormatter.m:793:		timeString = @"";
AugustAPI/august-api/ISO8601DateFormatter.m:795:	return [NSString stringWithFormat:@"%lu-W%02lu-%02lu%@", (unsigned long)year, (unsigned long)week, ((unsigned long)dayOfWeek) + 1U, timeString];
AugustAPI/august-api/AGLockLogEntry.h:175: * This is @"self" for missed and declined calls. And a userId for answered and intiated calls.
AugustAPI/august-api/AGLockCapability.m:74:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:75:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:78:                self.definedVersion = @"0.0.0";
AugustAPI/august-api/AGLockCapability.m:82:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:83:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:84:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:85:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:86:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:87:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:88:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:89:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:90:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:91:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:110:                self.onboardCPUs = @[@"arm", @"ti"];
AugustAPI/august-api/AGLockCapability.m:116:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:117:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:120:                self.definedVersion = @"1.0.0";
AugustAPI/august-api/AGLockCapability.m:125:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:126:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:127:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:128:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:129:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:130:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:131:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:132:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:133:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:134:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:153:                self.onboardCPUs = @[@"bcm", @"st"];
AugustAPI/august-api/AGLockCapability.m:159:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:160:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:163:                self.definedVersion = @"2.0.0";
AugustAPI/august-api/AGLockCapability.m:168:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:169:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:170:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:171:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:172:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:173:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:174:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:175:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:176:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:177:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:196:                self.onboardCPUs = @[@"dlg",@"sd"];
AugustAPI/august-api/AGLockCapability.m:202:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/";
AugustAPI/august-api/AGLockCapability.m:203:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl3";
AugustAPI/august-api/AGLockCapability.m:206:                self.definedVersion = @"3.0.0";
AugustAPI/august-api/AGLockCapability.m:211:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:212:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:213:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:214:                                         kCalibrationImageStart : @"DoorStateCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:215:                                         kCalibrationImageClosedAndLockedLock : @"DoorStateCalibrationClosedAndHandLocked",
AugustAPI/august-api/AGLockCapability.m:216:                                         kCalibrationImageClosedAndUnlockedLock : @"DoorStateCalibrationClosedAndHandUnlocked",
AugustAPI/august-api/AGLockCapability.m:217:                                         kCalibrationImageDoorWideOpenDoor : @"DoorStateCalibrationDoorOpen",
AugustAPI/august-api/AGLockCapability.m:218:                                         kCalibrationImageDoorAjarDoor : @"DoorStateCalibrationDoorAjar",
AugustAPI/august-api/AGLockCapability.m:219:                                         kCalibrationImageClosedAndUnlockedDoor : @"DoorStateCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:220:                                         kCalibrationImageFinished : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:239:                self.onboardCPUs = @[@"dlg"];
AugustAPI/august-api/AGLockCapability.m:245:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl4/";
AugustAPI/august-api/AGLockCapability.m:246:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl4";
AugustAPI/august-api/AGLockCapability.m:249:                self.definedVersion = @"4.0.0";
AugustAPI/august-api/AGLockCapability.m:254:                                         kLockSettingsIcon : @"CallistoSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:255:                                         kLockSetupHeroImage : @"CallistoLockSetup",
AugustAPI/august-api/AGLockCapability.m:256:                                         kCalibrationImageLockAndDoorQuestion : @"CallistoCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:257:                                         kCalibrationImageStart : @"CallistoCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:258:                                         kCalibrationImageClosedAndLockedLock : @"CallistoCalibrationClosedAndHandLocked",
AugustAPI/august-api/AGLockCapability.m:259:                                         kCalibrationImageClosedAndUnlockedLock : @"CallistoCalibrationClosedAndHandUnlocked",
AugustAPI/august-api/AGLockCapability.m:260:                                         kCalibrationImageDoorWideOpenDoor : @"CallistoCalibrationDoorOpen",
AugustAPI/august-api/AGLockCapability.m:261:                                         kCalibrationImageDoorAjarDoor : @"CallistoCalibrationDoorAjar",
AugustAPI/august-api/AGLockCapability.m:262:                                         kCalibrationImageClosedAndUnlockedDoor : @"CallistoCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:263:                                         kCalibrationImageFinished : @"CallistoCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:282:                self.onboardCPUs = @[@"dlg",@"yale"];
AugustAPI/august-api/AGLockCapability.m:288:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/md01/";
AugustAPI/august-api/AGLockCapability.m:289:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-md01-yale/";
AugustAPI/august-api/AGLockCapability.m:292:                self.definedVersion = @"1001.0.0";
AugustAPI/august-api/AGLockCapability.m:296:                                         kLockSettingsIcon : @"UnitySettingsIcon",
AugustAPI/august-api/AGLockCapability.m:297:                                         kLockSetupHeroImage : @"unity_setup",
AugustAPI/august-api/AGLockCapability.m:298:                                         kCalibrationImageLockAndDoorQuestion : @"unity_setup",
AugustAPI/august-api/AGLockCapability.m:299:                                         kCalibrationImageStart : @"unity_calibration1",
AugustAPI/august-api/AGLockCapability.m:300:                                         kCalibrationImageClosedAndLockedLock : @"calibration_yale_lock_door",
AugustAPI/august-api/AGLockCapability.m:301:                                         kCalibrationImageClosedAndUnlockedLock : @"calibration_yale_closed_unlocked",
AugustAPI/august-api/AGLockCapability.m:302:                                         kCalibrationImageDoorWideOpenDoor : @"calibration_yale_open_door",
AugustAPI/august-api/AGLockCapability.m:303:                                         kCalibrationImageDoorAjarDoor : @"calibration_yale_ajar_door",
AugustAPI/august-api/AGLockCapability.m:304:                                         kCalibrationImageClosedAndUnlockedDoor : @"calibration_yale_closed_unlocked",
AugustAPI/august-api/AGLockCapability.m:305:                                         kCalibrationImageFinished : @"doorsense_yale",
AugustAPI/august-api/AGLockCapability.m:315:    [loggingDictionary setObject:[NSNumber numberWithInt:self.lockPlanetType] forKey:@"LockType"];
AugustAPI/august-api/AGPartnerCategory.m:19:        self.name = dict[@"tag"];
AugustAPI/august-api/AGPartnerCategory.m:20:        self.partnerIDs = dict[@"appItems"];
AugustAPI/august-api/AGKeyStorage.m:15:#define kAGDiaryCategory @"KeyStorage"
AugustAPI/august-api/AGKeyStorage.m:17:#define kAugustKeychainService @"AugustKeys"
AugustAPI/august-api/AGKeyStorage.m:23:        return @"HK";
AugustAPI/august-api/AGKeyStorage.m:26:        return @"OK";
AugustAPI/august-api/AGKeyStorage.m:61:    [SAMKeychain setPassword:serializedData forService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:67:    [SAMKeychain deletePasswordForService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:78:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"]];
AugustAPI/august-api/AGKeyStorage.m:81:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:83:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:99:        NSString *accountID = [curAccount objectForKey:@"acct"];
AugustAPI/august-api/AGKeyStorage.m:105:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:107:        NSString *accountID = [curAccount objectForKey:@"acct"];
AugustAPI/august-api/AGKeyStorage.m:109:            [SAMKeychain deletePasswordForService:kAugustKeychainService account:accountID accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:115:    return !([[[NSUserDefaults standardUserDefaults] stringForKey:@"KeysMigrated"] boolValue]);
AugustAPI/august-api/AGKeyStorage.m:136:        [[NSUserDefaults standardUserDefaults]  setObject:[NSNumber numberWithBool:TRUE] forKey:@"KeysMigrated"];
AugustAPI/august-api/AGClient.m:14:static NSString* kAGDiaryCategory = @"ApiClient";
AugustAPI/august-api/AGClient.m:34:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:48:    if ([url rangeOfString:@"https://"].location != 0) {
AugustAPI/august-api/AGClient.m:52:    return [theURL.host hasSuffix:@".august.com"];
AugustAPI/august-api/AGClient.m:62:        NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:91:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];
AugustAPI/august-api/AGClient.m:92:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/AGClient.m:93:    [self.requestSerializer setValue:kSezamAPIVersion forHTTPHeaderField:@"accept-version"];
AugustAPI/august-api/AGClient.m:111:    [[NSUserDefaults standardUserDefaults] setObject:urlString forKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:114:    NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
AugustAPI/august-api/AGClient.m:115:    [crossProcessDefaults setObject:urlString forKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:124:    NSMutableDictionary *userInfo = @{@"clientSerial": clientSerial, @"requestTime" : [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000]}.mutableCopy;
AugustAPI/august-api/AGClient.m:132:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:145:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
AugustAPI/august-api/AGClient.m:161:                else if ((response.statusCode == 400) && ([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:167:                            serverErrorCode = [(NSDictionary *)localizedRecoverySuggestion objectForKey:@"code"];
AugustAPI/august-api/AGClient.m:169:                        if ([serverErrorCode isEqualToString:@"InvalidVersion"]) {
AugustAPI/august-api/AGClient.m:183:                else if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && (response.statusCode != 404) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:192:                    if ((error.userInfo!=nil) && ([error.userInfo objectForKey:@"NSLocalizedDescription"] != nil)) {
AugustAPI/august-api/AGClient.m:193:                        errorUserInfo = @{@"NSLocalizedDescription":error.userInfo[@"NSLocalizedDescription"]};
AugustAPI/august-api/AGClient.m:195:                    error = [NSError errorWithDomain:@"GeneralNetworkFailure" code:error.code userInfo:errorUserInfo];
AugustAPI/august-api/AGClient.m:204:                if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:219:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {         // don't log the log requests!
AugustAPI/august-api/AGClient.m:226:                        NSLog(@"dataTaskWithRequest HTTP status code: %ld", (long)statusCode);
AugustAPI/august-api/AGClient.m:231:                    NSString *accessToken = [allHTTPHeaderFields objectForKey:@"x-august-access-token"];
AugustAPI/august-api/AGClient.m:238:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
AugustAPI/august-api/AGClient.m:263:    [self logRequest:request logType:@"LOG SYNCHRONOUS REQUEST"];
AugustAPI/august-api/AGClient.m:269:    [self logResponse:response responseBody:data request:request error:error logType:@"LOG SYNCHRONOUS RESPONSE"];
AugustAPI/august-api/AGClient.m:270:    if ((error != nil) && ([error.localizedDescription rangeOfString:@"401"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:318:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"GET" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:320:    if (([URLString.lowercaseString rangeOfString:@"locks/firmware"].location != NSNotFound) || ([URLString.lowercaseString rangeOfString:@"firmware/arm"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:322:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/octet-stream"}];
AugustAPI/august-api/AGClient.m:324:    else if ([URLString.lowercaseString rangeOfString:@"firmware/ti"].location != NSNotFound) {
AugustAPI/august-api/AGClient.m:326:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/x-gzip"}];
AugustAPI/august-api/AGClient.m:362:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:377:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:URLString parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:378:    [request setValue:nil forHTTPHeaderField:@"accept-version"];
AugustAPI/august-api/AGClient.m:389:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:402:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:417:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:436:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"DELETE" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:452:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PATCH" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:461:    [self uploadFileWithType:@"POST" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
AugustAPI/august-api/AGClient.m:468:    [self uploadFileWithType:@"PUT" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
AugustAPI/august-api/AGClient.m:480:    [request setValue:mimeType forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/AGClient.m:481:    [request setValue:@"" forHTTPHeaderField:@"Accept-Encoding"];
AugustAPI/august-api/AGClient.m:487:    if ([path rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) {
AugustAPI/august-api/AGClient.m:488:        return [NSString stringWithFormat:@"%@%@clientSerial=%@", path,
AugustAPI/august-api/AGClient.m:489:                [path rangeOfString:@"?"].length > 0 ? @"&" : @"?", clientSerial];
AugustAPI/august-api/AGClient.m:497:    NSUInteger location = [path rangeOfString:@"?clientSerial="].location;
AugustAPI/august-api/AGClient.m:507:    [[AGClient sharedClient] postPath:@"/logrequesttime" parameters:userInfo augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGClient.m:521:    [[NSUserDefaults standardUserDefaults] setObject:@"1" forKey:@"GotAccessTokenAfterInstall"];
AugustAPI/august-api/AGClient.m:523:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGClient.m:524:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGClient.m:538:    NSUInteger ampIndex = [stringToDecode rangeOfString:@"&" options:NSLiteralSearch].location;
AugustAPI/august-api/AGClient.m:552:    NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];
AugustAPI/august-api/AGClient.m:557:        if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {
AugustAPI/august-api/AGClient.m:564:        if ([scanner scanString:@"&amp;" intoString:NULL])
AugustAPI/august-api/AGClient.m:565:            [result appendString:@"&"];
AugustAPI/august-api/AGClient.m:566:        else if ([scanner scanString:@"&apos;" intoString:NULL])
AugustAPI/august-api/AGClient.m:567:            [result appendString:@"'"];
AugustAPI/august-api/AGClient.m:568:        else if ([scanner scanString:@"&quot;" intoString:NULL])
AugustAPI/august-api/AGClient.m:569:            [result appendString:@"\""];
AugustAPI/august-api/AGClient.m:570:        else if ([scanner scanString:@"&lt;" intoString:NULL])
AugustAPI/august-api/AGClient.m:571:            [result appendString:@"<"];
AugustAPI/august-api/AGClient.m:572:        else if ([scanner scanString:@"&gt;" intoString:NULL])
AugustAPI/august-api/AGClient.m:573:            [result appendString:@">"];
AugustAPI/august-api/AGClient.m:574:        else if ([scanner scanString:@"&#" intoString:NULL]) {
AugustAPI/august-api/AGClient.m:577:            NSString *xForHex = @"";
AugustAPI/august-api/AGClient.m:580:            if ([scanner scanString:@"x" intoString:&xForHex]) {
AugustAPI/august-api/AGClient.m:588:                [result appendFormat:@"%C", (unichar)charCode];
AugustAPI/august-api/AGClient.m:590:                [scanner scanString:@";" intoString:NULL];
AugustAPI/august-api/AGClient.m:593:                NSString *unknownEntity = @"";
AugustAPI/august-api/AGClient.m:598:                [result appendFormat:@"&#%@%@", xForHex, unknownEntity];
AugustAPI/august-api/AGClient.m:600:                //[scanner scanUpToString:@";" intoString:&unknownEntity];
AugustAPI/august-api/AGClient.m:601:                //[result appendFormat:@"&#%@%@;", xForHex, unknownEntity];
AugustAPI/august-api/AGClient.m:602:                NSLog(@"Expected numeric character entity but got &#%@%@;", xForHex, unknownEntity);
AugustAPI/august-api/AGClient.m:610:            [scanner scanString:@"&" intoString:&amp];  //an isolated & symbol
AugustAPI/august-api/AGClient.m:614:             NSString *unknownEntity = @"";
AugustAPI/august-api/AGClient.m:615:             [scanner scanUpToString:@";" intoString:&unknownEntity];
AugustAPI/august-api/AGClient.m:616:             NSString *semicolon = @"";
AugustAPI/august-api/AGClient.m:617:             [scanner scanString:@";" intoString:&semicolon];
AugustAPI/august-api/AGClient.m:618:             [result appendFormat:@"%@%@", unknownEntity, semicolon];
AugustAPI/august-api/AGClient.m:619:             NSLog(@"Unsupported XML character entity %@%@", unknownEntity, semicolon);
AugustAPI/august-api/AGClient.m:632:    encodedString = [encodedString stringByReplacingOccurrencesOfString:@"+" withString:@"%2B"];
AugustAPI/august-api/AGClient.m:638:    NSMutableDictionary *requestURLDataTypesDict = [[NSMutableDictionary alloc] initWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"]];
AugustAPI/august-api/AGClient.m:640:    [[NSUserDefaults standardUserDefaults] setObject:requestURLDataTypesDict forKey:@"requestURLDataTypes"];
AugustAPI/august-api/AGClient.m:645:    NSDictionary *requestURLDataTypesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"];
AugustAPI/august-api/AGClient.m:667:    NSArray *cachedNetworkObjectKeys = [[NSUserDefaults standardUserDefaults] objectForKey:@"CachedNetworkObjectKeys"];
AugustAPI/august-api/AGClient.m:679:    NSString *agNetworkCacheFolder = [documentsDirectory stringByAppendingPathComponent:@"AGResponseCache"];
AugustAPI/august-api/AGClient.m:685:    return (([requestURL rangeOfString:@"nest"].location != NSNotFound) || ([requestURL rangeOfString:@"temperature"].location != NSNotFound) || ([requestURL rangeOfString:@"airbnb"].location != NSNotFound));
AugustAPI/august-api/AGClient.m:696:    return @[@"logrequesttime", @"clientlogdata", @"lockoperatedata", @"/log", @"/session"];
AugustAPI/august-api/AGClient.m:709:    [self logRequest:request logType:@"LOG REQUEST"];
AugustAPI/august-api/AGClient.m:719:    if (([[request.allHTTPHeaderFields objectForKey:@"Content-Type"] rangeOfString:@"application/json"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:720:        AGDiaryDebug(@"NetworkRequest", @"Sending API request: %@", [self logDictionaryForRequest:request logType:logType]);
AugustAPI/august-api/AGClient.m:726:        [logDictionary setObject:@"<data>" forKey:@"Body"];
AugustAPI/august-api/AGClient.m:727:        AGDiaryDebug(@"NetworkRequest", @"Sending API request: %@", logDictionary);
AugustAPI/august-api/AGClient.m:735:                                                                                        @"Type": type,
AugustAPI/august-api/AGClient.m:736:                                                                                        @"Request": request.URL.absoluteString
AugustAPI/august-api/AGClient.m:740:        [logEntryDict setObject:[self.logCleaner cleanedJSON:request.allHTTPHeaderFields] forKey:@"Headers"];
AugustAPI/august-api/AGClient.m:745:            [logEntryDict setObject:cleanedJSON forKey:@"Body"];
AugustAPI/august-api/AGClient.m:753:    [self logResponse:response responseBody:body request:request error:error logType:@"LOG RESPONSE"];
AugustAPI/august-api/AGClient.m:764:        AGDiaryDebug(@"NetworkErrorResponse", @"Got API response: %@", [self logDictionaryForResponse:response responseBody:body request:request error:error logType:logType]);
AugustAPI/august-api/AGClient.m:766:        AGDiaryDebug(@"NetworkSuccessResponse", @"Got API response: %@", [self logDictionaryForResponse:response responseBody:body request:request error:error logType:logType]);
AugustAPI/august-api/AGClient.m:781:                                                                                        @"Type": type,
AugustAPI/august-api/AGClient.m:782:                                                                                        @"Request": request.URL.absoluteString
AugustAPI/august-api/AGClient.m:785:        [logEntryDict setObject:[NSString stringWithFormat:@"%ld", (long)[response statusCode]] forKey:@"Response"];
AugustAPI/august-api/AGClient.m:788:        [logEntryDict setObject:[self.logCleaner cleanedJSON:response.allHeaderFields] forKey:@"Headers"];
AugustAPI/august-api/AGClient.m:791:        [logEntryDict setObject:cleanedJSON forKey:@"Body"];
AugustAPI/august-api/AGClient.m:794:        [logEntryDict setObject:error.localizedDescription forKey:@"Error"];
AugustAPI/august-api/AGAPIUtilityTests.m:32:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"D2GT00000F"] isEqualToString:@"2.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:33:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"L3FSQ0007D"] isEqualToString:@"3.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:34:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"X12FP00001A"] isEqualToString:@"12.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:37:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"abc123"] isEqualToString:@"0.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:38:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"D1"] isEqualToString:@"0.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:39:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"DD12GT0000F"] isEqualToString:@"0.0.0"]);//Too many D's at front
AugustAPI/august-api/AGAPIUtilityTests.m:40:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@" D12GT0000F"] isEqualToString:@"0.0.0"]);//Prefixed by a space
AugustAPI/august-api/AGPartner.m:18:        self.serverId = dict[@"_id"];
AugustAPI/august-api/AGPartner.m:19:        self.name = dict[@"name"];
AugustAPI/august-api/AGPartner.m:20:        self.heroImageURL = dict[@"heroImageURL"];
AugustAPI/august-api/AGPartner.m:21:        self.partnerURL = dict[@"partnerURL"];
AugustAPI/august-api/AGPartner.m:22:        self.logoURL = dict[@"logoURL"];
AugustAPI/august-api/AGPartner.m:23:        self.wordmarkURL = dict[@"wordmarkURL"];
AugustAPI/august-api/AGPartner.m:24:        self.partnerTagline = dict[@"partnerTagline"];
AugustAPI/august-api/AGPartner.m:25:        self.jointTagline = dict[@"jointTagline"];
AugustAPI/august-api/AGPartner.m:26:        self.partnerDescription = dict[@"partnerDescription"];
AugustAPI/august-api/AGPartner.m:27:        self.jointDescription = dict[@"jointDescription"];
AugustAPI/august-api/AGPartner.m:28:        self.promotion = dict[@"promotion"];
AugustAPI/august-api/AGPartner.m:29:        self.locations = dict[@"locations"];
AugustAPI/august-api/AGPartner.m:30:        self.type = dict[@"type"];
AugustAPI/august-api/AGLockServerStatus.m:19:    NSString *status = (NSString *)dictionary[@"status"];
AugustAPI/august-api/AGLockServerStatus.m:20:    NSString *lastUpdatedAt = (NSString *)dictionary[@"dateTime"];
AugustAPI/august-api/AGLockServerStatus.m:21:    if ([status isEqualToString:@"locked"]) {
AugustAPI/august-api/AGLockServerStatus.m:23:    } else if ([status isEqualToString:@"unlocked"]) {
AugustAPI/august-api/AGLockServerStatus.m:28:    if ((lastUpdatedAt != nil) && (![lastUpdatedAt isEqualToString:@""])) {
AugustAPI/august-api/AGNestCamera.m:14:    [[AGClient sharedClient] getPath:@"nest/cameras" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGNestCamera.m:39:        nestCamera.name = [nestCameraDictionary objectForKey:@"name"];
AugustAPI/august-api/AGNestCamera.m:40:        nestCamera.nestDeviceID = [nestCameraDictionary objectForKey:@"device_id"];
AugustAPI/august-api/AGNestCamera.m:41:        nestCamera.nestStructureID = [nestCameraDictionary objectForKey:@"structure_id"];
AugustAPI/august-api/AGNestCamera.m:42:        nestCamera.nameLong = [nestCameraDictionary objectForKey:@"name_long"];
AugustAPI/august-api/AGNestCamera.m:43:        nestCamera.webURL = [nestCameraDictionary objectForKey:@"web_url"];
AugustAPI/august-api/AGNestCamera.m:44:        nestCamera.appURL = [nestCameraDictionary objectForKey:@"app_url"];
AugustAPI/august-api/AGNestCamera.m:52:    [[AGClient sharedClient] postPath:@"nest/camera" parameters:self.nestResponseData augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGNestCamera.m:54:            self.objectId = [responseObject objectForKey:@"CameraID"];
AugustAPI/august-api/NSString+HTMLEscape.m:15:    [escapedString replaceOccurrencesOfString:@"&amp;"  withString:@"&"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:16:    [escapedString replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:17:    [escapedString replaceOccurrencesOfString:@"&#x27;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:18:    [escapedString replaceOccurrencesOfString:@"&#39;"  withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:19:    [escapedString replaceOccurrencesOfString:@"&#x92;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:20:    [escapedString replaceOccurrencesOfString:@"&#x96;" withString:@"-"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:21:    [escapedString replaceOccurrencesOfString:@"&gt;"   withString:@">"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:22:    [escapedString replaceOccurrencesOfString:@"&lt;"   withString:@"<"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/AGUser.m:9:static NSString* kAGDiaryCategory = @"UserModel";
AugustAPI/august-api/AGUser.m:26:		return [NSString stringWithFormat:@"%@ %@", self.firstName , self.lastName];
AugustAPI/august-api/AGUser.m:43:		return [NSString stringWithFormat:@"%@", self.email];
AugustAPI/august-api/AGUser.m:50:    if ([self.type.lowercaseString isEqualToString:@"superuser"]) {
AugustAPI/august-api/AGUser.m:51:        return @"Owner";
AugustAPI/august-api/AGUser.m:53:    else if ([self.type.lowercaseString isEqualToString:@"manager"]) {
AugustAPI/august-api/AGUser.m:54:        return @"Host";
AugustAPI/august-api/AGUser.m:56:    else if ([self.type.lowercaseString isEqualToString:@"limited"] || [self.type.lowercaseString isEqualToString:@"user"]) {
AugustAPI/august-api/AGUser.m:57:        return @"Guest";
AugustAPI/august-api/AGUser.m:60:    return @"";
AugustAPI/august-api/AGUser.m:65:	NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:92:	user.username = dictionary[@"UserID"];
AugustAPI/august-api/AGUser.m:93:	user.password = dictionary[@"UserPassword"];
AugustAPI/august-api/AGUser.m:103:	NSString * path = [@"users/" stringByAppendingString:userId];
AugustAPI/august-api/AGUser.m:144:        [parameters setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:147:        [parameters setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:150:        [parameters setObject:email forKey:@"Email"];
AugustAPI/august-api/AGUser.m:153:        [parameters setObject:phoneNumber forKey:@"PhoneNo"];
AugustAPI/august-api/AGUser.m:156:        [parameters setObject:password forKey:@"UserPassword"];
AugustAPI/august-api/AGUser.m:159:	NSString * path = [NSString stringWithFormat:@"users"];
AugustAPI/august-api/AGUser.m:203:	NSString * path = @"users/me" ;
AugustAPI/august-api/AGUser.m:248:    NSString * gotAccessTokenAfterInstall = [[NSUserDefaults standardUserDefaults] objectForKey:@"GotAccessTokenAfterInstall"];
AugustAPI/august-api/AGUser.m:255:    NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
AugustAPI/august-api/AGUser.m:263:        AGDiaryError(@"AuthError", @"Initiate access token error: %@, localizedDescription: %@", error, error.localizedDescription);
AugustAPI/august-api/AGUser.m:275:            NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
AugustAPI/august-api/AGUser.m:276:            AGDiaryInfo(@"AuthTest", @"Got accessToken:%@ from SAMKeychain, kSezam:%@, account:%@", kAccessToken, kSezam, @"AugustAccessToken");
AugustAPI/august-api/AGUser.m:279:                AGDiaryInfo(@"AuthSuccess", @"Available access token");
AugustAPI/august-api/AGUser.m:284:                user.objectId = @"me";
AugustAPI/august-api/AGUser.m:292:                    NSString *lastLoggedOutUserPhoneNumber = [[NSUserDefaults standardUserDefaults] objectForKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:295:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:296:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:297:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:300:                    [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:user];
AugustAPI/august-api/AGUser.m:306:                AGDiaryError(@"AuthError", @"Session token error: %@, localizedDescription: %@", error, error.localizedDescription);
AugustAPI/august-api/AGUser.m:320:	NSString * path = @"apns/devtoken";
AugustAPI/august-api/AGUser.m:323:                                 @"apnstoken": token,
AugustAPI/august-api/AGUser.m:324:                                 @"deviceID":deviceID
AugustAPI/august-api/AGUser.m:335:    NSString * path = [NSString stringWithFormat:@"users/%@/image", userId];
AugustAPI/august-api/AGUser.m:339:    [[AGClient sharedClient] postFile:path fileData:imageData mimeType:@"image/jpeg" augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:353:    NSString * path = [NSString stringWithFormat:@"users/%@", phoneNumber];
AugustAPI/august-api/AGUser.m:464:                                        //  @"FirstName":self.email,
AugustAPI/august-api/AGUser.m:465:                                        //  @"LastName":self.email,
AugustAPI/august-api/AGUser.m:466:                                        //  @"MacAddress":self.email,
AugustAPI/august-api/AGUser.m:467:                                        //  @"PhoneNo":self.email,
AugustAPI/august-api/AGUser.m:468:                                        //  @"Type":self.email,
AugustAPI/august-api/AGUser.m:477:	[[AGClient sharedClient] postPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:529:        [paramsDict setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:532:        [paramsDict setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:535:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:538:	[[AGClient sharedClient] postPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:556:        [paramsDict setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:559:        [paramsDict setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:562:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:565:	[[AGClient sharedClient] putPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:586:    [[AGClient sharedClient] getPath:@"users" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:589:            if ([responseObject objectForKey:@"exists"] != nil) {
AugustAPI/august-api/AGUser.m:590:                exists = [[responseObject objectForKey:@"exists"] boolValue];
AugustAPI/august-api/AGUser.m:610:        paramsDict = @{@"value":[email lowercaseString]};
AugustAPI/august-api/AGUser.m:613:	[[AGClient sharedClient] postPath:@"validation/email" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:629:                                        @"code":code
AugustAPI/august-api/AGUser.m:633:        [paramsDict setObject:[email lowercaseString]  forKey:@"email"];
AugustAPI/august-api/AGUser.m:636:	[[AGClient sharedClient] postPath:@"validate/email" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:654:        paramsDict = @{@"value":phone};
AugustAPI/august-api/AGUser.m:657:	[[AGClient sharedClient] postPath:@"validation/phone" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:673:                                 @"code":code
AugustAPI/august-api/AGUser.m:677:        [paramsDict setObject:phone forKey:@"phone"];
AugustAPI/august-api/AGUser.m:680:	[[AGClient sharedClient] postPath:@"validate/phone" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:696:    NSMutableDictionary *paramsDict = @{@"installId":installToken
AugustAPI/august-api/AGUser.m:700:        [paramsDict setObject:identifier forKey:@"identifier"];
AugustAPI/august-api/AGUser.m:703:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:706:    [[AGClient sharedClient] postPath:@"session" parameters:paramsDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:721:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"augustappversionok/ios/%@", version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:724:                NSString *message = [responseObject objectForKey:@"message"];
AugustAPI/august-api/AGUser.m:772://		NSLog(@"Password not found");
AugustAPI/august-api/AGUser.m:774://		NSLog(@"Some other error occurred: %@", error);
AugustAPI/august-api/AGUser.m:825:	[[AGClient sharedClient] getPath:@"session" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:867:            //			NSLog(@"Password not found");
AugustAPI/august-api/AGUser.m:870:                AGDiaryError(@"KeychainError", @"Error = %@", error);
AugustAPI/august-api/AGUser.m:924:        id account = [accountDict objectForKey:@"acct"];
AugustAPI/august-api/AGUser.m:926:        if (([[account class] isSubclassOfClass:[NSString class]]) && (![account isEqualToString:@"AugustInstallToken"])) {
AugustAPI/august-api/AGUser.m:932:    NSString *apiBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:935:    NSDictionary *autoUnlockRegions = [[NSUserDefaults standardUserDefaults] objectForKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:936:    NSDictionary *exitRegionLockEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:937:    BOOL doDisableOTA = [[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"];
AugustAPI/august-api/AGUser.m:938:    BOOL doDebugAddLock =  [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
AugustAPI/august-api/AGUser.m:939:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGUser.m:944:    if(![[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] containsObject:@"PairingEnabled"]){
AugustAPI/august-api/AGUser.m:946:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"PairingEnabled"];
AugustAPI/august-api/AGUser.m:950:        [[NSUserDefaults standardUserDefaults] setObject:apiBaseURL forKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:952:        NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
AugustAPI/august-api/AGUser.m:953:        [crossProcessDefaults setObject:apiBaseURL forKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:959:    [[NSUserDefaults standardUserDefaults] setObject:autoUnlockRegions forKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:961:    [[NSUserDefaults standardUserDefaults] setObject:exitRegionLockEventDetail forKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:962:    [[NSUserDefaults standardUserDefaults] setBool:doDisableOTA forKey:@"DisableOTA"];
AugustAPI/august-api/AGUser.m:963:    [[NSUserDefaults standardUserDefaults] setBool:doDebugAddLock forKey:@"DebugAddLock"];
AugustAPI/august-api/AGUser.m:964:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGUser.m:967:        [[NSUserDefaults standardUserDefaults] setObject:[AGUser currentUser].phoneNumber forKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:1050:            if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGUser.m:1052:            }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGUser.m:1071:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"session/%@", identifier] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1083:    NSString *installTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustInstallToken" error:nil];
AugustAPI/august-api/AGUser.m:1086:        [SAMKeychain setPassword:installTokenStr forService:kSezam account:@"AugustInstallToken" error:nil];
AugustAPI/august-api/AGUser.m:1093:    [SAMKeychain deletePasswordForService:kSezam account:@"AugustInstallToken"];
AugustAPI/august-api/AGUser.m:1097:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:1101:    NSArray *accessTokenChunks = [accessTokenStr componentsSeparatedByString: @"."];
AugustAPI/august-api/AGUser.m:1106:    NSString *paddingEqualsStr = @"";
AugustAPI/august-api/AGUser.m:1109:            paddingEqualsStr = @"";
AugustAPI/august-api/AGUser.m:1112:            paddingEqualsStr = @"=";
AugustAPI/august-api/AGUser.m:1115:            paddingEqualsStr = @"==";
AugustAPI/august-api/AGUser.m:1118:            paddingEqualsStr = @"===";
AugustAPI/august-api/AGUser.m:1124:    NSString *accessTokenMeatStrWithPadding = [NSString stringWithFormat:@"%@%@", accessTokenMeatStr, paddingEqualsStr];
AugustAPI/august-api/AGUser.m:1137:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:1148:        NSNumber *isPhoneVerified = [accessTokenDict objectForKey:@"vPhone"];
AugustAPI/august-api/AGUser.m:1159:        NSNumber *isEmailVerified = [accessTokenDict objectForKey:@"vEmail"];
AugustAPI/august-api/AGUser.m:1170:        NSNumber *isPasswordVerified = [accessTokenDict objectForKey:@"vPassword"];
AugustAPI/august-api/AGUser.m:1181:        NSNumber *isInstallIdVerified = [accessTokenDict objectForKey:@"vInstallId"];
AugustAPI/august-api/AGUser.m:1192:        NSNumber *isPhonePresent = [accessTokenDict objectForKey:@"hasPhone"];
AugustAPI/august-api/AGUser.m:1203:        NSNumber *isEmailPresent = [accessTokenDict objectForKey:@"hasEmail"];
AugustAPI/august-api/AGUser.m:1214:        NSNumber *isPasswordPresent = [accessTokenDict objectForKey:@"hasPassword"];
AugustAPI/august-api/AGUser.m:1225:        NSNumber *isInstallIdPresent = [accessTokenDict objectForKey:@"hasInstallId"];
AugustAPI/august-api/AGUser.m:1254:    NSString *final = [emailOrPhone stringByReplacingOccurrencesOfString:@"email:" withString:@""];
AugustAPI/august-api/AGUser.m:1255:    final = [final stringByReplacingOccurrencesOfString:@"phone:" withString:@""];
AugustAPI/august-api/AGUser.m:1256:    final = [final stringByReplacingOccurrencesOfString:@"tel:" withString:@""];
AugustAPI/august-api/AGUser.m:1265:    if ([emailOrPhone rangeOfString:@"@"].location == NSNotFound) {
AugustAPI/august-api/AGUser.m:1267:        return [NSString stringWithFormat:@"phone:%@", updatedString];
AugustAPI/august-api/AGUser.m:1271:        return [NSString stringWithFormat:@"email:%@", updatedString];
AugustAPI/august-api/AGUser.m:1284:    [[NSUserDefaults standardUserDefaults] setObject:userID forKey:@"CurrentUserID"];
AugustAPI/august-api/AGUser.m:1289:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentUserID"];
AugustAPI/august-api/AGUser.m:1293:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"nest/authtoken/%@", authToken] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1308:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"nest/authtoken/deleted"] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1323:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"airbnb/authtoken"] parameters:authDict augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1338:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"airbnb"] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1353:    [[AGClient sharedClient] getPath:@"nest/structures" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1368:    [[AGClient sharedClient] getPath:@"apps/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1379:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"apps/%@", appID] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1390:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"appfeatures/ios/%@", [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1405:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"users/me/legal"] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGUser.m:1420:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"users/me/legal"] parameters:@{@"approved":[NSNumber numberWithBool:YES]} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGRule.m:26:    NSRange range = [recurrenceString rangeOfString:@"BYDAY="];
AugustAPI/august-api/AGRule.m:33:    [ruleScanner scanUpToString:@"BYDAY=" intoString:nil];
AugustAPI/august-api/AGRule.m:34:    [ruleScanner scanUpToString:@";" intoString:&dayStr];
AugustAPI/august-api/AGRule.m:35:    dayStr = [dayStr stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
AugustAPI/august-api/AGRule.m:36:    NSArray* daysSplit = [dayStr componentsSeparatedByString: @","];
AugustAPI/august-api/UIDevice+HardwareName.h:9:#define IFPGA_NAMESTRING                @"iFPGA"
AugustAPI/august-api/UIDevice+HardwareName.h:11:#define IPHONE_1G_NAMESTRING            @"iPhone 1"
AugustAPI/august-api/UIDevice+HardwareName.h:12:#define IPHONE_3G_NAMESTRING            @"iPhone 3G"
AugustAPI/august-api/UIDevice+HardwareName.h:13:#define IPHONE_3GS_NAMESTRING           @"iPhone 3GS" 
AugustAPI/august-api/UIDevice+HardwareName.h:14:#define IPHONE_4_NAMESTRING             @"iPhone 4" 
AugustAPI/august-api/UIDevice+HardwareName.h:15:#define IPHONE_4S_NAMESTRING            @"iPhone 4S"
AugustAPI/august-api/UIDevice+HardwareName.h:16:#define IPHONE_5_NAMESTRING             @"iPhone 5"
AugustAPI/august-api/UIDevice+HardwareName.h:17:#define IPHONE_5C_NAMESTRING            @"iPhone 5c"
AugustAPI/august-api/UIDevice+HardwareName.h:18:#define IPHONE_5S_NAMESTRING            @"iPhone 5s"
AugustAPI/august-api/UIDevice+HardwareName.h:19:#define IPHONE_6_NAMESTRING             @"iPhone 6"
AugustAPI/august-api/UIDevice+HardwareName.h:20:#define IPHONE_6PLUS_NAMESTRING         @"iPhone 6 Plus"
AugustAPI/august-api/UIDevice+HardwareName.h:21:#define IPHONE_6S_NAMESTRING            @"iPhone 6s"
AugustAPI/august-api/UIDevice+HardwareName.h:22:#define IPHONE_6SPLUS_NAMESTRING        @"iPhone 6s Plus"
AugustAPI/august-api/UIDevice+HardwareName.h:23:#define IPHONE_SE_NAMESTRING            @"iPhone SE"
AugustAPI/august-api/UIDevice+HardwareName.h:24:#define IPHONE_7_NAMESTRING             @"iPhone 7"
AugustAPI/august-api/UIDevice+HardwareName.h:25:#define IPHONE_7PLUS_NAMESTRING         @"iPhone 7 Plus"
AugustAPI/august-api/UIDevice+HardwareName.h:26:#define IPHONE_8_NAMESTRING             @"iPhone 8"
AugustAPI/august-api/UIDevice+HardwareName.h:27:#define IPHONE_8PLUS_NAMESTRING         @"iPhone 8 Plus"
AugustAPI/august-api/UIDevice+HardwareName.h:28:#define IPHONE_X_NAMESTRING             @"iPhone X"
AugustAPI/august-api/UIDevice+HardwareName.h:30:#define IPHONE_UNKNOWN_NAMESTRING       @"Unknown iPhone"
AugustAPI/august-api/UIDevice+HardwareName.h:32:#define IPOD_1G_NAMESTRING              @"iPod touch 1G"
AugustAPI/august-api/UIDevice+HardwareName.h:33:#define IPOD_2G_NAMESTRING              @"iPod touch 2G"
AugustAPI/august-api/UIDevice+HardwareName.h:34:#define IPOD_3G_NAMESTRING              @"iPod touch 3G"
AugustAPI/august-api/UIDevice+HardwareName.h:35:#define IPOD_4G_NAMESTRING              @"iPod touch 4G"
AugustAPI/august-api/UIDevice+HardwareName.h:36:#define IPOD_5G_NAMESTRING              @"iPod touch 5G"
AugustAPI/august-api/UIDevice+HardwareName.h:37:#define IPOD_6G_NAMESTRING              @"iPod touch 6G"
AugustAPI/august-api/UIDevice+HardwareName.h:38:#define IPOD_UNKNOWN_NAMESTRING         @"Unknown iPod"
AugustAPI/august-api/UIDevice+HardwareName.h:40:#define IPAD_1G_NAMESTRING              @"iPad 1G"
AugustAPI/august-api/UIDevice+HardwareName.h:41:#define IPAD_2G_NAMESTRING              @"iPad 2"
AugustAPI/august-api/UIDevice+HardwareName.h:42:#define IPAD_3G_NAMESTRING              @"iPad 3"
AugustAPI/august-api/UIDevice+HardwareName.h:43:#define IPAD_Air_NAMESTRING             @"iPad Air"
AugustAPI/august-api/UIDevice+HardwareName.h:44:#define IPAD_Air2_NAMESTRING            @"iPad Air 2"
AugustAPI/august-api/UIDevice+HardwareName.h:45:#define IPAD_UNKNOWN_NAMESTRING         @"Unknown iPad"
AugustAPI/august-api/UIDevice+HardwareName.h:47:#define IPAD_MINI_1G_NAMESTRING         @"iPad mini 1G"
AugustAPI/august-api/UIDevice+HardwareName.h:48:#define IPAD_MINI_2G_NAMESTRING         @"iPad mini 2G"
AugustAPI/august-api/UIDevice+HardwareName.h:49:#define IPAD_MINI_3G_NAMESTRING         @"iPad mini 3G"
AugustAPI/august-api/UIDevice+HardwareName.h:50:#define IPAD_MINI_4G_NAMESTRING         @"iPad mini 4G"
AugustAPI/august-api/UIDevice+HardwareName.h:51:#define IPAD_MINI_UNKNOWN_NAMESTRING    @"Unknown iPad Mini"
AugustAPI/august-api/UIDevice+HardwareName.h:53:#define IPAD_PRO_1G_NAMESTRING          @"iPad Pro 1G"
AugustAPI/august-api/UIDevice+HardwareName.h:54:#define IPAD_PRO_UNKNOWN_NAMESTRING     @"Unknown iPad Pro"
AugustAPI/august-api/UIDevice+HardwareName.h:56:#define APPLETV_2G_NAMESTRING           @"Apple TV 2G"
AugustAPI/august-api/UIDevice+HardwareName.h:57:#define APPLETV_3G_NAMESTRING           @"Apple TV 3G"
AugustAPI/august-api/UIDevice+HardwareName.h:58:#define APPLETV_4G_NAMESTRING           @"Apple TV 4G"
AugustAPI/august-api/UIDevice+HardwareName.h:59:#define APPLETV_UNKNOWN_NAMESTRING      @"Unknown Apple TV"
AugustAPI/august-api/UIDevice+HardwareName.h:61:#define IOS_FAMILY_UNKNOWN_DEVICE       @"Unknown iOS device"
AugustAPI/august-api/UIDevice+HardwareName.h:63:#define SIMULATOR_NAMESTRING            @"iPhone Simulator"
AugustAPI/august-api/UIDevice+HardwareName.h:64:#define SIMULATOR_IPHONE_NAMESTRING     @"iPhone Simulator"
AugustAPI/august-api/UIDevice+HardwareName.h:65:#define SIMULATOR_IPAD_NAMESTRING       @"iPad Simulator"
AugustAPI/august-api/UIDevice+HardwareName.h:66:#define SIMULATOR_APPLETV_NAMESTRING    @"Apple TV Simulator" // :)
AugustAPI/august-api/AGBridge.m:13:static NSString* kAGDiaryCategory = @"BridgeSetup";
AugustAPI/august-api/AGBridge.m:18:NSString* const kAGBridgeModelVenus = @"august-connect";
AugustAPI/august-api/AGBridge.m:19:NSString* const kAGBridgeModelLogitechHarmony = @"logitech-harmony-hub";
AugustAPI/august-api/AGBridge.m:20:NSString* const kAGBridgeNotificationTypeSystemString = @"system";
AugustAPI/august-api/AGBridge.m:21:NSString* const kAGBridgeNotificationChannelPushString = @"push";
AugustAPI/august-api/AGBridge.m:22:NSString* const kAGBridgeNotificationChannelEmailString = @"email";
AugustAPI/august-api/AGBridge.m:89:    if ([bridgeStatus isEqual:@"online"]) {
AugustAPI/august-api/AGBridge.m:91:    }else if ([bridgeStatus isEqual:@"offline"]) {
AugustAPI/august-api/AGBridge.m:109:        AGDiaryError(@"BridgeIdIsNil", @"Creating/updating bridge with bridgeId=nil.  This is not allowed - you will not be able to update/delete the bridge");
AugustAPI/august-api/AGBridge.m:123:                                         userInfo:@{@"mfgBridgeId":@"mfgBridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:129:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:136:                                         userInfo:@{@"bridgeModel":@"bridgeModel cannot be nil"}];
AugustAPI/august-api/AGBridge.m:149:    [[AGClient sharedClient] postPath:@"bridges" parameters:parameters
AugustAPI/august-api/AGBridge.m:159:                    bridge.objectId = [responseObject valueForKey:@"bridgeID"];
AugustAPI/august-api/AGBridge.m:185:    [[AGClient sharedClient] getPath:@"users/bridges/mine" parameters:nil
AugustAPI/august-api/AGBridge.m:201:                     NSArray *lockIds = (NSArray *)[bridgeDictionary objectForKey:@"locks"];
AugustAPI/august-api/AGBridge.m:238:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:244:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGBridge.m:272:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:278:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGBridge.m:306:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:314:    NSString *type = typeAndChannelDictionary[@"type"];
AugustAPI/august-api/AGBridge.m:315:    //NSString *channel = typeAndChannelDictionary[@"channel"];
AugustAPI/august-api/AGBridge.m:318:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
AugustAPI/august-api/AGBridge.m:348:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:356:    NSString *type = typeAndChannelDictionary[@"type"];
AugustAPI/august-api/AGBridge.m:357:    //NSString *channel = typeAndChannelDictionary[@"channel"];
AugustAPI/august-api/AGBridge.m:360:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
AugustAPI/august-api/AGBridge.m:405:    NSDictionary *typeAndChannelDictionary = [[NSDictionary alloc] initWithObjectsAndKeys:type, @"type", channel, @"channel",nil];
AugustAPI/august-api/AGBridge.m:420:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:426:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications", self.objectId];
AugustAPI/august-api/ISO8601DateFormatter.h:12: *The loose parser will return an NSDate for this string: @" \t\r\n\f\t  2006-03-02!!!"
AugustAPI/august-api/AGLock.m:19:static NSString* kAGDiaryCategory = @"AGLock";
AugustAPI/august-api/AGLock.m:59:    NSDictionary *parameters = @{@"LockName": name};
AugustAPI/august-api/AGLock.m:61:    NSString *path = [NSString stringWithFormat:@"locks/acquire/%@/%@/%@", lockID, houseID, code];
AugustAPI/august-api/AGLock.m:95:                                 kLockTypeKey:@"1",
AugustAPI/august-api/AGLock.m:101:	NSString * path = [@"locks/" stringByAppendingString:houseID];
AugustAPI/august-api/AGLock.m:104:		//DLog(@"create lock %@", responseObject.description);
AugustAPI/august-api/AGLock.m:147:            NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
AugustAPI/august-api/AGLock.m:151:            [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
AugustAPI/august-api/AGLock.m:153:            NSString* updatedDateString = [NSString stringWithFormat:@"%@",responseObject[kUpdatedKey]];
AugustAPI/august-api/AGLock.m:164:            //DLog(@" fail %@", error.description);
AugustAPI/august-api/AGLock.m:191:    [[AGClient sharedClient] getPath:[NSString stringWithFormat: @"locks/%@/status", self.objectId] parameters:nil
AugustAPI/august-api/AGLock.m:205://[[AGClient sharedClient] postPath:@"add_user" parameters:paramsDict success:^(AFHTTPRequestOperation *operation, NSDictionary* responseObject) {
AugustAPI/august-api/AGLock.m:214:    //@"users/:userID/locks"
AugustAPI/august-api/AGLock.m:215:    //	NSString * path = @"users/";
AugustAPI/august-api/AGLock.m:217:    //	//path = [path stringByAppendingString:@":"];
AugustAPI/august-api/AGLock.m:219:    //	path = [path stringByAppendingString:@"/locks"];
AugustAPI/august-api/AGLock.m:222:    [[AGClient sharedClient] getPath:@"users/locks/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:224:            //DLog(@"locks %@", responseDictionary.description);
AugustAPI/august-api/AGLock.m:305:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGLock.m:311:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
AugustAPI/august-api/AGLock.m:376:        NSString *identifier = [invitationInfo objectForKey:@"identifier"];
AugustAPI/august-api/AGLock.m:377:        if (([identifier rangeOfString:@"phone:"].location != NSNotFound) || ([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGLock.m:380:        if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGLock.m:383:        NSString *ruleId = [invitationInfo objectForKey:@"rule"];
AugustAPI/august-api/AGLock.m:388:        invitedUser.firstName = [AGClient stringByDecodingXMLEntities:[invitationInfo objectForKey:@"Name"]];
AugustAPI/august-api/AGLock.m:390:        invitedUser.type = [invitationInfo objectForKey:@"type"];
AugustAPI/august-api/AGLock.m:399:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
AugustAPI/august-api/AGLock.m:400:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
AugustAPI/august-api/AGLock.m:414:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
AugustAPI/august-api/AGLock.m:415:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
AugustAPI/august-api/AGLock.m:437:    NSArray *createdArray = [dictionary objectForKey:@"created"];
AugustAPI/august-api/AGLock.m:438:    NSArray *loadedArray = [dictionary objectForKey:@"loaded"];
AugustAPI/august-api/AGLock.m:439:    NSArray *deletedArray = [dictionary objectForKey:@"deleted"];
AugustAPI/august-api/AGLock.m:441:    NSArray *hkCreatedArray = [dictionary objectForKey:@"createdhk"];
AugustAPI/august-api/AGLock.m:442:    NSArray *hkLoadedArray = [dictionary objectForKey:@"loadedhk"];
AugustAPI/august-api/AGLock.m:443:    NSArray *hkDeletedArray = [dictionary objectForKey:@"deletedhk"];
AugustAPI/august-api/AGLock.m:496:        if ([[curLoadedKey objectForKey:@"slot"] isEqual:[newlyLoadedOfflineKey objectForKey:@"slot"]]) {
AugustAPI/august-api/AGLock.m:512:    NSString * path = [NSString stringWithFormat: @"locks/%@/pins", lockId];
AugustAPI/august-api/AGLock.m:553:    NSString * path = [@"locks/" stringByAppendingString:lockId];
AugustAPI/august-api/AGLock.m:607:        self.messagingProtocol = @"pubnub";
AugustAPI/august-api/AGLock.m:612:        self.messagingURL = @"";
AugustAPI/august-api/AGLock.m:756:	NSString * path = [NSString stringWithFormat:@"locks/%@",lockId];
AugustAPI/august-api/AGLock.m:778:	NSString * path = [@"locks/" stringByAppendingString:lockId];
AugustAPI/august-api/AGLock.m:779:	path = [path stringByAppendingString:@"/key"];
AugustAPI/august-api/AGLock.m:870:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@/%@", lockId, userId, type];
AugustAPI/august-api/AGLock.m:908:	NSString * path = [NSString stringWithFormat:@"locks/adduser/%@/%@/%@", lockId, userId, type];
AugustAPI/august-api/AGLock.m:910:    NSDictionary *parameters = @{@"Name":[user displayName]};
AugustAPI/august-api/AGLock.m:959:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@", lockId, userId];
AugustAPI/august-api/AGLock.m:980:    NSString *path = [NSString stringWithFormat:@"locks/log/%@/lockcommand", lockID];
AugustAPI/august-api/AGLock.m:999:	NSString * path = [NSString stringWithFormat:@"/locks/log/before/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
AugustAPI/august-api/AGLock.m:1018:	NSString * path = [NSString stringWithFormat:@"/locks/log/after/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
AugustAPI/august-api/AGLock.m:1036:    NSString *path = [NSString stringWithFormat:@"rules/rulewithuser/%@/%@", lockID, userID];
AugustAPI/august-api/AGLock.m:1040:    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
AugustAPI/august-api/AGLock.m:1044:    [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
AugustAPI/august-api/AGLock.m:1048:                                        @"startTime":[dateFormatter stringFromDate:startTime],
AugustAPI/august-api/AGLock.m:1049:                                        @"endTime":[dateFormatter stringFromDate:endTime],
AugustAPI/august-api/AGLock.m:1050:                                        @"Name":[user displayName]
AugustAPI/august-api/AGLock.m:1053:        [parameters setObject:recurrence forKey:@"recurrence"];
AugustAPI/august-api/AGLock.m:1076:    NSString *path = [NSString stringWithFormat:@"rules/%@/%@", ruleID, userID];
AugustAPI/august-api/AGLock.m:1093:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/lockmessages", lockID] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1108:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
AugustAPI/august-api/AGLock.m:1110:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?",  self.bridge.mfgBridgeId];
AugustAPI/august-api/AGLock.m:1112:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
AugustAPI/august-api/AGLock.m:1116:        endpointString = [NSString stringWithFormat:@"%@%@type=async", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1119:        endpointString = [NSString stringWithFormat:@"%@%@connection=persistent", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1127:                intentString = @"intent=regular";
AugustAPI/august-api/AGLock.m:1130:                intentString = @"intent=wakeup";;
AugustAPI/august-api/AGLock.m:1133:                intentString = @"intent=keepalive";;
AugustAPI/august-api/AGLock.m:1136:                intentString = @"intent=lockstateunknown";
AugustAPI/august-api/AGLock.m:1141:            endpointString = [NSString stringWithFormat:@"%@%@%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", intentString];
AugustAPI/august-api/AGLock.m:1159:                               NSString* lockStatus = [responseDict objectForKey:@"status"];
AugustAPI/august-api/AGLock.m:1174:                                   userInfo = @{@"response":httpResponse};
AugustAPI/august-api/AGLock.m:1188:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
AugustAPI/august-api/AGLock.m:1190:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", self.bridge.mfgBridgeId];
AugustAPI/august-api/AGLock.m:1192:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
AugustAPI/august-api/AGLock.m:1196:        endpointString = [NSString stringWithFormat:@"%@%@state=setup", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1198:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"remoteoperate/%@/%@?sn=%@&v=%@", self.objectId, command, self.bridge.mfgBridgeId, self.bridge.firmwareVersion] parameters:@{} waitTime:90.0
AugustAPI/august-api/AGLock.m:1210:                                         NSString* lockStatus = [responseDict objectForKey:@"status"];
AugustAPI/august-api/AGLock.m:1248:    NSDictionary *parameters = @{@"deviceModel": deviceModel,
AugustAPI/august-api/AGLock.m:1249:                                 @"movedCenter": movedCenter?@"true":@"false",
AugustAPI/august-api/AGLock.m:1250:                                 @"changedRadius": changedRadius?@"true":@"false",
AugustAPI/august-api/AGLock.m:1251:                                 @"newRadius": [NSString stringWithFormat:@"%f", radius],
AugustAPI/august-api/AGLock.m:1252:                                 @"distance": [NSString stringWithFormat:@"%f", distance]};
AugustAPI/august-api/AGLock.m:1253:    NSString *path = [NSString stringWithFormat:@"/locks/geofenceinfo/%@", lockID];
AugustAPI/august-api/AGLock.m:1293:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/firmware/%@", self.objectId, version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1309:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"locks/%@/firmware/%@/%@", self.objectId, chip, version] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1338:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/firmware/keypadcheck", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1341:                NSNumber *resBool = [responseObject objectForKey:@"supported"];
AugustAPI/august-api/AGLock.m:1359:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/keypads/%@/%@/offlinekey", keypadID, self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1377:    NSDictionary *params = @{@"serialNumber":serialNumber, @"lockID":self.objectId, @"supportsEncryption":[NSNumber numberWithBool:true]};
AugustAPI/august-api/AGLock.m:1378:    [[AGClient sharedClient] postPath:@"/keypads" parameters:params augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1381:            block([resultDict objectForKey:@"keypadID"], nil);
AugustAPI/august-api/AGLock.m:1397:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/keypads/%@", self.associatedKeypad.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1418:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/locks/%@/pin", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1434:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/pins/sync", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1452:        returnVal = @"load";
AugustAPI/august-api/AGLock.m:1455:        returnVal = @"delete";
AugustAPI/august-api/AGLock.m:1458:        returnVal = @"disable";
AugustAPI/august-api/AGLock.m:1461:        returnVal = @"enable";
AugustAPI/august-api/AGLock.m:1464:        returnVal = @"UnkownPinState";
AugustAPI/august-api/AGLock.m:1471:    AGDiaryVerbose(@"PinChangeComplete", @"Updating internal state for %@ pin %@ to the lock",[AGLock stringForPinState:action], pinEntry.pinCode);
AugustAPI/august-api/AGLock.m:1499:            AGDiaryInfo(@"PinAddedServer", @"Notified server of %@ pin to the lock",[AGLock stringForPinState:action]);
AugustAPI/august-api/AGLock.m:1501:            AGDiaryInfo(@"ErrorPinAddedServer", @"Error notifying server of %@ pin", [AGLock stringForPinState:action]);
AugustAPI/august-api/AGLock.m:1508:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/locks/%@/pins", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1539:    NSString *stateMessage = @"";
AugustAPI/august-api/AGLock.m:1542:        stateMessage = @"load";
AugustAPI/august-api/AGLock.m:1545:        stateMessage = @"delete";
AugustAPI/august-api/AGLock.m:1548:        stateMessage = @"disable";
AugustAPI/august-api/AGLock.m:1551:        stateMessage = @"enable";
AugustAPI/august-api/AGLock.m:1555:            @"pin": pinCode,
AugustAPI/august-api/AGLock.m:1556:            @"state": stateMessage,
AugustAPI/august-api/AGLock.m:1557:            @"action": (action==AGPinActionIntent)?@"intent":@"commit"} mutableCopy];
AugustAPI/august-api/AGLock.m:1559:        parameters[@"slot"] = slot;
AugustAPI/august-api/AGLock.m:1564:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/%@/users/%@/pin", self.objectId, userID] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1588:    [parameters setObject: firstName?firstName:@"" forKey: @"firstName"];
AugustAPI/august-api/AGLock.m:1589:    [parameters setObject:lastName?lastName:@"" forKey: @"lastName"];
AugustAPI/august-api/AGLock.m:1590:    [parameters setObject:self.objectId forKey: @"lockID"];
AugustAPI/august-api/AGLock.m:1592:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/unverifiedusers/%@", pinUserID]  parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1615:    NSMutableDictionary *parameters = [NSMutableDictionary  dictionaryWithObjectsAndKeys: pinCode, @"pin" ,
AugustAPI/august-api/AGLock.m:1616:                                self.objectId,  @"lockID", nil];
AugustAPI/august-api/AGLock.m:1619:        [parameters setObject: firstName forKey: @"firstName"];
AugustAPI/august-api/AGLock.m:1623:        [parameters setObject:lastName forKey: @"lastName"];
AugustAPI/august-api/AGLock.m:1627:        [parameters setObject:optionalPhonenumber forKey: @"phone"];
AugustAPI/august-api/AGLock.m:1631:    [[AGClient sharedClient] postPath:@"/unverifiedusers" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1650:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"/locks/%@/pin/%@", self.objectId, pinCode] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1665:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"locks/cameras/%@/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1684:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"locks/cameras/%@/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1700:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"locks/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1719:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"locks/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1737:                                                @"mRand1": [NSNumber numberWithUnsignedInt:mRand1],
AugustAPI/august-api/AGLock.m:1738:                                                @"mRand2": [NSNumber numberWithUnsignedInt:mRand2]}];
AugustAPI/august-api/AGLock.m:1740:    NSString *initiateCommEndpoint = [NSString stringWithFormat:@"/locks/initiatecomm/%@", lockID];
AugustAPI/august-api/AGLock.m:1743:        initiateCommEndpoint = [NSString stringWithFormat:@"%@?intent=%@", initiateCommEndpoint, onlineKeyUsageReason];
AugustAPI/august-api/AGLock.m:1761:    NSDictionary *parameters = @{@"LockResponse": lockResponse};
AugustAPI/august-api/AGLock.m:1763:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"/locks/getlockrands/%@", lockID] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1779:    NSString *path = [NSString stringWithFormat:@"/locks/setnotification/%@/%@/%@", lockID, userID, on];
AugustAPI/august-api/AGLock.m:1797:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/%@", lockID, userID];
AugustAPI/august-api/AGLock.m:1811:            NSString *notificationType = [notifDict objectForKey:@"NotificationType"];
AugustAPI/august-api/AGLock.m:1816:            if ([notificationType isEqualToString:@"neither"]) {
AugustAPI/august-api/AGLock.m:1837:    NSString *path = [NSString stringWithFormat:@"/locks/%@/timezone", self.objectId];
AugustAPI/august-api/AGLock.m:1838:    [[AGClient sharedClient] putPath:path parameters:@{@"zone":timeZoneName} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:1856:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/status", lockID];
AugustAPI/august-api/AGLock.m:1873:    NSString *path = [NSString stringWithFormat:@"/private/locks/status/%@", lockID];
AugustAPI/august-api/AGLock.m:1874:    if (([lockStatusDictionary objectForKey:@"status"] == NO) && ([lockStatusDictionary objectForKey:kDoorStateKey] == NO)) {
AugustAPI/august-api/AGLock.m:1878:    if ([lockStatusDictionary objectForKey:@"status"] && [lockStatusDictionary objectForKey:kDoorStateKey]) {
AugustAPI/august-api/AGLock.m:1879:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"], kDoorStateKey: [lockStatusDictionary objectForKey:kDoorStateKey]};
AugustAPI/august-api/AGLock.m:1880:    } else if ([lockStatusDictionary objectForKey:@"status"]) {
AugustAPI/august-api/AGLock.m:1881:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"]};
AugustAPI/august-api/AGLock.m:1901:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/params", lockID];
AugustAPI/august-api/AGLock.m:1918:    NSString *path = [NSString stringWithFormat:@"locks/%@/offlinekeys/%@", lockID, action];
AugustAPI/august-api/AGLock.m:1935:    NSString *path = [NSString stringWithFormat:@"locks/acknowledgeparamupdate/%@", lockID];
AugustAPI/august-api/AGLock.m:1953:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:1974:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:1995:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2016:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2018:    NSDictionary *params = @{@"hostLockInfo": infoDict};
AugustAPI/august-api/AGLock.m:2024:                               AGDiaryDebug(@"postUnityHostInfoError", @"error is %@", [error localizedDescription]);
AugustAPI/august-api/AGLock.m:2039:    return [NSString stringWithFormat:@"AGCurrentUserOfflineKey_%@", lockID];
AugustAPI/august-api/AGLock.m:2044:    return [NSString stringWithFormat:@"AGCurrentUserHomeKitKey_%@", lockID];
AugustAPI/august-api/AGLock.m:2052:    NSMutableDictionary *parameters = @{@"event":event, @"date":dateAsMSFromEpoch, @"LockID":lockID, @"UserID":userID}.mutableCopy;
AugustAPI/august-api/AGLock.m:2055:        [parameters setObject:description forKey:@"description"];
AugustAPI/august-api/AGLock.m:2058:    [[AGClient sharedClient] postPath:@"telemetry/logautounlockaction" parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGLock.m:2075:    NSString *path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2111:             AGDiaryError(@"FailedRefreshLock", @"Failed to refresh lock data.");
AugustAPI/august-api/AGLock.m:2115:                 NSString *path = [NSString stringWithFormat:@"locks/setnotification/%@/%@/%@", self.objectId, type, action];
AugustAPI/august-api/AGLock.m:2152:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
AugustAPI/august-api/AGLock.m:2158:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/manuallock", self.objectId];
AugustAPI/august-api/AGLock.m:2186:                    if ([type isEqualToString:@"both"]) {
AugustAPI/august-api/AGPinCodeInfo.m:11:#define  kInternalCachePinKey  @"_internalCachedPins"
AugustAPI/august-api/AGPinCodeInfo.m:27:        self.created = [self makePinEntryArrayFromArray:[dict objectForKey:@"created"] state: AGPinStateCreated];
AugustAPI/august-api/AGPinCodeInfo.m:28:        self.deleting = [self makePinEntryArrayFromArray:[dict objectForKey:@"deleting"] state: AGPinStateDeleting];
AugustAPI/august-api/AGPinCodeInfo.m:29:        self.disabled = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabled"] state: AGPinStateDisabled];
AugustAPI/august-api/AGPinCodeInfo.m:30:        self.disabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabling"] state: AGPinStateDisabling];
AugustAPI/august-api/AGPinCodeInfo.m:31:        self.enabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"enabling"] state: AGPinStateEnabling];
AugustAPI/august-api/AGPinCodeInfo.m:32:        self.loaded = [self makePinEntryArrayFromArray:[dict objectForKey:@"loaded"] state: AGPinStateLoaded];
AugustAPI/august-api/AGPinCodeInfo.m:80:    if ([invitationPhoneNumber rangeOfString:@"phone:"].location == 0) {
AugustAPI/august-api/AGAPIUtility.m:15:    NSString *modelVersion = @"0";
AugustAPI/august-api/AGAPIUtility.m:19:    NSString *pattern = @"^[A-Za-z]([0-9]+)[A-Za-z]";
AugustAPI/august-api/AGAPIUtility.m:29:    return [NSString stringWithFormat:@"%@.0.0", modelVersion];
AugustAPI/august-api/AGUserPinEntry.m:23:        self.firstName = [dict objectForKey:@"firstName"];
AugustAPI/august-api/AGUserPinEntry.m:24:        self.lastName = [dict objectForKey:@"lastName"];
AugustAPI/august-api/AGUserPinEntry.m:25:        self.pinCode = [dict objectForKey:@"pin"];
AugustAPI/august-api/AGUserPinEntry.m:26:        self.slot = [dict objectForKey:@"slot"];
AugustAPI/august-api/AGUserPinEntry.m:27:        self.userID = [dict objectForKey:@"userID"];
AugustAPI/august-api/AGUserPinEntry.m:28:        self.phoneNumber = [dict objectForKey:@"phone"];
AugustAPI/august-api/AGUserPinEntry.m:29:        NSNumber *vNum = [dict objectForKey:@"unverified"];
AugustAPI/august-api/AGUserPinEntry.m:58:        return @"created";
AugustAPI/august-api/AGUserPinEntry.m:61:        return  @"deleting";
AugustAPI/august-api/AGUserPinEntry.m:64:        return @"disabled";
AugustAPI/august-api/AGUserPinEntry.m:67:        return  @"disabling";
AugustAPI/august-api/AGUserPinEntry.m:70:        return  @"loaded";
AugustAPI/august-api/AGUserPinEntry.m:73:        return @"enabling";
AugustAPI/august-api/AGUserPinEntry.m:75:    return @"undefined";
AugustAPI/august-api/AGUserPinEntry.m:79:    if ([state isEqualToString:@"loaded"]) {
AugustAPI/august-api/AGUserPinEntry.m:82:    if ([state isEqualToString:@"deleting"]) {
AugustAPI/august-api/AGUserPinEntry.m:85:    if ([state isEqualToString:@"created"]) {
AugustAPI/august-api/AGUserPinEntry.m:88:    if ([state isEqualToString:@"enabling"]) {
AugustAPI/august-api/AGUserPinEntry.m:91:    if ([state isEqualToString:@"disabling"]) {
AugustAPI/august-api/AGUserPinEntry.m:94:    if ([state isEqualToString:@"created"]) {
AugustAPI/august-api/AGUserPinEntry.m:101:    return [NSString stringWithFormat:@"pin: %@, slot: %@", _pinCode, _slot];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:20:NSString *const kKibanaLoggingEndpoint = @"https://logger.august.com/";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:45:        [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:47:        NSString *authStr = [NSString stringWithFormat:@"%@:%@", @"august_logger", @"TOqpr'jGl;9|ZVM"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:49:        NSString *authValue = [NSString stringWithFormat:@"Basic %@", [authData base64EncodedStringWithOptions:0]];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:50:        [self.requestSerializer setValue:authValue forHTTPHeaderField:@"Authorization"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:53:        responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"text/plain"]];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:107:    NSString *customBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:108:    if (customBaseURL && ![customBaseURL containsString:@"prod"]) {//Don't log unless pointed at production
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:115:    NSURLRequest *request = [[AGKibanaLoggerSessionManager sharedManager].requestSerializer requestWithMethod:@"POST" URLString:kKibanaLoggingEndpoint parameters:json error:&error];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:120:            AGDiary(AGDiaryLevel_Debug, @"KibanaLogging", @"NetworkError", [NSString stringWithFormat:@"Error while logging event:%@ with error: %@", event, error]);
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:129:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:130:    appVersion = appVersion == nil ? @"not_ios_app" : appVersion;//The version will be nil during unit testing
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:133:    NSString *time =  [NSString stringWithFormat:@"%li", epochMillis];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:141:                                     @"device_model":[[UIDevice currentDevice] platformString],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:142:                                     @"ios_version":[[UIDevice currentDevice] systemVersion],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:143:                                     @"app_version":appVersion,
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:144:                                     @"time":time,
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:145:                                     @"log_level":[self stringForLogLevel:logLevel],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:146:                                     @"session_id":[self loggingSessionID]
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:152:        [mdataJSON setObject:event forKey:@"event"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:156:        [mdataJSON setObject:category forKey:@"category"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:161:        [mdataJSON setObject:hwVersion forKey:@"hw_version"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:165:                              @"type":@"app-ios",
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:166:                              @"mdata1":mdataJSON
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:186:        return @"FATAL";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:188:        return @"ERROR";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:190:        return @"WARN";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:192:        return @"INFO";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:194:        return @"DEBUG";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:200:    NSDate *sessionExpirationDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:201:    NSString *sessionID = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:207:        [[NSUserDefaults standardUserDefaults] setObject:sessionID forKey:@"AGKibanaLoggerSessionID"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:213:        [[NSUserDefaults standardUserDefaults] setObject:nextDate forKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:240:        hwVersion = @"unknown";
AugustAPI/august-api/KibanaLogging/Tests/AGKibanaLoggerTests.m:21:    [[NSUserDefaults standardUserDefaults] setObject:kSezamAPIBaseURLString forKey:@"APIBaseURL"];
AugustAPI/august-api/KibanaLogging/Tests/AGKibanaLoggerTests.m:32:    [logger logEvent:@"test_event" category:@"test_category" data:@{@"test_data":@"the data"}];
AugustAPI/august-api/KibanaLogging/Tests/AGKibanaLoggerTests.m:37:    [logger logEvent:nil category:@"test_category" data:@{@"test_data":@"the data"}];
AugustAPI/august-api/KibanaLogging/Tests/AGKibanaLoggerTests.m:42:    [logger logEvent:@"test_event" category:@"test_category" data:nil];
AugustAPI/august-api/Bluetooth/AGOperationItem.m:90:        NSError *error = [NSError errorWithDomain:@"OperationItem" code:errorID userInfo:[NSDictionary dictionaryWithObject:msg forKey:@"msg"]];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:54:    NSDictionary *headers = [response objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:55:    NSString *command = [headers objectForKey:@"command"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:74:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:87:                    NSDictionary *headers = [queryResponse objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:88:                    NSString *indexStr = [headers objectForKey:@"index"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:92:                    NSDictionary *otaStatusBitmap = [queryResponse objectForKey:@"otaStatusBitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:93:                    NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:126:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:191:        NSDictionary *headers = [response objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:192:        NSString *indexStr = [headers objectForKey:@"index"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:196:        NSDictionary *otaStatusBitmap = [response objectForKey:@"otaStatusBitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:197:        NSArray *bitmap = [otaStatusBitmap objectForKey:@"bitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:198:        NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:303:            NSLog(@"writing bytes at %ld", indexInOverallFileToWrite);
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:325:    if (([self.chip isEqualToString:@"arm"]) || ([self.chip isEqualToString:@"st"])) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:333:    else if ([self.chip isEqualToString:@"ti"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:373:        if ([self.chip isEqualToString:@"st"]) {
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:14:static NSString* kAGDiaryCategory = @"EuropaLockOTA";
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:46:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:54:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:72:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:91:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageStart");
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:102:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageGetProgress response: %d", packet->state);
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:111:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:175:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStagePrepareDownload");
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:186:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageDownload");
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:269:        AGDiaryDebug(@"EuropaOTAStatusResponseOk", @"Status response Ok");
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:275:        AGDiaryError(@"EuropaOTAStatusResponseError", @"Status response Error: %d, currentStage: %d, currentWriteIndex: %d, numberOfBytesToWrite: %d", packet->status, self.currentStage, self.currentWriteIndex, self.numberOfBytesToWrite);
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:282:    AGDiaryError(@"JupiterOTAError", @"Error, aborting");
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:340:    AGDiaryDebug(@"JupiterOTASendCommand", @"Sending Jupiter OTA command: %d", command);
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:376:    NSLog(@"OTA Current Write Index: %lu", (unsigned long)self.currentWriteIndex);
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:377:    NSLog(@"OTA Number of Bytes: %lu", (unsigned long)self.numberOfBytesToWrite);
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:390:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:399:    NSString *newVersion = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)newVersionMajor.bytes, *(uint8_t *)newVersionMinor.bytes, *(uint8_t *)newVersionPatch.bytes];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:16:static NSString* kAGLastOldLockLogVersion = @"1.0.99";      // After this version is the new log format.
AugustAPI/august-api/Bluetooth/BLELockOperation.m:18:static NSString* kAGDiaryCategory = @"Bluetooth";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:20:static NSString* kErrorCategoryLockOperation = @"BLELockOperation";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:22:#define STATUS_LOCK_IN_USE              NSLocalizedString(@"LOCK IN USE", nil)
AugustAPI/august-api/Bluetooth/BLELockOperation.m:23:#define STATUS_AUTHORIZING              NSLocalizedString(@"AUTHORIZING", nil)
AugustAPI/august-api/Bluetooth/BLELockOperation.m:24:#define STATUS_SCANNING                 NSLocalizedString(@"OUT OF RANGE", nil)       // Note this is localized to SCANNING FOR LOCK
AugustAPI/august-api/Bluetooth/BLELockOperation.m:29:#define kAGLockRequestLockItemCommandLabel @"RequestLockLogItemCmd"
AugustAPI/august-api/Bluetooth/BLELockOperation.m:120:    AGDiaryDebug(@"AppResignState", @"state");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:181:    AGDiaryInfo(@"InitEpic", @"Processing %d commands for Epic", [commands count]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:209:                            AGDiaryInfo(@"FinishedEpic", @"Executing last command for epic");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:213:                        AGDiaryInfo(@"FailedEpic", @"Aborted epic and clearing commands");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:225:                            AGDiaryInfo(@"FinishedEpic", @"Executing last command for epic");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:229:                        AGDiaryInfo(@"FailedEpic", @"Aborted epic and clearing commands");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:239:        AGDiaryInfo(@"QueueEpic", @"Queuing %d commands for Epic", [commands count]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:297:                            AGDiaryVerbose(@"PinDeletedOnLock", @"Deleted pin %@ from lock. Notifying server", pinEntry.pinCode);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:300:                            AGDiaryVerbose(@"PinDeleteOnLockFail", @"Error deleting pin %@ from lock.", pinEntry.pinCode);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:312:                            AGDiaryWarn(@"PinDeleteOnLockFail", @"Error deleting pin from lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:359:                            block([NSError errorWithDomain: @"AGCoreBluetooth" code:-1 userInfo:nil]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:367:            block([NSError errorWithDomain: @"AGCoreBluetooth" code:-1 userInfo:nil]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:384:            NSNumber *errorResponse = [responseDict objectForKey:@"error"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:386:                AGDiaryWarn(@"PinAddOnLockFail", @"Error adding pin from lock. Error code from lock: %d", [errorResponse integerValue]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:391:            AGDiaryWarn(@"PinAddOnLockFail", @"Error adding pin to lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:412:    AGDiaryDebug(@"AttachLock", @"About to attach lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:443:            AGDiaryError(@"InteralInconsistencyError", @"BLELock is not connected during attach");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:459:           AGDiaryInfo(@"AttachWhileConnecting", @"Attached to lock while connecting to or authorizing same lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:470:                AGDiaryInfo(@"DoubleAttach", @"Attached to another lock connecting or connected to another lock. Forcing off lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:473:                AGDiaryInfo(@"DoubleAttach", @"Attached to another lock connecting or connected to another lock. Letting lock be.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:495:                AGDiaryInfo(@"NoKeysChanged", @"Keep connected because there are no keys to change.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:501:                AGDiaryInfo(@"ForceDisconnectForKeys", @"Force a lock disconnect so we can reconnect with the online key.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:509:    AGDiaryInfo(@"FindNewLockForConnection", @"Finding new lock for connection");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:516:        AGDiaryError(@"StillConnected", [NSString stringWithFormat:@"Error: Trying to connect to new lock while currentConnectedLockID is %@", self.currentConnectedLockID]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:529:    AGDiaryDebug(@"CleanupPreviousConnection", @"Cleaning up previous connection to prepare for %@", lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:543:                AGDiaryDebug(@"LeaveAuthorizing", @"Leaving other lock because it's AGLockStatusAuthorizing or AGLockStatusConnected");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:548:                AGDiaryDebug(@"ForceOffConnectingLock", @"Delegate is has not connected to lock yet. Give up on this lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:556:                AGDiaryDebug(@"ForceOffOrphanLock", @"Giving up on a scan for a lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:566:                AGDiaryDebug(@"SimpleDisconnectOrphan", @"Doing a disconnect on connected lock. We will reconnect to another lock later.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:578:                     AGDiaryWarn(@"Connecting", @"Disconnect during connecting");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:591:    NSString *statusString = @"Unknown";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:594:            statusString = @"AGLockStatusConnecting";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:597:            statusString = @"AGLockStatusAuthorizing";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:600:            statusString = @"AGLockStatusConnected";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:603:            statusString = @"AGLockStatusSoftScan";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:606:            statusString = @"AGLockStatusUndefined";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:613:    AGDiaryInfo(@"ChangedConnectStatus", @"Status: %@ Lock: %@", statusString, self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:624:            [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:nil]];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:628:            [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsTemporarilyDown userInfo:nil]];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:637:        AGDiaryError(@"MissingLockObect", @"Missing AGLock Object for %@", lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:650:        AGDiaryWarn(@"UnexpectedlyConnected", @"Trying a connection when connected");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:671:    AGDiaryInfo(@"StartScanForLock", @"Starting scan or direct connect for lock %@", lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:703:                [operItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:722:                [item failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected while command queued."];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:787:    AGDiaryDebug(@"StatInfoStart",@"** Printing Attached Locks **");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:791:        AGDiaryDebug(@"StatInfo",@"Lock ID %@ %@ %d delegates", lockID, lockInfo.name,  [delegateSet count]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:793:    AGDiaryDebug(@"StatInfoEnd",@"----");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:801:    AGDiaryInfo(@"RelinquishLock", @"Lock %@", agLock.objectId);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:825:            AGDiaryInfo(@"RelinquishLockTimer", @"Setting 5 second relinquish timer");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:834:            AGDiaryInfo(@"RelinqushDisconnect", @"Checking %@ if matches %@ to force disconnect current lock", agLock.objectId, self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:837:                AGDiaryInfo(@"RelinqushDisconnectConfirmed", @"Decided do disconnect the current lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:869:    AGDiaryInfo(@"CleanupQueue", @"Removing all queued operations for %@", oldLock);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:878:            [self.currentOperationItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:897:            [item failWithError:kLockOperationErrorDisconnectedWhileCommandQueued msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:902:             AGDiaryInfo(@"NotDeletedItem", @"Queued item was already deleted because of an epic or group");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:914:    AGDiaryInfo(@"ForceDisconnect", @"Forcing disconnect of current lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:916:        AGDiaryInfo(@"ForceDisconnect", @"Exiting because Current lock id is nil");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:944:            if (([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedDescending) || ([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedSame)) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:946:                AGDiaryDebug(@"SimulateDisconnect", @"Will call initiate fake Disconnect call to clean up the lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:995:    AGDiaryInfo(@"CommandExecute", @"Executing next command. Queue size %d", [self.queue count]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:998:        AGDiaryInfo(@"NotConnectedExecutingCommand", @"executeNextCommand while not connected");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1004:        AGDiaryDebug(@"QueueNotEmpty", @"Not running next command because another operation active");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1022:        AGDiaryError(@"NotConnectedExecutingCommand", @"BLELock not found for lock ID %@", _currentOperationItem.lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1027:        AGDiaryInfo(@"NotConnectedExecutingCommand", @"BLELock not connected yet for %@", _currentOperationItem.lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1032:        AGDiaryDebug(@"CommandExecute", _currentOperationItem.label);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1039:        AGDiaryDebug(@"CommandExecute", @"Executing set param %@", [self.commandDecoder encodeStringFromParamNumber:_currentOperationItem.paramToGetOrSet]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1049:            AGDiaryError(@"InvalidParam", @"setParam value is improper class type");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1050:            _currentOperationItem.genericResponseBlock(nil, [NSError errorWithDomain:kErrorCategoryLockOperation code:kLockOperationErrorInvalidParam userInfo:[NSDictionary dictionaryWithObject:value forKey:@"badparam"]]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1062:        AGDiaryDebug(@"CommandExecute", @"Executing get param %@", [self.commandDecoder encodeStringFromParamNumber:_currentOperationItem.paramToGetOrSet]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1070:        AGDiaryDebug(@"CommandExecute", @"Executing get status %@", [self.commandDecoder encodeStringFromStatusNumber:_currentOperationItem.paramToGetOrSet]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1074:        AGDiaryDebug(@"CommandExecute", @"Executing special command");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1106:        AGDiaryError(@"InvalidOperationType", @"Bluetooth packet not set in OperationItem");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1122:    AGDiaryInfo(@"CommandTimeout", @"Timeout receiving response to command.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1129:        AGDiaryInfo(@"CommandTimeoutDisconnect", @"Forcing disconnect due to lack of response from lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1132:        AGDiaryInfo(@"MissingCommand", @"Timeout receiving response to command when there is no command. Disconnecting lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1139:    [[NSUserDefaults standardUserDefaults]  setObject:[NSMutableDictionary dictionaryWithCapacity:3] forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1145:    AGDiaryDebug(@"SendCommand", @"Queuing up new command");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1147:        AGDiaryDebug(@"SendingWhileNotConnected", @"Warning. Queuing a command when not connected to a lock is not reccomended.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1173:        AGDiaryError(@"UnexpectedConnection", @"didOpenConnectionToLock to %@ not expected when we were expecting %@", lock.name, self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1187:        AGDiaryDebug(@"ConnectDirect", @"Connecting directly to a lock from its UUID");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1215:    AGDiaryDebug(@"LockConnectionTimeout", @"Timeout connecting to lock for %@", self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1224:        AGDiaryDebug(nil, @"lockConnectionTimeout - disconnecting");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1231:        AGDiaryInfo(@"StartReconnectAttempt",  @"Will try again to find the lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1242:    AGDiaryInfo(@"DiscoveredLock", @"Discovered lock named '%@'", lock.name);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1263:    NSNumber *canConnectToLock = [advertisementData objectForKey:@"kCBAdvDataIsConnectable"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1265:        AGDiaryInfo(@"DiscoveredDesiredLock", @"Discovered the lock that we're looking for lock.name = '%@'", lock.name);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1306:    AGDiaryInfo(@"EndScanForLock", @"Done scanning for lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1307:    AGDiaryInfo(@"StartConnectForLock", @"Connecting to lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1313:    AGDiaryInfo(@"DidConnectToLock", @"Got lock connection for %@", lock.name);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1315:        AGDiaryInfo(@"DidConnectToLockFail", @"Lock name %@ is not CurrentConnectedLockID %@", lock.name, self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1334:            AGDiaryInfo(@"QueueOldItem", @"Queueing recent pending item on a reconnect");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1340:    AGDiaryInfo(@"LockConnected", @"Lock '%@' is connected with %@ key", lock, lock.actualConnectionUsedOnlineKey?@"ONLINE":@"OFFLINE");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1364:    AGDiaryInfo(@"LockResponse", @"Lock responded with dict '%@'", lockDictionary);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1370:    NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1371:    NSString *lockState = [lockStatusDict objectForKey:@"AUG_STAT_LOCK_STATE"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1372:    NSString *doorStateResponse = [lockStatusDict objectForKey:@"AUG_STAT_DOOR_STATE"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1380:        if (([lockState isEqualToString:@"kAugLockState_Locked"]) || ([lockState isEqualToString:@"kAugLockState_Locking"])) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1383:            AGDiaryInfo(@"Locked", @"");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1384:        } else if ([lockState isEqualToString:@"kAugLockState_Unlocked"] || ([lockState isEqualToString:@"kAugLockState_Unlocking"])) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1386:            AGDiaryInfo(@"Unlocked", @"");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1388:        } else if ([lockState isEqualToString:@"kAugLockState_UnknownStaticPosition"] ||[lockState isEqualToString:@"kAugLockState_Init"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1390:            AGDiaryInfo(@"NotCalibrated", @"");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1393:            AGDiaryError(@"UnexpectedLockedState", @"Lock state %@ is unexpected. Treating as locked", lockState);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1462:                NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1473:                        AGDiaryError(@"GetStatusMissing", @"Status value %@ is missing from param request response", statusStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1479:                    AGDiaryDebug(@"GetStatusMatched", @"Status value %@ response matches request", statusStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1497:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"getParameter"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1503:                    AGDiaryError(@"GetParamMissing", @"Parameter %@ is missing from param request response", paramStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1505:                    AGDiaryDebug(@"GetParamMatched", @"Parameter %@ response matches request", paramStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1515:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"setParameter"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1519:                    AGDiaryError(@"SetParamMissing", @"Parameter %@ is missing from response to setparam request", paramStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1525:                    AGDiaryDebug(@"SetParamMatched", @"Parameter %@ response matches request", paramStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1542:                AGDiaryError(@"UnkownOperationItem", @"This operation item type not handled");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1597:    AGDiaryDebug(@"didDisconnectFromLock", @"LockName: %@ CurrentConnectedLockID: %@", lock.name, self.currentConnectedLockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1620:                AGDiaryDebug(@"DisconnectingWhileConnecting", @"Disconnected while connecting to %@  %@", lock.name, lock.peripheral);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1624:                    AGDiaryDebug(@"DisconnectingWhileConnecting", @"This has happened too many times. Give up");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1629:                    AGDiaryDebug(@"FiredConnectionTimer", @"Fired connection timeout");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1638:                AGDiaryDebug(@"PhantomDisconnect", @"Got possible phantom message for %@ with connection status %d %@", lock.name, (int)self.connectionStatus, lock.peripheral);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1643:    AGDiaryDebug(@"Disconnected", @"Disconnected from lock %@", lock.name);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1715:            AGDiaryInfo(@"ConnectionInhibit", @"Inhibiting connection");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1726:        AGDiaryInfo(@"StartReconnectAtempt", @"Will attempt to reconnect to any locks that attached delegates are interested in.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1732:        AGDiaryInfo(@"SkipReconnectAtempt", @"Skipping reconnection attempt because we are in the background.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1751:        AGDiaryInfo(@"BluetoothEnabled", @"Bluetooth turned on. Find new lock to connect to");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1758:        [self bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsTemporarilyDown userInfo:nil]];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1763:    AGDiaryInfo(@"Error", @"%@ recoverable:%@",[error description], isRecoverable?@"YES":@"NO");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1808:    NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1809:    if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1812:        errorStr = [NSString stringWithFormat:NSLocalizedString(@"Not authorized to use this lock.\ncode: %ld",nil), (long)error.code];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1814:    AGDiaryInfo(@"LockSecurityError", @"Lock Security error '%@'", errorStr);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1824:    AGDiaryInfo(@"ReconnectionInhibitForOTA", @"Inhibiting connection %@ for %@", doInihibitReconnection?@"ON":@"OFF", lockID);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1877:        AGDiaryError(@"LockOperationTimeout", @"Lock/Unlock timeout triggered unexpectedly");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1884:    AGDiaryError(@"LockOperationFailure", @"Lock ");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1890:    AGDiaryInfo(@"LockOperateSendCommand", @"Sending command to lock");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1893:        AGDiaryError(@"LockOperateSendCommand", @"Trying to lock/unlock while operation in progress.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1900:        AGDiaryError(@"LockOperateSendCommand", @"Trying to lock/unlock while not connected to lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1919:            NSInteger errorCode = [dict[@"error"] integerValue];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1921:                error = [NSError errorWithDomain:@"BLELockError" code:errorCode userInfo:nil];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1951:    oper.label = @"LockUnlockCommand";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1961:    NSAssert(situation != AGLockActionSituationWatch, @"AGLockActionSituationWatch not supported");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1982:                    NSNumber *offsetInitial = [dict objectForKey:@"timeZoneOffsetInitial"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1983:                    NSNumber *offsetT1 = [dict objectForKey:@"timeZoneOffsetTransition1"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1984:                    NSNumber *offsetT2 = [dict objectForKey:@"timeZoneOffsetTransition2"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1985:                    NSNumber *transitionTime1 = [dict objectForKey:@"transitionTime1"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1986:                    NSNumber *transitionTime2 = [dict objectForKey:@"transitionTime2"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2031:        AGDiaryInfo(@"LogPullCooldownInEffect", @"Skipping pulling logs");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2044:    AGDiaryInfo(@"LogRequest", @"Adding a request to the lock for Log data");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2069:                AGDiaryInfo(@"ProcessedLogEvent", @"Posted log. %d log items left to get", (int)self.remainingLogItemsOnLock);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2074:                AGDiaryError(@"UnknownOperationItem", @"Unexpected response from lock when expecting log packet LockEventPacket0");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2123:            AGDiaryInfo(@"UnreadLogEvents", [NSString stringWithFormat:@"There are %d unread log events to process", self.remainingLogItemsOnLock]);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2136:    oper.label = @"UnreadLogItems";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2162:    NSString *atomicGroupIdentifier = @"SetParamsGroup";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2221:    AGDiaryDebug(@"OTAUpdateComplete", @"BLELockOperation got the otaUpdateComplete callback");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2231:            AGDiaryDebug(@"SkippingFindNewLock", @"Everything about the current connection seems in order so we'll skip reconnecting to the lock.");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2292:        NSString *logMessage = [NSString stringWithFormat:@"Offline key handshake failed %li attempt(s) but can try again with offline key", (long)self.numberOfOfflineKeyFailuresSinceAttach];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2293:        AGDiaryInfo(@"AutoUnlock", logMessage);
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2332:    if ([statusResponse isEqualToString:@"kAugDoorState_Init"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2334:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Closed"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2336:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Ajar"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2338:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Open"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2340:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Unknown"]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:20:NSString * const kLockCommOfflineKeyLoadedNotification = @"kLockCommOfflineKeyLoadedNotification";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:21:NSString * const kLockCommOfflineKeyDeletedNotification = @"kLockCommOfflineKeyDeletedNotification";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:24:static NSString* kAGDiaryCategory = @"Bluetooth";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:127:    AGDiaryInfo(@"LockResponse", @"Got response from lock: %@", lockDictionary);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:133:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket0" ] forKey:@"LockEventPacket0"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:136:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket1" ] forKey:@"LockEventPacket1"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:139:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket2" ] forKey:@"LockEventPacket2"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:142:                [self.lockEventDictionary setObject:[lockDictionary objectForKey:@"LockEventPacket3" ] forKey:@"LockEventPacket3"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:151:            NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadMagic userInfo:@{@"Error":@"Bad Magic"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:167:        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadMagic userInfo:@{@"Error":@"Bad Magic"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:197:    AGDiaryInfo(@"StartDiscoverServices", @"Starting to discover Bluetooth LE Services on the lock");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:232:            AGDiaryDebug(@"NoAuthForUser", @"Unauthorized command");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:251:        AGDiaryInfo(@"SendDataPacket", @"Writing to data channel peripheral: %@", self.lock.peripheral);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:260:        AGDiaryDebug(@"SendJupiterOTACommandPacket", @"Writing to jupiter OTA command channel peripheral: %@", self.lock.peripheral);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:305:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel checksum: %@", [packet validateSecurityChecksum] ? @"GOOD" : @"BAD");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:310:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel");        }
AugustAPI/august-api/Bluetooth/AugustLockComm.m:313:            AGDiaryInfo(@"SendSecurityPacket", @"Writing to security channel checksum: %@", [packet validateSecurityChecksum] ? @"GOOD" : @"BAD");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:355:    AGDiaryInfo(@"PeripheralDidUpdateName",@"New name for peripherial = %@", peripheral);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:368:    AGDiaryInfo(@"PeripheralDioInvalidateServices", @"Peripheral '%@' did invalidate services", peripheral);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:399:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:400:        AGDiaryError(@"ErrorDiscoveringServices", errorMsg);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:401:        NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDiscoverServices userInfo:@{@"Error":errorMsg}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:410:            AGDiaryInfo(@"AugustLockServiceFound", @"August Lock service found, UUID: %@", aService.UUID);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:421:            AGDiaryInfo(@"StartDiscoverCharacteristics", @"Starting to discover Bluetooth LE Characteristics for the AugustService");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:426:            AGDiaryInfo(@"AugustLockServiceFound", @"August Lock service found, UUID: %@", aService.UUID);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:434:            AGDiaryInfo(@"StartDiscoverCharacteristics", @"Starting to discover Bluetooth LE Characteristics for the AugustService");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:438:        if ([aService.UUID isEqual:[CBUUID UUIDWithString:@"180A"]])
AugustAPI/august-api/Bluetooth/AugustLockComm.m:442:            NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:443:            NSDictionary *modelNumberDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:451:                AGDiaryDebug(@"DiscoverVersionAndSerialCharacteristics", @"Discovering both because we don't have serial number yet");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:452:                charArray = [NSArray arrayWithObjects: [CBUUID UUIDWithString:@"2A26"], [CBUUID UUIDWithString:@"2A25"], [CBUUID UUIDWithString:@"2A24"], nil];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:456:                AGDiaryDebug(@"DiscoverVersionCharacteristicOnly", @"Discover version characteristics only.");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:457:                charArray = [NSArray arrayWithObjects: [CBUUID UUIDWithString:@"2A26"], nil];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:484:    AGDiaryInfo(@"PeripheralDiscoverIncludedServices", @"peripheral:%@ didDiscoverIncludedServicesForService:%@ error:%@", peripheral, service, error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:503:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:504:            AGDiaryError(@"ErrorDiscoveringCharacteristics", errorMsg);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:505:            NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDiscoverCharacteristics userInfo:@{@"Error":errorMsg}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:514:                AGDiaryInfo(@"FoundCharacteristic", @"Found writeable characteristic kAugustLockWriteUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:521:                AGDiaryInfo(@"FoundCharacteristic", @"Found read/notify characteristic kAugustLockReadUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:528:                AGDiaryInfo(@"FoundCharacteristic", @"Found security read/notify characteristic kAugustLockSecReadUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:533:                AGDiaryInfo(@"FoundCharacteristic", @"Found security write characteristic kAugustLockSecWriteUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:539:                AGDiaryInfo(@"FoundCharacteristic", @"Found jupiter OTA command characteristic kJupiterOTACommandUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:545:                AGDiaryInfo(@"FoundCharacteristic", @"Found jupiter OTA data characteristic kJupiterOTADataUUID");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:557:                AGDiaryInfo(@"FoundCharacteristic", @"Found writeable characteristic kAugustLockWriteUUID2");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:564:                AGDiaryInfo(@"FoundCharacteristic", @"Found read/notify characteristic kAugustLockReadUUID2");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:571:                AGDiaryInfo(@"FoundCharacteristic", @"Found security read/notify characteristic kAugustLockSecReadUUID2");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:576:                AGDiaryInfo(@"FoundCharacteristic", @"Found security write characteristic kAugustLockSecWriteUUID2");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:581:    if ([service.UUID isEqual:[CBUUID UUIDWithString:@"180A"]])
AugustAPI/august-api/Bluetooth/AugustLockComm.m:585:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A26"]])
AugustAPI/august-api/Bluetooth/AugustLockComm.m:589:                AGDiaryDebug(@"FoundCharacteristic", @"Found firmware revision characteristic");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:591:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A25"]])
AugustAPI/august-api/Bluetooth/AugustLockComm.m:595:                AGDiaryDebug(@"FoundCharacteristic", @"Found serial number characteristic");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:597:            if ([aChar.UUID isEqual:[CBUUID UUIDWithString:@"2A24"]])
AugustAPI/august-api/Bluetooth/AugustLockComm.m:600:                AGDiaryDebug(@"FoundCharacteristic", @"Found model number characteristic");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:613:    AGDiaryInfo(@"FinishedDiscoverCharacteristics", @"Finished discovering characteristics");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:626:    return [NSString stringWithFormat:@"%0.8X", randomResult];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:654:    AGDiaryInfo(@"StartNetwork1", @"Starting API communication - getInitiateComm");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:660:        NSString *offlineKeyStr = [offlineKeyDict objectForKey:@"key"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:661:        NSUInteger slot = [[offlineKeyDict objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:667:        AGDiaryInfo(@"EndNetwork1", @"End of network #1 - we have an offline key");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:668:        AGDiaryInfo(@"StartCommunication1", @"Start of communication #1");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:674:        NSString *onlineKeyUsageReason = self.lock.onlineKeyUsageReason == AGBLELockOnlineKeyUsageReason_InvalidOfflineKey ? @"wrong_offline_key" : nil;
AugustAPI/august-api/Bluetooth/AugustLockComm.m:678:                AGDiaryInfo(@"EndNetwork1", @"End of network #1 - Received InitiateComm Packet, writing mobile keys");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:680:                NSString *packetStr = [dict objectForKey:@"packet"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:684:                AGDiaryInfo(@"StartCommunication1", @"Start of communication #1 - sending security packet");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:688:                AGDiaryError(@"NetworkError", @"Error during initiateComm: %@", error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:690:                if ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:702:                    errorMsg = NSLocalizedString(@"Security error", nil);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:704:                NSError *errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorInitiateCommunication userInfo:@{@"Error":errorMsg}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:754:        slot = [[offlineKeyDict objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:759:    AGDiaryInfo(@"SendSecurityInit", @"Sending security initialization command: %@", packet.data);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:789:    command = [command stringByReplacingOccurrencesOfString:@" " withString:@""];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:813:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:896:        AGDiaryInfo(@"UpdateValueForCharacteristic", @"peripheral:%@ didUpdateValueForCharacteristic:%@ error:%@", peripheral, characteristic, error);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:899:            AGDiaryError(@"UpdateValueForCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:909:                NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadChecksum userInfo:@{@"Error":@"Bad Checksum"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:918:                AGDiaryInfo(@"ReceivedMobileKeysResponse", @"Received mobile keys response");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:919:                AGDiaryInfo(@"StartNetwork2", @"Getting lock rands");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:928:                    AGDiaryInfo(@"EndNetwork2", @"End of network2 communication - we have offline key");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:933:                            AGDiaryInfo(@"EndNetwork2", @"End of network2 communication - got lock rands");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:936:                            self.lRand1 = [[dict objectForKey:@"lRand1"] unsignedIntValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:937:                            self.lRand2 = [[dict objectForKey:@"lRand2"] unsignedIntValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:938:                            NSUInteger slot = [[dict objectForKey:@"slot"] unsignedIntValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:942:                            AGDiaryInfo(@"NetworkError", @"Error getting lock rands: %@", error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:945:                            if ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:959:                                errorMsg = NSLocalizedString(@"Security error", nil);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:962:                                errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorLockRandsErrorConflict userInfo:@{@"Error":errorMsg}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:964:                                errorResponse = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorLockRandsErrorGeneric userInfo:@{@"Error":errorMsg}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:975:                AGDiaryInfo(@"ReceivedInitiateCommResponse", @"Received InitiateComm response, connection state = SEC_CONNECTED_UNSECURE_KEY");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:994:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorDeviceBlacklisted userInfo:@{@"Error":@"Device has been blacklisted"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:999:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorKeyChanged userInfo:@{@"Error":@"Key number has changed"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1004:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorChecksumDoesntWork userInfo:@{@"Error":@"Checksum doesn't work"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1009:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorKeyNotDefinedInTable userInfo:@{@"Error":@"Key not defined in table"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1014:                        NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadLockresponse userInfo:@{@"Error":@"Wrong response from lock"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1020:                    NSError *error = [NSError errorWithDomain:@"SecurityError" code:kLockSecurityErrorBadChecksum userInfo:@{@"Error":@"Unable to validate checksum"}];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1032:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A26"]]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1035:            AGDiaryDebug(@"ReadFirmwareVersionCharacteristic", @"%@ for service %@", self.lock.bleFirmwareVersion, [characteristic.service.UUID UUIDString]);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1037:            self.lock.bleFirmwareVersion = @"undefined";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1040:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A25"]]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1043:            AGDiaryDebug(@"ReadSerialNumberCharacteristic", @"%@ for service %@", self.lock.serialNumber, [characteristic.service.UUID UUIDString]);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1044:            NSMutableDictionary *uuidsToSerialNumbersDictionary = [[[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"] mutableCopy];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1051:            [[NSUserDefaults standardUserDefaults] setObject:uuidsToSerialNumbersDictionary forKey:@"UUIDsToSerialNumbersDictionary"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1054:            self.lock.serialNumber = @"undefined";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1057:    else if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:@"2A24"]]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1061:            AGDiaryDebug(@"ReadModelNumberCharacteristic", @"%@ for service %@", self.lock.serialNumber, [characteristic.service.UUID UUIDString]);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1062:            NSMutableDictionary *uuidsToSerialNumbersDictionary = [[[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"] mutableCopy];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1069:            [[NSUserDefaults standardUserDefaults] setObject:uuidsToSerialNumbersDictionary forKey:@"UUIDsToModelNumbersDictionary"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1072:            self.lock.serialNumber = @"undefined";
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1076:        AGDiaryDebug(@"UpdateJupiterOTACommandCharacteristic", @"peripheral:%@ didUpdateValueForJupiterOTACommandCharacteristic:%@ error:%@", peripheral, characteristic, error);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1079:            AGDiaryError(@"UpdateJupiterOTACommandCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1089:            AGDiaryError(@"UpdateJupiterOTADataCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1100:    AGDiaryInfo(@"SecurityResponse", @"received security response");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1115:            AGDiaryInfo(@"SecurityInitComplete" , @"Security initialization complete");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1126:            AGDiaryInfo(@"SecurityHandshakeLowerBytes", @"Successfully wrote lower bytes of handshake key");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1133:            AGDiaryInfo(@"SecurityHandshakeUpperBytes", @"Successfully wrote upper bytes of handshake key");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1141:            AGDiaryInfo(@"SecurityHandshakeKeyCommit", @"Successfully committed handshake key %@", [offlineKey objectForKey:@"slot"]);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1150:            AGDiaryInfo(@"SecurityDeleteHandshakeKey", @"Successfully deleted handshake key %@", [offlineKey objectForKey:@"slot"]);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1166:            AGDiaryWarn(@"SecurityUnhandledResponse", @"Received unhandled, but valid response on security read channel");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1172:            AGDiaryError(@"SecurityUnknownResponse", @"Received unknown response on security channel (%d)", *wordPtr);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1211:    AGDiaryInfo(@"DidUpdateNotificationStateForCharacteristic", @"peripheral:%@ didUpdateNotificationStateForCharacteristic:%@ error:%@ (%d)", peripheral, characteristic, error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1236:    AGDiaryInfo(@"DidDiscoverDescriptorsForCharacteristic", @"peripheral:%@ didDiscoverDescriptorsForCharacteristic:%@ error:%@", peripheral, characteristic, error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1252:    AGDiaryInfo(@"DidUpdateValueForDescriptor", @"peripheral:%@ didUpdateValueForDescriptor:%@ error:%@", peripheral, descriptor, error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1266:    AGDiaryInfo(@"DidWriteValueForDescriptor", @"peripheral:%@ didWriteValueForDescriptor:%@ error:%@", peripheral, descriptor, error.description);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1390:    if ([chip isEqualToString:@"bcm"]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1394:    } else if ([chip isEqualToString:@"dlg"] || [chip isEqualToString:@"sd"]) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1434:    if ([[[UIDevice currentDevice] systemVersion] compare:@"8.1" options:NSNumericSearch] == NSOrderedAscending) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1451:        AGDiaryInfo(@"StartingKeyUpdate", @"Starting offline key update. We have %d keys to add and %d to delete", self.lock.offlineKeysToLoad.count, self.lock.offlineKeysToDelete.count);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1486:        NSUInteger slot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1488:            AGDiaryVerbose(@"DeleteOfflineKey", @"slot %d", slot);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1495:        NSUInteger slot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1496:        AGDiaryVerbose(@"AddOfflineKey", @"slot %d", slot);
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1498:        NSString *key = [offlineKey objectForKey:@"key"];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1527:            [AGLock putOfflineKey:self.lock.name action:@"deleted" offlineKey:offlineKey block:^(BOOL succeeded, NSError *error) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1530:                    AGDiaryDebug(@"RemovedKey", @"Succeded at removing offline key.");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1538:            NSUInteger addedSlot = [[offlineKey objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1542:                NSUInteger deletedSlot = [[deleteKeyPotentialMatch objectForKey:@"slot"] unsignedIntegerValue];
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1543:                AGDiaryDebug(@"AddAndDelete", @"We added a key that was also in 'deleted'. We will tell server it was deleted after processing the add.");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1551:            AGDiaryDebug(@"AddedKey", @"Succeded at adding offline key. Simutaneously notifying server and going on to next key.");
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1552:            [AGLock putOfflineKey:self.lock.name action:@"loaded" offlineKey:offlineKey block:^(BOOL succeeded, NSError *error) {
AugustAPI/august-api/Bluetooth/AugustLockComm.m:1554:                    [AGLock putOfflineKey:self.lock.name action:@"deleted" offlineKey:keyEffectivelyDeleted block:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:14:static NSString* kAGDiaryCategory = @"JupiterLockOTA";
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:55:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:63:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:81:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:100:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageStart");
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:111:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageGetProgress response: %d", packet->state);
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:120:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:184:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStagePrepareDownload");
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:195:            AGDiaryDebug(@"JupiterOTAStage", @"OTAStageDownload");
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:280:        AGDiaryDebug(@"JupiterOTAStatusResponseOk", @"Status response Ok");
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:286:        AGDiaryError(@"JupiterOTAStatusResponseError", @"Status response Error: %d, currentStage: %d, currentWriteIndex: %d, numberOfBytesToWrite: %d", packet->status, self.currentStage, self.currentWriteIndex, self.numberOfBytesToWrite);
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:293:    AGDiaryError(@"JupiterOTAError", @"Error, aborting");
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:347:    AGDiaryDebug(@"JupiterOTASendCommand", @"Sending Jupiter OTA command: %d", command);
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:392:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
AugustAPI/august-api/Bluetooth/BLELock.m:18:static NSString* kAGDiaryCategory = @"Bluetooth";
AugustAPI/august-api/Bluetooth/BLELock.m:52:    AGDiaryInfo(@"SendCommand", @"sending command packet: %@", packet);
AugustAPI/august-api/Bluetooth/BLELock.m:58:    AGDiaryInfo(@"SendCommand", @"sending command packet (without response): %@", packet);
AugustAPI/august-api/Bluetooth/BLELock.m:68:    AGDiaryInfo(@"ConnectAttempt", @"Attempting to connect to peripheral, %@ with central: %@, state: %d", self.peripheral, self.cbCentral, (int)self.cbCentral.state);
AugustAPI/august-api/Bluetooth/BLELock.m:74:        AGDiaryError(@"BluetoothStateUnknown", @"BT state is unkonwn and so we won't connect. This shouldn't happen.");
AugustAPI/august-api/Bluetooth/BLELock.m:86:    NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorTimeout userInfo:@{@"Error":@"Connection soft timeout"}];
AugustAPI/august-api/Bluetooth/BLELock.m:95:        AGDiaryWarn(@"UpdateKeysWhileUpdating", @"Not updating offline keys because we have an update already in progress");
AugustAPI/august-api/Bluetooth/BLELock.m:267:        AGDiaryInfo(@"BLEInitialization", @"Instantiating BLELockManager and CBCentral.");
AugustAPI/august-api/Bluetooth/BLELock.m:302:    AGDiaryInfo(@"ConnectedPeripheral", @"CoreBluetooth Connected peripheral.");
AugustAPI/august-api/Bluetooth/BLELock.m:314:    AGDiaryInfo(@"DisconnectedPeripheral", @"DISCONNECTED: %@, peripheral: %@", error.description, peripheral);
AugustAPI/august-api/Bluetooth/BLELock.m:320:        AGDiaryWarn(@"OfflineKeyFailed", @"Offline key is suspected to be invalid");
AugustAPI/august-api/Bluetooth/BLELock.m:345:            NSError *errorResponse = [NSError errorWithDomain:@"ConnectionError" code:kLockConnectionErrorDisconnects userInfo:@{@"Error":@"We have received repeated disconnects from the lock. Please verify that the bluetooth radios on the central and peripheral are working correctly."}];
AugustAPI/august-api/Bluetooth/BLELock.m:354:    AGDiaryInfo(@"FailedToConnect", @"didFailToConnectPeripheral");
AugustAPI/august-api/Bluetooth/BLELock.m:360:    AGDiaryInfo(@"RetrieveConnectedPeripherals", @"didRetrieveConnectedPeripherals");
AugustAPI/august-api/Bluetooth/BLELock.m:378:            AGDiaryInfo(@"CentralManagerStateUnknown", @"centralManagerDidUpdateState:  CBCentralManagerStateUnknown. Disconnecting connection of discovered locks.");
AugustAPI/august-api/Bluetooth/BLELock.m:383:            AGDiaryInfo(@"CentralManagerStateResetting", @"centralManagerDidUpdateState:  CBCentralManagerStateResetting");
AugustAPI/august-api/Bluetooth/BLELock.m:388:            AGDiaryInfo(@"CentralManagerStateUnsupported", @"centralManagerDidUpdateState:  CBCentralManagerStateUnsupported");
AugustAPI/august-api/Bluetooth/BLELock.m:392:            AGDiaryInfo(@"CentralManagerStateUnauthorized", @"centralManagerDidUpdateState:  CBCentralManagerStateUnauthorized");
AugustAPI/august-api/Bluetooth/BLELock.m:396:            AGDiaryInfo(@"CentralManagerStatePoweredOff", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOff");
AugustAPI/august-api/Bluetooth/BLELock.m:401:            AGDiaryInfo(@"CentralManagerStatePoweredOn", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOn");
AugustAPI/august-api/Bluetooth/BLELock.m:433:    NSString *MSID = [advertisementData valueForKey:@"kCBAdvDataManufacturerData"];
AugustAPI/august-api/Bluetooth/BLELock.m:435:    AGDiaryDebug(@"didDiscoverPeripheral", @"advertisedName: %@", advertisedName);
AugustAPI/august-api/Bluetooth/BLELock.m:439:        AGDiaryError(@"MissingLockNameError", @"Missing peripheral name or UUID");
AugustAPI/august-api/Bluetooth/BLELock.m:457:        AGDiaryDebug(@"didDiscoverPeripheral", @"old lock str: %@", advertisedName);
AugustAPI/august-api/Bluetooth/BLELock.m:463:            AGDiaryDebug(@"didDiscoverPeripheral", @"lock whole str: %@", str);
AugustAPI/august-api/Bluetooth/BLELock.m:484:                    if (![[lockID substringWithRange:NSMakeRange(curChar,1)] isEqual:@"0"]) {
AugustAPI/august-api/Bluetooth/BLELock.m:516:		[hexEncoded appendString:[NSString stringWithFormat:@"%02X", bytes[i]]];
AugustAPI/august-api/Bluetooth/BLELock.m:550:            AGDiaryError(@"CentralStateUnknown", @"Bluetooth state is unknown or resetting and we can't scan. This shouldn't happen.");
AugustAPI/august-api/Bluetooth/BLELock.m:572:            [self.delegate bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:@{@"Error":@"Bluetooth is powered off"}]];
AugustAPI/august-api/Bluetooth/BLELock.m:591:            [self.delegate bluetoothError:nil error:[NSError errorWithDomain:@"AGCoreBluetooth" code:kBluetoothErrorIsPoweredOff userInfo:@{@"Error":@"Bluetooth is powered off"}]];
AugustAPI/august-api/Bluetooth/BLELock.m:599:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
AugustAPI/august-api/Bluetooth/BLELock.m:621:    AGDiaryInfo(@"LockConnectAttempt", @"Attempting to connect to lock %@", lock.name);
AugustAPI/august-api/Bluetooth/BLELock.m:632:        AGDiaryInfo(@"CleanUp", @"Cleaning up %d discovered locks. %@", [self.discoveredLocks count], (lockToSave)?@"Will save one of them.":@"");
AugustAPI/august-api/Bluetooth/BLELock.m:666:            AGDiaryError(@"CentralManagerStateUnsupported", @"The platform/hardware doesn't support Bluetooth Low Energy.");
AugustAPI/august-api/Bluetooth/BLELock.m:669:            AGDiaryError(@"CentralManagerStateUnauthorized", @"The app is not authorized to use Bluetooth Low Energy.");
AugustAPI/august-api/Bluetooth/BLELock.m:672:            AGDiaryError(@"CentralManagerStatePoweredOff", @"Bluetooth is currently powered off.");
AugustAPI/august-api/Bluetooth/BLELock.m:689:    NSMutableDictionary *lockIDToUUIDMap = [[[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"] mutableCopy];
AugustAPI/august-api/Bluetooth/BLELock.m:696:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/Bluetooth/BLELock.m:701:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGSubscriptions.m:15:    [[AGClient sharedClient] getPath:@"subscriptions" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGSubscriptions.m:36:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"subscriptions/%@", subscriptionId]
AugustAPI/august-api/AGSubscriptions.m:42:                           if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
AugustAPI/august-api/AGSubscriptions.m:52:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"subscriptions/%@/enable", subscriptionId]
AugustAPI/august-api/AGSubscriptions.m:58:                              if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
AugustAPI/august-api/AGSubscriptions.m:67:    [[AGClient sharedClient] getPath:@"users/tokens/subscription-management" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGSubscriptions.m:69:            NSString *token = [(NSDictionary *)responseObject objectForKey:@"token"];
AugustAPI/august-api/AGAugustAccess.m:17:    [[AGClient sharedClient] getPath:@"partners"
AugustAPI/august-api/AGAugustAccess.m:19:                              header:@{@"accept-version" : @"2.0.0"}
AugustAPI/august-api/AGAugustAccess.m:42:                                         userInfo:@{@"partnerId":@"partnerId cannot be nil"}];
AugustAPI/august-api/AGAugustAccess.m:45:    NSDictionary *parameters = @{@"partnerID":partnerId, @"platform":@"ios"};
AugustAPI/august-api/AGAugustAccess.m:46:    [[AGClient sharedClient] getPath:@"partners/oauthurl"
AugustAPI/august-api/AGAugustAccess.m:53:                               NSString *partnerOAuthUrl = [respDictionary objectForKey:@"url"];
AugustAPI/august-api/AGAugustAccess.m:66:    [[AGClient sharedClient] getPath:@"partners/tags"
AugustAPI/august-api/AGAugustAccess.m:91:    NSString *path = [NSString stringWithFormat:@"partners/%@/mailinglist", partnerId];
AugustAPI/august-api/AGAugustAccess.m:93:                           parameters:@{ @"email": email}
AugustAPI/august-api/AGDateUtils.m:23:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
AugustAPI/august-api/AGDateUtils.m:25:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
AugustAPI/august-api/AGDateUtils.m:26:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
AugustAPI/august-api/AGDateUtils.m:32:    NSArray* daysOfTheWeek = [[NSArray alloc] initWithObjects: @"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA", nil];
AugustAPI/august-api/AGDateUtils.m:44:    NSArray *orderedDayStrings = [[setToOrder array] valueForKey:@"description"];
AugustAPI/august-api/AGDateUtils.m:45:    NSString *joinedDaysString = [orderedDayStrings componentsJoinedByString:@","];
AugustAPI/august-api/AGDateUtils.m:48:        joinedDaysString = [orderedDayStrings componentsJoinedByString:@"/"];
AugustAPI/august-api/AGDateUtils.m:62:    if (days.count == 1 && ([[days objectAtIndex:0] isEqualToString:@"SU"] || [[days objectAtIndex:0] isEqualToString:@"SA"])) {
AugustAPI/august-api/AGDateUtils.m:66:    if (![days containsObject:@"WE"]) {//Wednesday isn't present. Wedneday's presence makes it obvious what a "T" stands for.
AugustAPI/august-api/AGDateUtils.m:69:    if ([days containsObject:@"TU"] && [days containsObject:@"TH"]) {
AugustAPI/august-api/AGDateUtils.m:74:                                                              @"SU":(satSunShouldBeFullAbbreviation ? @"SU": @"S"),
AugustAPI/august-api/AGDateUtils.m:75:                                                              @"MO":@"M",
AugustAPI/august-api/AGDateUtils.m:76:                                                              @"TU":(tuesThursShouldBeFullAbbreviation ? @"TU": @"T"),
AugustAPI/august-api/AGDateUtils.m:77:                                                              @"WE":@"W",
AugustAPI/august-api/AGDateUtils.m:78:                                                              @"TR":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),//Defensive against any one mistakinlgy calling this using "TR" abbrviations
AugustAPI/august-api/AGDateUtils.m:79:                                                              @"TH":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),
AugustAPI/august-api/AGDateUtils.m:80:                                                              @"FR":@"F",
AugustAPI/august-api/AGDateUtils.m:81:                                                              @"SA":(satSunShouldBeFullAbbreviation ? @"SA": @"S")
AugustAPI/august-api/AGCache.m:76:    return [NSString stringWithFormat:@"user_%@", user.objectId];
AugustAPI/august-api/AGLockLogEntry.m:13:static NSString* kAGDiaryCategory = @"ActivityLog";
AugustAPI/august-api/AGLockLogEntry.m:22:    if ([@"lock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:25:    else if ([@"unlock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:28:    else if ([@"dooropen" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:31:    else if ([@"doorclosed" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:34:    else if ([@"add" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:37:    else if ([@"remove" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:40:    else if ([@"addtorule" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:43:    else if ([@"removefromrule" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:46:    else if ([@"addedpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:49:    else if ([@"removedpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:52:    else if ([@"disabledpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:55:    else if ([@"enabledpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:58:    else if ([@"invalidcode" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:61:    else if ([@"onetouchlock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:64:    else if ([ @"camera" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:67:    else if ([ @"doorbell_call_missed" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:70:    else if ([ @"doorbell_call_declined" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:73:    else if ([ @"doorbell_call_hangup" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:76:    else if ([ @"doorbell_call_initiated" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:79:    else if ([ @"doorbell_motion_detected" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:82:        AGDiaryError(@"BadLockLogAction", @"Action '%@' is not recognized by AGLockLogEntry", actionString);
AugustAPI/august-api/AGLockLogEntry.m:89:    NSArray *stringArray = @[@"AGLockLogAction_Locked",
AugustAPI/august-api/AGLockLogEntry.m:90:                             @"AGLockLogAction_Unlocked",
AugustAPI/august-api/AGLockLogEntry.m:91:                             @"AGLockLogAction_DoorOpen",
AugustAPI/august-api/AGLockLogEntry.m:92:                             @"AGLockLogAction_DoorClosed",
AugustAPI/august-api/AGLockLogEntry.m:93:                             @"AGLockLogAction_AddUser",
AugustAPI/august-api/AGLockLogEntry.m:94:                             @"AGLockLogAction_RemoveUser",
AugustAPI/august-api/AGLockLogEntry.m:95:                             @"AGLockLogAction_AddUserToRule",
AugustAPI/august-api/AGLockLogEntry.m:96:                             @"AGLockLogAction_RemoveUserFromRule",
AugustAPI/august-api/AGLockLogEntry.m:97:                             @"AGLockLogAction_AddedPin",
AugustAPI/august-api/AGLockLogEntry.m:98:                             @"AGLockLogAction_RemovedPin",
AugustAPI/august-api/AGLockLogEntry.m:99:                             @"AGLockLogAction_EnabledPin",
AugustAPI/august-api/AGLockLogEntry.m:100:                             @"AGLockLogAction_DisabledPin",
AugustAPI/august-api/AGLockLogEntry.m:101:                             @"AGLockLogAction_InvalidKeypadCode",
AugustAPI/august-api/AGLockLogEntry.m:102:                             @"AGLockLogAction_Camera",
AugustAPI/august-api/AGLockLogEntry.m:103:                             @"AGLockLogAction_OneTouchLock",
AugustAPI/august-api/AGLockLogEntry.m:104:                             @"AGDoorbellLogAction_Call_Missed",
AugustAPI/august-api/AGLockLogEntry.m:105:                             @"AGDoorbellLogAction_Call_Declined",
AugustAPI/august-api/AGLockLogEntry.m:106:                             @"AGDoorbellLogAction_Call_Hangup",
AugustAPI/august-api/AGLockLogEntry.m:107:                             @"AGDoorbellLogAction_Call_Initiated",
AugustAPI/august-api/AGLockLogEntry.m:108:                             @"AGDoorbellLogAction_Motion_Detected",
AugustAPI/august-api/AGLockLogEntry.m:109:                             @"AGLockLogAction_Unrecognized" ];
AugustAPI/august-api/AGLockLogEntry.m:123:    NSDictionary *userData = [dictionary objectForKey:@"callingUser"];
AugustAPI/august-api/AGLockLogEntry.m:128:    NSDictionary *otherUserData = [dictionary objectForKey:@"otherUser"];
AugustAPI/august-api/AGLockLogEntry.m:132:    long long timeIntervalSince1970 = [[dictionary objectForKey:@"dateTime"] longLongValue];
AugustAPI/august-api/AGLockLogEntry.m:135:    NSString* actionString = [dictionary objectForKey:@"action"];
AugustAPI/august-api/AGLockLogEntry.m:139:    self.deviceName = [AGClient stringByDecodingXMLEntities:[dictionary objectForKey:@"deviceName"]];
AugustAPI/august-api/AGLockLogEntry.m:140:    NSDictionary* infoDict = [dictionary objectForKey:@"info"];
AugustAPI/august-api/AGLockLogEntry.m:141:    self.isRemote = [[infoDict objectForKey:@"remote"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:142:    if ([infoDict objectForKey:@"agent"]) {
AugustAPI/august-api/AGLockLogEntry.m:143:        NSString *agent = (NSString *)[infoDict objectForKey:@"agent"];
AugustAPI/august-api/AGLockLogEntry.m:144:        if ([agent isEqualToString:@"homekit"]) {
AugustAPI/august-api/AGLockLogEntry.m:146:        } else if ([agent isEqualToString:@"zwave"]) {
AugustAPI/august-api/AGLockLogEntry.m:151:    self.isUsingKeypad = [[infoDict objectForKey:@"keypad"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:152:    self.isPINOnlyKeypadUser = [[infoDict objectForKey:@"pinonlyuser"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:153:    self.hasVideoAvailable = [[infoDict objectForKey:@"videoAvailable"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:154:    self.dvrEventID = [infoDict objectForKey:@"dvrID"];
AugustAPI/august-api/AGLockLogEntry.m:155:    self.callID = [infoDict objectForKey:@"callID"];
AugustAPI/august-api/AGLockLogEntry.m:162:            self.user.firstName = @"One-Touch";
AugustAPI/august-api/AGLockLogEntry.m:163:            self.user.lastName = @"Lock";
AugustAPI/august-api/AGLockLogEntry.m:164:            self.user.objectId = @"onetouchlock";
AugustAPI/august-api/AGLockLogEntry.m:171:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:173:            self.doorbellUserId = @"self";
AugustAPI/august-api/AGLockLogEntry.m:177:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:179:            NSDictionary *users = infoDict[@"users"];
AugustAPI/august-api/AGLockLogEntry.m:181:                self.doorbellUserId = users[@"answered_user"];
AugustAPI/august-api/AGLockLogEntry.m:187:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:189:            NSDictionary *users = infoDict[@"users"];
AugustAPI/august-api/AGLockLogEntry.m:191:                self.doorbellUserId = users[@"initiated_user"];
AugustAPI/august-api/AGLockLogEntry.m:197:                if ([infoDict[@"activityZones"] isKindOfClass:[NSArray class]]) {
AugustAPI/august-api/AGLockLogEntry.m:198:                    self.activityZones = infoDict[@"activityZones"];
AugustAPI/august-api/AGLockLogEntry.m:200:                self.doorbellImageUrl = infoDict[@"imageURL"];
AugustAPI/august-api/AGLockLogEntry.m:206:                self.doorbellImageUrl = infoDict[@"image"][@"secure_url"];
AugustAPI/august-api/AGLockLogEntry.m:208:            self.doorbellUserId = @"self";
AugustAPI/august-api/AGLockLogEntry.m:214:    self.animatedURL = [infoDict objectForKey:@"animatedURL"];
AugustAPI/august-api/AGLockLogEntry.m:215:    self.webURL = [infoDict objectForKey:@"webURL"];
AugustAPI/august-api/AGLockLogEntry.m:216:    self.appURL = [infoDict objectForKey:@"appURL"];
AugustAPI/august-api/AGLockLogEntry.m:218:    self.deviceID = [dictionary objectForKey:@"deviceID"];
AugustAPI/august-api/AGLockLogEntry.m:219:    NSDictionary *house = dictionary[@"house"];
AugustAPI/august-api/AGLockLogEntry.m:221:        self.houseID = house[@"houseID"];
AugustAPI/august-api/AGLockLogEntry.m:235:            if ([self.user.objectId isEqualToString:@"manuallock"]) {
AugustAPI/august-api/AGLockLogEntry.m:238:            else if ([self.user.objectId isEqualToString:@"automaticrelock"]) {
AugustAPI/august-api/AGLockLogEntry.m:241:            else if ([self.user.objectId isEqualToString:@"onetouchlock"]) {
AugustAPI/august-api/AGLockLogEntry.m:251:            if ([self.user.objectId isEqualToString:@"manualunlock"]) {
AugustAPI/august-api/AGAirbnbListing.m:14:    [[AGClient sharedClient] getPath:@"airbnb/listings" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGAirbnbListing.m:36:    listing.listingID = [responseDictionary objectForKey:@"id"];
AugustAPI/august-api/AGAirbnbListing.m:37:    listing.name = [responseDictionary objectForKey:@"name"];
AugustAPI/august-api/AGAirbnbListing.m:38:    NSArray <NSDictionary *> *lockAccesses = [[NSMutableArray alloc] initWithArray:[responseDictionary objectForKey:@"access"]];
AugustAPI/august-api/AGAirbnbListing.m:44:        if ([lockDictionary objectForKey:@"lockID"]) {
AugustAPI/august-api/AGAirbnbListing.m:45:            lockId = (NSString *)[lockDictionary objectForKey:@"lockID"];
AugustAPI/august-api/AGAirbnbListing.m:47:        if ([lockDictionary objectForKey:@"appAccess"]) {
AugustAPI/august-api/AGAirbnbListing.m:48:            appAccess = [[lockDictionary objectForKey:@"appAccess"] boolValue];
AugustAPI/august-api/AGAirbnbListing.m:50:        if ([lockDictionary objectForKey:@"keypadAccess"]) {
AugustAPI/august-api/AGAirbnbListing.m:51:            keypadAccess = [[lockDictionary objectForKey:@"keypadAccess"] boolValue];
AugustAPI/august-api/AGAirbnbListing.m:62:    NSDictionary *parameters = @{@"appAccess": [NSNumber numberWithBool:airbnbLockAccess.appAccess], @"keypadAccess": [NSNumber numberWithBool:airbnbLockAccess.keypadAccess]};
AugustAPI/august-api/AGAirbnbListing.m:63:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"airbnb/listings/%@/locks/%@", airbnbListingID, airbnbLockAccess.lockId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDiary.m:67:        case AGDiaryLevel_Error:            return @"Error";
AugustAPI/august-api/AGDiary.m:68:        case AGDiaryLevel_Warn:             return @"Warn";
AugustAPI/august-api/AGDiary.m:69:        case AGDiaryLevel_Info:             return @"Info";
AugustAPI/august-api/AGDiary.m:70:        case AGDiaryLevel_Debug:            return @"Debug";
AugustAPI/august-api/AGDiary.m:71:        case AGDiaryLevel_Verbose:          return @"Verbose";
AugustAPI/august-api/AGDiary.m:73:            AGDiaryWarn(nil, @"Unrecognized AGDiaryLevel %d", level);
AugustAPI/august-api/AGDiary.m:74:            NSAssert(NO, @"Unrecognized AGDiaryLevel %u", level);
AugustAPI/august-api/AGDiary.m:83:    return ([categoryName rangeOfString:@"^[a-zA-Z0-9]+$" options:NSRegularExpressionSearch].length != 0);
AugustAPI/august-api/AGDiary.m:95:    return ([eventName rangeOfString:@"^[a-zA-Z0-9\\+]+$" options:NSRegularExpressionSearch].length != 0);
AugustAPI/august-api/AGDiary.m:104:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
AugustAPI/august-api/AGDiary.m:124:    NSAssert([self isAcceptableCategoryName:category], @"Can't create canonical event name with bad category name '%@'", category);
AugustAPI/august-api/AGDiary.m:125:    NSAssert([self isAcceptableEventName:event], @"Can't create canonical event name with bad event name '%@'", event);
AugustAPI/august-api/AGDiary.m:126:    return [NSString stringWithFormat:@"%@.%@", category, event];
AugustAPI/august-api/AGDiary.m:135:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
AugustAPI/august-api/AGDiary.m:154:    NSArray* parts = [canonicalName componentsSeparatedByString:@"."];
AugustAPI/august-api/AGDiary.m:182:        AGDiaryError(@"BadCategoryName", @"Can't log category named '%@' because it has illegal characters", category);
AugustAPI/august-api/AGDiary.m:183:        NSAssert(false, @"Can't log category named '%@' because it has illegal characters", category);
AugustAPI/august-api/AGDiary.m:190:        AGDiaryError(@"BadEventName", @"Can't log event named '%@' because it has illegal characters", event);
AugustAPI/august-api/AGDiary.m:191:        NSAssert(false, @"Can't log event named '%@' because it has illegal characters", event);
AugustAPI/august-api/AGDiary.m:197:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or a message.  Cannot have both be nil");
AugustAPI/august-api/AGDiary.m:198:        NSAssert(false, @"You need to specify either an event or a message.  Cannot have both be nil");
AugustAPI/august-api/AGKey.m:33:	NSString * path = [@"locks/" stringByAppendingString:lockID];
AugustAPI/august-api/AGKey.m:36:		//DLog(@"locks %@", responseObject.description);
AugustAPI/august-api/AGKey.m:54:            key.objectId = responseObject[@"key"];//not sure I'm understanding what is being returned here
AugustAPI/august-api/AGLockLog.m:54:        fileName = [[NSString alloc] initWithFormat:@"%@/bleLockLogsToUpload.plist", documentsDirectory];
AugustAPI/august-api/AGLockLog.m:65:    recursiveLock.name = [NSString stringWithFormat:@"<%@: %p> recursiveLock", NSStringFromClass([self class]), self];
AugustAPI/august-api/AGLockLog.m:97:    NSDictionary *parameters = @{@"action": action,
AugustAPI/august-api/AGLockLog.m:98:                                 @"mechanical": mechanical,
AugustAPI/august-api/AGLockLog.m:99:                                 @"crypto": crypto,
AugustAPI/august-api/AGLockLog.m:100:                                 @"dateTime": [AGDateUtils ISO8601UTCDateTimeStringFromDate:[NSDate date]]};
AugustAPI/august-api/AGLockLog.m:101:    NSString *path = [NSString stringWithFormat:@"/locks/usage/%@", lockID];
AugustAPI/august-api/AGLockLog.m:102:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", parameters, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:103:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:109:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockdata", lockID];
AugustAPI/august-api/AGLockLog.m:110:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", lockData, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:111:    [log setObject:@"POST" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:117:    NSString *path = [NSString stringWithFormat:@"/locks/timeadustment/%@/%d/%d", lockID, realTimeSentToLock, lockTimeStamp];
AugustAPI/august-api/AGLockLog.m:118:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", nil, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:119:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:162:                if([log objectForKey:@"HTTPMethod"] != nil) {
AugustAPI/august-api/AGLockLog.m:163:                    [[AGClient sharedClient] sendSynchronousRequestWithPath:[log objectForKey:@"path"] parameters:[log objectForKey:@"parameters"] httpMthod:[log objectForKey:@"HTTPMethod"]];
AugustAPI/august-api/AGKeypad.m:19:        self.objectId = [dict objectForKey:@"_id"];
AugustAPI/august-api/AGKeypad.m:28:    [keypadDictionary setObject:self.objectId forKey:@"_id"];
AugustAPI/august-api/AGKeypad.m:30:        [keypadDictionary setObject:self.serialNumber forKey:@"serialNumber"];
AugustAPI/august-api/AGKeypad.m:33:        [keypadDictionary setObject:self.currentFirmwareVersion forKey:@"currentFirmwareVersion"];
AugustAPI/august-api/AGKeypad.m:36:        [keypadDictionary setObject:self.batteryLevel forKey:@"batteryLevel"];
AugustAPI/august-api/AGKeypad.m:39:        [keypadDictionary setObject:self.associatedLockId forKey:@"lockID"];
AugustAPI/august-api/AGKeypad.m:46:    self.serialNumber = [dict objectForKey:@"serialNumber"];
AugustAPI/august-api/AGKeypad.m:47:    self.currentFirmwareVersion =  [dict objectForKey:@"currentFirmwareVersion"];
AugustAPI/august-api/AGKeypad.m:49:        self.currentFirmwareVersion = @"0.0";
AugustAPI/august-api/AGKeypad.m:51:    self.batteryLevel = [dict objectForKey:@"batteryLevel"];
AugustAPI/august-api/AGKeypad.m:53:        self.batteryLevel = @"Unknown";
AugustAPI/august-api/AGKeypad.m:55:    self.associatedLockId = [dict objectForKey:@"lockID"];
AugustAPI/august-api/AGKeypad.m:60:    NSString * path = [@"keypads/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGKeypad.m:80:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/handshakeKey", self.objectId];
AugustAPI/august-api/AGKeypad.m:82:        [[AGClient sharedClient] putPath:path parameters:@{@"nextHandshakeKey":updatedHandshakeKey} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGKeypad.m:100:        [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"/keypads/firmware/%@/%@", self.objectId, myCurrentFirmwareVersion] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGKeypad.m:103:                    block(@{@"data": responseObject},nil);
AugustAPI/august-api/AGKeypad.m:121:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
AugustAPI/august-api/AGKeypad.m:133:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:139:                                        block([responseDictionary objectForKey:@"resetCode"], nil);
AugustAPI/august-api/AGKeypad.m:159:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
AugustAPI/august-api/AGKeypad.m:167:                                         NSString *newFirmwareVersion =  [((NSDictionary *)[responseDictionary objectForKey:@"updateInfo"]) objectForKey:@"version"];
AugustAPI/august-api/AGKeypad.m:170:                                             block(false, [NSError errorWithDomain:@"AGKeypad" code:-1 userInfo:nil]);
AugustAPI/august-api/AGKeypad.m:193:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:201:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
AugustAPI/august-api/AGKeypad.m:216:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:217:    [[AGClient sharedClient] putPath:path parameters:@{@"resetCode":resetCode} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGKeypad.m:233:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:19:        NSString *accessTypeString = [dict objectForKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:21:        if ([accessTypeString isEqualToString:@"onetime"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:25:        NSString *timeStrings = [dict objectForKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:28:            times = [timeStrings componentsSeparatedByString:@";"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:31:        if ([accessTypeString isEqualToString:@"recurring"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:33:            self.daysOfWeek = [[AGRule new] recurrenceDaySetFromString:[dict objectForKey:@"accessRecurrence"]];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:35:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:39:                    if ([dateType isEqualToString:@"STARTSEC"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:42:                    if ([dateType isEqualToString:@"ENDSEC"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:50:        if ([accessTypeString isEqualToString:@"temporary"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:54:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:58:                    if ([dateType isEqualToString:@"DTSTART"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:61:                    if ([dateType isEqualToString:@"DTEND"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:68:        if ([accessTypeString isEqualToString:@"onetime"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:79:        [dict setObject:@"always" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:83:        [dict setObject:@"onetime" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:87:        [dict setObject:@"temporary" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:89:        NSString *timeString = [NSString stringWithFormat:@"DTSTART=%@;DTEND=%@", [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.startDate], [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.endDate]];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:90:        [dict setObject:timeString forKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:94:        [dict setObject:@"recurring" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:95:        NSString *timeString = [NSString stringWithFormat:@"STARTSEC=%d;ENDSEC=%d", (int) _recurStartSec, (int) _recurEndSec];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:96:        [dict setObject:timeString forKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:99:        [dict setObject:[NSString stringWithFormat:@"FREQ=WEEKLY;INTERVAL=1;BYDAY=%@", recurrenceDays] forKey:@"accessRecurrence"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:173:        NSArray *daysOfWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:181:                if ([day isEqualToString:@"TR"]) {
AugustAPI/august-api/AGSubscriptionItem.m:15:    if ([statusString isEqualToString:@"paid"]) {
AugustAPI/august-api/AGSubscriptionItem.m:18:    if ([statusString isEqualToString:@"trial"]) {
AugustAPI/august-api/AGSubscriptionItem.m:21:    if ([statusString isEqualToString:@"trial_expired"]) {
AugustAPI/august-api/AGSubscriptionItem.m:24:    if ([statusString isEqualToString:@"past_due"]) {
AugustAPI/august-api/AGSubscriptionItem.m:27:    if ([statusString isEqualToString:@"expired"]) {
AugustAPI/august-api/AGSubscriptionItem.m:30:    if ([statusString isEqualToString:@"cancelled"]) {
AugustAPI/august-api/AGSubscriptionItem.m:33:    if ([statusString isEqualToString:@"created"]) {
AugustAPI/august-api/AGSubscriptionItem.m:42:            return @"trial";
AugustAPI/august-api/AGSubscriptionItem.m:46:            return @"trial_expired";
AugustAPI/august-api/AGSubscriptionItem.m:50:            return @"paid";
AugustAPI/august-api/AGSubscriptionItem.m:54:            return @"past_due";
AugustAPI/august-api/AGSubscriptionItem.m:58:            return @"expired";
AugustAPI/august-api/AGSubscriptionItem.m:62:            return @"cancelled";
AugustAPI/august-api/AGSubscriptionItem.m:66:            return @"created";
AugustAPI/august-api/AGSubscriptionItem.m:70:            return @"Unknown";
AugustAPI/august-api/AGSubscriptionItem.m:78:    sub.userID = [dict objectForKey:@"userID"];
AugustAPI/august-api/AGSubscriptionItem.m:82:    sub.type = [dict objectForKey:@"type"];
AugustAPI/august-api/AGSubscriptionItem.m:83:    sub.status = [AGSubscriptionItem subStatusFromString:[dict objectForKey:@"status"]];
AugustAPI/august-api/AGSubscriptionItem.m:84:    NSString *dateString = [dict objectForKey:@"expiresAt"];
AugustAPI/august-api/AGSubscriptionItem.m:118:        [dict setObject:self.userID forKey:@"userID"];
AugustAPI/august-api/AGSubscriptionItem.m:121:        [dict setObject:self.type forKey:@"type"];
AugustAPI/august-api/AGSubscriptionItem.m:124:    [dict setObject:[AGSubscriptionItem infoStringFromSubscriptionStatus:self.status] forKey:@"status"];
AugustAPI/august-api/AGSubscriptionItem.m:128:                 forKey:@"expiresAt"];
AugustAPI/august-api/AGSubscriptionItem.m:137:        return @"Premium";
AugustAPI/august-api/AGSubscriptionItem.m:139:        return @"Basic";
AugustAPI/august-api/AGSubscriptionItem.m:158:        return [NSString stringWithFormat:@"%d day%@", daysLeft, (daysLeft==1)?@"":@"s"];
AugustAPI/august-api/AGSubscriptionItem.m:162:        return [NSString stringWithFormat:@"%d month%@", months, (months==1)?@"":@"s"];
AugustAPI/august-api/AGClient.h:10:static NSString * const kInternalCacheMarkerFlag = @"_InternalClientCached";
AugustAPI/august-api/AGClient.h:12:static NSString * const kSezamAPIBaseURLString = @"https://api-production.august.com";
AugustAPI/august-api/AGClient.h:13:static NSString * const kSezamAPIVersion = @"0.0.1";
AugustAPI/august-api/AGClient.h:43://Posts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGClient.h:58://Puts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGClient.h:65://Deletes the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGConstants.m:3:NSString* const kAGUserDefaultsHasShownLockViewCoachMarksKey = @"AGUserDefaultsHasShownLockViewCoachMarks";
AugustAPI/august-api/AGConstants.m:5:NSString* const kSezam = @"Sezam";
AugustAPI/august-api/AGConstants.m:6:NSString* const kUsername = @"username";
AugustAPI/august-api/AGConstants.m:7:NSString* const kPassword = @"password";
AugustAPI/august-api/AGConstants.m:8:NSString* const kApiKey = @"x-august-api-key";
AugustAPI/august-api/AGConstants.m:9:NSString* const kApiKeyValue = @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
AugustAPI/august-api/AGConstants.m:10:NSString* const kToken = @"token";
AugustAPI/august-api/AGConstants.m:11:NSString* const kAccessToken = @"x-august-access-token";
AugustAPI/august-api/AGConstants.m:13:NSString* const kCreatedKey = @"Created";
AugustAPI/august-api/AGConstants.m:14:NSString* const kUpdatedKey = @"Updated";
AugustAPI/august-api/AGConstants.m:17:NSString* const kUserNameKey = @"UserName";
AugustAPI/august-api/AGConstants.m:18:NSString* const kUserPasswordKey = @"UserPassword";
AugustAPI/august-api/AGConstants.m:19:NSString* const kUserIDKey = @"UserID";
AugustAPI/august-api/AGConstants.m:20:NSString* const kEmailKey = @"Email";
AugustAPI/august-api/AGConstants.m:21:NSString* const kInvitationCodeKey = @"InvitationCode";
AugustAPI/august-api/AGConstants.m:22:NSString* const kFirstNameKey = @"FirstName";
AugustAPI/august-api/AGConstants.m:23:NSString* const kLastNameKey = @"LastName";
AugustAPI/august-api/AGConstants.m:24:NSString* const kMacAddressKey = @"MacAddress";
AugustAPI/august-api/AGConstants.m:26:NSString* const kHouseNameKey = @"HouseName";
AugustAPI/august-api/AGConstants.m:27:NSString* const kHouseIdKey = @"HouseID";
AugustAPI/august-api/AGConstants.m:28:NSString* const kCityKey = @"City";
AugustAPI/august-api/AGConstants.m:29:NSString* const kStateKey = @"State";
AugustAPI/august-api/AGConstants.m:30:NSString* const kPostalCodeKey = @"PostalCode";
AugustAPI/august-api/AGConstants.m:31:NSString* const kStreetKey = @"Street";
AugustAPI/august-api/AGConstants.m:32:NSString* const kApartmentKey = @"Apartment";
AugustAPI/august-api/AGConstants.m:33:NSString* const kPhoneNoKey = @"PhoneNo";
AugustAPI/august-api/AGConstants.m:34:NSString* const kPartnerTokensKey = @"tokens";
AugustAPI/august-api/AGConstants.m:35:NSString* const kNotificationKey = @"notification";
AugustAPI/august-api/AGConstants.m:36:NSString* const kImageInfoKey = @"imageInfo";
AugustAPI/august-api/AGConstants.m:37:NSString* const kImageOriginalKey = @"original";
AugustAPI/august-api/AGConstants.m:38:NSString* const kImageThumbKey = @"thumbnail";
AugustAPI/august-api/AGConstants.m:39:NSString* const kImageURLKey = @"secure_url";
AugustAPI/august-api/AGConstants.m:40:NSString* const kNestEnabledKey = @"nestEnabled";
AugustAPI/august-api/AGConstants.m:41:NSString* const kTimeZoneKey = @"timeZone";
AugustAPI/august-api/AGConstants.m:42:NSString* const kUserIdentifiers = @"identifiers";
AugustAPI/august-api/AGConstants.m:43:NSString* const kUserIdentifier = @"identifier";
AugustAPI/august-api/AGConstants.m:44:NSString* const kUserTypeKeyLock = @"UserType";
AugustAPI/august-api/AGConstants.m:45:NSString* const kUserTypeKeyHouse = @"type";
AugustAPI/august-api/AGConstants.m:46:NSString* const kUserVerificationCodeKey = @"VerificationCode";
AugustAPI/august-api/AGConstants.m:47:NSString* const kUserVerificationPhoneNumberKey = @"VerificationPhoneNumber";
AugustAPI/august-api/AGConstants.m:48:NSString* const kRuleIDsKey = @"rules";
AugustAPI/august-api/AGConstants.m:51:NSString* const kLockNameKey = @"LockName";
AugustAPI/august-api/AGConstants.m:52:NSString* const kLockStatusKey = @"LockStatus";
AugustAPI/august-api/AGConstants.m:53:NSString* const kLockHomeKitEnabledKey = @"homeKitEnabled";
AugustAPI/august-api/AGConstants.m:54:NSString* const kLockZWaveEnabledKey = @"zWaveEnabled";
AugustAPI/august-api/AGConstants.m:55:NSString* const kLockFirmwareVersionKey = @"FirmwareVersion";
AugustAPI/august-api/AGConstants.m:56:NSString* const kLockFirmwareVersionFromServerKey = @"currentFirmwareVersion";
AugustAPI/august-api/AGConstants.m:57:NSString* const kLockPubsubChannelKey = @"pubsubChannel";
AugustAPI/august-api/AGConstants.m:58:NSString* const kLockIdKey = @"LockID";
AugustAPI/august-api/AGConstants.m:59:NSString* const kLockTypeKey = @"Type";
AugustAPI/august-api/AGConstants.m:60:NSString* const kLockKIVKey = @"KIV";
AugustAPI/august-api/AGConstants.m:61:NSString* const kLockBatteryLevelKey = @"battery";
AugustAPI/august-api/AGConstants.m:62:NSString* const kLockIsGalileoKey = @"isGalileo";
AugustAPI/august-api/AGConstants.m:63:NSString* const kZWaveDSKKey = @"zWaveDSK";
AugustAPI/august-api/AGConstants.m:64:NSString* const kLockDoorStateOpenTimeoutKey = @"doorStateOpenTimeout";
AugustAPI/august-api/AGConstants.m:66:NSString* const kMessagingProtocol = @"messagingProtocol";
AugustAPI/august-api/AGConstants.m:67:NSString* const KMessagingURL = @"messagingURL";
AugustAPI/august-api/AGConstants.m:69:NSString* const kDoorStateKey = @"doorState";
AugustAPI/august-api/AGConstants.m:70:NSString* const kDoorStateInitKey = @"init";
AugustAPI/august-api/AGConstants.m:71:NSString* const kDoorStateClosedKey = @"closed";
AugustAPI/august-api/AGConstants.m:72:NSString* const kDoorStateAjarKey = @"ajar";
AugustAPI/august-api/AGConstants.m:73:NSString* const kDoorStateOpenKey = @"open";
AugustAPI/august-api/AGConstants.m:74:NSString* const kDoorStateUnknownKey = @"unknown";
AugustAPI/august-api/AGConstants.m:76:NSString* const kLockKeyKey = @"key";
AugustAPI/august-api/AGConstants.m:78:NSString* const kBridgeKey = @"Bridge";  //identifies bridge data within the response to GET /locks/:lockId
AugustAPI/august-api/AGConstants.m:79:NSString* const kBridgeIdKey = @"_id";
AugustAPI/august-api/AGConstants.m:80:NSString* const kBridgeMfgIdKey = @"mfgBridgeID";
AugustAPI/august-api/AGConstants.m:81:NSString* const kBridgeModelKey = @"deviceModel";
AugustAPI/august-api/AGConstants.m:82:NSString* const kBridgeFirmwareVersionKey = @"firmwareVersion";
AugustAPI/august-api/AGConstants.m:83:NSString* const KBridgeNotificationTypeKey = @"category";
AugustAPI/august-api/AGConstants.m:84:NSString* const kBridgeNotificationChannelKey = @"channel";
AugustAPI/august-api/AGConstants.m:85:NSString* const kBridgeStatusDictKey = @"status";
AugustAPI/august-api/AGConstants.m:86:NSString* const kBridgeCurrentStatusKey = @"current";
AugustAPI/august-api/AGConstants.m:87:NSString* const kBridgeHyperBridgeKey = @"hyperBridge";
AugustAPI/august-api/AGConstants.m:90:NSString* const kDoorbellIdKey = @"doorbellID";
AugustAPI/august-api/AGConstants.m:91:NSString* const kDoorbellSerialNumber = @"serialNumber";
AugustAPI/august-api/AGConstants.m:92:NSString* const kDoorbellFirmwareVersion = @"firmwareVersion";
AugustAPI/august-api/AGConstants.m:93:NSString* const kDoorbellName = @"name";
AugustAPI/august-api/AGConstants.m:94:NSString* const kDoorbellModel = @"model";
AugustAPI/august-api/AGConstants.m:95:NSString* const kDoorbellPubsubChannel = @"pubsubChannel";
AugustAPI/august-api/AGConstants.m:96:NSString* const kDoorbellStatus = @"status";
AugustAPI/august-api/AGConstants.m:97:NSString* const kDoorbellOTAStatus = @"ota_status";
AugustAPI/august-api/AGConstants.m:98:NSString* const kDoorbellPubnubPresence = @"pubnubPresence";
AugustAPI/august-api/AGConstants.m:99:NSString* const kDoorbellAction = @"action";
AugustAPI/august-api/AGConstants.m:100:NSString* const kDoorbellAssociatedLockId = @"LockID";
AugustAPI/august-api/AGConstants.m:101:NSString* const kDoorbellCallNotification = @"buttonpush_notifications";
AugustAPI/august-api/AGConstants.m:102:NSString* const kDoorbellMotionNotification = @"motion_notifications";
AugustAPI/august-api/AGConstants.m:103:NSString* const kDoorbellOfflineNotification = @"notify_when_offline";
AugustAPI/august-api/AGConstants.m:104:NSString* const kDoorbellSound = @"ringSoundEnabled";
AugustAPI/august-api/AGConstants.m:105:NSString* const kSpeakerVolume = @"speakerVolume";
AugustAPI/august-api/AGConstants.m:106:NSString* const kMotionSensitivity = @"irConfiguration";
AugustAPI/august-api/AGConstants.m:107:NSString* const kMotionDoorbellDeviceSetting = @"IREnabled";
AugustAPI/august-api/AGConstants.m:108:NSString* const kTurnOffCamera = @"turnOffCamera";
AugustAPI/august-api/AGConstants.m:109:NSString* const kKeepEncoderRunning = @"keepEncoderRunning";
AugustAPI/august-api/AGConstants.m:110:NSString* const kDoorbellTelemetry = @"telemetry";
AugustAPI/august-api/AGConstants.m:111:NSString* const kDoorbellServerURL = @"doorbellServerURL";
AugustAPI/august-api/AGConstants.m:112:NSString* const kVideoResolution = @"videoResolution";
AugustAPI/august-api/AGConstants.m:114:NSString* const kLogoBrightness = @"flashBrightness";
AugustAPI/august-api/AGConstants.m:115:NSString* const kLogoDuringCall = @"flashDuringCall";
AugustAPI/august-api/AGConstants.m:116:NSString* const kHaloBrightnessX = @"haloBrightnessX";
AugustAPI/august-api/AGConstants.m:118:NSString* const kBluetoothPinKey = @"BluetoothPin";
AugustAPI/august-api/AGConstants.m:119:NSString* const kMCUDataKey = @"MCUData";
AugustAPI/august-api/AGConstants.m:120:NSString* const kRFDataKey = @"RFData";
AugustAPI/august-api/AGConstants.m:121:NSString* const kSetupKey = @"Setup";
AugustAPI/august-api/AGConstants.m:123:NSString* const kUsersKey = @"users";
AugustAPI/august-api/AGConstants.m:124:NSString* const kInvitationsKey = @"invitations";
AugustAPI/august-api/AGConstants.m:125:NSString* const kRuleHashKey = @"ruleHash";
AugustAPI/august-api/AGConstants.m:126:NSString* const kOfflineKeysKey = @"OfflineKeys";
AugustAPI/august-api/AGConstants.m:127:NSString* const kParametersToSetKey = @"parametersToSet";
AugustAPI/august-api/AGConstants.m:129:NSString* const kRuleStartTime = @"startTime";
AugustAPI/august-api/AGConstants.m:130:NSString* const kRuleDuration = @"duration";
AugustAPI/august-api/AGConstants.m:131:NSString* const kRuleRecurrence = @"recurrence";
AugustAPI/august-api/AGConstants.m:132:NSString* const kRuleSchedule = @"schedule";
AugustAPI/august-api/AGConstants.m:134:NSString* const kLockUserTypeSuperUser = @"superuser";
AugustAPI/august-api/AGConstants.m:135:NSString* const kLockUserTypeManager = @"manager";
AugustAPI/august-api/AGConstants.m:136:NSString* const kLockUserTypeUser = @"user";
AugustAPI/august-api/AGConstants.m:137:NSString* const kLockUserTypeLimited = @"limited";
AugustAPI/august-api/AGConstants.m:138:NSString* const KManualLockNotificationTypeKey = @"NotificationType";
AugustAPI/august-api/AGConstants.m:140:NSString* const kRemoteOperateCommand_Status = @"status";
AugustAPI/august-api/AGConstants.m:141:NSString* const kRemoteOperateCommand_Lock = @"lock";
AugustAPI/august-api/AGConstants.m:142:NSString* const kRemoteOperateCommand_Unlock = @"unlock";
AugustAPI/august-api/AGConstants.m:144:NSString* const kRemoteOperateStatus_Locked = @"kAugLockState_Locked";
AugustAPI/august-api/AGConstants.m:145:NSString* const kRemoteOperateStatus_Unlocked = @"kAugLockState_Unlocked";
AugustAPI/august-api/AGConstants.m:146:NSString* const kRemoteOperateStatus_Locking = @"kAugLockState_Locking";
AugustAPI/august-api/AGConstants.m:147:NSString* const kRemoteOperateStatus_Unlocking = @"kAugLockState_Unlocking";
AugustAPI/august-api/AGConstants.m:148:NSString* const kRemoteOperateStatus_Unknown = @"kAugLockState_UnknownStaticPosition";
AugustAPI/august-api/AGConstants.m:150:NSString* const kPinsKey = @"pins";
AugustAPI/august-api/AGConstants.m:151:NSString* const kKeypadKey = @"keypad";
AugustAPI/august-api/AGConstants.m:152:NSString* const kGeofenceLimitsKey = @"geofenceLimits";
AugustAPI/august-api/AGConstants.m:153:NSString* const kDebounceIntervalKey = @"debounceInterval";
AugustAPI/august-api/AGConstants.m:154:NSString* const kGpsAccuracyMultiplierKey = @"gpsAccuracyMultiplier";
AugustAPI/august-api/AGConstants.m:155:NSString* const kMaximumGeofenceKey = @"maximumGeofence" ;
AugustAPI/august-api/AGConstants.m:156:NSString* const kMinimumGeofenceKey = @"minimumGeofence";
AugustAPI/august-api/AGConstants.m:157:NSString* const kMinGPSAccuracyRequiredKey = @"minGPSAccuracyRequired";
AugustAPI/august-api/AGConstants.m:158:NSString* const kGeofenceLimitsVersionKey = @"version";
AugustAPI/august-api/AGConstants.m:161:NSString* const kAGErrorDomain = @"AGError";
AugustAPI/august-api/AGConstants.m:167:NSString* const kInvalidCredentials = @"InvalidCredentials";
AugustAPI/august-api/AGConstants.m:190:NSString* const kSubscriptionIDKey = @"subscriptionID";
AugustAPI/august-api/AGConstants.m:191:NSString* const kSubscriptionDeviceIDKey = @"deviceID";
AugustAPI/august-api/AGConstants.m:192:NSString* const kSubscriptionDeviceTypeKey = @"deviceType";
AugustAPI/august-api/AGConstants.m:194:NSString* const kLockSettingsIcon = @"LockSettingsIcon";
AugustAPI/august-api/AGConstants.m:195:NSString* const kLockSetupHeroImage = @"LockSetupHeroImage";
AugustAPI/august-api/AGConstants.m:196:NSString* const kCalibrationImageLockAndDoorQuestion = @"CalibrationImage-LockAndDoorQuestion";
AugustAPI/august-api/AGConstants.m:197:NSString* const kCalibrationImageStart = @"CalibrationImage-Start";
AugustAPI/august-api/AGConstants.m:198:NSString* const kCalibrationImageClosedAndLockedLock = @"CalibrationImage-ClosedAndLockedLock";
AugustAPI/august-api/AGConstants.m:199:NSString* const kCalibrationImageClosedAndUnlockedLock = @"CalibrationImage-ClosedAndUnlockedLock";
AugustAPI/august-api/AGConstants.m:200:NSString* const kCalibrationImageDoorWideOpenDoor = @"CalibrationImage-DoorWideOpenDoor";
AugustAPI/august-api/AGConstants.m:201:NSString* const kCalibrationImageDoorAjarDoor = @"CalibrationImage-DoorAjarDoor";
AugustAPI/august-api/AGConstants.m:202:NSString* const kCalibrationImageClosedAndUnlockedDoor = @"CalibrationImage-ClosedAndUnlockedDoor";
AugustAPI/august-api/AGConstants.m:203:NSString* const kCalibrationImageFinished = @"CalibrationImage-Finished";
AugustAPI/august-api/AGObject.m:20:	return [NSString stringWithFormat:@"%@ %@", NSStringFromClass([self class]), self.objectId];
AugustAPI/august-api/AGObject.m:30:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:56:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:84:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:93:    if ([str isEqualToString:@"lock"]) {
AugustAPI/august-api/AGObject.m:96:    if ([str isEqualToString:@"doorbell"]) {
AugustAPI/august-api/AGObject.m:104:            return @"lock";
AugustAPI/august-api/AGObject.m:108:            return @"doorbell";
AugustAPI/august-api/AGObject.m:112:            return @"unknown";
AugustAPI/august-api/AGDoorbell.m:21:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:27:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:45:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:70:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:76:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:93:        [parameters setObject:doorbellType forKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:97:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:128:        [dict setObject:self.type forKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:148:            [caps addObject:@"join"];
AugustAPI/august-api/AGDoorbell.m:151:            [caps addObject:@"webrtc"];
AugustAPI/august-api/AGDoorbell.m:153:        [dict setObject:caps forKey:@"caps"];
AugustAPI/august-api/AGDoorbell.m:160:        [intellivisionCreds setObject:self.deviceId forKey:@"deviceID"];
AugustAPI/august-api/AGDoorbell.m:161:        [dict setObject:intellivisionCreds.copy forKey:@"intellivisionCreds"];
AugustAPI/august-api/AGDoorbell.m:165:        [settings setObject:@"1" forKey:kTurnOffCamera];
AugustAPI/august-api/AGDoorbell.m:167:        [settings setObject:@"0" forKey:kTurnOffCamera];
AugustAPI/august-api/AGDoorbell.m:170:        [settings setObject:@"1" forKey:kKeepEncoderRunning];
AugustAPI/august-api/AGDoorbell.m:172:        [settings setObject:@"0" forKey:kKeepEncoderRunning];
AugustAPI/august-api/AGDoorbell.m:174:    [dict setObject:settings.copy forKey:@"settings"];
AugustAPI/august-api/AGDoorbell.m:183:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:191:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:210:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@", self.objectId] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:231:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:237:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:265:    NSDictionary *intellivisionCreds = (NSDictionary *)[response objectForKey:@"intellivisionCreds"];
AugustAPI/august-api/AGDoorbell.m:267:        NSString *deviceID = [intellivisionCreds objectForKey:@"deviceID"];
AugustAPI/august-api/AGDoorbell.m:278:    self.type = [response objectForKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:281:            if ([self.type isEqualToString:@"homekit"]) {
AugustAPI/august-api/AGDoorbell.m:285:            if ([self.type isEqualToString:@"mars"] || [self.type isEqualToString:@"mars2"]) {
AugustAPI/august-api/AGDoorbell.m:291:        if ([self.serialNumber hasPrefix:@"D2"]) {
AugustAPI/august-api/AGDoorbell.m:292:            self.type = @"mars2";
AugustAPI/august-api/AGDoorbell.m:294:            self.type = @"mars";
AugustAPI/august-api/AGDoorbell.m:303:    if (response[@"currentDoorbellAppVersion"]) {
AugustAPI/august-api/AGDoorbell.m:304:        doorbell.firmwareVersion = response[@"currentDoorbellAppVersion"];
AugustAPI/august-api/AGDoorbell.m:307:        self.firmwareVersion = @"Unknown";
AugustAPI/august-api/AGDoorbell.m:314:        self.messagingProtocol = @"pubnub";
AugustAPI/august-api/AGDoorbell.m:319:        self.messagingURL = @"";
AugustAPI/august-api/AGDoorbell.m:330:    NSDictionary *settingsDictionary = (NSDictionary *)[response objectForKey:@"settings"];
AugustAPI/august-api/AGDoorbell.m:371:        if (settingsDictionary[@"saturation"]) {
AugustAPI/august-api/AGDoorbell.m:372:            doorbell.saturation = [settingsDictionary[@"saturation"] intValue];
AugustAPI/august-api/AGDoorbell.m:374:        if (settingsDictionary[@"brightness"]) {
AugustAPI/august-api/AGDoorbell.m:375:            doorbell.brightness = [settingsDictionary[@"brightness"] intValue];
AugustAPI/august-api/AGDoorbell.m:377:        if (settingsDictionary[@"hue"]) {
AugustAPI/august-api/AGDoorbell.m:378:            doorbell.hue = [settingsDictionary[@"hue"] intValue];
AugustAPI/august-api/AGDoorbell.m:380:        if (settingsDictionary[@"contrast"]) {
AugustAPI/august-api/AGDoorbell.m:381:            doorbell.contrast = [settingsDictionary[@"contrast"] intValue];
AugustAPI/august-api/AGDoorbell.m:383:        if (settingsDictionary[@"sharpness"]) {
AugustAPI/august-api/AGDoorbell.m:384:            doorbell.sharpness = [settingsDictionary[@"sharpness"] intValue];
AugustAPI/august-api/AGDoorbell.m:386:        if (settingsDictionary[@"auto_contrast_mode"]) {
AugustAPI/august-api/AGDoorbell.m:387:            doorbell.autoContrastMode = [settingsDictionary[@"auto_contrast_mode"] intValue];
AugustAPI/august-api/AGDoorbell.m:389:        if (settingsDictionary[@"backlight_comp"]) {
AugustAPI/august-api/AGDoorbell.m:390:            doorbell.BacklightComp = [settingsDictionary[@"backlight_comp"] intValue];
AugustAPI/august-api/AGDoorbell.m:395:    if ([[response objectForKey:@"caps"] isKindOfClass:[NSArray class]]) {
AugustAPI/august-api/AGDoorbell.m:396:        NSArray *capabilitiesArray = (NSArray *)[response objectForKey:@"caps"];
AugustAPI/august-api/AGDoorbell.m:398:            if ([capability isEqualToString:@"join"]) {
AugustAPI/august-api/AGDoorbell.m:401:            if([capability isEqualToString:@"webrtc"]){
AugustAPI/august-api/AGDoorbell.m:407:    NSDictionary *recentImage = (NSDictionary *)[response objectForKey:@"recentImage"];
AugustAPI/august-api/AGDoorbell.m:409:        NSString *url = [recentImage objectForKey:@"secure_url"];
AugustAPI/august-api/AGDoorbell.m:410:        NSNumber *height = [NSNumber numberWithInt:[[recentImage objectForKey:@"height"] intValue]];
AugustAPI/august-api/AGDoorbell.m:411:        NSNumber *width = [NSNumber numberWithInt:[[recentImage objectForKey:@"width"] intValue]];
AugustAPI/august-api/AGDoorbell.m:412:        NSString *dateString = [recentImage objectForKey:@"created_at"];
AugustAPI/august-api/AGDoorbell.m:414:        if ((dateString != nil) && (![dateString isEqualToString:@""])) {
AugustAPI/august-api/AGDoorbell.m:420:        if (url) {doorbellImageDictionary[@"url"] = url;}
AugustAPI/august-api/AGDoorbell.m:421:        if (height) {doorbellImageDictionary[@"height"] = height;}
AugustAPI/august-api/AGDoorbell.m:422:        if (width) {doorbellImageDictionary[@"width"] = width;}
AugustAPI/august-api/AGDoorbell.m:423:        if (date) {doorbellImageDictionary[@"date"] = date;}
AugustAPI/august-api/AGDoorbell.m:426:    NSDictionary *usersDictionary = (NSDictionary *)[response objectForKey:@"users"];
AugustAPI/august-api/AGDoorbell.m:430:    NSArray *invitationsArray = (NSArray *)[response objectForKey:@"invitations"];
AugustAPI/august-api/AGDoorbell.m:440:    if ([videoResolution isEqualToString:@"640x480"]) {
AugustAPI/august-api/AGDoorbell.m:442:    } else if ([videoResolution isEqualToString:@"960x720"]) {
AugustAPI/august-api/AGDoorbell.m:444:    } else if ([videoResolution isEqualToString:@"1280x960"]) {
AugustAPI/august-api/AGDoorbell.m:456:            videoResolution = @"640x480";
AugustAPI/august-api/AGDoorbell.m:459:            videoResolution = @"960x720";
AugustAPI/august-api/AGDoorbell.m:462:            videoResolution = @"1280x960";
AugustAPI/august-api/AGDoorbell.m:465:            videoResolution = @"640x480";
AugustAPI/august-api/AGDoorbell.m:476:            videoResolutionString = @"Good (480p)";
AugustAPI/august-api/AGDoorbell.m:479:            videoResolutionString = @"Better (720p)";
AugustAPI/august-api/AGDoorbell.m:482:            videoResolutionString = @"Best (960p)";
AugustAPI/august-api/AGDoorbell.m:485:            videoResolutionString = @"480p";
AugustAPI/august-api/AGDoorbell.m:497:        user.firstName = [AGClient stringByDecodingXMLEntities:[invite objectForKey:@"Name"]];
AugustAPI/august-api/AGDoorbell.m:498:        user.type = [invite objectForKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:522:                    if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGDoorbell.m:524:                    }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGDoorbell.m:547:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:565:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:584:            param[@"saturation"] = value;
AugustAPI/august-api/AGDoorbell.m:587:            param[@"brightness"] = value;
AugustAPI/august-api/AGDoorbell.m:590:            param[@"hue"] = value;
AugustAPI/august-api/AGDoorbell.m:593:            param[@"contrast"] = value;
AugustAPI/august-api/AGDoorbell.m:596:            param[@"sharpness"] = value;
AugustAPI/august-api/AGDoorbell.m:599:            param[@"auto_contrast_mode"] = value;
AugustAPI/august-api/AGDoorbell.m:602:            param[@"backlight_comp"] = value;
AugustAPI/august-api/AGDoorbell.m:607:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId]
AugustAPI/august-api/AGDoorbell.m:624:    NSDictionary *parameters = @{@"fields":@"mp4url"};
AugustAPI/august-api/AGDoorbell.m:625:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/video/%@", self.objectId, event] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:628:                block([responseObject objectForKey:@"transactionID"], nil);
AugustAPI/august-api/AGDoorbell.m:641:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:658:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:675:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:692:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:709:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:726:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:761:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:778:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:794:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:810:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:825:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:842:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/user", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:861:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:869:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:891:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:899:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:920:    NSDictionary *parameters = @{@"Name":[user displayName]};
AugustAPI/august-api/AGDoorbell.m:922:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/adduser/%@", doorbellID, userId];
AugustAPI/august-api/AGDoorbell.m:944:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/%@", doorbellID, userId];
AugustAPI/august-api/AGDoorbell.m:963:    NSDictionary *parameters = @{@"dvrID": dvrID, @"description":description};
AugustAPI/august-api/AGDoorbell.m:964:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/videoevent/share", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:984:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/log", self.objectId] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:1003:    [[AGClient sharedClient] getPath:@"users/doorbells/mine" parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:1013:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGDoorbell.m:1019:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
AugustAPI/august-api/AGDoorbell.m:1057:    NSString *action = @"initiate";
AugustAPI/august-api/AGDoorbell.m:1058:    NSString *tokenKey = @"token";
AugustAPI/august-api/AGDoorbell.m:1060:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:parameters augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:1078:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/videoevent", self.objectId] parameters:@{@"dvrID":dvrEventID}
AugustAPI/august-api/AGDoorbell.m:1100:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1104:    NSString *action = @"status";
AugustAPI/august-api/AGDoorbell.m:1106:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil waitTime:5.0
AugustAPI/august-api/AGDoorbell.m:1113:                 NSDictionary *callStats = responseDictionary[@"callStats"];
AugustAPI/august-api/AGDoorbell.m:1115:                     if (callStats[@"answered_user"] == nil) {
AugustAPI/august-api/AGDoorbell.m:1119:                         doorbellCallStatus.answeredByUserId = callStats[@"answered_user"];
AugustAPI/august-api/AGDoorbell.m:1121:                     NSDictionary *image = callStats[@"image"];
AugustAPI/august-api/AGDoorbell.m:1123:                         doorbellCallStatus.imageHeight = [image[@"height"]intValue];
AugustAPI/august-api/AGDoorbell.m:1124:                         doorbellCallStatus.imageWidth = [image[@"width"] intValue];
AugustAPI/august-api/AGDoorbell.m:1125:                         doorbellCallStatus.imageUrl = image[@"secure_url"];
AugustAPI/august-api/AGDoorbell.m:1149:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1153:    NSString *action = @"respond";
AugustAPI/august-api/AGDoorbell.m:1160:            [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbell.objectId, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:1164:                     if (responseObject[@"videoAvailable"] != nil) {
AugustAPI/august-api/AGDoorbell.m:1165:                         doorbell.videoAvailable = [responseObject[@"videoAvailable"] boolValue];
AugustAPI/august-api/AGDoorbell.m:1190:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1194:    NSString *action = @"token";
AugustAPI/august-api/AGDoorbell.m:1196:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:1202:                 doorbellCallCredentials.customerID = intellivisionSessionInfo[@"customerID"];
AugustAPI/august-api/AGDoorbell.m:1203:                 doorbellCallCredentials.expiresAt = intellivisionSessionInfo[@"expiresAt"];
AugustAPI/august-api/AGDoorbell.m:1204:                 NSDictionary *session = (NSDictionary *)intellivisionSessionInfo[@"session"];
AugustAPI/august-api/AGDoorbell.m:1206:                     doorbellCallCredentials.apiKey = session[@"apiKey"];
AugustAPI/august-api/AGDoorbell.m:1207:                     doorbellCallCredentials.localID = session[@"localId"];
AugustAPI/august-api/AGDoorbell.m:1208:                     doorbellCallCredentials.partnerID = session[@"partnerId"];
AugustAPI/august-api/AGDoorbell.m:1209:                     doorbellCallCredentials.refreshToken = session[@"refreshToken"];
AugustAPI/august-api/AGDoorbell.m:1210:                     doorbellCallCredentials.sessionKey = session[@"sessionKey"];
AugustAPI/august-api/AGDoorbell.m:1211:                     doorbellCallCredentials.sessionSecret = session[@"sessionSecret"];
AugustAPI/august-api/AGDoorbell.m:1233:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1237:    NSString *action = @"decline";
AugustAPI/august-api/AGDoorbell.m:1238:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil
AugustAPI/august-api/AGDoorbell.m:1260:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1264:    NSString *action = @"hangup";
AugustAPI/august-api/AGDoorbell.m:1266:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
AugustAPI/august-api/AGDoorbell.m:1286:    NSString *action = @"heartbeat";
AugustAPI/august-api/AGDoorbell.m:1287:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:log
AugustAPI/august-api/AGDoorbell.m:1307:    NSString *action = @"join";
AugustAPI/august-api/AGDoorbell.m:1308:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error)
AugustAPI/august-api/AGDoorbell.m:1328:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1332:    NSString *action = @"leave";
AugustAPI/august-api/AGDoorbell.m:1334:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
AugustAPI/august-api/AGDoorbell.m:1353:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/reboot", self.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:1368:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@", self.objectId] parameters:@{kDoorbellName:name} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:1387:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1393:                                         userInfo:@{@"callID":@"callID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1398:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/calls/%@/image", doorbellID, callID] parameters:nil augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:1407:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGDoorbell.m:1413:                    NSError *error = [NSError errorWithDomain:@"AGAuthError" code:-9401 userInfo:nil];
AugustAPI/august-api/AGDoorbell.m:1428:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/AGDoorbell.m:1447:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@/cameras/%@", self.objectId, camera.objectId] parameters:@{} augustAPIResponse:^(NSURLResponse * _Nullable response, id  _Nullable responseObject, NSError * _Nullable error) {
AugustAPI/august-api/UIDevice+HardwareName.m:188:    if ([platform isEqualToString:@"iFPGA"])        return UIDeviceIFPGA;
AugustAPI/august-api/UIDevice+HardwareName.m:191:    if ([platform isEqualToString:@"iPhone1,1"])    return UIDevice1GiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:192:    if ([platform isEqualToString:@"iPhone1,2"])    return UIDevice3GiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:193:    if ([platform isEqualToString:@"iPhone2,1"])    return UIDevice3GSiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:194:    if ([platform isEqualToString:@"iPhone3,1"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:195:    if ([platform isEqualToString:@"iPhone3,2"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:196:    if ([platform isEqualToString:@"iPhone3,3"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:197:    if ([platform isEqualToString:@"iPhone4,1"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:198:    if ([platform isEqualToString:@"iPhone4,2"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:199:    if ([platform isEqualToString:@"iPhone4,3"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:200:    if ([platform isEqualToString:@"iPhone5,1"])    return UIDevice5iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:201:    if ([platform isEqualToString:@"iPhone5,2"])    return UIDevice5iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:202:    if ([platform isEqualToString:@"iPhone5,3"])    return UIDevice5CiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:203:    if ([platform isEqualToString:@"iPhone5,4"])    return UIDevice5CiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:204:    if ([platform isEqualToString:@"iPhone6,1"])    return UIDevice5SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:205:    if ([platform isEqualToString:@"iPhone6,2"])    return UIDevice5SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:206:    if ([platform isEqualToString:@"iPhone7,1"])    return UIDevice6iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:207:    if ([platform isEqualToString:@"iPhone7,2"])    return UIDevice6PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:208:    if ([platform isEqualToString:@"iPhone8,1"])    return UIDevice6SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:209:    if ([platform isEqualToString:@"iPhone8,2"])    return UIDevice6SPlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:210:    if ([platform isEqualToString:@"iPhone8,4"])    return UIDeviceSEiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:211:    if ([platform isEqualToString:@"iPhone9,1"])    return UIDevice7iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:212:    if ([platform isEqualToString:@"iPhone9,2"])    return UIDevice7PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:213:    if ([platform isEqualToString:@"iPhone9,3"])    return UIDevice7iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:214:    if ([platform isEqualToString:@"iPhone9,4"])    return UIDevice7PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:215:    if ([platform isEqualToString:@"iPhone10,1"])    return UIDevice8iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:216:    if ([platform isEqualToString:@"iPhone10,2"])    return UIDevice8PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:217:    if ([platform isEqualToString:@"iPhone10,3"])    return UIDeviceXiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:218:    if ([platform isEqualToString:@"iPhone10,4"])    return UIDevice8iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:219:    if ([platform isEqualToString:@"iPhone10,5"])    return UIDevice8PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:220:    if ([platform isEqualToString:@"iPhone10,6"])    return UIDeviceXiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:223:    if ([platform isEqualToString:@"iPod1,1"])    return UIDevice1GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:224:    if ([platform isEqualToString:@"iPod2,1"])    return UIDevice2GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:225:    if ([platform isEqualToString:@"iPod2,2"])    return UIDevice2GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:226:    if ([platform isEqualToString:@"iPod3,1"])    return UIDevice3GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:227:    if ([platform isEqualToString:@"iPod4,1"])    return UIDevice4GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:228:    if ([platform isEqualToString:@"iPod5,1"])    return UIDevice5GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:229:    if ([platform isEqualToString:@"iPod7,1"])    return UIDevice6GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:232:    if ([platform isEqualToString:@"iPad1,1"])    return UIDevice1GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:233:    if ([platform isEqualToString:@"iPad2,1"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:234:    if ([platform isEqualToString:@"iPad2,2"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:235:    if ([platform isEqualToString:@"iPad2,3"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:236:    if ([platform isEqualToString:@"iPad2,4"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:237:    if ([platform isEqualToString:@"iPad3,1"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:238:    if ([platform isEqualToString:@"iPad3,2"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:239:    if ([platform isEqualToString:@"iPad3,3"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:240:    if ([platform isEqualToString:@"iPad3,4"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:241:    if ([platform isEqualToString:@"iPad3,5"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:242:    if ([platform isEqualToString:@"iPad3,6"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:243:    if ([platform isEqualToString:@"iPad4,1"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:244:    if ([platform isEqualToString:@"iPad4,2"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:245:    if ([platform isEqualToString:@"iPad4,3"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:246:    if ([platform isEqualToString:@"iPad5,3"])    return UIDeviceAir2iPad;
AugustAPI/august-api/UIDevice+HardwareName.m:247:    if ([platform isEqualToString:@"iPad5,4"])    return UIDeviceAir2iPad;
AugustAPI/august-api/UIDevice+HardwareName.m:249:    if ([platform isEqualToString:@"iPad2,5"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:250:    if ([platform isEqualToString:@"iPad2,6"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:251:    if ([platform isEqualToString:@"iPad2,7"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:252:    if ([platform isEqualToString:@"iPad4,4"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:253:    if ([platform isEqualToString:@"iPad4,5"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:254:    if ([platform isEqualToString:@"iPad4,6"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:255:    if ([platform isEqualToString:@"iPad4,7"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:256:    if ([platform isEqualToString:@"iPad4,8"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:257:    if ([platform isEqualToString:@"iPad4,9"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:258:    if ([platform isEqualToString:@"iPad5,1"])    return UIDevice4GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:259:    if ([platform isEqualToString:@"iPad5,2"])    return UIDevice4GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:262:    if ([platform isEqualToString:@"iPad6,3"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:263:    if ([platform isEqualToString:@"iPad6,4"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:264:    if ([platform isEqualToString:@"iPad6,7"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:265:    if ([platform isEqualToString:@"iPad6,8"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:268:    if ([platform isEqualToString:@"AppleTV2,1"])    return UIDeviceAppleTV2;
AugustAPI/august-api/UIDevice+HardwareName.m:269:    if ([platform isEqualToString:@"AppleTV3,1"])    return UIDeviceAppleTV3;
AugustAPI/august-api/UIDevice+HardwareName.m:270:    if ([platform isEqualToString:@"AppleTV3,2"])    return UIDeviceAppleTV4;
AugustAPI/august-api/UIDevice+HardwareName.m:272:    if ([platform hasPrefix:@"iPhone"])             return UIDeviceUnknowniPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:273:    if ([platform hasPrefix:@"iPod"])               return UIDeviceUnknowniPod;
AugustAPI/august-api/UIDevice+HardwareName.m:274:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
AugustAPI/august-api/UIDevice+HardwareName.m:275:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
AugustAPI/august-api/UIDevice+HardwareName.m:276:    if ([platform hasPrefix:@"AppleTV"])            return UIDeviceUnknownAppleTV;
AugustAPI/august-api/UIDevice+HardwareName.m:279:    if ([platform hasSuffix:@"86"] || [platform isEqual:@"x86_64"])
AugustAPI/august-api/UIDevice+HardwareName.m:365:    if ([platform hasPrefix:@"iPhone"]) return UIDeviceFamilyiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:366:    if ([platform hasPrefix:@"iPod"]) return UIDeviceFamilyiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:367:    if ([platform hasPrefix:@"iPad"]) return UIDeviceFamilyiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:368:    if ([platform hasPrefix:@"AppleTV"]) return UIDeviceFamilyAppleTV;
AugustAPI/august-api/UIDevice+HardwareName.m:416:    NSString *outstring = [NSString stringWithFormat:@"%02X:%02X:%02X:%02X:%02X:%02X", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
AugustAPI/august-api/UIDevice+HardwareName.m:424:Class  btclass = NSClassFromString(@"GKBluetoothSupport");
AugustAPI/august-api/AGOctetStreamResponseSerializer.m:37:    return [NSSet setWithObject:@"application/octet-stream"];
AugustAPI/august-api/AGAnalyticsDiary.m:11:static NSString* const kAGDiaryCategory = @"AnalyticsDiary";
AugustAPI/august-api/AGAnalyticsDiary.m:65:        AGDiaryError(@"BadCategoryName", @"Can't log category named '%@' because it has illegal characters", category);
AugustAPI/august-api/AGAnalyticsDiary.m:66:        NSAssert(false, @"Can't log category named '%@' because it has illegal characters", category);
AugustAPI/august-api/AGAnalyticsDiary.m:73:        AGDiaryError(@"BadEventName", @"Can't log event named '%@' because it has illegal characters", event);
AugustAPI/august-api/AGAnalyticsDiary.m:74:        NSAssert(false, @"Can't log event named '%@' because it has illegal characters", event);
AugustAPI/august-api/AGAnalyticsDiary.m:88:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or a message.  Cannot have both be nil");
AugustAPI/august-api/AGAnalyticsDiary.m:89:        NSAssert(false, @"You need to specify either an event or a message.  Cannot have both be nil");
AugustAPI/august-api/AGAnalyticsDiary.m:116:        AGDiaryError(@"EmptyLogStatement", @"You need to specify either an event or data.  Cannot have both be nil");
AugustAPI/august-api/AGAnalyticsDiary.m:117:        NSAssert(false, @"You need to specify either an event or data.  Cannot have both be nil");
AugustAPI/august-api/SecureLogging/NSString+SecureLogging.m:48:        NSString *logString = [@"h" stringByAppendingString:[fullHash substringToIndex:idealOutputLength]];
AugustAPI/august-api/SecureLogging/NSString+SecureLogging.m:89:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:65:                 @"pin",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:66:                 @"key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:67:                 @"x-august-api-key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:68:                 @"x-august-api-session-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:69:                 @"x-august-access-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:70:                 @"lRand1",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:71:                 @"lRand2",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:72:                 @"mRand1",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:73:                 @"mRand2",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:74:                 @"LockResponse",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:75:                 @"packet"
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:87:                 @"x-august-api-key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:88:                 @"x-august-api-session-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:89:                 @"x-august-access-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:90:                 @"publishKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:91:                 @"secretKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:92:                 @"subscribeKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:93:                 @"password"
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:35:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:36:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:39:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:40:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:41:                                @"arr":@[@"a", @"b"],
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:42:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:43:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:44:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:49:    NSLog(@"SanitizedDict: %@", sanitizedDict);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:51:    XCTAssertTrue([sanitizedDict[@"key"] isEqualToString:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:52:    XCTAssertTrue([sanitizedDict[@"nested"][@"key"] isEqualToString:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:58:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:59:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:62:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:63:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:64:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:65:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:66:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:73:    NSLog(@"SanitizedDict: %@", sanitizedDict);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:79:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:80:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:83:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:84:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:85:                                @"arr":@[@{@"key":sensitiveData},@{@"a":@"b"}, @"test val", @3],
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:86:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:87:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:88:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:93:    NSLog(@"SanitizedDict: %@", sanitizedDict);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:95:    XCTAssertTrue([sanitizedDict[@"arr"][0][@"key"] isEqual:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:96:    XCTAssertTrue([sanitizedDict[@"arr"][2] isEqual:@"test val"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:103:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:104:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:107:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:108:                                @"x-august-access-token":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:109:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:110:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:111:                                        @"x-august-access-token":sensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:118:    NSLog(@"SanitizedDict: %@", sanitizedDict);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:119:    XCTAssertNil(sanitizedDict[@"x-august-access-token"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:120:    XCTAssertNil(sanitizedDict[@"nested"][@"x-august-access-token"]);
Sezam/AGAutoUnlockSetupLocationPermissionController.m:45:    self.view.topView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_4_location.jpg"]];
Sezam/AGAutoUnlockSetupLocationPermissionController.m:48:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:122:    NSString *title = @"Location Permissions";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:123:    NSString *paragraph1 = @"For Auto-Unlock to function, please set location permissions for the August app to “Always” in your Settings.";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:126:        paragraph1 = @"Auto-Unlock needs permission to use your location.";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:130:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupLocationPermissionController.m:138:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupLocationPermissionController.m:154:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationPermissionController.m:165:    NSString *title = @"OPEN SETTINGS";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:167:        title = @"OK, ALLOW LOCATION ACCESS";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:180:    self.gettingLocationAlert = [UIAlertController alertControllerWithTitle:@"Getting Lock Location" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSelectorAndReorderViewController.m:31:    [self.reorderButton setTitle:@"Reorder" forState:UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:58:    AGTableViewCell *cell = cell =  (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"LockName"];
Sezam/AGLockSelectorAndReorderViewController.m:61:    NSString *lockName = @"NA";
Sezam/AGLockSelectorAndReorderViewController.m:143:        [self.reorderButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:145:        self.header.text = @"RE-ORDER LOCKS";
Sezam/AGLockSelectorAndReorderViewController.m:148:        [self.reorderButton setTitle:@"Reorder" forState: UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:150:        self.header.text = @"CHOOSE A LOCK";
Sezam/AGDoorbellFactoryResetViewController.m:17:static NSString* kAGDiaryCategory = @"DoorbellSettingsViewController";
Sezam/AGDoorbellFactoryResetViewController.m:35:        self.titleLabel.text = @"FACTORY RESET";
Sezam/AGDoorbellFactoryResetViewController.m:36:        self.textLabel.text = @"Factory reset will restore your doorbell to its original settings. All current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGDoorbellFactoryResetViewController.m:39:        self.titleLabel.text = @"LOCK CONNECTION";
Sezam/AGDoorbellFactoryResetViewController.m:40:        self.textLabel.text = @"You must factory reset your doorbell to disconnect it from your August Smart Lock. This will restore it to its original settings and all current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGDoorbellFactoryResetViewController.m:49:        self.progressAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Retrieving connected lock information...",nil)
Sezam/AGDoorbellFactoryResetViewController.m:58:                self.textLabel.text = [NSString stringWithFormat:@"This doorbell is connected to \"%@.\"\n\nYou must factory reset your doorbell to disconnect it from your August Smart Lock. This will restore it to its original settings and all current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.", associatedLock.name];
Sezam/AGDoorbellFactoryResetViewController.m:78:    self.progressAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Resetting doorbell...",nil)
Sezam/AGDoorbellFactoryResetViewController.m:83:    [AGVideoCallEvent postIndependentLogToBackendOutsideCallFlowForDoorbell:self.doorbell withEvent:@"FactoryReset" andStatus:[NSString stringWithFormat:@"UserID:%@,FirstName:%@,LastName:%@", currentUser.objectId, currentUser.firstName, currentUser.lastName] andError:nil];
Sezam/AGDoorbellFactoryResetViewController.m:88:                UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellFactoryResetViewController.m:89:                                                                                              message:[NSString stringWithFormat:@"Unable to factory reset doorbell: %@", error.localizedDescription]
Sezam/AGDoorbellFactoryResetViewController.m:91:                [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellFactoryResetViewController.m:123:    NSString *lastUsedDoorbell = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbell"];
Sezam/AGDoorbellFactoryResetViewController.m:125:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbell"];
Sezam/AGDoorbellFactoryResetViewController.m:126:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellName"];
Sezam/AGDoorbellFactoryResetViewController.m:127:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellHouse"];
Sezam/AGDoorbellFactoryResetViewController.m:128:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellHouseName"];
Sezam/AGDoorbellFactoryResetViewController.m:138:        AGDiaryDebug(@"DoorbellDeletion", [NSString stringWithFormat:@"Successfully Deleted Doorbell with ID: %@", self.doorbell.objectId]);
Sezam/AGDoorbellFactoryResetViewController.m:141:        UIAlertController *confirmFactoryResetController = [UIAlertController alertControllerWithTitle:@"Success"
Sezam/AGDoorbellFactoryResetViewController.m:142:                                                                                               message:@"Your doorbell has been Factory Reset."
Sezam/AGDoorbellFactoryResetViewController.m:144:        [confirmFactoryResetController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action){
Sezam/SRWebSocket.m:72:static NSString *const SRWebSocketAppendToSecKeyString = @"258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
Sezam/SRWebSocket.m:142:NSString *const SRWebSocketErrorDomain = @"SRWebSocketErrorDomain";
Sezam/SRWebSocket.m:143:NSString *const SRHTTPResponseErrorKey = @"HTTPResponseStatusCode";
Sezam/SRWebSocket.m:319:    assert([scheme isEqualToString:@"ws"] || [scheme isEqualToString:@"http"] || [scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]);
Sezam/SRWebSocket.m:321:    if ([scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]) {
Sezam/SRWebSocket.m:384:    [self willChangeValueForKey:@"readyState"];
Sezam/SRWebSocket.m:387:    [self didChangeValueForKey:@"readyState"];
Sezam/SRWebSocket.m:395:    NSAssert(_readyState == SR_CONNECTING, @"Cannot call -(void)open on SRWebSocket more than once");
Sezam/SRWebSocket.m:445:        SRFastLog(@"Request failed with response code %d", responseCode);
Sezam/SRWebSocket.m:446:        [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2132 userInfo:@{NSLocalizedDescriptionKey:[NSString stringWithFormat:@"received bad response code from server %ld", (long)responseCode], SRHTTPResponseErrorKey:@(responseCode)}]];
Sezam/SRWebSocket.m:451:        [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2133 userInfo:[NSDictionary dictionaryWithObject:[NSString stringWithFormat:@"Invalid Sec-WebSocket-Accept response"] forKey:NSLocalizedDescriptionKey]]];
Sezam/SRWebSocket.m:459:            [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2133 userInfo:[NSDictionary dictionaryWithObject:[NSString stringWithFormat:@"Server specified Sec-WebSocket-Protocol that wasn't requested"] forKey:NSLocalizedDescriptionKey]]];
Sezam/SRWebSocket.m:490:            SRFastLog(@"Finished reading headers %@", CFBridgingRelease(CFHTTPMessageCopyAllHeaderFields(_receivedHTTPHeaders)));
Sezam/SRWebSocket.m:500:    SRFastLog(@"Connected");
Sezam/SRWebSocket.m:504:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Host"), (__bridge CFStringRef)(_url.port ? [NSString stringWithFormat:@"%@:%@", _url.host, _url.port] : _url.host));
Sezam/SRWebSocket.m:521:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Version"), (__bridge CFStringRef)[NSString stringWithFormat:@"%ld", (long)_webSocketVersion]);
Sezam/SRWebSocket.m:526:        CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Protocol"), (__bridge CFStringRef)[_requestedProtocols componentsJoinedByString:@", "]);
Sezam/SRWebSocket.m:575:        NSLog(@"WEBRTC SocketRocket: In debug mode.  Allowing connection to any root cert");
Sezam/SRWebSocket.m:630:        SRFastLog(@"Closing with code %d reason %@", code, reason);
Sezam/SRWebSocket.m:688:            SRFastLog(@"Failing with error %@", error.localizedDescription);
Sezam/SRWebSocket.m:708:    NSAssert(self.readyState != SR_CONNECTING, @"Invalid State: Cannot call send: until connection is open");
Sezam/SRWebSocket.m:726:    NSAssert(self.readyState == SR_OPEN, @"Invalid State: Cannot call send: until connection is open");
Sezam/SRWebSocket.m:746:    SRFastLog(@"Received pong");
Sezam/SRWebSocket.m:756:    SRFastLog(@"Received message");
Sezam/SRWebSocket.m:802:    SRFastLog(@"Received close frame");
Sezam/SRWebSocket.m:806:        [self _closeWithProtocolError:@"Payload for close must be larger than 2 bytes"];
Sezam/SRWebSocket.m:812:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Cannot have close code of %d", _closeCode]];
Sezam/SRWebSocket.m:818:                [self _closeWithProtocolError:@"Close reason MUST be valid UTF-8"];
Sezam/SRWebSocket.m:839:    SRFastLog(@"Trying to disconnect");
Sezam/SRWebSocket.m:861:                [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Sezam/SRWebSocket.m:884:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Unknown opcode %ld", (long)opcode]];
Sezam/SRWebSocket.m:902:        [self _closeWithProtocolError:@"Fragmented control frames not allowed"];
Sezam/SRWebSocket.m:907:        [self _closeWithProtocolError:@"Control frames cannot have payloads larger than 126 bytes"];
Sezam/SRWebSocket.m:985:            [self _closeWithProtocolError:@"Server used RSV bits"];
Sezam/SRWebSocket.m:994:            [self _closeWithProtocolError:@"all data frames after the initial data frame must have opcode 0"];
Sezam/SRWebSocket.m:999:            [self _closeWithProtocolError:@"cannot continue a message"];
Sezam/SRWebSocket.m:1014:            [self _closeWithProtocolError:@"Client must receive unmasked data"];
Sezam/SRWebSocket.m:1080:            [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:2145 userInfo:[NSDictionary dictionaryWithObject:@"Error writing to stream" forKey:NSLocalizedDescriptionKey]]];
Sezam/SRWebSocket.m:1252:                        [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Sezam/SRWebSocket.m:1311:    NSAssert([data isKindOfClass:[NSData class]] || [data isKindOfClass:[NSString class]], @"NSString or NSData");
Sezam/SRWebSocket.m:1317:        [self closeWithCode:SRStatusCodeMessageTooBig reason:@"Message too big"];
Sezam/SRWebSocket.m:1409:                    [self _failWithError:[NSError errorWithDomain:SRWebSocketErrorDomain code:23556 userInfo:[NSDictionary dictionaryWithObject:[NSString stringWithFormat:@"Invalid server cert"] forKey:NSLocalizedDescriptionKey]]];
Sezam/SRWebSocket.m:1419:                SRFastLog(@"NSStreamEventOpenCompleted %@", aStream);
Sezam/SRWebSocket.m:1434:                SRFastLog(@"NSStreamEventErrorOccurred %@ %@", aStream, [[aStream streamError] copy]);
Sezam/SRWebSocket.m:1445:                SRFastLog(@"NSStreamEventEndEncountered %@", aStream);
Sezam/SRWebSocket.m:1459:                                [self.delegate webSocket:self didCloseWithCode:SRStatusCodeGoingAway reason:@"Stream end encountered" wasClean:NO];
Sezam/SRWebSocket.m:1469:                SRFastLog(@"NSStreamEventHasBytesAvailable %@", aStream);
Sezam/SRWebSocket.m:1491:                SRFastLog(@"NSStreamEventHasSpaceAvailable %@", aStream);
Sezam/SRWebSocket.m:1497:                SRFastLog(@"(default)  %@", aStream);
Sezam/SRWebSocket.m:1577:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1586:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1591:    [NSURLProtocol setProperty:SR_SSLPinnedCertificates forKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1602:    if ([scheme isEqualToString:@"wss"]) {
Sezam/SRWebSocket.m:1603:        scheme = @"https";
Sezam/SRWebSocket.m:1604:    } else if ([scheme isEqualToString:@"ws"]) {
Sezam/SRWebSocket.m:1605:        scheme = @"http";
Sezam/SRWebSocket.m:1609:        return [NSString stringWithFormat:@"%@://%@:%@/", scheme, self.host, self.port];
Sezam/SRWebSocket.m:1611:        return [NSString stringWithFormat:@"%@://%@/", scheme, self.host];
Sezam/SRWebSocket.m:1628:    NSLog(@"[SR] %@", formattedString);
Sezam/SRWebSocket.m:1709:        networkThread.name = @"com.squareup.SocketRocket.NetworkThread";
Sezam/AGKeypadOTAProgressViewController.m:17:static NSString* kAGDiaryCategory = @"KeypadSetup";
Sezam/AGKeypadOTAProgressViewController.m:47:        return NSLocalizedString(@"Scanning...", nil);
Sezam/AGKeypadOTAProgressViewController.m:50:        return NSLocalizedString(@"Connecting...", nil);
Sezam/AGKeypadOTAProgressViewController.m:53:        return NSLocalizedString(@"Connecting...", nil);
Sezam/AGKeypadOTAProgressViewController.m:56:        return NSLocalizedString(@"Connected", nil);
Sezam/AGKeypadOTAProgressViewController.m:59:        return NSLocalizedString(@"Finished", nil);
Sezam/AGKeypadOTAProgressViewController.m:62:        return NSLocalizedString(@"Connection Failed", nil);
Sezam/AGKeypadOTAProgressViewController.m:65:        return NSLocalizedString(@"", nil); // Make this blank to not flash text on transition.
Sezam/AGKeypadOTAProgressViewController.m:67:    return @"Unknown state";
Sezam/AGKeypadOTAProgressViewController.m:87:    AGDiaryInfo(@"UpdatedCommState", stateString);
Sezam/AGSharedData.m:24:#define kAGDiaryCategory @"AGSharedData"
Sezam/AGSharedData.m:35:#define kSDVersionKey @"SDVersion" // shared data version key
Sezam/AGSharedData.m:74:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:87:        for (NSDictionary *house in [storedData objectForKey:@"houses"]) {
Sezam/AGSharedData.m:92:        for (NSDictionary *doorbellDictionary in [storedData objectForKey:@"doorbells"]) {
Sezam/AGSharedData.m:97:        for (NSDictionary *bridgeDictionary in [storedData objectForKey:@"bridges"]) {
Sezam/AGSharedData.m:103:        for (NSDictionary *lock in [storedData objectForKey:@"locks"]) {
Sezam/AGSharedData.m:105:            if (lock[@"HouseID"] != nil) {
Sezam/AGSharedData.m:107:                house.objectId = lock[@"HouseID"];
Sezam/AGSharedData.m:108:                if (lock[@"HouseName"] != nil) {
Sezam/AGSharedData.m:109:                    house.name = lock[@"HouseName"];
Sezam/AGSharedData.m:117:        for (NSDictionary *keypadDictionary in [storedData objectForKey:@"keypads"]) {
Sezam/AGSharedData.m:124:        for (NSDictionary *sub in [storedData objectForKey:@"subscriptions"]) {
Sezam/AGSharedData.m:161:            if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGSharedData.m:171:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:174:    for (NSDictionary *doorbellDictionary in [storedData objectForKey:@"doorbells"]) {
Sezam/AGSharedData.m:184:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:218:    [storedData setObject:houses forKey:@"houses"];
Sezam/AGSharedData.m:219:    [storedData setObject:locks forKey:@"locks"];
Sezam/AGSharedData.m:220:    [storedData setObject:keypads forKey:@"keypads"];
Sezam/AGSharedData.m:221:    [storedData setObject:doorbells forKey:@"doorbells"];
Sezam/AGSharedData.m:222:    [storedData setObject:bridges forKey:@"bridges"];
Sezam/AGSharedData.m:223:    [storedData setObject:subscriptions forKey:@"subscriptions"];
Sezam/AGSharedData.m:224:    NSString *appVersion = (NSString *)[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
Sezam/AGSharedData.m:225:    [storedData setObject:appVersion forKey:@"appVersion"];
Sezam/AGSharedData.m:227:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:426:        block(NO, [NSError errorWithDomain:@"August" code:-1 userInfo:nil]);
Sezam/AGSharedData.m:430:    AGDiaryDebug(@"StartGetKeychainData", @"Sending API request to load houses");
Sezam/AGSharedData.m:455:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGSharedData.m:456:                AGDiaryWarn(@"AuthErrorLogout", @"AGAuthError 0- Session token/verify error logout getLocks");
Sezam/AGSharedData.m:459:                AGDiaryError(@"NetworkError", @"Error loading locks: %@, localized: %@", error, error.description);
Sezam/AGSharedData.m:474:            AGDiaryError(@"NetworkError", @"Error loading doorbells for user%@", error.description);
Sezam/AGSharedData.m:484:            AGDiaryDebug(@"LoadComplete", @"Got Houses for User");
Sezam/AGSharedData.m:491:            AGDiaryError(@"NetworkError", @"Error loading houses for user%@", error.description);
Sezam/AGSharedData.m:499:            AGDiaryError(@"NetworkError", @"Error loading bridges for user%@", error.description);
Sezam/AGSharedData.m:513:                    if ([subItem.type isEqualToString:@"doorbellDvr"]) {
Sezam/AGSharedData.m:520:                AGDiaryError(@"NetworkError", @"Error loading subscriptions for user%@", error.description);
Sezam/AGSharedData.m:528:            if ([lastError.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGSharedData.m:606:        if ([house.highestDeviceType isEqualToString:@"superuser"] || ([house.highestDeviceType isEqualToString:@"manager"])) {
Sezam/AGInviteEditDatePickerViewController.m:36:    NSLog(@"startTimeFromMidnight: %f", startTimeFromMidnight);
Sezam/AGInviteEditDatePickerViewController.m:37:    NSLog(@"endTimeFromMidnight: %f", endTimeFromMidnight);
Sezam/AGInviteEditDatePickerViewController.m:78:        self.titleLabel.text = NSLocalizedString(@"CHOOSE TIME", nil);
Sezam/AGInviteEditDatePickerViewController.m:80:        self.titleLabel.text = NSLocalizedString(@"DATE AND TIME", nil);
Sezam/AGVideoCallSummary.m:14:static NSString* kAGDiaryCategory = @"VideoCallSummary";
Sezam/AGVideoCallSummary.m:33:    self.source = @"iOS";
Sezam/AGVideoCallSummary.m:34:    self.platform = @"iOS";
Sezam/AGVideoCallSummary.m:35:    self.app_version = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGVideoCallSummary.m:37:    self.manufacturer = @"Apple";
Sezam/AGVideoCallSummary.m:39:    self.name = @"doorbell_call_event";
Sezam/AGVideoCallSummary.m:63:    if ([status isEqualToString:@"first_video_frame_rendered"]) {
Sezam/AGVideoCallSummary.m:64:        [[NSNotificationCenter defaultCenter] postNotificationName:@"VideoCallIsActive" object:self];
Sezam/AGVideoCallSummary.m:75:    videoCallStatistic.video_packet_loss_count = playerStatistics[@"Packet Loss"];
Sezam/AGVideoCallSummary.m:76:    videoCallStatistic.audio_packet_loss_count = playerStatistics[@"Packet Loss"];
Sezam/AGVideoCallSummary.m:77:    videoCallStatistic.average_time_diff_millis = playerStatistics[@"Audio-Video Time Diff"];
Sezam/AGVideoCallSummary.m:78:    videoCallStatistic.video_average_decode_time = playerStatistics[@"Avg Video Decode Time"];
Sezam/AGVideoCallSummary.m:79:    videoCallStatistic.audio_average_decode_time = playerStatistics[@"Avg Audio Decode Time"];
Sezam/AGVideoCallSummary.m:80:    videoCallStatistic.audio_fps = playerStatistics[@"Avg Audio FPS"];
Sezam/AGVideoCallSummary.m:81:    videoCallStatistic.video_fps = playerStatistics[@"Avg Video FPS"];
Sezam/AGVideoCallSummary.m:89:    videoCallStatistic.status = @"ongoing_call_stats";              // ie. ongoing_call_stats
Sezam/AGVideoCallSummary.m:91:    videoCallStatistic.event = @"IVSDK";
Sezam/AGVideoCallSummary.m:111:    statisticDictionary[@"name"] = self.name;
Sezam/AGVideoCallSummary.m:112:    statisticDictionary[@"doorbellID"] = self.doorbell.objectId;
Sezam/AGVideoCallSummary.m:113:    statisticDictionary[@"source"] = self.source;
Sezam/AGVideoCallSummary.m:114:    statisticDictionary[@"platform"] = self.platform;
Sezam/AGVideoCallSummary.m:115:    statisticDictionary[@"callID"] = self.call_id;
Sezam/AGVideoCallSummary.m:116:    statisticDictionary[@"manufacturer"] = self.manufacturer;
Sezam/AGVideoCallSummary.m:117:    statisticDictionary[@"client_version"] = self.client_version;
Sezam/AGVideoCallSummary.m:118:    statisticDictionary[@"app_version"] = self.app_version;
Sezam/AGVideoCallSummary.m:119:    statisticDictionary[@"installToken"] = self.installToken;
Sezam/AGVideoCallSummary.m:120:    statisticDictionary[@"device_uuid"] = self.device_uuid;
Sezam/AGVideoCallSummary.m:122:    statisticDictionary[@"event"] = videoCallStatistic.event;
Sezam/AGVideoCallSummary.m:125:    [details setValue:videoCallStatistic.log_creation_timestamp forKey:@"log_creation_timestamp"];
Sezam/AGVideoCallSummary.m:128:    [details setValue:videoCallStatistic.duration_seconds forKey:@"duration_seconds"];
Sezam/AGVideoCallSummary.m:129:    details[@"status"] = videoCallStatistic.status;
Sezam/AGVideoCallSummary.m:134:    [details setValue:my_timestamp forKey:@"my_timestamp"];
Sezam/AGVideoCallSummary.m:135:    [details setValue:videoCallStatistic.video_packet_loss_count forKey:@"video_packet_loss_count"];
Sezam/AGVideoCallSummary.m:136:    [details setValue:videoCallStatistic.audio_packet_loss_count forKey:@"audio_packet_loss_count"];
Sezam/AGVideoCallSummary.m:137:    [details setValue:videoCallStatistic.average_time_diff_millis forKey:@"average_time_diff_millis"];
Sezam/AGVideoCallSummary.m:138:    [details setValue:videoCallStatistic.video_average_decode_time forKey:@"video_average_decode_time"];
Sezam/AGVideoCallSummary.m:139:    [details setValue:videoCallStatistic.audio_average_decode_time forKey:@"audio_average_decode_time"];
Sezam/AGVideoCallSummary.m:140:    [details setValue:videoCallStatistic.audio_fps forKey:@"audio_fps"];
Sezam/AGVideoCallSummary.m:141:    [details setValue:videoCallStatistic.video_fps forKey:@"video_fps"];
Sezam/AGVideoCallSummary.m:142:    [details setValue:videoCallStatistic.playback_timestamp forKey:@"playback_timestamp"];
Sezam/AGVideoCallSummary.m:144:    statisticDictionary[@"details"] = details;
Sezam/AGVideoCallSummary.m:153:            AGDiaryInfo(@"VideoCallStatisticPostSuccess", @"Posted a Video Call Statistic to the Backend API");
Sezam/AGVideoCallSummary.m:155:            AGDiaryError(@"VideoCallStatisticPostFailure", @"Unable to Post Video Call Statistic to Backend API, %@", error.localizedDescription);
Sezam/SDCloudUserDefaults.m:62:    [[NSNotificationCenter defaultCenter] addObserverForName:@"NSUbiquitousKeyValueStoreDidChangeExternallyNotification"
Sezam/SDCloudUserDefaults.m:68:                                                      NSDictionary* changedKeys = (notification.userInfo)[@"NSUbiquitousKeyValueStoreChangedKeysKey"];
Sezam/AGWeeklyRecurrenceScheduleTests.m:37:    XCTAssert([regeneratedSchedule.days isEqualToSet:originalSchedule.days], @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:38:    XCTAssert(regeneratedSchedule.startTime == originalSchedule.startTime, @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:39:    XCTAssert(regeneratedSchedule.endTime == originalSchedule.endTime, @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:40:    XCTAssert([regeneratedSchedule.timeZone isEqualToTimeZone:originalSchedule.timeZone], @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGKibanaVideoCallLog.m:17:static NSString* kAGDiaryCategory = @"KibanaVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:29:            log.callInitiationType = @"ButtonPush";
Sezam/AGKibanaVideoCallLog.m:32:            log.callInitiationType = @"MobileInitiated";
Sezam/AGKibanaVideoCallLog.m:35:            log.callInitiationType = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:42:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGKibanaVideoCallLog.m:45:        logDictionary[@"doorbellID"] = doorbell.objectId;
Sezam/AGKibanaVideoCallLog.m:48:        logDictionary[@"serialNumber"] = doorbell.serialNumber;
Sezam/AGKibanaVideoCallLog.m:51:        logDictionary[@"firmwareVersion"] = doorbell.firmwareVersion;
Sezam/AGKibanaVideoCallLog.m:54:        logDictionary[@"appVersion"] = appVersion;
Sezam/AGKibanaVideoCallLog.m:56:    logDictionary[@"platform"] = @"iOS";
Sezam/AGKibanaVideoCallLog.m:57:    logDictionary[isTesting?@"eventQA":@"event"] = @"StartVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:58:    logDictionary[isTesting?@"callTypeQA":@"callType"] = log.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:96:            kibanaVideoCallResultString = @"VideoSuccess";
Sezam/AGKibanaVideoCallLog.m:99:            kibanaVideoCallResultString = @"UserCancel";
Sezam/AGKibanaVideoCallLog.m:102:            kibanaVideoCallResultString = @"VideoFailurePower";
Sezam/AGKibanaVideoCallLog.m:105:            kibanaVideoCallResultString = @"VideoFailureToken";
Sezam/AGKibanaVideoCallLog.m:108:            kibanaVideoCallResultString = @"VideoFailure";
Sezam/AGKibanaVideoCallLog.m:111:            kibanaVideoCallResultString = @"DoorbellNeverOnline";
Sezam/AGKibanaVideoCallLog.m:114:            kibanaVideoCallResultString = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:125:            callErrorTypeString = @"None";
Sezam/AGKibanaVideoCallLog.m:128:            callErrorTypeString = @"NoVideoFrames";
Sezam/AGKibanaVideoCallLog.m:131:            callErrorTypeString = @"DoorbellProxyReconnection";
Sezam/AGKibanaVideoCallLog.m:134:            callErrorTypeString = @"CallUnavailable";
Sezam/AGKibanaVideoCallLog.m:137:            callErrorTypeString = @"IncompatibleServers";
Sezam/AGKibanaVideoCallLog.m:140:            callErrorTypeString = @"CallEnded";
Sezam/AGKibanaVideoCallLog.m:143:            callErrorTypeString = @"CallAnswered";
Sezam/AGKibanaVideoCallLog.m:146:            callErrorTypeString = @"CallAnsweredWithUserDetails";
Sezam/AGKibanaVideoCallLog.m:149:            callErrorTypeString = @"BatteryLow";
Sezam/AGKibanaVideoCallLog.m:152:            callErrorTypeString = @"NoTokenInfo";
Sezam/AGKibanaVideoCallLog.m:155:            callErrorTypeString = @"CameraError";
Sezam/AGKibanaVideoCallLog.m:158:            callErrorTypeString = @"VideoStopped";
Sezam/AGKibanaVideoCallLog.m:161:            callErrorTypeString = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:169:        logDictionary[@"doorbellID"] = self.doorbell.objectId;
Sezam/AGKibanaVideoCallLog.m:172:        logDictionary[@"serialNumber"] = self.doorbell.serialNumber;
Sezam/AGKibanaVideoCallLog.m:175:        logDictionary[@"firmwareVersion"] = self.doorbell.firmwareVersion;
Sezam/AGKibanaVideoCallLog.m:177:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGKibanaVideoCallLog.m:179:        logDictionary[@"appVersion"] = appVersion;
Sezam/AGKibanaVideoCallLog.m:181:    logDictionary[@"platform"] = @"iOS";
Sezam/AGKibanaVideoCallLog.m:191:            logDictionary[@"networkReachabilityStatus"] = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:195:            logDictionary[@"networkReachabilityStatus"] = @"NotReachable";
Sezam/AGKibanaVideoCallLog.m:199:            logDictionary[@"networkReachabilityStatus"] = @"WWAN";
Sezam/AGKibanaVideoCallLog.m:203:            logDictionary[@"networkReachabilityStatus"] = @"WiFi";
Sezam/AGKibanaVideoCallLog.m:210:        logDictionary[@"wifi" ] = @"Yes";
Sezam/AGKibanaVideoCallLog.m:212:        logDictionary[@"wifi"] = @"No";
Sezam/AGKibanaVideoCallLog.m:216:            logDictionary[@"carrier" ] = carrier.carrierName;
Sezam/AGKibanaVideoCallLog.m:219:            logDictionary[@"connectionType"] = netinfo.currentRadioAccessTechnology;
Sezam/AGKibanaVideoCallLog.m:223:    logDictionary[isTesting?@"eventQA":@"event"] = @"EndVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:224:    logDictionary[isTesting?@"callTypeQA":@"callType"] = self.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:225:    logDictionary[isTesting?@"videoCallResultQA":@"videoCallResult"] = kibanaVideoCallResultString;
Sezam/AGKibanaVideoCallLog.m:226:    logDictionary[isTesting?@"callErrorTypeQA":@"callErrorType"] = callErrorTypeString;
Sezam/AGKibanaVideoCallLog.m:228:    logDictionary[@"event"] = @"EndVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:230:        logDictionary[@"callType"] = self.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:233:        logDictionary[@"videoCallResult"] = kibanaVideoCallResultString;
Sezam/AGKibanaVideoCallLog.m:236:        logDictionary[@"callErrorType"] = callErrorTypeString;
Sezam/AGKibanaVideoCallLog.m:240:        [logDictionary setValue:[NSNumber numberWithFloat:(float)self.imageDownloadDuration] forKey:@"imageDownloadDuration"];
Sezam/AGKibanaVideoCallLog.m:243:    [logDictionary setValue:durationToResultNumber forKey:@"durationToResultsInSeconds"];
Sezam/AGKibanaVideoCallLog.m:245:    [logDictionary setValue:retriesNumber forKey:@"retries"];
Sezam/AGKibanaVideoCallLog.m:250:                logDictionary[@"powerMode" ] = @"high";
Sezam/AGKibanaVideoCallLog.m:253:                logDictionary[@"powerMode" ] = @"medium";
Sezam/AGKibanaVideoCallLog.m:256:                logDictionary[@"powerMode" ] = @"low";
Sezam/AGKibanaVideoCallLog.m:259:                logDictionary[@"powerMode" ] = @"unknown";
Sezam/AGKibanaVideoCallLog.m:265:        self.proxyURL = @"None";
Sezam/AGKibanaVideoCallLog.m:268:        self.proxyConnectionType = @"None";
Sezam/AGKibanaVideoCallLog.m:270:    logDictionary[@"proxyConnectionType"] = self.proxyConnectionType;
Sezam/AGKibanaVideoCallLog.m:271:    logDictionary[@"proxyURL"] = self.proxyURL;
Sezam/AGKibanaVideoCallLog.m:273:    if (![kibanaVideoCallResultString isEqualToString:@"VideoSuccess"]) {
Sezam/AGKibanaVideoCallLog.m:275:        if (([kibanaVideoCallResultString isEqualToString:@"UserCancel"]) && (durationToResultInSeconds < 5.0)) {
Sezam/AGKibanaVideoCallLog.m:279:            NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGKibanaVideoCallLog.m:285:        logDictionary[@"video_call_version"] = self.videoCallVersion;
Sezam/AGKibanaVideoCallLog.m:288:        logDictionary[@"ending_status"] = self.endingCallStatus;
Sezam/AGKibanaVideoCallLog.m:301:            AGDiaryInfo(@"KibanaCallEventPostSuccess", @"Posted an Kibana Video Call Log to the Backend API");
Sezam/AGKibanaVideoCallLog.m:303:            AGDiaryError(@"KibanaCallEventPostFailure", @"Unable to Post an Kibana Video Call Log to Backend API, %@", error.localizedDescription);
Sezam/AGKibanaVideoCallLog.m:339:    NSDictionary *doorbellSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"DoorbellSuccessMetics"];
Sezam/AGKibanaVideoCallLog.m:341:        NSNumber *successCount = (NSNumber *)doorbellSuccessMetrics[@"successCount"];
Sezam/AGKibanaVideoCallLog.m:342:        NSNumber *failureCount = (NSNumber *)doorbellSuccessMetrics[@"failureCount"];
Sezam/AGKibanaVideoCallLog.m:353:    NSDictionary *updatedSuccessMetrics = [NSDictionary dictionaryWithObjectsAndKeys:successCount, @"successCount", failureCount, @"failureCount", nil];
Sezam/AGKibanaVideoCallLog.m:354:    [[NSUserDefaults standardUserDefaults] setObject:updatedSuccessMetrics forKey:@"DoorbellSuccessMetics"];
Sezam/AGInviteUserExistsViewController.m:39:            [self.profileImageView setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGInviteUserExistsViewController.m:58:        if ((![[user  firstName] isEqualToString:@""] && [user  firstName])||(![[user   lastName] isEqualToString:@""] && [user  lastName])) {
Sezam/AGInviteUserExistsViewController.m:67:    if ([segue.identifier isEqualToString:@"InviteUserExistsToInviteEdit"]) {
Sezam/AGInviteUserExistsViewController.m:74:    [self performSegueWithIdentifier:@"InviteUserExistsToInviteEdit" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:57:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:self];
Sezam/AGInviteEntryCodeGuest.m:72:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v2"]];
Sezam/AGInviteEntryCodeGuest.m:75:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v2"]];
Sezam/AGInviteEntryCodeGuest.m:93:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:98:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:109:    if ([segue.identifier isEqualToString:@"PinInviteToInviteEditVC"]) {
Sezam/Reachability.m:58:NSString *kReachabilityChangedNotification = @"kNetworkReachabilityChangedNotification";
Sezam/Reachability.m:69:    NSLog(@"Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s\n",
Sezam/Reachability.m:89:	NSCAssert(info != NULL, @"info was NULL in ReachabilityCallback");
Sezam/Reachability.m:90:	NSCAssert([(__bridge NSObject*) info isKindOfClass: [Reachability class]], @"info was wrong class in ReachabilityCallback");
Sezam/Reachability.m:275:	NSAssert(_reachabilityRef != NULL, @"connectionRequired called with NULL reachabilityRef");
Sezam/Reachability.m:289:	NSAssert(_reachabilityRef != NULL, @"currentNetworkStatus called with NULL SCNetworkReachabilityRef");
Sezam/AGHomeKitEditRoomViewController.m:38:    UIAlertView *deleteAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString( @"Are you sure you want to delete this room?",nil) message: NSLocalizedString(@"Deleting this room will place its devices in an unassigned room",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) otherButtonTitles:NSLocalizedString(@"Delete", nil), nil ];
Sezam/AGDebugModeViewController.m:59:    [[self addLockSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]];
Sezam/AGDebugModeViewController.m:60:    [[self autoUnlockNotificationSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAutoUnlockNotify"]];
Sezam/AGDebugModeViewController.m:62:    [[self keypadOTAOnSetupSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"AlwaysKeypadOTAOnSetup"]];
Sezam/AGDebugModeViewController.m:63:    [[self otaDisabledToggleSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"]];
Sezam/AGDebugModeViewController.m:65:    self.otaStatusLabelSwitch.on = [[NSUserDefaults standardUserDefaults] boolForKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:69:    NSDictionary *knownLaunchImageDictionary = @{@"{320, 480}" : @"LaunchImage-700",
Sezam/AGDebugModeViewController.m:70:                           @"{320, 568}" : @"LaunchImage-700-568h",
Sezam/AGDebugModeViewController.m:71:                           @"{375, 667}" : @"LaunchImage-800-667h",
Sezam/AGDebugModeViewController.m:72:                           @"{414, 736}" : @"LaunchImage-800-Portrait-736h"};
Sezam/AGDebugModeViewController.m:74:    NSArray *currentImagesDictionariesArray = [[[NSBundle mainBundle] infoDictionary] valueForKey:@"UILaunchImages"];
Sezam/AGDebugModeViewController.m:78:        NSPredicate *p = [NSPredicate predicateWithFormat:@"UILaunchImageSize = %@", knownImageDimension];
Sezam/AGDebugModeViewController.m:82:            NSLog(@"Launch image found: %@, size %@", [knownLaunchImageDictionary objectForKey:knownImageDimension], knownImageDimension);
Sezam/AGDebugModeViewController.m:84:            NSLog(@"Launch image missing: %@, size %@", [knownLaunchImageDictionary objectForKey:knownImageDimension], knownImageDimension);
Sezam/AGDebugModeViewController.m:85:            if ([knownImageDimension isEqualToString:@"{320, 480}"]) {
Sezam/AGDebugModeViewController.m:86:                [missingLaunchImagesArray addObject:@"iPhone 4S size"];
Sezam/AGDebugModeViewController.m:87:            } else if ([knownImageDimension isEqualToString:@"{320, 568}"]) {
Sezam/AGDebugModeViewController.m:88:                [missingLaunchImagesArray addObject:@"iPhone 5"];
Sezam/AGDebugModeViewController.m:89:            } else if ([knownImageDimension isEqualToString:@"{375, 667}"]) {
Sezam/AGDebugModeViewController.m:90:                [missingLaunchImagesArray addObject:@"iPhone 6"];
Sezam/AGDebugModeViewController.m:91:            } else if ([knownImageDimension isEqualToString:@"{414, 736}"]) {
Sezam/AGDebugModeViewController.m:92:                [missingLaunchImagesArray addObject:@"iPhone 6 Plus"];
Sezam/AGDebugModeViewController.m:99:        self.graphicsResolutionLabel.text = @"Native Resolution";
Sezam/AGDebugModeViewController.m:101:        self.graphicsResolutionLabel.text = [NSString stringWithFormat:@"Non-Native Resolution for %@", [[missingLaunchImagesArray valueForKey:@"description"] componentsJoinedByString:@""]];
Sezam/AGDebugModeViewController.m:107:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGDebugModeViewController.m:124:    [[NSUserDefaults standardUserDefaults] setBool:self.addLockSwitch.on forKey:@"DebugAddLock"];
Sezam/AGDebugModeViewController.m:129:    [[NSUserDefaults standardUserDefaults] setBool:self.autoUnlockNotificationSwitch.on forKey:@"DebugAutoUnlockNotify"];
Sezam/AGDebugModeViewController.m:134:    [[NSUserDefaults standardUserDefaults] setBool:self.otaDisabledToggleSwitch.on forKey:@"DisableOTA"];
Sezam/AGDebugModeViewController.m:140:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AlwaysKeypadOTAOnSetup"];
Sezam/AGDebugModeViewController.m:143:        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"AlwaysKeypadOTAOnSetup"];
Sezam/AGDebugModeViewController.m:150:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:153:        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:160:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGDebugModeViewController.m:169:    [self performSegueWithIdentifier:@"DebugModeToSelectServer" sender:nil];
Sezam/AGDebugModeViewController.m:173:    [AGUtility sendLogs:self toEmail:@"autounlock@august.com"];
Sezam/AGDebugModeViewController.m:179:    self.deleteCacheAlertView = [[UIAlertView alloc] initWithTitle:@"Cache Deleted" message:@"Your network cache has been cleared. Press 'Ok' to crash the app." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDebugModeViewController.m:191:    if ([segue.identifier isEqualToString:@"DebugModeToSelectServer"]) {
Sezam/AGHomeKitManageCreateHomeViewController.m:13:#define kAGDiaryCategory @"HKManagagerCreateHome"
Sezam/AGHomeKitManageCreateHomeViewController.m:45:                AGDiaryInfo(@"CreateHomeError", [error description]);
Sezam/AGHomeKitManageCreateHomeViewController.m:47:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Home. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitManageCreateHomeViewController.m:50:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Home." inViewController:self];
Sezam/AGHomeKitManageCreateHomeViewController.m:53:                AGDiaryInfo(@"CreateHomeSuccess", @"Created HK home");
Sezam/NSString+AGVideoStream.m:14:        case AGVideoStreamStateUnknown: return @"Unknown";
Sezam/NSString+AGVideoStream.m:15:        case AGVideoStreamStateInitialized: return @"Initialized";
Sezam/NSString+AGVideoStream.m:16:        case AGVideoStreamStatePreparing: return @"Preparing";
Sezam/NSString+AGVideoStream.m:17:        case AGVideoStreamStatePrepared: return @"Prepared";
Sezam/NSString+AGVideoStream.m:18:        case AGVideoStreamStateBuffering: return @"Buffering";
Sezam/NSString+AGVideoStream.m:19:        case AGVideoStreamStateStreaming: return @"Streaming";
Sezam/NSString+AGVideoStream.m:20:        case AGVideoStreamStateClosing: return @"Closing";
Sezam/NSString+AGVideoStream.m:21:        case AGVideoStreamStateClosed: return @"Closed";
Sezam/NSString+AGVideoStream.m:22:        case AGVideoStreamStateError: return @"Error";
Sezam/NSString+AGVideoStream.m:23:        case AGVideoStreamStateRestarting: return @"Restarting";
Sezam/NSString+AGVideoStream.m:24:        case AGVideoStreamStateFailed: return @"Failed";
Sezam/NSString+AGVideoStream.m:32:        case AGWebRTCErrorUnknown: return @"Unknown";
Sezam/NSString+AGVideoStream.m:33:        case AGWebRTCErrorBadSessionID:return @"Bad Session ID";
Sezam/NSString+AGVideoStream.m:34:        case AGWebRTCErrorBusy:return @"Peer Busy";
Sezam/NSString+AGVideoStream.m:35:        case AGWebRTCErrorSDPFail:return @"SDP Failure";
Sezam/NSString+AGVideoStream.m:36:        case AGWebRTCErrorICEFail:return @"ICE Failure";
Sezam/NSString+AGVideoStream.m:37:        case AGWebRTCErrorSlow:return @"Slow Connection";
Sezam/NSString+AGVideoStream.m:38:        case AGWebRTCErrorSessionTimeout:return @"Session Timeout";
Sezam/AGAppDelegate.m:65:static NSString* kAGDiaryCategory = @"Application";
Sezam/AGAppDelegate.m:93:    if ([url.scheme containsString:@"augusthome"] || [url.scheme containsString:@"AugustHome"])
Sezam/AGAppDelegate.m:97:        if ([url.host containsString:@"oauth"]) {
Sezam/AGAppDelegate.m:100:            NSString *command = [url.path stringByReplacingOccurrencesOfString:@"/" withString:@""];
Sezam/AGAppDelegate.m:102:            NSString *lockId = [AGUtility valueForKey:@"lockid" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:103:            NSString *houseId = [AGUtility valueForKey:@"houseid" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:104:            NSString *verifyString = [AGUtility valueForKey:@"v" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:110:                AGDiaryWarn(@"WidgetAuthError", @"Widget action is disabled due to non-matching verify string");
Sezam/AGAppDelegate.m:118:    if ([url.scheme isEqualToString: @"sezam"] )
Sezam/AGAppDelegate.m:133:        if ([oauthResult containsString:@"success"]) {
Sezam/AGAppDelegate.m:136:        if ([oauthResult containsString:@"failed"]) {
Sezam/AGAppDelegate.m:142:        if ([oauthResult containsString:@"success"]) {
Sezam/AGAppDelegate.m:145:        if ([oauthResult containsString:@"failed"]) {
Sezam/AGAppDelegate.m:183:            AGDiaryDebug(@"IgnoreWidgetLaunch", @"Ignoring widget because video call is active");
Sezam/AGAppDelegate.m:207:        AGDiaryInfo(@"LaunchLock", @"Launching Lock View for lockId='%@'", lockID);
Sezam/AGAppDelegate.m:209:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:210:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:256:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:257:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:281:    NSString *noSpeedTestString = [NSString stringWithFormat:@"NoSpeedTestAlert_%@", doorbell.objectId];
Sezam/AGAppDelegate.m:291:    suggestSpeedTestAlertController = [UIAlertController alertControllerWithTitle:@"Hmm, this is taking a while!"
Sezam/AGAppDelegate.m:292:                                                                          message:@"It looks like you may be experiencing connection speed issues. We recommend running a speed test on your Doorbell Cam."
Sezam/AGAppDelegate.m:294:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Run a Doorbell Speed Test"
Sezam/AGAppDelegate.m:300:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Don't Show Again"
Sezam/AGAppDelegate.m:303:                                                                          NSString *noSpeedTestString = [NSString stringWithFormat:@"NoSpeedTestAlert_%@", doorbell.objectId];
Sezam/AGAppDelegate.m:308:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGAppDelegate.m:350:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAppDelegate.m:351:    AGDoorbellVideoSpeedTestViewController *doorbellVideoSpeedTestViewController = [doorbellStoryboard instantiateViewControllerWithIdentifier:@"DoorbellVideoSpeedTest"];
Sezam/AGAppDelegate.m:372:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:373:            AGHouseTabBarViewController *houseTabBar =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:383:        AGDiaryInfo(nil, @"The house has locks. Go to the LockPagingationViewController & HouseTabBar");
Sezam/AGAppDelegate.m:391:        UIViewController *vc = [rootViewController.storyboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGAppDelegate.m:400:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAppDelegate.m:402:            AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGAppDelegate.m:405:            UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:406:            [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGAppDelegate.m:425:    NSAssert(lockID, @"Cannot doLaunchLockOperation with lockID = nil");
Sezam/AGAppDelegate.m:432:        AGDiaryError(@"LaunchLockFail", @"AGRootContainerViewCont is not the root.  Cannot do widget toggle operation");
Sezam/AGAppDelegate.m:447:        AGDiaryDebug(@"ExistingVC", @"Updating instatoggle for existing view controller");
Sezam/AGAppDelegate.m:452:    AGDiaryDebug(@"RemoveTopViewController", @"Removing top view controller");
Sezam/AGAppDelegate.m:454:        AGDiaryInfo(@"LaunchLock", @"Launching Lock View for lockId='%@' and toggle operation %d", lockID, toggleMode);
Sezam/AGAppDelegate.m:456:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:457:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:480:    AGDiaryDebug(@"OpenURLEVENT", [url absoluteString]);
Sezam/AGAppDelegate.m:493:	return [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGAppDelegate.m:532:    if(![[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] containsObject:@"PairingEnabled"]){
Sezam/AGAppDelegate.m:534:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"PairingEnabled"];
Sezam/AGAppDelegate.m:544:    [[NSFileManager defaultManager] removeItemAtPath:[NSString stringWithFormat:@"%@/%@", libraryDirectory, @"Caches/p2p"] error:nil];
Sezam/AGAppDelegate.m:545:    [[NSFileManager defaultManager] removeItemAtPath:[NSString stringWithFormat:@"%@/%@", libraryDirectory, @"Caches/ivfolder"] error:nil];
Sezam/AGAppDelegate.m:573:    [[UITabBar appearance] setBackgroundImage:[UIImage imageNamed:@"tab-gray-background"]];
Sezam/AGAppDelegate.m:578:                                                                diskPath:@"nscache"];
Sezam/AGAppDelegate.m:590:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGAppDelegate.m:592:        [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:@"AppInstallDate"];
Sezam/AGAppDelegate.m:596:    NSString* nuiPath = [[NSBundle mainBundle] pathForResource:@"August" ofType:@"nss"];
Sezam/AGAppDelegate.m:603:	UIImage * segmentedBg = [[UIImage imageNamed:@"switch_background"] resizableImageWithCapInsets:UIEdgeInsetsMake(0.,14., 0., 14.) resizingMode:UIImageResizingModeStretch] ;
Sezam/AGAppDelegate.m:624:    AGDiaryInfo(@"AppLaunch", @"App launched");
Sezam/AGAppDelegate.m:655:    if([args containsObject:@"--noAnimations"]){
Sezam/AGAppDelegate.m:661:    if([args containsObject:@"--clean"]){
Sezam/AGAppDelegate.m:662:        AGDiaryDebug(@"Reset", @"Application will clear keychain, log out user, reset user defaults");
Sezam/AGAppDelegate.m:665:        if([SAMKeychain passwordForService:kSezam account:@"AugustInstallToken"]) {
Sezam/AGAppDelegate.m:667:            NSAssert([SAMKeychain deletePasswordForService:kSezam account:@"AugustInstallToken"],
Sezam/AGAppDelegate.m:668:                    @"For testing, we should be able to delete this.");
Sezam/AGAppDelegate.m:673:    if ([args containsObject:@"--logout"]){
Sezam/AGAppDelegate.m:674:        AGDiaryDebug(@"Logout", @"Application will log out user");
Sezam/AGAppDelegate.m:696:        NSString *lastUsedLock = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLock"];
Sezam/AGAppDelegate.m:697:        NSString *lastUsedLockName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockName"];
Sezam/AGAppDelegate.m:698:        NSString *lastUsedLockHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockHouse"];
Sezam/AGAppDelegate.m:699:        NSString *lastUsedLockHouseName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockHouseName"];
Sezam/AGAppDelegate.m:705:            UIApplicationShortcutIcon *lockShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"activity_locked_v2"];
Sezam/AGAppDelegate.m:706:            lockInfo = @{@"lockId":lastUsedLock,@"lockName":lastUsedLockName, @"houseId":lastUsedLockHouse};
Sezam/AGAppDelegate.m:707:            lockShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"lock" localizedTitle:lastUsedLockName localizedSubtitle:lastUsedLockHouseName icon:lockShortcutIcon userInfo:lockInfo];
Sezam/AGAppDelegate.m:708:            UIApplicationShortcutIcon *unLockShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"activity_unlocked_v2"];
Sezam/AGAppDelegate.m:709:            unLockShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"unlock" localizedTitle:lastUsedLockName localizedSubtitle:lastUsedLockHouseName icon:unLockShortcutIcon userInfo:lockInfo];
Sezam/AGAppDelegate.m:712:        NSString *lastUsedDoorbell = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbell"];
Sezam/AGAppDelegate.m:713:        NSString *lastUsedDoorbellName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellName"];
Sezam/AGAppDelegate.m:714:        NSString *lastUsedDoorbellHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellHouse"];
Sezam/AGAppDelegate.m:715:        NSString *lastUsedDoorbellHouseName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellHouseName"];
Sezam/AGAppDelegate.m:719:            doorbellInfo = @{@"doorbellID":lastUsedDoorbell,@"doorbellName":lastUsedDoorbellName, @"houseId":lastUsedDoorbellHouse};
Sezam/AGAppDelegate.m:720:            UIApplicationShortcutIcon *doorbellShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"camera_unselected_v2"];
Sezam/AGAppDelegate.m:721:            doorbellShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"doorbell" localizedTitle:lastUsedDoorbellName localizedSubtitle:lastUsedDoorbellHouseName icon:doorbellShortcutIcon userInfo:doorbellInfo];
Sezam/AGAppDelegate.m:742:    NSString *lastUsedLock = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLock"];
Sezam/AGAppDelegate.m:743:    NSString *lastUsedHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedHouse"];
Sezam/AGAppDelegate.m:745:    if (((![lastUsedHouse isEqualToString:@""]) && (!(lastUsedHouse == nil)) && (![lastUsedHouse isEqual:([NSNull null])]))) {
Sezam/AGAppDelegate.m:756:    if ([shortcutType isEqualToString:@"lock"] || [shortcutType isEqualToString:@"unlock"]) {
Sezam/AGAppDelegate.m:757:        NSString *lockId = userInfo[@"lockId"];
Sezam/AGAppDelegate.m:758:        NSString *houseId = userInfo[@"houseId"];
Sezam/AGAppDelegate.m:760:            if ([shortcutType isEqualToString:@"lock"]) {
Sezam/AGAppDelegate.m:763:            if ([shortcutType isEqualToString:@"unlock"]) {
Sezam/AGAppDelegate.m:768:    if ([shortcutType isEqualToString:@"doorbell"]) {
Sezam/AGAppDelegate.m:769:        NSString *doorbellID = userInfo[@"doorbellID"];
Sezam/AGAppDelegate.m:791:                logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message];
Sezam/AGAppDelegate.m:793:                logMessage = [NSString stringWithFormat:@"[%@] %@", category, message];
Sezam/AGAppDelegate.m:819:            if ((([category isEqualToString:@"Bluetooth"]) || ([category isEqualToString:@"ApiClient"])) &&
Sezam/AGAppDelegate.m:824:            if (([category isEqualToString:@"ApiClient"]) && ([event isEqualToString:@"NetworkErrorResponse"]))
Sezam/AGAppDelegate.m:827:            if ([event isEqualToString:@"NetworkError"])
Sezam/AGAppDelegate.m:837:                        CLSLog(@"%@ [%@.%@] %@", levelString, category, event, message);
Sezam/AGAppDelegate.m:839:                        CLSLog(@"%@ [%@] %@", levelString, category, message);
Sezam/AGAppDelegate.m:861:            data[@"message"] = message;
Sezam/AGAppDelegate.m:865:            data[@"tests"] = [experimentalFeatureTags allObjects];
Sezam/AGAppDelegate.m:873:            modifiedData[@"tests"] = [experimentalFeatureTags allObjects];
Sezam/AGAppDelegate.m:884:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildGitCommit] forKey:@"AGAugustAppBuildGitCommit"];
Sezam/AGAppDelegate.m:885:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildUser] forKey:@"AGAugustAppBuildUser"];
Sezam/AGAppDelegate.m:886:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildDate] forKey:@"AGAugustAppBuildDate"];
Sezam/AGAppDelegate.m:888:    [Mixpanel sharedInstanceWithToken:@"753a897c4af15f742965c3d584dc5bc7"];
Sezam/AGAppDelegate.m:894:    AGDiaryDebug(@"APNSSetup", @"Setting up APNS...");
Sezam/AGAppDelegate.m:925:    AGDiaryWarn(@"PushTokenError", @"Failed to register for remote notifications, error: %@", error);
Sezam/AGAppDelegate.m:932:        BOOL userShownNotificationsOffAlert = [[NSUserDefaults standardUserDefaults] boolForKey:@"UserShownNotificationsOffAlert"];
Sezam/AGAppDelegate.m:935:            UIAlertController *notificationsOffAlert = [UIAlertController alertControllerWithTitle:@"Warning: Notifications Off" message:@"Because you have notifications turned off for August you will not receive intended alerts and some features will not function properly." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:936:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAppDelegate.m:938:            UIAlertAction *goToSettingsAction = [UIAlertAction actionWithTitle:@"Turn Notifications On" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:942:            UIAlertAction *doNotShowAgainAction = [UIAlertAction actionWithTitle:@"Don't Show Again" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:943:                [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"UserShownNotificationsOffAlert"];
Sezam/AGAppDelegate.m:970:    AGDiaryDebug(@"AppWillResignActive", @"Resigning Active");
Sezam/AGAppDelegate.m:1002:    [AGUtility logEventToFabric:@"App Launched" attributes:@{}];
Sezam/AGAppDelegate.m:1014:    AGDiaryInfo(@"OpenApp", @"Application became active (foreground)");
Sezam/AGAppDelegate.m:1015:    [AGUser checkForAppUpgrade:[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"] block:^(NSString *message, NSError *error) {
Sezam/AGAppDelegate.m:1016:        if ([message isEqualToString:@"upgrade"]) {
Sezam/AGAppDelegate.m:1017:            UIAlertController *upgradeAlert = [UIAlertController alertControllerWithTitle:@"Upgrade August"
Sezam/AGAppDelegate.m:1018:                                                                                             message:@"Please upgrade August to the latest version to continue using it."
Sezam/AGAppDelegate.m:1020:            [upgradeAlert addAction:[UIAlertAction actionWithTitle:@"Upgrade"
Sezam/AGAppDelegate.m:1023:                                                               [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms-apps://itunes.apple.com/app/id648730592"]];
Sezam/AGAppDelegate.m:1066:            if ([[dict objectForKey:@"approved"] boolValue] == NO) {
Sezam/AGAppDelegate.m:1069:                    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGAppDelegate.m:1070:                    AGLicenseAgreeViewController* licenseAgreeVC = (AGLicenseAgreeViewController*)[storyboard instantiateViewControllerWithIdentifier:@"LicenseAgree"];
Sezam/AGAppDelegate.m:1088:    [[AGClient sharedClient] getPath:@"/credentials" parameters:nil augustAPIResponse:^(NSURLResponse *response, id responseObject, NSError *error)
Sezam/AGAppDelegate.m:1093:            if(credentials[@"turn"]){
Sezam/AGAppDelegate.m:1094:                NSString * username = credentials[@"turn"][@"user"];
Sezam/AGAppDelegate.m:1095:                NSString * password = credentials[@"turn"][@"password"];
Sezam/AGAppDelegate.m:1098:                [SAMKeychain setPassword:password forService:@"turn" account:username];
Sezam/AGAppDelegate.m:1107:    NSDictionary *appFeatures = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"appfeatures"];
Sezam/AGAppDelegate.m:1120:        [[NSUserDefaults standardUserDefaults] setObject:workingDict forKey:@"appfeatures"];
Sezam/AGAppDelegate.m:1142:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"] == NO) {    // Ignore the beta server check if user is in DebugMode
Sezam/AGAppDelegate.m:1144:        BOOL betaStagingAppFeature = [AGUtility checkForAppFeature:@"beta-staging"];
Sezam/AGAppDelegate.m:1145:        NSString *baseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGAppDelegate.m:1147:            baseURL = @"https://api-production.august.com";
Sezam/AGAppDelegate.m:1150:        NSString *apiproductionURL = @"https://api-production.august.com";
Sezam/AGAppDelegate.m:1151:        NSString *productionURL = @"https://production.august.com";
Sezam/AGAppDelegate.m:1152:        NSString *stagingURL = @"https://staging.august.com";
Sezam/AGAppDelegate.m:1173:    AGDiaryInfo(@"ChangeAPIServer", @"Changing API server to %@", baseURL);
Sezam/AGAppDelegate.m:1175:        NSString *message = [NSString stringWithFormat:@"Switching Server to %@. Application will automatically close.", baseURL];
Sezam/AGAppDelegate.m:1176:        UIAlertController *changingServersAlertController = [UIAlertController alertControllerWithTitle:@"Changing Server" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:1177:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:1233:    [AGUtility showError:NSLocalizedString(@"Please update your August app.",nil) inViewController:self.window.rootViewController];
Sezam/AGAppDelegate.m:1267:        BOOL didDisplayWhatsNew = [[NSUserDefaults standardUserDefaults] boolForKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAppDelegate.m:1269:            UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGAppDelegate.m:1270:            AGWhatsNewViewController *whatsNewViewController =  (AGWhatsNewViewController *)[augustStoryboard instantiateViewControllerWithIdentifier: @"WhatsNew"];
Sezam/AGAppDelegate.m:1272:            AGDiaryDebug(@"PresentWhatsNew", @"Presenting whats new page");
Sezam/AGAppDelegate.m:1276:            [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAppDelegate.m:1298:    if ([AGFeatureManager enabled:@"ABTestingControl1"]) {
Sezam/AGAppDelegate.m:1299:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1302:    if ([AGFeatureManager enabled:@"ABTestingControl2"]) {
Sezam/AGAppDelegate.m:1303:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1306:    if ([AGFeatureManager enabled:@"ABTestingControl3"]) {
Sezam/AGAppDelegate.m:1307:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1310:    if ([AGFeatureManager enabled:@"ABTestingControl4"]) {
Sezam/AGAppDelegate.m:1311:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1332:            AGDiaryInfo(@"ForceQuitDetectionRemoveError", @"error :%@", error.description);
Sezam/AGAppDelegate.m:1335:        AGDiaryInfo(@"ForceQuitDetectionCanaryFileDoesNotExist", @"");
Sezam/AGAppDelegate.m:1340:        AGDiaryInfo(@"ForceQuitDetectionDidDetectForceQuit", @"");
Sezam/AGAppDelegate.m:1355:        AGDiaryInfo(@"ForceQuitDetectionCreateSavedAppStateFoldersError", @"error :%@", error.description);
Sezam/AGAppDelegate.m:1358:    NSString *emptyStr = @"";
Sezam/AGAppDelegate.m:1363:        AGDiaryInfo(@"ForceQuitDetectionSaveFileError", @"error :%@", error.description);
Sezam/AGAppDelegate.m:1369:    return [NSString stringWithFormat:@"%@/Library/Saved Application State/%@.savedState/data.data", NSHomeDirectory(), [[NSBundle mainBundle] bundleIdentifier]];
Sezam/AGAppDelegate.m:1374:    [defaults setObject:[NSNumber numberWithBool:isExpectingToAppRestorationFileToExist] forKey:@"AGAppIsExpectingAppRestorationFileToExist"];
Sezam/AGAppDelegate.m:1381:    return ((NSNumber *)[defaults objectForKey:@"AGAppIsExpectingAppRestorationFileToExist"]).boolValue;
Sezam/AGAppDelegate.m:1385:    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"AGAppForceQuitDetector"];
Sezam/AGAppDelegate.m:1393:    if ([AGFeatureManager enabled:@"BackgroundTerminationSimulation"]){
Sezam/AGAppDelegate.m:1400:    NSURL *crossProcessContainerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.august.general-cross-process"];
Sezam/AGAppDelegate.m:1402:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
Sezam/AGAppDelegate.m:1405:                                            contents:[@"" dataUsingEncoding:NSUTF8StringEncoding]
Sezam/AGAppDelegate.m:1419:    NSString *crashString = [NSString stringWithFormat:@"report.id:%@| report.dateCreated:%@|  report.isCrash:%i", report.identifier, report.dateCreated, report.isCrash];
Sezam/AGAppDelegate.m:1420:    AGDiaryInfo(@"CrashDetected", crashString);
Sezam/AGInviteSuccessViewController.m:37:    [[self nameLabel] setText: [NSString stringWithFormat: @"%@ %@",[[self user] firstName],[[self user] lastName]]];
Sezam/AGInviteSuccessViewController.m:46:    [[self phoneLabel] setText: @""];
Sezam/AGInviteSuccessViewController.m:47:    [[self statusLabel] setText: [NSString stringWithFormat: @"%@",[self userStatus]]];
Sezam/AGInviteSuccessViewController.m:51:    if ([[[self timeFrameLabel] text] isEqual:@"Recurring"]) {
Sezam/AGInviteSuccessViewController.m:52:        [formatter setDateFormat:@"h:mm a"];
Sezam/AGInviteSuccessViewController.m:54:        [formatter setDateFormat:@"M/d/yy h:mm a"];
Sezam/AGInviteSuccessViewController.m:60:    if ([[[self timeFrameLabel] text] isEqual:@"Recurring"]) {
Sezam/AGInviteSuccessViewController.m:70:    }else if ([[[self timeFrameLabel] text] isEqual:@"Temporary"]){
Sezam/AGInviteSuccessViewController.m:88:    if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteSuccessViewController.m:90:        formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteSuccessViewController.m:117:    AGCollectionViewCell *cell = (AGCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:@"DAY_CELL" forIndexPath:indexPath];
Sezam/AGInviteSuccessViewController.m:121:    [[cell imageView] setImage:[UIImage imageNamed:@"Day selected-47"]];
Sezam/AGAlertController.m:21:    self = [self initWithNibName:@"AGAlertController" bundle:[NSBundle mainBundle]];
Sezam/AGKeypadOTAViewController.m:14:#define kAGDiaryCategory @"KeypadOTAVC"
Sezam/AGKeypadOTAViewController.m:48:    self.otaPanelLabel.text = [NSLocalizedString(@"DOWNLOADING DATA",nil) uppercaseString];
Sezam/AGKeypadOTAViewController.m:57:            self.keypadOTAManager  = [AGKeypadOTAManager sharedInstanceWithLock:self.lock dataForOTA:[dict objectForKey:@"data"]  otaVersion:futureFirmwareVersion];
Sezam/AGKeypadOTAViewController.m:61:            AGDiaryError(@"FailedOTACheck", @"Faled getting firmware");
Sezam/AGKeypadOTAViewController.m:84:        return NSLocalizedString(@"SEARCHING FOR KEYPAD...", nil);
Sezam/AGKeypadOTAViewController.m:87:        return NSLocalizedString(@"CONNECTING...", nil);
Sezam/AGKeypadOTAViewController.m:91:        return NSLocalizedString(@"UPDATE IN PROGRESS", nil);
Sezam/AGKeypadOTAViewController.m:94:        return NSLocalizedString(@"CONNECTING...", nil);
Sezam/AGKeypadOTAViewController.m:97:        return NSLocalizedString(@"CONNECTING...", nil);
Sezam/AGKeypadOTAViewController.m:100:        return NSLocalizedString(@"FINISHED", nil);
Sezam/AGKeypadOTAViewController.m:103:        return NSLocalizedString(@"CONNECTION FAILED", nil);
Sezam/AGKeypadOTAViewController.m:106:        return NSLocalizedString(@"", nil); // Make this blank to not flash text on transition.
Sezam/AGKeypadOTAViewController.m:108:    return @"";
Sezam/AGKeypadOTAViewController.m:116:    AGDiaryInfo(@"KeypadOTAState", @"state id %D", (int) status);
Sezam/AGKeypadOTAViewController.m:120:        self.instructionsLabel.text = NSLocalizedString(@"Your update is complete! You can now use your keypad.", nil);
Sezam/AGKeypadOTAViewController.m:133:            self.instructionsLabel.text = NSLocalizedString(@"Please leave your phone near your keypad while the update completes. It should only take a minute or two.", nil);
Sezam/AGKeypadOTAViewController.m:141:            AGKeypadOTAFailedViewController *vc = (AGKeypadOTAFailedViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadOTAFailed"];
Sezam/AGKeypadOTAViewController.m:143:                vc.errorDetailLabelText = NSLocalizedString(@"The keypad update was interrupted. Make sure your phone is in bluetooth range of your keypad, hold down the red August button for 5 seconds, then press start to begin the update.", nil);
Sezam/AGKeypadOTAViewController.m:144:                vc.failTitleLabelText = NSLocalizedString(@"UPDATE INTERRUPTED", nil);
Sezam/AGKeypadOTAViewController.m:150:    AGDiaryInfo(@"UpdatedCommState", stateString);
Sezam/AGAutoUnlockSetupArrivingController.m:38:    self.view.topView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_3_home"]];
Sezam/AGAutoUnlockSetupArrivingController.m:42:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupArrivingController.m:46:    NSString *title = @"Arriving Home";
Sezam/AGAutoUnlockSetupArrivingController.m:47:    NSString *paragraph1 = @"When you arrive home, Auto-Unlock will unlock your door once your phone is within a few feet of your lock.";
Sezam/AGAutoUnlockSetupArrivingController.m:48:    NSString *paragraph2Part1 = @"Auto-Unlock will then switch back to";
Sezam/AGAutoUnlockSetupArrivingController.m:49:    NSString *paragraph2BoldPart1 = @" Home ";
Sezam/AGAutoUnlockSetupArrivingController.m:50:    NSString *paragraph2Part2 = @"mode until you leave your neighborhood again.";
Sezam/AGAutoUnlockSetupArrivingController.m:53:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@\n\n%@%@%@", title, paragraph1, paragraph2Part1, paragraph2BoldPart1, paragraph2Part2];
Sezam/AGAutoUnlockSetupArrivingController.m:62:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupArrivingController.m:78:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupArrivingController.m:85:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupArrivingController.m:94:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:70:	self.title = _isOpen?@"Unlocked":@"LOCKED";
Sezam/SZLockViewController.m.orig:101:	//NSLog(@"Value %f",sender.value);
Sezam/SZLockViewController.m.orig:190://	self.lockSwitch.onText = @"Open";
Sezam/SZLockViewController.m.orig:191://	self.lockSwitch.offText = @"Locked";
Sezam/SZLockViewController.m.orig:244:	//    NSLog(@"OpenStatusChanged == %d", isOpen);
Sezam/SZLockViewController.m.orig:250:        NSLog(@"BRSP Security Level is %d", self.brspObject.securityLevel);
Sezam/SZLockViewController.m.orig:253:        NSLog(@"brsp object has been closed");
Sezam/SZLockViewController.m.orig:266:            NSLog(@"%@", error);
Sezam/SZLockViewController.m.orig:293: [self outputToScreen:@"_________________________________________"];
Sezam/SZLockViewController.m.orig:305:    NSLog(@"%@", error.description);
Sezam/SZLockViewController.m.orig:308:	//  NSLog(@"BRSP Mode changed to %d", mode);
Sezam/SZLockViewController.m.orig:311:	//            [self.buttonChangeMode setTitle:[NSString stringWithFormat:@"Data"] forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:314:	//            [self.buttonChangeMode setTitle:[NSString stringWithFormat:@"Command"] forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:330:			modeString = @"BrspModeIdle";
Sezam/SZLockViewController.m.orig:334:			modeString = @"BrspModeData";
Sezam/SZLockViewController.m.orig:337:			modeString = @"BrspModeRemoteCommand";
Sezam/SZLockViewController.m.orig:341:			modeString = @"BrspModeFirmwareUpdate";
Sezam/SZLockViewController.m.orig:350:	NSLog(@"BRSP Mode changed to %@", modeString);
Sezam/SZLockViewController.m.orig:358://    if ([[segue identifier] isEqualToString:@"commandsListSegue"]) {
Sezam/SZLockViewController.m.orig:396:	NSString * key = @"12345678";
Sezam/SZLockViewController.m.orig:402:	NSLog(@"status: %d", status);
Sezam/SZLockViewController.m.orig:417:		NSLog(@"status: %d", status);
Sezam/SZLockViewController.m.orig:438:        NSLog(@"status: %d", status);
Sezam/AGLogBookViewController.m:22:static NSString* kAGDiaryCategory = @"ActivityLogbook";
Sezam/AGLogBookViewController.m:96:    AGDiaryInfo(@"ShowLockLog", @"Showing Activity Log for lock '%@'", [self.houseTabsDelegate getHouse].name);
Sezam/AGLogBookViewController.m:204:                                                                                                                     forKey:[NSString stringWithFormat:@"%@-%@-%@", entryDateString, lockLogEntry.deviceID, [AGLockLogEntry stringForAction:lockLogEntry.action]]];
Sezam/AGLogBookViewController.m:221:                                                           DLog(@"locks error: %@", error.localizedDescription);
Sezam/AGLogBookViewController.m:302:    self.noActivityLabel.text = NSLocalizedString(@"No Activity.",nil);
Sezam/AGLogBookViewController.m:321:    NSString *lockEntryKeyString = [NSString stringWithFormat:@"%@-%@-%@", [[self storyDateFormatter] stringFromDate:lockLogEntry.date], lockLogEntry.deviceID,
Sezam/AGLogBookViewController.m:361:    heightForRow += [self contentLabelHeight:[NSString stringWithFormat:@"%@", [logEntry.user displayName].capitalizedString] font:[UIFont fontWithName:@"ProximaNova-Light" size:17] textViewSize:textViewSize]+32;
Sezam/AGLogBookViewController.m:389:    cell.activityIconImageView.image = [UIImage imageNamed:@"activity_doorbell"];
Sezam/AGLogBookViewController.m:400:                                                    AGDiaryError(@"DoorbellActivityImage", @"ImageDownloadFailure");
Sezam/AGLogBookViewController.m:424:            cell.expandEventIconImageView.image = [UIImage imageNamed:@"play_thumb"];
Sezam/AGLogBookViewController.m:427:            cell.expandEventIconImageView.image = [UIImage imageNamed:@"play_thumb"];
Sezam/AGLogBookViewController.m:466:    cell.userNameLabel.text = [NSString stringWithFormat:@"%@", [logEntry.user displayName].capitalizedString];
Sezam/AGLogBookViewController.m:483:        [cell.userPhotoImageView setImageWithURL:[NSURL URLWithString:logEntry.user.thumbURL] placeholderImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGLogBookViewController.m:485:        cell.userPhotoImageView.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGLogBookViewController.m:493:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_keypad_lock"];
Sezam/AGLogBookViewController.m:494:                cell.activityNameLabel.text = [NSString stringWithFormat:@"One-Touch Lock at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:496:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_wifi_locked_v2"];
Sezam/AGLogBookViewController.m:497:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked remotely", logEntry.deviceName];
Sezam/AGLogBookViewController.m:501:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_homekit_locked"];
Sezam/AGLogBookViewController.m:502:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with HomeKit", logEntry.deviceName];
Sezam/AGLogBookViewController.m:505:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_wifi_locked_v2"];
Sezam/AGLogBookViewController.m:506:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with Z-Wave", logEntry.deviceName];
Sezam/AGLogBookViewController.m:509:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_manual_lock_v2"];
Sezam/AGLogBookViewController.m:510:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked manually", logEntry.deviceName];
Sezam/AGLogBookViewController.m:513:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_manual_lock_v2"];
Sezam/AGLogBookViewController.m:514:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ Auto-Locked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:517:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_keypad_lock"];
Sezam/AGLogBookViewController.m:518:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with entry code", logEntry.deviceName];
Sezam/AGLogBookViewController.m:521:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_locked_v2"];
Sezam/AGLogBookViewController.m:522:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:527:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_door_open"];
Sezam/AGLogBookViewController.m:528:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ opened", logEntry.deviceName];
Sezam/AGLogBookViewController.m:531:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_door_closed"];
Sezam/AGLogBookViewController.m:532:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ closed", logEntry.deviceName];
Sezam/AGLogBookViewController.m:535:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Nest detected motion at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:539:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ declined", logEntry.deviceName];
Sezam/AGLogBookViewController.m:543:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ answered", logEntry.deviceName];
Sezam/AGLogBookViewController.m:547:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ live stream viewed", logEntry.deviceName];
Sezam/AGLogBookViewController.m:551:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Missed visitor at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:555:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Motion detected at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:560:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_keypad_unlocked"];
Sezam/AGLogBookViewController.m:561:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with entry code", logEntry.deviceName];
Sezam/AGLogBookViewController.m:565:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_wifi_unlocked_v2"];
Sezam/AGLogBookViewController.m:566:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked remotely", logEntry.deviceName];
Sezam/AGLogBookViewController.m:570:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_homekit_unlocked"];
Sezam/AGLogBookViewController.m:571:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with HomeKit", logEntry.deviceName];
Sezam/AGLogBookViewController.m:574:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_wifi_unlocked_v2"];
Sezam/AGLogBookViewController.m:575:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with Z-Wave", logEntry.deviceName];
Sezam/AGLogBookViewController.m:578:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_manual_unlock_v2"];
Sezam/AGLogBookViewController.m:579:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked manually", logEntry.deviceName];
Sezam/AGLogBookViewController.m:582:                cell.activityIconImageView.image = [UIImage imageNamed:@"activity_unlocked_v2"];
Sezam/AGLogBookViewController.m:583:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:591:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ given access to %@", logEntry.otherUser.displayName, logEntry.deviceName];
Sezam/AGLogBookViewController.m:592:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_user_added_v2"];
Sezam/AGLogBookViewController.m:598:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ removed from %@", logEntry.otherUser.displayName, logEntry.deviceName];
Sezam/AGLogBookViewController.m:599:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_user_deleted_v2"];
Sezam/AGLogBookViewController.m:603:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Invalid entry code used at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:604:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_keypad_failure"];
Sezam/AGLogBookViewController.m:607://            cell.activityTimestampLabel.text = [NSString stringWithFormat:@"%@ | %@", NSLocalizedString(@"CODE ADDED", nil), cell.activityTimestampLabel.text];
Sezam/AGLogBookViewController.m:608:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ entry code created for %@", logEntry.deviceName, logEntry.otherUser.displayName];
Sezam/AGLogBookViewController.m:609:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_user_added_v2"];
Sezam/AGLogBookViewController.m:613://            cell.activityTimestampLabel.text = [NSString stringWithFormat:@"%@ | %@", NSLocalizedString(@"CODE ENABLED", nil), cell.activityTimestampLabel.text];
Sezam/AGLogBookViewController.m:615://            cell.activityTimestampLabel.text = [NSString stringWithFormat:@"%@ | %@", NSLocalizedString(@"CODE DISABLED", nil), cell.activityTimestampLabel.text];
Sezam/AGLogBookViewController.m:617://            cell.activityTimestampLabel.text = [NSString stringWithFormat:@"%@ | %@", NSLocalizedString(@"CODE REMOVED", nil), cell.activityTimestampLabel.text];
Sezam/AGLogBookViewController.m:618:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Access changed for %@", logEntry.otherUser.displayName];
Sezam/AGLogBookViewController.m:619:            cell.activityIconImageView.image = [UIImage imageNamed:@"activity_updated.png"];
Sezam/AGLogBookViewController.m:623:            AGDiaryError(@"BadLockLogAction", @"Action '%d' is not recognized by AGLockLogEntry", logEntry.action);
Sezam/AGLogBookViewController.m:643:    [_storyDateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGLogBookViewController.m:644:    [_storyDateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGLogBookViewController.m:653:        NSString *cellID = @"LOADING_CELL";
Sezam/AGLogBookViewController.m:666:        NSString *cellID = @"ACTIVITY_FEED_CELL";
Sezam/AGLogBookViewController.m:812:        [self performSegueWithIdentifier:@"logBookToMotionActivity" sender:logEntry];
Sezam/AGLogBookViewController.m:814:        [self performSegueWithIdentifier:@"logBookToDoorbellActivity" sender:logEntry];
Sezam/AGLogBookViewController.m:842:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGLogBookViewController.m:887:    if ([segue.identifier isEqualToString:@"logBookToMotionActivity"]) {
Sezam/AGLogBookViewController.m:892:    if ([segue.identifier isEqualToString:@"logBookToDoorbellActivity"]) {
Sezam/AGUnitySettingManager.m:13:#define kAGDiaryCategory @"AGUnitySettingManager"
Sezam/AGUnitySettingManager.m:54:            completedBlock(NO, @"lock not connected!");
Sezam/AGUnitySettingManager.m:68:        AGDiaryDebug(@"settingEvent", @"response: %@", responseDict);
Sezam/AGUnitySettingManager.m:69:        int errorCode = [(NSNumber *)responseDict[@"error_code"] intValue];
Sezam/AGUnitySettingManager.m:71:            AGDiaryDebug(@"settingEvent", @"link error: %@, other error_code: %d", error, errorCode);
Sezam/AGUnitySettingManager.m:83:    operation.label = @"Unity set settings ";
Sezam/AGUnitySettingManager.m:106:    AGDiaryDebug(@"onConnected", @"in unity manager, connected success, lock: %@, lockId: %@", agLock, lockUUID);
Sezam/AGUnitySettingManager.m:112:    AGDiaryDebug(@"onConnectionError", @"errorMsg: %@", error.localizedDescription);
Sezam/AGUnitySettingManager.m:114:        self.completedBlock(NO, @"onConnectionError");
Sezam/AGUnitySettingManager.m:121:    AGDiaryDebug(@"onLockStateChange", @"lock state: %d", lockState);
Sezam/AGUnitySettingManager.m:125:    AGDiaryDebug(@"onDisconnected", @"lockId: %@", agLock.objectId);
Sezam/AGUnitySettingManager.m:129:    AGDiaryDebug(@"connectionStatusChanged", @"message: %@, connected: %d", message, connected);
Sezam/AGUnitySettingManager.m:158:    operation.label = @"Unity_get_settings";
Sezam/AGUnitySettingManager.m:167:            completedBlock(NO, @"not connect, blocked the request!");
Sezam/AGUnitySettingManager.m:183:        AGDiaryDebug(@"getSetting1st", @"response: %@, error: %@", responseDict, error);
Sezam/AGUnitySettingManager.m:194:        AGDiaryDebug(@"getSetting2nd", @"response: %@, error: %@", responseDict, error);
Sezam/AGUnitySettingManager.m:203:                completedBlock(NO, @"get settings failed!");
Sezam/AGUnitySettingManager.m:208:        NSArray *responseArray1 = responseDict1[@"response"];
Sezam/AGUnitySettingManager.m:209:        NSArray *responseArray2 = responseDict2[@"response"];
Sezam/AGUnitySettingManager.m:214:            NSNumber *errorCode = dict[@"error_code"];
Sezam/AGUnitySettingManager.m:217:                NSString *errorString = [NSString stringWithFormat:@"key: %@ parse error, errorcode: %@", key, errorCode];
Sezam/AGUnitySettingManager.m:218:                AGDiaryDebug(@"UnitySettingResponse", errorString);
Sezam/AGUnitySettingManager.m:232:        model.showIndicatorLight = [resultDic[@"UNITY_PARAM_INSIDE_LED"] integerValue] == 0xFF ? YES : NO;
Sezam/AGUnitySettingManager.m:233:        model.allowOneTouchLocking = [resultDic[@"UNITY_PARAM_ONE_TOUCH_LOCKING"] integerValue] == 0xFF ? YES : NO;;
Sezam/AGUnitySettingManager.m:234:        model.languageType = [resultDic[@"UNITY_PARAM_LANGUAGE"] integerValue];
Sezam/AGUnitySettingManager.m:235:        model.soundVolumeType = [resultDic[@"UNITY_PARAM_AUDIO_VOLUME"] integerValue];
Sezam/AGUnitySettingManager.m:236:        model.operatingModeType = [resultDic[@"UNITY_PARAM_OPERATING_MODE"] integerValue];
Sezam/AGUnitySettingManager.m:237:        model.shutDownTime = [resultDic[@"UNITY_PARAM_SHUTDOWN_TIME"] integerValue];
Sezam/AGUnitySettingManager.m:238:        model.wrongCodeLimit = [resultDic[@"UNITY_PARAM_WRONG_CODE_LIMIT"] integerValue];
Sezam/Intellivision/AGAACEncoder.mm:58:    if (([machine containsString:@"iPhone7"]) || ([machine containsString:@"iPhone8"]) || ([machine containsString:@"iPhone9"])) {
Sezam/Intellivision/AGAACEncoder.mm:272:        NSLog(@"NULL encode buffer");
Sezam/Intellivision/IVPushToTalkServices.mm:56:NSString* const CMD_INIT_PTT = @"INITPTT#";
Sezam/Intellivision/IVPushToTalkServices.mm:57:NSString* const CMD_PLAY_PTT = @"PLAYPTT#";
Sezam/Intellivision/IVPushToTalkServices.mm:58:NSString* const CMD_STOP_PTT = @"STOPPTT#";
Sezam/Intellivision/IVPushToTalkServices.mm:310:    NSString *folderPath = [DOCUMENT_PATH stringByAppendingPathComponent:@"recorder"];
Sezam/Intellivision/IVPushToTalkServices.mm:313:    NSString *filePath = [folderPath stringByAppendingPathComponent:@"testPTT"];
Sezam/Intellivision/IVPushToTalkServices.mm:355:    NSLog(@"error while created recorder %@",error);
Sezam/Intellivision/IVPushToTalkServices.mm:360:    NSLog(@"Recorder setup complete %d",isPrepared);
Sezam/Intellivision/IVPushToTalkServices.mm:364:    NSString *path = [NSString stringWithFormat:@"%@pushToTalk.aac",tempFilePath];
Sezam/Intellivision/IVPushToTalkServices.mm:379:    NSString *folderPath = [DOCUMENT_PATH stringByAppendingPathComponent:@"recorder"];
Sezam/Intellivision/IVPushToTalkServices.mm:384:    NSString *filePath = [folderPath stringByAppendingPathComponent:@"pushToTalk.aac"];
Sezam/Intellivision/IVPushToTalkServices.mm:387:     NSString *path = [NSString stringWithFormat:@"%@pushToTalk.aac",tempFilePath];*/
Sezam/Intellivision/IVPushToTalkServices.mm:393:    NSString *path = [NSString stringWithFormat:@"%@pushToTalk.aac",tempFilePath];
Sezam/Intellivision/IVPushToTalkServices.mm:399:    NSLog(@"Recoreder Setup the pushToTalk.acc is deleted if it exsists");
Sezam/Intellivision/IVPushToTalkServices.mm:410:                NSLog(@"Error removing file at path: %@", error);
Sezam/Intellivision/IVPushToTalkServices.mm:415:    NSLog(@"Resetting is done");
Sezam/Intellivision/IVPushToTalkServices.mm:444:            NSLog(@"input gain is %f",session.inputGain);
Sezam/Intellivision/IVPushToTalkServices.mm:451:            NSLog(@"cannot set input gain");
Sezam/Intellivision/IVPushToTalkServices.mm:455:            NSLog(@"Error in recording %@",error);
Sezam/Intellivision/IVPushToTalkServices.mm:464:        //NSLog(@"%@ for cameraID %@",(isRecording)?@"Recording initaited":@"Not Recording",mCameraID);
Sezam/Intellivision/IVPushToTalkServices.mm:488:        NSLog(@"recording file doesn't exists.");
Sezam/Intellivision/IVPushToTalkServices.mm:524:    NSLog(@"%ld",(unsigned long)recordedData.length);
Sezam/Intellivision/IVPushToTalkServices.mm:530:        //NSLog(@"AAC frame: %@", aacPacketWithHeader);
Sezam/Intellivision/IVPushToTalkServices.mm:560:       /// NSLog(@"Frame with Intellivision Header: %@", dataToSend);
Sezam/Intellivision/IVPushToTalkServices.mm:571:            NSLog(@"Sorry, something went very wrong. Do something else");
Sezam/Intellivision/IVPushToTalkServices.mm:617:    // NSLog(@"seeked till %ld",mReadBytes);
Sezam/Intellivision/IVPushToTalkServices.mm:708:                NSLog(@"Read frame count %d with size %d",mReadFrameCount,formatedData.length);
Sezam/Intellivision/IVPushToTalkServices.mm:715:            NSLog(@"Invalid magic byte");
Sezam/Intellivision/IVPushToTalkServices.mm:875:                NSLog(@"buffer is full with length %d",formatedData.length);
Sezam/Intellivision/IVPushToTalkServices.mm:892:        //  NSLog(@"frame contained in chunk is %d",frameNo);
Sezam/Intellivision/IVPushToTalkServices.mm:920:                NSLog(@"Audio chunk sent to sessionWrapper with frameNo %d, total frames %d",mReadFrameCount,frameNo);
Sezam/Intellivision/IVPushToTalkServices.mm:971:    NSLog(@"Sending tailing Stop command %@", [[NSString alloc]initWithBytes:formatedData.bytes length:formatedData.length encoding:NSUTF8StringEncoding]);
Sezam/Intellivision/IVPushToTalkServices.mm:1004:    NSLog(@"finished Recording %@",(flag)?@"Successfully":@"Failed");
Sezam/Intellivision/IVPushToTalkServices.mm:1010:    NSLog(@"Error: %@",error);
Sezam/Intellivision/Define.h:23:#define currentFunctionName() NSLog(@"%s",__func__)
Sezam/Intellivision/Define.h:25:#define kAppVersion @"Intellivison App Version"
Sezam/Intellivision/Define.h:40:#define INAPP_ERROR @"INAPP_ERROR"
Sezam/Intellivision/Define.h:41:#define INAPP_SUCCESS @"INAPP_SUCCESS"
Sezam/Intellivision/Define.h:43:#define APP_FOLDER @"ivfolder"
Sezam/Intellivision/Define.h:58:#define kText @"text"
Sezam/Intellivision/Define.h:60:#define kKeyAppLastBgTime @"kKeyAppLastBgTime"
Sezam/Intellivision/Define.h:63:#define NOTIFICATION_SESSION_CREATED @"session_created"
Sezam/Intellivision/Define.h:64:#define NOTIFICATION_SESSION_FAILED @"session_failed"
Sezam/Intellivision/Define.h:65:#define kKeyPushNotificationCount @"PushNotificationCount"
Sezam/Intellivision/Define.h:68:#define kKeySession  @"SessionKey"
Sezam/Intellivision/Define.h:69:#define kKeySessionSecret @"SecretSessionKey"
Sezam/Intellivision/Define.h:71:#define kKeySessionForGet  @"SessionKeyGet"
Sezam/Intellivision/Define.h:72:#define kKeySessionSecretForGet @"SecretSessionKeyGet"
Sezam/Intellivision/Define.h:75:#define kKeyToken @"token"
Sezam/Intellivision/Define.h:76:#define kIsAlertSubscribed @"isAlertsSubscribed"
Sezam/Intellivision/Define.h:79:#define kCellCheckBoxNotification @"checkBoxNotification"
Sezam/Intellivision/Define.h:80:#define kCellSettingTitle @"Title"
Sezam/Intellivision/Define.h:81:#define kCellSettingStyle @"Style"
Sezam/Intellivision/Define.h:82:#define kCellSubTitleSetting @"SubTitle"
Sezam/Intellivision/Define.h:83:#define kCellSwitchState @"OnOff"
Sezam/Intellivision/Define.h:84:#define kCellSwitchFunction @"kCellSwitchFunction"
Sezam/Intellivision/Define.h:85:#define kCellAccessoryType @"cType"
Sezam/Intellivision/Define.h:86:#define kCellSettingTitleColor @"color"
Sezam/Intellivision/Define.h:87:#define kCellSubTitleColor @"subColor"
Sezam/Intellivision/Define.h:88:#define kCellSettingDescription @"SettingDescription"
Sezam/Intellivision/Define.h:92:#define kCellSettingStyleCustom @"10"
Sezam/Intellivision/Define.h:94:#define kCellType @"cellType"
Sezam/Intellivision/Define.h:95:#define kCellTypeCheckBox @"100"
Sezam/Intellivision/Define.h:96:#define kCellTypeSlider @"101"
Sezam/Intellivision/Define.h:97:#define kCellTypeSwitch @"102"
Sezam/Intellivision/Define.h:98:#define kCellTypeSliderStepper @"103"
Sezam/Intellivision/Define.h:101:#define kCellTypeInfo @"CellTypeInfo"
Sezam/Intellivision/Define.h:102:#define kCellTypeInfoSelector @"TypeInfoSelector"
Sezam/Intellivision/Define.h:103:#define kCellTypeInfoMinValue @"TypeInfoMinValue"
Sezam/Intellivision/Define.h:104:#define kCellTypeInfoMaxValue @"TypeInfoMaxValue"
Sezam/Intellivision/Define.h:105:#define kCellTypeInfoMapValues @"TypeInfoMapValues"
Sezam/Intellivision/Define.h:106:#define kCellTypeInfoUIValues @"TypeInfoUIValues"
Sezam/Intellivision/Define.h:107:#define kCellTypeInfoSwitchState @"TypeInfoSwitchState"
Sezam/Intellivision/Define.h:108:#define kCellTypeInfoDefaultValue @"TypeInfoDefaultValue"
Sezam/Intellivision/Define.h:109:#define kCellTypeInfoCurrentValue @"TypeInfoCurrentValue"
Sezam/Intellivision/Define.h:110:#define kCellTypeInfoUnitValue @"TypeInfoUnitValue"
Sezam/Intellivision/Define.h:113:#define kConfigKey @"configKey"
Sezam/Intellivision/Define.h:114:#define kConfigIsMetaData @"Metadata"
Sezam/Intellivision/Define.h:115:#define kConfigMapValue @"Mapdata"
Sezam/Intellivision/Define.h:132:#define kCameraConfigKeyMotionDirection @"MotionDirection"
Sezam/Intellivision/Define.h:133:#define kCameraConfigKeySensitivity @"Sensitivity"
Sezam/Intellivision/Define.h:135:#define kCameraConfigKeyAPI @"APIKey"
Sezam/Intellivision/Define.h:137:#define kCameraConfigKeyPeopleMinWidth @"PeopleMinWidth"
Sezam/Intellivision/Define.h:138:#define kCameraConfigKeyPeopleMaxWidth @"PeopleMaxWidth"
Sezam/Intellivision/Define.h:139:#define kCameraConfigKeyPeopleMinHeight @"PeopleMinHeight"
Sezam/Intellivision/Define.h:140:#define kCameraConfigKeyPeopleMaxHeight @"PeopleMaxHeight"
Sezam/Intellivision/Define.h:142:#define kCameraConfigKeyIntrusionArea @"IntrusionArea"
Sezam/Intellivision/Define.h:143:#define kCameraConfigKeyIMGDayNightMode @"IMGDayNightMode"
Sezam/Intellivision/Define.h:144:#define kCameraConfigKeyIMGNoiseFilter @"IMGNoiseFilter"
Sezam/Intellivision/Define.h:145:#define kCameraConfigKeyIMGSaturation @"IMGSaturation"
Sezam/Intellivision/Define.h:146:#define kCameraConfigKeyIMGBrightness @"IMGBrightness"
Sezam/Intellivision/Define.h:147:#define kCameraConfigKeyIMGContrast @"IMGContrast"
Sezam/Intellivision/Define.h:148:#define kCameraConfigKeyIMGSharpness @"IMGSharpness"
Sezam/Intellivision/Define.h:150:#define kCameraConfigKeyEnableAdaptiveBitRate @"EnableABR"
Sezam/Intellivision/Define.h:151:#define kCameraConfigKeyPWLED @"PWLED"
Sezam/Intellivision/Define.h:152:#define kCameraConfigKeyStream0BitrateValue @"Stream0BitrateValue"
Sezam/Intellivision/Define.h:153:#define kCameraConfigKeyStream0Framerate @"Stream0Framerate"
Sezam/Intellivision/Define.h:154:#define kCameraConfigKeyStream0Resolution @"Stream0Resolution"
Sezam/Intellivision/Define.h:155:#define kCameraConfigKeyStream0Flip @"Stream0Flip"
Sezam/Intellivision/Define.h:156:#define kCameraConfigKeyStream1BitrateValue @"Stream1BitrateValue"
Sezam/Intellivision/Define.h:157:#define kCameraConfigKeyStream1Framerate @"Stream1Framerate"
Sezam/Intellivision/Define.h:158:#define kCameraConfigKeyStream1Resolution @"Stream1Resolution"
Sezam/Intellivision/Define.h:159:#define kCameraConfigKeyStream1Flip @"Stream1Flip"
Sezam/Intellivision/Define.h:161:#define kCameraConfigKeyAudioSenstivity @"AudioAlertSensitivity"
Sezam/Intellivision/Define.h:162:#define kCameraConfigKeyAudioAlertEnable @"AudioAlertEnable"
Sezam/Intellivision/Define.h:163:#define kCameraConfigKeyCameraTamperEnable @"CameraTamperEnable"
Sezam/Intellivision/Define.h:164:#define kCameraConfigKeyIntrusionEnable @"IntrusionEnable"
Sezam/Intellivision/Define.h:165:#define kCameraConfigKeyAlertOffline @"alertOffline"
Sezam/Intellivision/Define.h:167:#define kCameraConfigKeyIMGDayNightMode @"IMGDayNightMode"
Sezam/Intellivision/Define.h:168:#define kKeyShowVideoLog @"kKeyShowVideoLog"
Sezam/Intellivision/Define.h:169:#define kKeyP2PPrivateConenctionRTSPType @"kKeyPrivateConenctionRTSPType"
Sezam/Intellivision/Define.h:171:#define kKeyPRTSPBufferDelay @"kKeyPRTSPBufferDelay"
Sezam/Intellivision/Define.h:172:#define kKeyPinchZoomEnabled @"kKeyPinchZoomEnabled"
Sezam/Intellivision/Define.h:175:#define kCameraConfigKeyDMSURL @"DMSURL"
Sezam/Intellivision/Define.h:176:#define kCameraConfigKeyVCSURL @"VCSURL"
Sezam/Intellivision/Define.h:177:#define kCameraConfigKeyNTPURL @"NTPURL"
Sezam/Intellivision/Define.h:179:#define kCameraConfigKeyMetaDataCameraName @"cameraName"
Sezam/Intellivision/Define.h:180:#define kCameraConfigKeyMetaDataCameraType @"deviceType"
Sezam/Intellivision/Define.h:181:#define kCameraConfigKeyMetaData @"metadata"
Sezam/Intellivision/Define.h:182:#define kCameraConfigKeyMetaDataFirmwareVersion @"firmwareVersion"
Sezam/Intellivision/Define.h:183:#define kCameraConfigKeyMetaManufacturer @"manufacturer"
Sezam/Intellivision/Define.h:184:#define kCameraConfigKeyMetaModel @"model"
Sezam/Intellivision/Define.h:185:#define kCameraConfigKeyMetaIPAddr @"ipAddr"
Sezam/Intellivision/Define.h:186:#define kCameraConfigKeyMetaMacAddr @"macAddr"
Sezam/Intellivision/Define.h:187:#define kCameraConfigKeyMetaSSID @"ssid"
Sezam/Intellivision/Define.h:188:#define kCameraConfigKeyMetaConnectionType @"connectionType"
Sezam/Intellivision/Define.h:190:#define kCameraConfigKeyMetaPX @"px"
Sezam/Intellivision/Define.h:191:#define kCameraConfigKeyMetaPT @"pt"
Sezam/Intellivision/Define.h:192:#define kCameraConfigKeyMetaProxyIP @"proxyip"
Sezam/Intellivision/Define.h:193:#define kCameraConfigKeyMetaProxyID @"proxysession"
Sezam/Intellivision/Define.h:194:#define kCameraConfigKeyMetaProxyRTSP @"rtspUrl"
Sezam/Intellivision/Define.h:196:#define kCameraConfigKeyMetaEmail @"customerEmail"
Sezam/Intellivision/Define.h:198:#define kCameraConfigKeyP2PURL @"P2PURL"
Sezam/Intellivision/Define.h:199:#define kCameraConfigKeyP2PPORT @"P2PPort"
Sezam/Intellivision/Define.h:200:#define kCameraConfigKeyP2PUSERNAME @"P2PUsername"
Sezam/Intellivision/Define.h:201:#define kCameraConfigKeyP2PPASSWORD  @"P2PPassword"
Sezam/Intellivision/Define.h:203:#define kCameraConfigKeyMotionDetectorEnable @"MotionDetectorEnable"
Sezam/Intellivision/Define.h:204:#define kCameraConfigKeyAlarmInEnable @"AlarmInEnable"
Sezam/Intellivision/Define.h:205:#define kCameraConfigKeyFaceDetectorEnable @"FaceDetectorEnable"
Sezam/Intellivision/Define.h:206:#define kCameraConfigKeyPIREnable @"PIREnable"
Sezam/Intellivision/Define.h:207:#define kCameraConfigKeyEventDelay @"EventDelay"
Sezam/Intellivision/Define.h:209:#define kCameraUpgradingFirmware @"upgradingfirmware"
Sezam/Intellivision/Define.h:211:#define kCameraConfigKeyMICEnable @"MICEnable"
Sezam/Intellivision/Define.h:212:#define kCameraConfigKeySPKREnable @"SPKREnable"
Sezam/Intellivision/Define.h:214:#define kCameraConfigKeyMICVolume @"MICvolume"
Sezam/Intellivision/Define.h:215:#define kCameraConfigKeySPKRVolume @"SPKRvolume"
Sezam/Intellivision/Define.h:216:#define kCameraConfigKeyType @"cameraType"
Sezam/Intellivision/Define.h:218:#define kCameraConfigKeyARMEnable @"MARMEnable"
Sezam/Intellivision/Define.h:220:#define kCameraConfigKeyTimezone @"Timezone"
Sezam/Intellivision/Define.h:221:#define kCameraConfigKeyDSTEnable @"DSTEnable"
Sezam/Intellivision/Define.h:222:#define kCameraConfigKeyDSTStartTime @"DSTStartTime"
Sezam/Intellivision/Define.h:223:#define kCameraConfigKeyDSTEndTime @"DSTEndTime"
Sezam/Intellivision/Define.h:225:#define kCameraConfigKeyRecordingMode @"recordingMode"
Sezam/Intellivision/Define.h:226:#define kCameraConfigKeyOSDEnable  @"OSDEnable"
Sezam/Intellivision/Define.h:228:#define kCameraConfigKeyTimezone @"Timezone"
Sezam/Intellivision/Define.h:230:#define kCameraConfigKeyLowSignalEnable @"lowSignalEnable"
Sezam/Intellivision/Define.h:236:#define kCameraConfigP2PEnded @"P2PEnded" 
Sezam/Intellivision/Define.h:239:#define kAlternateAddCamera @"alternateAddCamera"
Sezam/Intellivision/Define.h:242:#define kAccountInfoUpdateKeyName @"name"
Sezam/Intellivision/Define.h:243:#define kAccountInfoUpdateKeyLastName @"lastName"
Sezam/Intellivision/Define.h:244:#define kAccountInfoUpdateKeyFirstName @"firstName"
Sezam/Intellivision/Define.h:245:#define kAccountInfoUpdateKeyPassword @"password"
Sezam/Intellivision/Define.h:246:#define kAccountInfoUpdateKeyPhone @"contactNo"
Sezam/Intellivision/Define.h:247:#define kAccountInfoUpdateKeyAddress @"address"
Sezam/Intellivision/Define.h:248:#define kAccountInfoUpdateKeyOriginalPassword @"originalPassword"
Sezam/Intellivision/Define.h:249:#define kAccountInfoUpdateKeyIsVerified @"IsVerified"
Sezam/Intellivision/Define.h:254:#define kEventStateViewed   @"VIEWED"
Sezam/Intellivision/Define.h:255:#define kEventStateCreated  @"CREATED"
Sezam/Intellivision/Define.h:256:#define kEventStateSaved    @"SAVED"
Sezam/Intellivision/Define.h:257:#define kEventStateDeleted  @"DELETED"
Sezam/Intellivision/Define.h:258:#define kEventStateUnsaved  @"UNSAVED"
Sezam/Intellivision/Define.h:262:#define kEventTypeMotion @"Motion"
Sezam/Intellivision/Define.h:263:#define kEventTypeAlarmIn @"alarmin"
Sezam/Intellivision/Define.h:264:#define kEventTypeCameraTamper @"Camera Tampered"
Sezam/Intellivision/Define.h:265:#define kEventTypeIntrusion @"Intrusion"
Sezam/Intellivision/Define.h:266:#define kEventTypeAudioAlert @"Audio Alert"
Sezam/Intellivision/Define.h:267:#define kEventTypeManualRecord @"Manual Record"
Sezam/Intellivision/Define.h:268:#define kEventTypeOffline @"offline"
Sezam/Intellivision/Define.h:269:#define kEventTypeOfflineAlert @"Offline Alert"
Sezam/Intellivision/Define.h:270:#define kEventTypeOnline @"online"
Sezam/Intellivision/Define.h:271:#define kEventTypeFaceEntered @"Face Entered"
Sezam/Intellivision/Define.h:272:#define kEventTypePIRAlarm @"piralarm"
Sezam/Intellivision/Define.h:273:#define kEventTypeCRThumbnail @"CRThumbnail"
Sezam/Intellivision/Define.h:274:#define kEventTypeFirmwareDownloaded @"firmwareUpgrade"
Sezam/Intellivision/Define.h:277:#define kEventInfoKeyCameraID @"deviceId"
Sezam/Intellivision/Define.h:278:#define kEventInfoKeyEventDate @"eventDate"
Sezam/Intellivision/Define.h:279:#define kEventInfoKeyEventEndPoint @"eventEndpoint"
Sezam/Intellivision/Define.h:280:#define kEventInfoKeyEventID @"eventId"
Sezam/Intellivision/Define.h:282:#define kEventInfoMetaData @"eventMetadata"
Sezam/Intellivision/Define.h:283:#define kEventInfoMDDuration @"duration"
Sezam/Intellivision/Define.h:284:#define kEventInfoMDResWidth @"res_width"
Sezam/Intellivision/Define.h:285:#define kEventInfoMDResHeight @"res_height"
Sezam/Intellivision/Define.h:286:#define kEventInfoMDWhereIsIt @"whereisit"
Sezam/Intellivision/Define.h:288:#define kEventInfoKeyState @"state"
Sezam/Intellivision/Define.h:289:#define kEventInfoKeyEventType @"eventType"
Sezam/Intellivision/Define.h:290:#define kEventInfoKeyVideoUrl @"videoURL"
Sezam/Intellivision/Define.h:291:#define kEventInfoKeyThumbsURL @"thumbsURL"
Sezam/Intellivision/Define.h:292:#define kEventInfoKeyThumbURL @"thumbURL"
Sezam/Intellivision/Define.h:294:#define kEIGetEventListFromDictionary(xmlDictionary)        xmlDictionary[@"result"][@"events"][@"event"]
Sezam/Intellivision/Define.h:295:#define kEIGetTotalCountFromDictionary(xmlDictionary)       xmlDictionary[@"result"][@"events"][@"totalEvents"][@"text"]
Sezam/Intellivision/Define.h:315:#define kEIGetEventRecordStateFromEventInfo(eventInfoDictionary) [[[eventInfoDictionary objectForKey:kEventInfoMetaData] objectForKey:@"recordMode"] objectForKey:kText]
Sezam/Intellivision/Define.h:318:#define kProductTypeBasic   @"Basic"
Sezam/Intellivision/Define.h:319:#define kProductTypePro     @"Plan 2"
Sezam/Intellivision/Define.h:320:#define kProductTypePremium @"Plan 3"
Sezam/Intellivision/Define.h:322:#define kRulesAll @"rules"
Sezam/Intellivision/Define.h:324:#define kRuleKey @"rulekey"
Sezam/Intellivision/Define.h:325:#define kRuleKeyViewPeriod @"VIEW-PERIOD"
Sezam/Intellivision/Define.h:326:#define kRuleKeyMaxDataStorage @"MAX-STORAGE-QUANTITY"
Sezam/Intellivision/Define.h:327:#define kRuleKeyMaxStorageDays @"MAX-STORAGE-DAYS"
Sezam/Intellivision/Define.h:328:#define kRuleKeyMaxMarkToKeep @"MARK-TO-KEEP"
Sezam/Intellivision/Define.h:330:#define kRuleValue @"ruleValue"
Sezam/Intellivision/Define.h:331:#define kRuleName @"ruleName"
Sezam/Intellivision/Define.h:332:#define kRuleDescription @"ruleDescription"
Sezam/Intellivision/IVMessages.h:13:#define MESG_WEB_ERROR     [IVLocalization localizedStringForKey:@"MESG_WEB_ERROR" comment:@"There is some problem loading some content of webpage."]
Sezam/Intellivision/IVMessages.h:15:#define MESG_SSL_ERROR [IVLocalization localizedStringForKey:@"MESG_SSL_ERROR" comment:@"Unable to complete request due to SSL certificate problem. Please ensure your clock is set to correct date and try again."]
Sezam/Intellivision/IVMessages.h:17:#define MESG_NO_INTERNET [IVLocalization localizedStringForKey:@"MESG_NO_INTERNET" comment:@"This application requires a solid internet connection. Please connect and try again."]
Sezam/Intellivision/IVMessages.h:19:#define MESG_SERVER_ERROR [IVLocalization localizedStringForKey:@"MESG_SERVER_ERROR" comment:@"There is problem connecting to server. Please try again later."]
Sezam/Intellivision/IVMessages.h:21:#define MESG_INVALID_EMAIL [IVLocalization localizedStringForKey:@"MESG_INVALID_EMAIL" comment:@"Please enter valid email address."]
Sezam/Intellivision/IVMessages.h:23:#define MESG_INVAILD_PASSWORD [IVLocalization localizedStringForKey:@"MESG_INVAILD_PASSWORD" comment:@"Please enter correct password."]
Sezam/Intellivision/IVMessages.h:25:#define MESG_INCORRECT_LOGIN [IVLocalization localizedStringForKey:@"MESG_INCORRECT_LOGIN" comment:@"Sorry, username and password doesn't match."]
Sezam/Intellivision/IVMessages.h:27:#define MESG_NO_EVENT_VIDEO [IVLocalization localizedStringForKey:@"MESG_NO_EVENT_VIDEO" comment:@"Sorry, there is no video attached for this event."]
Sezam/Intellivision/IVMessages.h:29:#define MESG_CAMERA_OFFLINE [IVLocalization localizedStringForKey:@"MESG_CAMERA_OFFLINE" comment:@"Sorry, Camera seems to be offline. Please try again later."]
Sezam/Intellivision/IVMessages.h:32:#define MESG_NO_FEATURE_CAMERA_OFFLINE [IVLocalization localizedStringForKey:@"MESG_NO_FEATURE_CAMERA_OFFLINE" comment:@"Sorry, This feature is not available right now as camera seems to be offline."]
Sezam/Intellivision/IVMessages.h:35:#define MESG_CANNOT_RECORD_VIDEO [IVLocalization localizedStringForKey:@"MESG_CANNOT_RECORD_VIDEO" comment:@"Unable to start manual recording."]
Sezam/Intellivision/IVMessages.h:37:#define MESG_CANNOT_TAKE_SNAPSHOT [IVLocalization localizedStringForKey:@"MESG_CANNOT_TAKE_SNAPSHOT" comment:@"Unable to take video snapshot."]
Sezam/Intellivision/IVMessages.h:39:#define MESG_CANNOT_PTT [IVLocalization localizedStringForKey:@"MESG_CANNOT_PTT" comment:@"Unable to send audio."]
Sezam/Intellivision/IVMessages.h:41:#define MESG_CANNOT_ADD_CAMERA_SUBSCRIPTION [IVLocalization localizedStringForKey:@"MESG_CANNOT_ADD_CAMERA_SUBSCRIPTION" comment:@"Unable to add camera subscription."]
Sezam/Intellivision/IVMessages.h:45:#define MESG_STREAM_ENDED [IVLocalization localizedStringForKey:@"MESG_STREAM_ENDED" comment:@"Sorry, Camera stream has been closed on some other device. Please try again later."]
Sezam/Intellivision/IVMessages.h:47:#define MESG_STREAM_FETCHING_ERROR [IVLocalization localizedStringForKey:@"MESG_STREAM_FETCHING_ERROR" comment:@"Unable to start higher quality streaming due to camera connection."]
Sezam/Intellivision/IVMessages.h:49:#define MESG_DELETE_CAMERA [IVLocalization localizedStringForKey:@"MESG_DELETE_CAMERA" comment:@"Do you really want to delete camera?"]
Sezam/Intellivision/IVMessages.h:51:#define MESG_FAILED_TO_DELETE_CAMERA [IVLocalization localizedStringForKey:@"MESG_FAILED_TO_DELETE_CAMERA" comment:@"Sorry, There is problem in deleting camera. Please try again later."]
Sezam/Intellivision/IVMessages.h:53:#define MESG_CAMERA_DELETED(id) [NSString stringWithFormat:@"Camera %@ is deleted successfully.",id]
Sezam/Intellivision/IVMessages.h:55:#define MESG_FAILED_TO_ADD_CAMERA  [IVLocalization localizedStringForKey:@"MESG_FAILED_TO_ADD_CAMERA" comment:@"Failed to add camera. Please make sure WiFi password is correct and try again"]
Sezam/Intellivision/IVMessages.h:57:#define MESG_NO_WIFI [IVLocalization localizedStringForKey:@"MESG_NO_WIFI" comment:@"You must be on Wi-Fi to add Camera."]
Sezam/Intellivision/IVMessages.h:59:#define MESG_CONFIRM_VIEW_GUIDE [IVLocalization localizedStringForKey:@"MESG_CONFIRM_VIEW_GUIDE" comment:@"Would you like to view the User Guide?"]
Sezam/Intellivision/IVMessages.h:61:#define MESG_CONFIRM_EMAIL_CUSTOMER_SUPPORT [IVLocalization localizedStringForKey:@"MESG_CONFIRM_EMAIL_CUSTOMER_SUPPORT" comment:@"Do you want to email customer support?"]
Sezam/Intellivision/IVMessages.h:64:#define MESG_PART_LONGDISTANCE [IVLocalization localizedStringForKey:@"MESG_PART_LONGDISTANCE" comment:@"DMS URL has been updated successfully."]
Sezam/Intellivision/IVMessages.h:65:#define MESG_CALL_ALERT [NSString stringWithFormat:@"%@ \n %@",[Utility getCustomerCareNo],MESG_PART_LONGDISTANCE]
Sezam/Intellivision/IVMessages.h:67:#define MESG_DMS_URL_UPDATED [IVLocalization localizedStringForKey:@"MESG_DMS_URL_UPDATED" comment:@"DMS URL has been updated successfully."]
Sezam/Intellivision/IVMessages.h:68:#define MESG_VCS_URL_UPDATED [IVLocalization localizedStringForKey:@"MESG_VCS_URL_UPDATED" comment:@"VCS URL has been updated successfully."]
Sezam/Intellivision/IVMessages.h:71:#define MESG_ACCOUNT_INFO_UPDATED [IVLocalization localizedStringForKey:@"MESG_ACCOUNT_INFO_UPDATED" comment:@"Account Settings has been updated successfully."]
Sezam/Intellivision/IVMessages.h:72:#define MESG_ACCOUNT_INFO_UPDATE_FAILED [IVLocalization localizedStringForKey:@"MESG_ACCOUNT_INFO_UPDATE_FAILED" comment:@"Sorry, There is problem updating your account information. Please try again later."]
Sezam/Intellivision/IVMessages.h:73:#define MESG_VERIFY_PASSWORD_DOESNT_MATCH [IVLocalization localizedStringForKey:@"MESG_VERIFY_PASSWORD_DOESNT_MATCH" comment:@"Sorry, Password doesn't match. Please check your password and retry."]
Sezam/Intellivision/IVMessages.h:74:#define MESG_PASSWORD_MIN_LENGTH [IVLocalization localizedStringForKey:@"MESG_PASSWORD_MIN_LENGTH" comment:@"Password should be greater than 5 digits."]
Sezam/Intellivision/IVMessages.h:76:#define MESG_PHONE_NUMBER_LENGTH [IVLocalization localizedStringForKey:@"MESG_PHONE_NUMBER_LENGTH" comment:@"Please enter correct phone number."]
Sezam/Intellivision/IVMessages.h:77:#define MESG_VALID_ADDRESS [IVLocalization localizedStringForKey:@"MESG_VALID_ADDRESS" comment:@"Please enter valid address."]
Sezam/Intellivision/IVMessages.h:80:#define INTRUSION_SETTINGS_UPDATED [IVLocalization localizedStringForKey:@"INTRUSION_SETTINGS_UPDATED" comment:@"Intrusion settings has been updated successfully."]
Sezam/Intellivision/IVMessages.h:81:#define CAMERA_SETTINGS_UPDATE_FAILED [IVLocalization localizedStringForKey:@"CAMERA_SETTINGS_UPDATE_FAILED" comment:@"Sorry, there is some problem related to settings update. Please try again later."]
Sezam/Intellivision/IVMessages.h:83:#define SNAPSHOT_SAVED  [IVLocalization localizedStringForKey:@"SNAPSHOT_SAVED" comment:@"Image has been saved to Photo Gallery successfully!"]
Sezam/Intellivision/IVMessages.h:84:#define SNAPSHOT_FAILED  [IVLocalization localizedStringForKey:@"SNAPSHOT_FAILED" comment:@"Sorry, there is some problem in storing snapshot now. Please try again later."]
Sezam/Intellivision/IVMessages.h:85:#define SNAPSHOT_PERMISSION_ERROR  [IVLocalization localizedStringForKey:@"SNAPSHOT_PERMISSION_ERROR" comment:@"Sorry, you don't have permission to save image into gallery. Please go to Privacy option under Settings and check application permission under Photos."]
Sezam/Intellivision/IVMessages.h:89:#define MESG_TEMPORARY_PASSWORD_SENT  [IVLocalization localizedStringForKey:@"MESG_TEMPORARY_PASSWORD_SENT" comment:@"An email has been sent with temporary password to verify your email address."]
Sezam/Intellivision/IVMessages.h:90:#define MESG_TEMPORARY_PASSWORD_FAILED  [IVLocalization localizedStringForKey:@"MESG_TEMPORARY_PASSWORD_FAILED" comment:@"Sorry, There is problem sending temporary password. Please try again later."]
Sezam/Intellivision/IVMessages.h:92:#define MESG_TEMPORARY_LOGIN_FAILED  [IVLocalization localizedStringForKey:@"MESG_TEMPORARY_LOGIN_FAILED" comment:@"Sorry, Temporary password is not valid. Please check and try again later."]
Sezam/Intellivision/IVMessages.h:93:#define MESG_PASSWORD_UPDATED_FAILED  [IVLocalization localizedStringForKey:@"MESG_PASSWORD_UPDATED_FAILED" comment:@"There is problem updating the password of your account. Please try again later."]
Sezam/Intellivision/IVMessages.h:94:#define MESG_PASSWORD_UPDATED  [IVLocalization localizedStringForKey:@"MESG_PASSWORD_UPDATED" comment:@"Your password has been updated successfully."]
Sezam/Intellivision/IVMessages.h:97:#define MESG_CREATE_ACCOUNT_FAILED  [IVLocalization localizedStringForKey:@"MESG_CREATE_ACCOUNT_FAILED" comment:@"Sorry, There is a problem in creating account. Please try again later."]
Sezam/Intellivision/IVMessages.h:98:#define MESG_CREATE_ACCOUNT_LOGIN_FAILED  [IVLocalization localizedStringForKey:@"MESG_CREATE_ACCOUNT_LOGIN_FAILED" comment:@"Sorry, Your account has been created but there is problem logging you in. Please contact customer support and try again later."]
Sezam/Intellivision/IVMessages.h:99:#define MESG_CREATE_ACCOUNT_SUCCESS  [IVLocalization localizedStringForKey:@"MESG_CREATE_ACCOUNT_SUCCESS" comment:@"Congratulations, Your account has been created successfully. An email has been sent with temporary password to verify your email address."]
Sezam/Intellivision/IVMessages.h:102:#define MESG_CAMERA_TOKEN_SERVER_ERROR [IVLocalization localizedStringForKey:@"MESG_CAMERA_TOKEN_SERVER_ERROR" comment:@"There is problem in generating the token for camera. Please try again later."]
Sezam/Intellivision/IVMessages.h:105:#define MESG_CAMERA_SETTINGS_UPDATE_FAILED  [IVLocalization localizedStringForKey:@"MESG_CAMERA_SETTINGS_UPDATE_FAILED" comment:@"Sorry, There is problem in updating settings of camera. Please try again later."]
Sezam/Intellivision/IVMessages.h:107:#define MESG_CAMERA_SETTINGS_UPDATED  [IVLocalization localizedStringForKey:@"MESG_CAMERA_SETTINGS_UPDATED" comment:@"Camera settings has been updated successfully."]
Sezam/Intellivision/IVMessages.h:111:#define MESG_CAMERA_FIRMWARE_UPGRADE_NOTIFY [IVLocalization localizedStringForKey:@"MESG_CAMERA_FIRMWARE_UPGRADE_NOTIFY" comment:@"One or more cameras have an updated firmware. Please check the Camera Detail screen for each of the cameras."]
Sezam/Intellivision/IVMessages.h:112:#define MESG_CAMERA_FIRMWARE_UPDATED [IVLocalization localizedStringForKey:@"MESG_CAMERA_FIRMWARE_UPDATED" comment:@"Camera Firmware update is in progress. So camera will go offline for few minutes."]
Sezam/Intellivision/IVMessages.h:113:#define MESG_CAMERA_FIRMWARE_UPDATE_FAILED [IVLocalization localizedStringForKey:@"MESG_CAMERA_FIRMWARE_UPDATE_FAILED" comment:@"Sorry, There is problem in updating firmware of camera. Please try again later."]
Sezam/Intellivision/IVMessages.h:117:#define MESG_CAMERA_FIRMWARE_UPDATE_CONFIRMATION [IVLocalization localizedStringForKey:@"MESG_CAMERA_FIRMWARE_UPDATE_CONFIRMATION" comment:@"do you really want to update firmware?"]
Sezam/Intellivision/IVMessages.h:122:#define MESG_PLAYER_RUN_ERROR [IVLocalization localizedStringForKey:@"MESG_PLAYER_RUN_ERROR" comment:@"Sorry, there is problem in running the stream. Please try again."]
Sezam/Intellivision/IVMessages.h:123:#define MESG_PLAYER_OPEN_ERROR [IVLocalization localizedStringForKey:@"MESG_PLAYER_OPEN_ERROR" comment:@"Sorry, there is problem in opening up the stream. Please try again."]
Sezam/Intellivision/IVMessages.h:124:#define MESG_PLAYER_INITALIZE [IVLocalization localizedStringForKey:@"MESG_PLAYER_INITALIZE" comment:@"Sorry, there is problem in initializing the player. Please try again."]
Sezam/Intellivision/IVMessages.h:127:#define MESG_NO_ALERT_TO_MARK [IVLocalization localizedStringForKey:@"MESG_NO_ALERT_TO_MARK" comment:@"No events to mark"]
Sezam/Intellivision/IVMessages.h:128:#define MESG_NO_ALERT_TO_UNMARK [IVLocalization localizedStringForKey:@"MESG_NO_ALERT_TO_UNMARK" comment:@"No events to unmark"]
Sezam/Intellivision/IVMessages.h:129:#define MESG_NO_ALERT_TO_PLAY [IVLocalization localizedStringForKey:@"MESG_NO_ALERT_TO_PLAY" comment:@"No events to play"]
Sezam/Intellivision/IVMessages.h:130:#define MESG_NO_ALERT_TO_SHARE [IVLocalization localizedStringForKey:@"MESG_NO_ALERT_TO_SHARE" comment:@"No events to share"]
Sezam/Intellivision/IVMessages.h:131:#define MESG_NO_ALERT_TO_DELETE [IVLocalization localizedStringForKey:@"MESG_NO_ALERT_TO_DELETE" comment:@"No events to delete"]
Sezam/Intellivision/IVMessages.h:133:#define MESG_SELECT_ALL [IVLocalization localizedStringForKey:@"MESG_SELECT_ALL" comment:@"select all"]
Sezam/Intellivision/IVMessages.h:134:#define MESG_UNSELECT_ALL [IVLocalization localizedStringForKey:@"MESG_UNSELECT_ALL" comment:@"unselect all"]
Sezam/Intellivision/IVMessages.h:136:#define MESG_TITLE_ARCHIVE [IVLocalization localizedStringForKey:@"MESG_TITLE_ARCHIVE" comment:@"mark"]
Sezam/Intellivision/IVMessages.h:137:#define MESG_TITLE_UNARCHIVE [IVLocalization localizedStringForKey:@"MESG_TITLE_UNARCHIVE" comment:@"unmark"]
Sezam/Intellivision/IVMessages.h:138:#define MEGS_UNABLE_TO_PLAY_EVENT [IVLocalization localizedStringForKey:@"MEGS_UNABLE_TO_PLAY_EVENT" comment:@"unable to play"]
Sezam/Intellivision/IVMessages.h:142:#define MESG_EVENTS_MARK_LIMIT_ALERT [IVLocalization localizedStringForKey:@"MESG_EVENTS_MARK_LIMIT_ALERT" comment:@"MESG_EVENTS_MARK_LIMIT_ALERT"]
Sezam/Intellivision/IVMessages.h:144:#define MESG_CANCEL_SUBSCRIPTION [IVLocalization localizedStringForKey:@"MESG_CANCEL_SUBSCRIPTION" comment:@"MESG_CANCEL_SUBSCRIPTION"]
Sezam/Intellivision/IVHelperServices.mm:46:    NSLog(@"mCamerasStreamStarted objectForKey:cID %@",[self.mCamerasStreamStarted objectForKey:cID]);
Sezam/Intellivision/IVHelperServices.mm:69:   // NSLog(@"mjpegStreamStarted response is %@ and response string is %@",request.responseHeaders, request.responseString);
Sezam/Intellivision/IVHelperServices.mm:117:    NSLog(@"stream deleted is called %@",responseString);
Sezam/Intellivision/Utility.m:40:    [strBuf replaceOccurrencesOfString:@"&amp;" withString:@"&" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:44:    [strBuf replaceOccurrencesOfString:@"&lt;" withString:@"<" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:48:    [strBuf replaceOccurrencesOfString:@"&gt;" withString:@">" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:52:    [strBuf replaceOccurrencesOfString:@"&apos;" withString:@"'" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:56:    [strBuf replaceOccurrencesOfString:@"&#39;" withString:@"'" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:60:    [strBuf replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:73:    [strBuf replaceOccurrencesOfString:@"&" withString:@"&amp;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:77:    [strBuf replaceOccurrencesOfString:@"<" withString:@"&lt;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:81:    [strBuf replaceOccurrencesOfString:@">" withString:@"&gt;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:85:    [strBuf replaceOccurrencesOfString:@"'" withString:@"&apos;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:89:    [strBuf replaceOccurrencesOfString:@"'" withString:@"&#39;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:93:    [strBuf replaceOccurrencesOfString:@"\"" withString:@"&quot;" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:125:            [encodedSting appendFormat:@"%c",c];
Sezam/Intellivision/Utility.m:129:            [encodedSting appendString:@"%"];
Sezam/Intellivision/Utility.m:131:            [encodedSting appendFormat:@"%02x", x];
Sezam/Intellivision/Utility.m:231:    //NSLog(@"bundle identi is %@",account);
Sezam/Intellivision/Utility.m:236:    //NSLog(@"my device is %@",currentDeviceId);
Sezam/Intellivision/Utility.m:240:    //NSLog(@"generating new returnMacAddress user Id is %@",currentDeviceId);
Sezam/Intellivision/Utility.m:243:    //NSLog(@"my device is %@",currentDeviceId);
Sezam/Intellivision/Utility.m:260:        NSLog(@"folder is deleted.");
Sezam/Intellivision/Utility.m:324:    @"(?:[a-z0-9!#$%\\&'*+/=?\\^_`{|}~-]+(?:\\.[a-z0-9!#$%\\&'*+/=?\\^_`{|}"
Sezam/Intellivision/Utility.m:325:    @"~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\"
Sezam/Intellivision/Utility.m:326:    @"x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-"
Sezam/Intellivision/Utility.m:327:    @"z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5"
Sezam/Intellivision/Utility.m:328:    @"]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-"
Sezam/Intellivision/Utility.m:329:    @"9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21"
Sezam/Intellivision/Utility.m:330:    @"-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])";
Sezam/Intellivision/Utility.m:332:    NSPredicate *regExPredicate =[NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegEx];
Sezam/Intellivision/Utility.m:370:    NSString *keylastBlackOutDate = @"keylastBlackOutDate";
Sezam/Intellivision/Utility.m:377:    NSString *keylastBlackOutDate = @"keylastBlackOutDate";
Sezam/Intellivision/Utility.m:386:    if ([currentLocaleID hasPrefix:@"en_US"]) {
Sezam/Intellivision/Utility.m:389:    else if([currentLocaleID hasSuffix:@"_CN"]){
Sezam/Intellivision/Utility.m:426:    NSString *standandGMT = [NSString stringWithFormat:@"GMT%c%02d:%02d",plusMinus,hours,minutes];
Sezam/Intellivision/Utility.m:482:                              @";":@"&#59;",
Sezam/Intellivision/Utility.m:483:                              @"   ":@"&#09;",
Sezam/Intellivision/Utility.m:484:                              @" ":@"&#32;",
Sezam/Intellivision/Utility.m:485:                              @"!":@"&#33;",
Sezam/Intellivision/Utility.m:486:                              @"\"":@"&#34;",
Sezam/Intellivision/Utility.m:487:                              @"#":@"&#35;",
Sezam/Intellivision/Utility.m:488:                              @"$":@"&#36;",
Sezam/Intellivision/Utility.m:489:                              @"%":@"&#37;",
Sezam/Intellivision/Utility.m:490:                              @"'":@"&#39;",
Sezam/Intellivision/Utility.m:491:                              @"(":@"&#40;",
Sezam/Intellivision/Utility.m:492:                              @")" :@"&#41;",
Sezam/Intellivision/Utility.m:493:                              @"*" :@"&#42;",
Sezam/Intellivision/Utility.m:494:                              @"+":@"&#43;",
Sezam/Intellivision/Utility.m:495:                              @",":@"&#44;",
Sezam/Intellivision/Utility.m:496:                              @"-":@"&#45;",
Sezam/Intellivision/Utility.m:497:                              @"." :@"&#46;",
Sezam/Intellivision/Utility.m:498:                              @"/" :@"&#47;",
Sezam/Intellivision/Utility.m:499:                              @":":@"&#58;",
Sezam/Intellivision/Utility.m:500:                              @"<":@"&#60;",
Sezam/Intellivision/Utility.m:501:                              @"=":@"&#61;",
Sezam/Intellivision/Utility.m:502:                              @">" :@"&#62;",
Sezam/Intellivision/Utility.m:503:                              @"?":@"&#63;",
Sezam/Intellivision/Utility.m:504:                              @"@":@"&#64;",
Sezam/Intellivision/Utility.m:505:                              @"[" :@"&#91;",
Sezam/Intellivision/Utility.m:506:                              @"\\" :@"&#92;",
Sezam/Intellivision/Utility.m:507:                              @"]" :@"&#93;",
Sezam/Intellivision/Utility.m:508:                              @"^" :@"&#94;",
Sezam/Intellivision/Utility.m:509:                              @"_":@"&#95;",
Sezam/Intellivision/Utility.m:510:                              @"`":@"&#96;",
Sezam/Intellivision/Utility.m:511:                              @"{":@"&#123;",
Sezam/Intellivision/Utility.m:512:                              @"|":@"&#124;",
Sezam/Intellivision/Utility.m:513:                              @"}":@"&#125;",
Sezam/Intellivision/Utility.m:514:                              @"~" :@"&#126;",
Sezam/Intellivision/Utility.m:515:                              @"&":@"&#38;",
Sezam/Intellivision/Utility.m:519:    NSCharacterSet *validSet = [NSCharacterSet characterSetWithCharactersInString:@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"];
Sezam/Intellivision/Utility.m:522:        NSString *component = [NSString stringWithFormat:@"%c",c];
Sezam/Intellivision/Utility.m:526:                component = @"";
Sezam/Intellivision/Utility.m:541:    [strBuf replaceOccurrencesOfString:@"&#09;" withString:@"   " options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:545:    [strBuf replaceOccurrencesOfString:@"&#32;" withString:@" " options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:549:    [strBuf replaceOccurrencesOfString:@"&#33;" withString:@"!" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:553:    [strBuf replaceOccurrencesOfString:@"&#34;" withString:@"\"" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:557:    [strBuf replaceOccurrencesOfString:@"&#35;" withString:@"#" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:561:    [strBuf replaceOccurrencesOfString:@"&#36;" withString:@"$" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:565:    [strBuf replaceOccurrencesOfString:@"&#37;" withString:@"%" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:569:    [strBuf replaceOccurrencesOfString:@"&#38;" withString:@"&" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:573:    [strBuf replaceOccurrencesOfString:@"&#39;" withString:@"'" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:577:    [strBuf replaceOccurrencesOfString:@"&#40;" withString:@"(" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:581:    [strBuf replaceOccurrencesOfString:@"&#41;" withString:@")" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:585:    [strBuf replaceOccurrencesOfString:@"&#42;" withString:@"*" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:590:    [strBuf replaceOccurrencesOfString:@"&#43;" withString:@"+" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:594:    [strBuf replaceOccurrencesOfString:@"&#44;" withString:@"," options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:598:    [strBuf replaceOccurrencesOfString:@"&#45;" withString:@"-" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:602:    [strBuf replaceOccurrencesOfString:@"&#46;" withString:@"." options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:606:    [strBuf replaceOccurrencesOfString:@"&#47;" withString:@"/" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:610:    [strBuf replaceOccurrencesOfString:@"&#58;" withString:@":" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:614:    [strBuf replaceOccurrencesOfString:@"&#59;" withString:@";" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:618:    [strBuf replaceOccurrencesOfString:@"&#60;" withString:@"<" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:622:    [strBuf replaceOccurrencesOfString:@"&#61;" withString:@"=" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:626:    [strBuf replaceOccurrencesOfString:@"&#62;" withString:@">" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:630:    [strBuf replaceOccurrencesOfString:@"&#63;" withString:@"?" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:634:    [strBuf replaceOccurrencesOfString:@"&#64;" withString:@"@" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:638:    [strBuf replaceOccurrencesOfString:@"&#91;" withString:@"[" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:642:    [strBuf replaceOccurrencesOfString:@"&#92;" withString:@"\\" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:646:    [strBuf replaceOccurrencesOfString:@"&#93;" withString:@"]" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:650:    [strBuf replaceOccurrencesOfString:@"&#94;" withString:@"^" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:654:    [strBuf replaceOccurrencesOfString:@"&#95;" withString:@"_" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:658:    [strBuf replaceOccurrencesOfString:@"&#96;" withString:@"`" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:662:    [strBuf replaceOccurrencesOfString:@"&#123;" withString:@"{" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:666:    [strBuf replaceOccurrencesOfString:@"&#124;" withString:@"|" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:670:    [strBuf replaceOccurrencesOfString:@"&#125;" withString:@"}" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:674:    [strBuf replaceOccurrencesOfString:@"&#126;" withString:@"~" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/Utility.m:678:    [strBuf replaceOccurrencesOfString:@"&#38;" withString:@"&" options:NSCaseInsensitiveSearch range:range];
Sezam/Intellivision/ImageFetcher.m:101:     NSLog(@"mImgURl url  is %@",self.mImgURl);
Sezam/Intellivision/ImageFetcher.m:141:    //  NSLog(@"load image url is called ... %d",isShowLoading);
Sezam/Intellivision/ImageFetcher.m:143:    // NSLog(@"loadImageWithURL %@",mImgURl);
Sezam/Intellivision/ImageFetcher.m:155:        // NSLog(@"image fetcher error is %@",error);
Sezam/Intellivision/ImageFetcher.m:160:        //NSLog(@"image %@",mImgURl);
Sezam/Intellivision/ImageFetcher.m:202:    //w NSLog(@"stop update %d, request %d",isStopImageUpdate, isRequestInProgress);
Sezam/Intellivision/ImageFetcher.m:221:        // NSLog(@"stopped for imgURL is %@",mImgURl);
Sezam/Intellivision/IVP2PSessionManager.mm:68:        NSString* cId = cameraInfo[kGenericDeviceIdKey][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:76:        NSLog(@"camera settting infor is %@",cameraSettingInfo);
Sezam/Intellivision/IVP2PSessionManager.mm:78:        NSString* proxyIp = cameraSettingInfo[kCameraConfigKeyMetaData][@"proxyip"][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:79:        NSString* proxyId = cameraSettingInfo[kCameraConfigKeyMetaData][@"proxysession"][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:80:        NSString* rtspUrl = cameraSettingInfo[kCameraConfigKeyMetaData][@"rtspUrl"][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:103:        NSLog(@"session stream status is %d", streamStatus);
Sezam/Intellivision/IVP2PSessionManager.mm:113:        NSLog(@"startStreamingWithProxyId:: Unable to create session for camera %@ due to no session key, Creating session is required",cameraId);
Sezam/Intellivision/IVP2PSessionManager.mm:162:        NSLog(@"StopAllSesions %@", aKey);
Sezam/Intellivision/IVP2PSessionManager.mm:171:    NSString* pxStr =  @"1";//cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaPX][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:172:    NSString* ptStr =  @"1";//cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaPT][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:174:    NSString *proxyIDStr = @"", *proxyIPStr = @"",  *rtspURLStr = @"";
Sezam/Intellivision/IVP2PSessionManager.mm:179:    rtspURLStr = cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaProxyRTSP][@"text"];
Sezam/Intellivision/IVP2PSessionManager.mm:184:                                  @"deviceIP": NON_NIL_STRING(rtspURLStr),
Sezam/Intellivision/IVP2PSessionManager.mm:215:        reachability = [Reachability reachabilityForInternetConnection];//reachabilityWithHostName:@"www.google.com"];
Sezam/Intellivision/IVP2PSessionManager.mm:243:    NSString *ifnam = @"";
Sezam/Intellivision/IVP2PSessionManager.mm:246:        // NSLog(@"%@ => %@", ifnam, info);
Sezam/Intellivision/IVP2PSessionManager.mm:254:        NSString *bssid = info[@"SSID"];
Sezam/Intellivision/IVP2PSessionManager.mm:265:        NSString *bssid = @"CellNetwork";
Sezam/Intellivision/IVP2PSessionManager.mm:276:        NSString *bssid = @"NoNetwork";
Sezam/Intellivision/IVP2PSessionManager.mm:287:    NSLog(@"network is %@",prevSSID);
Sezam/Intellivision/IVP2PSessionManager.mm:315:     NSLog(@"Reachable");
Sezam/Intellivision/IVP2PSessionManager.mm:317:     NSLog(@"Unreachable");
Sezam/Intellivision/IVP2PSessionManager.mm:323:        NSLog(@"no");
Sezam/Intellivision/IVP2PSessionManager.mm:324:        // mNetLabel.text = @"No Net";
Sezam/Intellivision/IVP2PSessionManager.mm:328:        NSLog(@"wifi");
Sezam/Intellivision/IVP2PSessionManager.mm:329:        // mNetLabel.text = @"wifi";
Sezam/Intellivision/IVP2PSessionManager.mm:336:        NSLog(@"cell");
Sezam/Intellivision/IVP2PSessionManager.mm:337:        //mNetLabel.text = @"Cell Network 3G";
Sezam/Intellivision/UIKit+Extensions.m:160:       // NSLog(@"%@",tView);
Sezam/Intellivision/UIKit+Extensions.m:386:    if ([hexColor hasPrefix:@"#"]) 
Sezam/Intellivision/UIKit+Extensions.m:439:											 cancelButtonTitle:@"OK"
Sezam/Intellivision/IVCameraServices.h:241: *  Get human understandable name for the image flip values applicable only for @"FOG Cloud Camera",@"XMAN Cloud Camera",@"SL Cloud Camera", @"HPC01",@"HPC01A" cameras
Sezam/Intellivision/XMLReader.h:21: NSString *testXMLString = @"<items><item id=\"0001\" type=\"donut\"><name>Cake</name><ppu>0.55</ppu><batters><batter id=\"1001\">Regular</batter><batter id=\"1002\">Chocolate</batter><batter id=\"1003\">Blueberry</batter></batters><topping id=\"5001\">None</topping><topping id=\"5002\">Glazed</topping><topping id=\"5005\">Sugar</topping></item></items>";
Sezam/Intellivision/XMLReader.h:27: NSLog(@"%@", xmlDictionary);
Sezam/Intellivision/CustomerInfo.m:34:    customerInfo.mCustomerName = xmlDictionary[@"name"];
Sezam/Intellivision/CustomerInfo.m:37:    customerInfo.mID = xmlDictionary[@"id"];
Sezam/Intellivision/CustomerInfo.m:38:    customerInfo.mCustomerEmailID = xmlDictionary[@"email"];
Sezam/Intellivision/CustomerInfo.m:39:    customerInfo.mPassword = xmlDictionary[@"password"];
Sezam/Intellivision/CustomerInfo.m:50:    self.mPhoneNumber = (self.mPhoneNumber == nil) ? @"" :self.mPhoneNumber;
Sezam/Intellivision/CustomerInfo.m:51:    self.mAddress = (self.mAddress == nil) ? @"" : self.mAddress;
Sezam/Intellivision/CustomerInfo.m:52:    self.mCustomerEmailID =  (self.mCustomerEmailID == nil) ? @"" : self.mCustomerEmailID;
Sezam/Intellivision/CustomerInfo.m:53:    self.mPassword =  (self.mPassword == nil) ? @"" : self.mPassword;
Sezam/Intellivision/CustomerInfo.m:54:    self.mLastName = (self.mLastName == nil) ? @"" :self.mLastName;
Sezam/Intellivision/CustomerInfo.m:55:    self.mCustomerName = (self.mCustomerName == nil) ? @"" : self.mCustomerName;
Sezam/Intellivision/CustomerInfo.m:60:                                                                 self.mID, self.mCustomerEmailID, self.mPassword, self.mPhoneNumber, self.mAddress,@(self.mIsVerified)] forKeys:@[@"name",kAccountInfoUpdateKeyLastName,@"id",@"email",@"password",kAccountInfoUpdateKeyPhone, kAccountInfoUpdateKeyAddress,kAccountInfoUpdateKeyIsVerified]];
Sezam/Intellivision/CustomerInfo.m:91:    NSString *customer_key = [NSString stringWithFormat:@"%@_%@",self.mID,keyID];
Sezam/Intellivision/CustomerInfo.m:96:    NSString *customer_key = [NSString stringWithFormat:@"%@_%@",self.mID,keyID];
Sezam/Intellivision/IVLoginServices.m:45:    NSString* dateString = [[NSDate date] stringFromDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
Sezam/Intellivision/IVLoginServices.m:47:    [request addValue:dateString forHTTPHeaderField:@"date"];
Sezam/Intellivision/IVLoginServices.m:48:    [request addValue:@"sessionKey" forHTTPHeaderField:@"sessionKey"];
Sezam/Intellivision/IVLoginServices.m:51:    NSString *partnerHashKey = [NSString stringWithFormat:@"%d%@",kPartnerTID,dateString];
Sezam/Intellivision/IVLoginServices.m:53:    [request addValue:partnerSHA1 forHTTPHeaderField:@"partnerId"];
Sezam/Intellivision/IVLoginServices.m:56:    NSString *sessionSecHashKey = [@"sessionSecret" stringByAppendingFormat:@"%@",dateString];
Sezam/Intellivision/IVLoginServices.m:58:    [request addValue:sessionSecKeySHA1 forHTTPHeaderField:@"sessionSecret"];
Sezam/Intellivision/IVLoginServices.m:60:    NSString *localHashKey = [NSString stringWithFormat:@"%@%@",kLocalID,dateString];
Sezam/Intellivision/IVLoginServices.m:62:    [request addValue:localSHA1 forHTTPHeaderField:@"localId"];
Sezam/Intellivision/IVLoginServices.m:64:    NSLog(@"re %@",request.allHTTPHeaderFields);
Sezam/Intellivision/IVLoginServices.m:71:    NSString* dateString = [[NSDate date] stringFromDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
Sezam/Intellivision/IVLoginServices.m:73:    [request addValue:@"date" forHTTPHeaderField:dateString];
Sezam/Intellivision/IVLoginServices.m:76:    NSString *partnerHashKey = [NSString stringWithFormat:@"%d%@",kPartnerTID,dateString];
Sezam/Intellivision/IVLoginServices.m:78:    [request addValue:@"partnerId" forHTTPHeaderField:partnerSHA1];
Sezam/Intellivision/IVLoginServices.m:82:    NSString *localHashKey = [NSString stringWithFormat:@"%@%@",kLocalID, dateString];
Sezam/Intellivision/IVLoginServices.m:84:    [request addValue:@"localId" forHTTPHeaderField:localSHA1];
Sezam/Intellivision/IVLoginServices.m:93:    NSString* dateString = [[NSDate date] stringFromDateFormat:@"yyyy-MM-dd'T'HH:mm:ss"];
Sezam/Intellivision/IVLoginServices.m:95:    [request addRequestHeader:@"Date" value:dateString];
Sezam/Intellivision/IVLoginServices.m:98:    NSString *partnerHashKey = [NSString stringWithFormat:@"%d%@",kPartnerTID,dateString];
Sezam/Intellivision/IVLoginServices.m:100:    [request addRequestHeader:@"partnerId" value:partnerSHA1];
Sezam/Intellivision/IVLoginServices.m:105:    NSString *localHashKey = [NSString stringWithFormat:@"%@%@",kLocalID,dateString];
Sezam/Intellivision/IVLoginServices.m:107:    [request addRequestHeader:@"localId" value:localSHA1];
Sezam/Intellivision/IVLoginServices.m:158:    NSString *customerName = @"";
Sezam/Intellivision/IVLoginServices.m:161:    NSString* phoneNo = @"";
Sezam/Intellivision/IVLoginServices.m:163:    NSString* address = @"";
Sezam/Intellivision/IVLoginServices.m:167:    customerInfo.mCustomerEmailID = @"";
Sezam/Intellivision/IVLoginServices.m:168:    customerInfo.mPassword = @"";
Sezam/Intellivision/IVLoginServices.m:177://    NSString *xmlFormat = @"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><session><sessionKey>%@</sessionKey><sessionSecret>%@</sessionSecret><status>success</status></session>";
Sezam/Intellivision/IVLoginServices.m:189:    NSLog(@"resposne string is %@",responseString);
Sezam/Intellivision/IVLoginServices.m:194:    tSessionKey =  [[[xmlDictionary valueForKey:@"session"] valueForKey:@"sessionKey"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:195:    tSessionSecretKey = [[[xmlDictionary valueForKey:@"session"] valueForKey:@"sessionSecret"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:223:    NSLog(@"errr os i %@",error);
Sezam/Intellivision/IVLoginServices.m:288:    NSLog(@"response string is %@",responseString);
Sezam/Intellivision/IVLoginServices.m:292:    if ([[[[xmlDictionary objectForKey:@"result"] objectForKey:@"status"] objectForKey:@"text"] isEqualToString:@"success"]) {
Sezam/Intellivision/IVLoginServices.m:301:    NSLog(@"%@",error);
Sezam/Intellivision/IVLoginServices.m:328:    // NSString* urlStr = [NSString stringWithFormat:@"%@notification/subscription/%@/%@",kAPNSServerUrl,cm.mID,[[NSUserDefaults standardUserDefaults] objectForKey:kKeyToken]];
Sezam/Intellivision/IVLoginServices.m:346:    //  NSLog(@"response string is %@",[request responseString]);
Sezam/Intellivision/IVLoginServices.m:384:        NSError *error = [NSError errorWithDomain:@"com.intellivision.com" code:-100 userInfo:@{NSLocalizedDescriptionKey:@"Customer ID not found"}];
Sezam/Intellivision/IVLoginServices.m:420:        NSLog(@"Invalid login ID");
Sezam/Intellivision/IVLoginServices.m:439:    NSLog(@"request erros is %@",error);
Sezam/Intellivision/IVLoginServices.m:443:        infoDict = @{@"error":error.localizedDescription};
Sezam/Intellivision/IVLoginServices.m:457:    NSLog(@"request.responseString %@",responseString);
Sezam/Intellivision/IVLoginServices.m:459:    if([responseString containsSubstring:@"success" options:NSCaseInsensitiveSearch])
Sezam/Intellivision/IVLoginServices.m:475:        NSDictionary *errorInfo = @{NSLocalizedDescriptionKey:@"Login failure"};
Sezam/Intellivision/IVLoginServices.m:476:        NSError *error = [NSError errorWithDomain:@"com.intellivsion.error" code:201 userInfo:errorInfo];
Sezam/Intellivision/IVLoginServices.m:512:        [UIAlertView showAlertMessage:@"Invalid User ID"];
Sezam/Intellivision/IVLoginServices.m:520:    [self logoutFinished:@""];
Sezam/Intellivision/IVLoginServices.m:524:    NSLog(@"logout response %@",responseString);
Sezam/Intellivision/IVLoginServices.m:634:    NSString *customerName =  [[[xmlDictionary valueForKey:@"customer"] valueForKey:@"name"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:635:    NSString *lastName = [[[xmlDictionary valueForKey:@"customer"] valueForKey:@"lastName"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:637:    NSString *tID =  [[[xmlDictionary valueForKey:@"customer"] valueForKey:@"id"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:639:    NSString* phoneNo = [[[[xmlDictionary valueForKey:@"customer"] valueForKey:@"metadata"] valueForKey:@"contactNo"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:641:    NSString* address = [[[[xmlDictionary valueForKey:@"customer"] valueForKey:@"metadata"] valueForKey:@"address"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:643:    NSString *verified =  [[[xmlDictionary valueForKey:@"customer"] valueForKey:@"verified"] valueForKey:@"text"];
Sezam/Intellivision/IVLoginServices.m:688:    if ([responseString containsSubstring:@"success" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVLoginServices.m:708:        NSError *error = [NSError errorWithDomain:@"com.intelli-vision.com" code:400 userInfo:errorInfo];*/
Sezam/Intellivision/IVConstants.h:11:#define kAppName @"videocloud"
Sezam/Intellivision/IVConstants.h:15:#define locationRegister() [[NSUserDefaults standardUserDefaults]valueForKey:@"locRegistered"]
Sezam/Intellivision/IVConstants.h:16:#define setLocationRegister(loc)  [[NSUserDefaults standardUserDefaults] setValue:loc  forKey:@"locRegistered"]
Sezam/Intellivision/IVConstants.h:30:#define kNotificationMasterReload @"MasterReload"
Sezam/Intellivision/IVConstants.h:31:#define kNotificationSessionKeyFetched @"NotificationSessionKeyFetched"
Sezam/Intellivision/IVConstants.h:43:#define kServerXMLURLProduction @"http://v2servers.video-cloud.net/sv2servers.xml"
Sezam/Intellivision/IVConstants.h:47:#define kServerXMLURLStaging @"http://servers.video-cloud.net/v2servers.xml"
Sezam/Intellivision/IVConstants.h:48:#define kAPIKeyStaging  @"dA0QDeOSimkm6gMUpbHsD9GWQiEfTfAOz6RpD928"
Sezam/Intellivision/IVConstants.h:58:#define kFlurryAppKey @"3Z6VR4MPJ7QQ62W3JJHX"
Sezam/Intellivision/IVConstants.h:62:#define kURLUserGuide @"http://www.intelli-vision.com/support-downloads"
Sezam/Intellivision/IVConstants.h:65:#define kCustomerCareNoDefault @"+1-855-411-4466"
Sezam/Intellivision/IVConstants.h:66:#define kCustomerCareNoUS @"+1-855-411-4466"
Sezam/Intellivision/IVConstants.h:67:#define kCustomerCareNoCN @"+1-855-411-4466"
Sezam/Intellivision/IVConstants.h:69:#define kURLCustomerCareNo(no) [NSString stringWithFormat:@"tel:%@",no]
Sezam/Intellivision/IVConstants.h:75:#define kInAppPlatformType @"APPSTORE"
Sezam/Intellivision/IVConstants.h:77:#define kInAppKeyPremium @""
Sezam/Intellivision/IVConstants.h:104:#define kKeyIsPushNotifySubscribed [NSString stringWithFormat:@"%@ pushNotify",CustomerInfo.sharedCustomerInfo.mID]
Sezam/Intellivision/IVConstants.h:105:#define kKeyIsEmailNotifySubscribed [NSString stringWithFormat:@"%@ emailNotify",CustomerInfo.sharedCustomerInfo.mID]
Sezam/Intellivision/IVConstants.h:108:#define kGreenColorHex @"0ecfcf"
Sezam/Intellivision/IVConstants.h:110:#define kColorHexHighlighted @"2F6DBA"
Sezam/Intellivision/IVConstants.h:112:#define kKeyConfirmPasswordScreen @"confirm_passwd"
Sezam/Intellivision/IVConstants.h:115:#define NON_NIL_STRING(str) (str==nil)?str=@"":str
Sezam/Intellivision/IVConstants.h:134:#define IS_IPHONE_6P [[Utility machineName] isEqualToString:@"iPhone7,1"]
Sezam/Intellivision/IVConstants.h:139:#define kColorFlatTableBlue [UIColor colorForHex:@"01607E"]
Sezam/Intellivision/IVConstants.h:140:#define kColorFlatTableRed [UIColor colorForHex:@"A44000"]
Sezam/Intellivision/IVConstants.h:143:#define kMainCommandPTZ @"ptz\\r\\n"
Sezam/Intellivision/IVConstants.h:144:#define kSubCommandPTZLeft @"PAN-LEFT\\r\\n"
Sezam/Intellivision/IVConstants.h:145:#define kSubCommandPTZRight @"PAN-RIGHT\\r\\n"
Sezam/Intellivision/IVConstants.h:146:#define kSubCommandPTZUp @"TILT-UP\\r\\n"
Sezam/Intellivision/IVConstants.h:147:#define kSubCommandPTZDown @"TILT-DOWN\\r\\n"
Sezam/Intellivision/IVConstants.h:149:#define kMainCommandRecord @"record"
Sezam/Intellivision/IVConstants.h:150:#define kSubCommandRecordStart @"START_RECORD"
Sezam/Intellivision/IVConstants.h:151:#define kSubCommandRecordStop @"STOP_RECORD"
Sezam/Intellivision/IVConstants.h:153:#define kMainCommandFirmwareUpgrade @"upgrade\\r\\n"
Sezam/Intellivision/IVConstants.h:156:#define kMainCommandGetFirmwareUpgradeStatus @"getUpgStatus"
Sezam/Intellivision/IVConstants.h:159:#define kMainCommandReboot @"reboot"
Sezam/Intellivision/IVConstants.h:162:#define kMainCommandTemperature @"temperature"
Sezam/Intellivision/IVConstants.h:163:#define kSubCommandTemperatureGet  @"GET_TEMP"
Sezam/Intellivision/IVConstants.h:165:#define kMainCommandHumidity @"humid"
Sezam/Intellivision/IVConstants.h:166:#define kSubCommandHumidity @"GET_HUMID"
Sezam/Intellivision/IVConstants.h:168:#define kMainCommandWifiStrength @"wifiStrength"
Sezam/Intellivision/IVConstants.h:171:#define kGenericDeviceIdKey @"deviceId" //@"cameraId" //
Sezam/Intellivision/IVConstants.h:172:#define kGenericDeviceKey @"device" //@"camera" //
Sezam/Intellivision/IVRTSPViewController.mm:26:static NSString* kAGDiaryCategory = @"IVRTSPViewController";
Sezam/Intellivision/IVRTSPViewController.mm:63:    self.mCameraMJPEGURL = @"http://test.com";
Sezam/Intellivision/IVRTSPViewController.mm:152:        NSLog(@"IV_STREAM_STATE_CONNECTED in loadRTSPStream");
Sezam/Intellivision/IVRTSPViewController.mm:153:        NSLog(@"Player Status: %i", self.playerStatus);
Sezam/Intellivision/IVRTSPViewController.mm:156:            NSLog(@"Start Streaming from LoadRTSPStrean - initializePlayer == NO");
Sezam/Intellivision/IVRTSPViewController.mm:180:     //NSLog(@"mCameraMJPEGURL %@",self.mCameraMJPEGURL);
Sezam/Intellivision/IVRTSPViewController.mm:244:        NSLog(@"pausing player");
Sezam/Intellivision/IVRTSPViewController.mm:246:        NSLog(@"pausing player %d",isPaused);
Sezam/Intellivision/IVRTSPViewController.mm:249:        //         [ExtraServices flashMessage:@"pausing player" ForDuration:5000];
Sezam/Intellivision/IVRTSPViewController.mm:256:    NSLog(@"pmessage is %@",pMessage);
Sezam/Intellivision/IVRTSPViewController.mm:266:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Warning"
Sezam/Intellivision/IVRTSPViewController.mm:269:                                              cancelButtonTitle:@"OK"
Sezam/Intellivision/IVRTSPViewController.mm:290:    // NSLog(@"self.playerStatus %d",self.playerStatus);
Sezam/Intellivision/IVRTSPViewController.mm:308:    //  NSLog(@"mCameraMJPEGView frame %@",NSStringFromCGRect(self.mCameraMJPEGView.frame));
Sezam/Intellivision/IVRTSPViewController.mm:316:    //    NSLog(@"self.mCameraMJPEGView %@",NSStringFromCGRect(cRect));
Sezam/Intellivision/IVRTSPViewController.mm:355:    NSLog(@"update performance data is called......");
Sezam/Intellivision/IVRTSPViewController.mm:378:    NSLog(@"releaseIVVideoPlayer ended");
Sezam/Intellivision/IVRTSPViewController.mm:389:    NSLog(@"releasePlayerAndStopStream ended");
Sezam/Intellivision/IVRTSPViewController.mm:396:    NSLog(@"\n\n\n\n\n----------------------\n\n\n\n\n");
Sezam/Intellivision/IVRTSPViewController.mm:424:    NSString *errorMsg = [NSString stringWithFormat:@"Error:Code(%d) SubCode:(%d) %@",playerError.errorCode,playerError.errorSubCode,playerError.description];
Sezam/Intellivision/IVRTSPViewController.mm:425:    NSLog(@"errorMsg %@",errorMsg);
Sezam/Intellivision/IVRTSPViewController.mm:428:        NSLog(@"Your device is unable to support the high resolution stream. Please lower the resolution of the video stream from camera settings.");
Sezam/Intellivision/IVRTSPViewController.mm:432:        // [ExtraServices flashMessage:@"Unable to stream higher quality video due to poor network" ForDuration:5000];
Sezam/Intellivision/IVRTSPViewController.mm:453:        NSLog(@"Caught orphan RTSP player obj");
Sezam/Intellivision/IVRTSPViewController.mm:454:        NSLog(@"Player Status : %d",newPlayerStatus);
Sezam/Intellivision/IVRTSPViewController.mm:473:            NSLog(@"IV_PLAYER_STATUS_INITIALISING - playerChangedStatus:");
Sezam/Intellivision/IVRTSPViewController.mm:474:            [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"IVSDK" andStatus:@"IV_PLAYER_STATUS_INITIALISING" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:479:            [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"IVSDK" andStatus:@"IV_PLAYER_STATUS_READY" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:484:            [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"IVSDK" andStatus:@"video_buffering_started" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:485:            NSLog(@"getting frame is called.");
Sezam/Intellivision/IVRTSPViewController.mm:491:            NSLog(@"IV_PLAYER_STATUS_PLAYING : %d",newPlayerStatus);
Sezam/Intellivision/IVRTSPViewController.mm:493:            [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"IVSDK" andStatus:@"first_video_frame_rendered" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:515:                NSLog(@"_videoPlayer isAudioAvailable %d",isAudioAvailable);
Sezam/Intellivision/IVRTSPViewController.mm:527:            NSLog(@"Thread in stopped %@",[NSThread currentThread]);
Sezam/Intellivision/IVRTSPViewController.mm:528:            NSLog(@"IV Player stopped");
Sezam/Intellivision/IVRTSPViewController.mm:529:            [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"IVSDK" andStatus:@"IV_PLAYER_STATUS_STOPPED" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:547:    //NSLog(@"Frame Count:%lu",self.videoPlayer.framesDisplayed); // GLKit Frame Count
Sezam/Intellivision/IVRTSPViewController.mm:548:    //NSLog(@"Player Stats = %@",playerStatistics);
Sezam/Intellivision/IVRTSPViewController.mm:559:            [info appendFormat:@"%@ : %@\n",key,[playerStatistics objectForKey:key]];
Sezam/Intellivision/IVRTSPViewController.mm:564:        [info appendString:@"No Info"];
Sezam/Intellivision/IVRTSPViewController.mm:567:    if (playerStatistics[@"Avg Video FPS"] != nil) {
Sezam/Intellivision/IVRTSPViewController.mm:568:        self.mFPS = [playerStatistics[@"Avg Video FPS"] intValue];
Sezam/Intellivision/IVRTSPViewController.mm:571:    if (playerStatistics[@"Packet Loss"] != nil) {
Sezam/Intellivision/IVRTSPViewController.mm:572:        self.mPacketLoss = [playerStatistics[@"Packet Loss"] intValue];
Sezam/Intellivision/IVRTSPViewController.mm:575:    if (playerStatistics[@"Avg Video FPS"] != nil) {
Sezam/Intellivision/IVRTSPViewController.mm:576:        self.mFPS = [playerStatistics[@"Avg Video FPS"] intValue];
Sezam/Intellivision/IVRTSPViewController.mm:594:        self.mPerformanceDetailLabel.text = [NSString stringWithFormat:@"PL: %03d   FPS: %02d   BitRate: %.2f Kbps",self.mPacketLoss,self.mFPS,(self.mBitRate * 4)];
Sezam/Intellivision/IVRTSPViewController.mm:607:    [[AGVideoCallSummary sharedInstance] addVideoCallEvent:@"PubNub" andStatus:@"doorbell_video_stopped" andPath:nil andError:nil];
Sezam/Intellivision/IVRTSPViewController.mm:642:        self.mPerformanceDetailLabel.text = @"";
Sezam/Intellivision/IVRTSPViewController.mm:652:    //    NSLog(@"Player Stats = %@",playerStatics);
Sezam/Intellivision/IVRTSPViewController.mm:660://            [info appendFormat:@"%@ : %@\n",key,[playerStatics objectForKey:key]];
Sezam/Intellivision/IVRTSPViewController.mm:665://        [info appendString:@"No Info"];
Sezam/Intellivision/IVRTSPViewController.mm:678:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Info" message:message delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/Intellivision/IVRTSPViewController.mm:691:        NSLog(@"video player status is %d",[self.videoPlayer isAudioAvailable]);
Sezam/Intellivision/IVRTSPViewController.mm:698:        // [ExtraServices flashMessage:@"returning true from runRTSPPlayerIfStreamLoaded" ForDuration:2000];
Sezam/Intellivision/IVRTSPViewController.mm:702:    //[ExtraServices flashMessage:@"returning false from runRTSPPlayerIfStreamLoaded" ForDuration:2000];
Sezam/Intellivision/IVRTSPViewController.mm:740:    NSLog(@"start streaming called");
Sezam/Intellivision/IVRTSPViewController.mm:761:    NSLog(@"self.mVideoConnectionType is %d and RTSPVideoConnectionTypePrivate %d",self.mVideoConnectionType, RTSPVideoConnectionTypePrivate);
Sezam/Intellivision/IVRTSPViewController.mm:795:     //rtspUrlStr = @"rtsp://184.72.239.149/vod/mp4:BigBuckBunny_115k.mov";
Sezam/Intellivision/IVRTSPViewController.mm:804://    if (([rtspUrlStr rangeOfString:@"localhost"]).location != NSNotFound) {
Sezam/Intellivision/IVRTSPViewController.mm:805://        rtspUrlStr = [rtspUrlStr stringByReplacingOccurrencesOfString:@"rtsp://intellivision:intellivision@localhost"
Sezam/Intellivision/IVRTSPViewController.mm:806://                                                                withString:@"rtsp://127.0.0.1"];
Sezam/Intellivision/IVRTSPViewController.mm:809:    NSLog(@"rtspUrlStr is %@",rtspUrlStr);
Sezam/Intellivision/IVRTSPViewController.mm:833:    NSLog(@"start streaming ended and play status is %d",playStatus);
Sezam/Intellivision/IVRTSPViewController.mm:867:        NSLog(@"is resumed %d",isResumed);
Sezam/Intellivision/IVRTSPViewController.mm:918:    NSLog(@"StartStreamingCalled");
Sezam/Intellivision/IVRTSPViewController.mm:944:    NSLog(@"rtspURL is %@",rtspUrlStr);
Sezam/Intellivision/IVRTSPViewController.mm:970:    NSLog(@"network changed...");
Sezam/Intellivision/IVCameraServices.mm:24:#define UNIQUE_REPRESENTATION(some) [NSString stringWithFormat:@"%p",some]
Sezam/Intellivision/IVCameraServices.mm:52:static NSString *keyLastTemperatureUpdated = @"Date Temperature";
Sezam/Intellivision/IVCameraServices.mm:82:    NSLog(@"my array is %@",myArray);
Sezam/Intellivision/IVCameraServices.mm:88:    //NSLog(@"%s: Supported interfaces: %@", __func__, ifs);
Sezam/Intellivision/IVCameraServices.mm:92:        NSLog(@"%s: %@ => %@", __func__, ifnam, info);
Sezam/Intellivision/IVCameraServices.mm:138:            responseString = [responseString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Sezam/Intellivision/IVCameraServices.mm:175:    responseString = [responseString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Sezam/Intellivision/IVCameraServices.mm:215:    id tempObj = xmlDictionary[@"response"][kGenericDeviceKey];
Sezam/Intellivision/IVCameraServices.mm:228:        NSString *cameraID = cameraInfo[kGenericDeviceIdKey][@"text"];
Sezam/Intellivision/IVCameraServices.mm:229:        // NSLog(@"P2P session.. %@",cameraID);
Sezam/Intellivision/IVCameraServices.mm:261:            responseString = [responseString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Sezam/Intellivision/IVCameraServices.mm:266:            //NSLog(@" xmlDictionary is %@",xmlDictionary);
Sezam/Intellivision/IVCameraServices.mm:269:            statusString = xmlDictionary[@"response"][@"status"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:271:                statusString =  xmlDictionary[@"response"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:273:            if (statusString.length != 0 && [statusString rangeOfString:@"success"].location != NSNotFound) {
Sezam/Intellivision/IVCameraServices.mm:316:    //NSLog(@" xmlDictionary is %@",xmlDictionary);
Sezam/Intellivision/IVCameraServices.mm:317:    NSString *statusString = xmlDictionary[@"response"][@"status"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:320:        if (statusString.length != 0 && [statusString rangeOfString:@"success"].location != NSNotFound) {
Sezam/Intellivision/IVCameraServices.mm:357:    NSLog(@"generate camera token success %@",responseString);
Sezam/Intellivision/IVCameraServices.mm:358:   // NSLog(@"camera response headers are %@",request.responseHeaders);
Sezam/Intellivision/IVCameraServices.mm:370:    NSString* token = [xmlDictionary[@"response"][@"token"][@"text"] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
Sezam/Intellivision/IVCameraServices.mm:384:    NSLog(@"generateCameraTokenFailed %@ and error code is %ld",error, (long)error.code);
Sezam/Intellivision/IVCameraServices.mm:433:    NSString *cameraInfoURL = [NSString stringWithFormat:@"%@/%@/camera/%@",kDMSServerURL,customerInfo.mID,tID];
Sezam/Intellivision/IVCameraServices.mm:441:        request.username = [tID stringByAppendingString:@"{}"];
Sezam/Intellivision/IVCameraServices.mm:445:    [request addRequestHeader:@"Content-Type" value:@"application/xml"];
Sezam/Intellivision/IVCameraServices.mm:460:            responseString = [responseString stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Sezam/Intellivision/IVCameraServices.mm:468:                NSString *cameraName = [[[infoDict valueForKey:@"metadata"] valueForKey:kCameraConfigKeyMetaDataCameraName] valueForKey:@"text"];
Sezam/Intellivision/IVCameraServices.mm:506:    //NSLog(@"inserted into disctionay.... %@",request.username);
Sezam/Intellivision/IVCameraServices.mm:508:        NSString *responseString = [responseStr stringByReplacingOccurrencesOfString:@"\n" withString:@""];
Sezam/Intellivision/IVCameraServices.mm:515:        // NSLog(@" and key is %@", infoDict);
Sezam/Intellivision/IVCameraServices.mm:521:            NSString *cameraName = [[[infoDict valueForKey:@"metadata"] valueForKey:kCameraConfigKeyMetaDataCameraName] valueForKey:@"text"];
Sezam/Intellivision/IVCameraServices.mm:555:        NSDictionary *configInfo = @{@"meta":@{tKey:value}};
Sezam/Intellivision/IVCameraServices.mm:582:                configurationXML = [[NSMutableString alloc] initWithString:@""];
Sezam/Intellivision/IVCameraServices.mm:587:            [configurationXML appendFormat:@"<metadata>"];
Sezam/Intellivision/IVCameraServices.mm:590:                [configurationXML appendFormat:@"<%@>%@</%@>",metaKey,metaValue,metaKey];
Sezam/Intellivision/IVCameraServices.mm:592:            [configurationXML appendFormat:@"</metadata>"];
Sezam/Intellivision/IVCameraServices.mm:596:                configurationXML  = [NSMutableString stringWithString:@"<configuration>"];
Sezam/Intellivision/IVCameraServices.mm:598:            [configurationXML appendFormat:@"<%@>%@</%@>",key,value,key];
Sezam/Intellivision/IVCameraServices.mm:603:        [configurationXML appendFormat:@"</configuration>"];
Sezam/Intellivision/IVCameraServices.mm:606:    NSLog(@"makeUp config XML  %@",configurationXML);
Sezam/Intellivision/IVCameraServices.mm:645:    NSLog(@" error id is %@",error);
Sezam/Intellivision/IVCameraServices.mm:652:    NSLog(@"confi upgated is %@",responseString);
Sezam/Intellivision/IVCameraServices.mm:655:    if ([responseString containsSubstring:@"success" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:685:        NSString *skeletonXML = @"<response><hasMessage>true</hasMessage><messages><message><messageId>T1</messageId><clientId>123</clientId><meta><![CDATA[getUpgStatus]]></meta><body><![CDATA[STATUS:DOWNLOADING;DL_PERCENT:%d;UPG_PERCENT:%d;]]></body></message></messages></response>";
Sezam/Intellivision/IVCameraServices.mm:691:                skeletonXML = @"<response><hasMessage>true</hasMessage><messages><message><messageId>T1</messageId><clientId>123</clientId><meta><![CDATA[getUpgStatus]]></meta><body><![CDATA[STATUS:SUCCESS;DL_PERCENT:%d;UPG_PERCENT:%d;]]></body></message></messages></response>";
Sezam/Intellivision/IVCameraServices.mm:700:    if ([response containsSubstring:@"<hasMessage>true</hasMessage>" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:703:    else if ([response containsSubstring:@"<status>success</status><code>200</code>" options:NSCaseInsensitiveSearch]){
Sezam/Intellivision/IVCameraServices.mm:719:                    configKey = [NSString stringWithFormat:@"%@-%@-%d",kMainCommandGetFirmwareUpgradeStatus,@"SUCCESS",100];
Sezam/Intellivision/IVCameraServices.mm:722:                    NSRange firstPartRange = [response rangeOfString:@"<body><![CDATA["];
Sezam/Intellivision/IVCameraServices.mm:724:                    NSString *statusString = [firstPart substringToIndex:[firstPart rangeOfString:@";]"].location];
Sezam/Intellivision/IVCameraServices.mm:726:                    NSArray *components = [statusString componentsSeparatedByString:@";"];
Sezam/Intellivision/IVCameraServices.mm:740:                    NSString *status = [[status_info_Str componentsSeparatedByString:@":"]lastObject];
Sezam/Intellivision/IVCameraServices.mm:741:                    NSString *downLoaded = [[download_int_Str componentsSeparatedByString:@":"]lastObject];
Sezam/Intellivision/IVCameraServices.mm:742:                    NSString *upgraded = [[upgraded_int_Str componentsSeparatedByString:@":"]lastObject];
Sezam/Intellivision/IVCameraServices.mm:749:                    configKey = [NSString stringWithFormat:@"%@-%@-%d",kMainCommandGetFirmwareUpgradeStatus,status,totalCompleted];
Sezam/Intellivision/IVCameraServices.mm:754:                configKey = [NSString stringWithFormat:@"%@-%@-%d",kMainCommandGetFirmwareUpgradeStatus,@"DL_FAILED",0];
Sezam/Intellivision/IVCameraServices.mm:757:                configKey = [NSString stringWithFormat:@"%@-%@-%d",kMainCommandGetFirmwareUpgradeStatus,@"FAILED",0];
Sezam/Intellivision/IVCameraServices.mm:760:                configKey = [NSString stringWithFormat:@"%@-%@-%d",kMainCommandGetFirmwareUpgradeStatus,@"NOT_SUPPORTED",0];
Sezam/Intellivision/IVCameraServices.mm:809:        if (cameraSettings[@"configuration"] != nil) {
Sezam/Intellivision/IVCameraServices.mm:820:    NSString *isArmedStr  =  cameraSettings[@"configuration"][kCameraConfigKeyARMEnable][@"text"];
Sezam/Intellivision/IVCameraServices.mm:822:    isArmed = [isArmedStr containsSubstring:@"1" options:NSCaseInsensitiveSearch];
Sezam/Intellivision/IVCameraServices.mm:829:    if ([statusStr containsSubstring:@"NOT_SUPPORTED" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:832:    else if ([statusStr containsSubstring:@"DOWNLOADING" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:835:    else if ([statusStr containsSubstring:@"DL_SUCCESS" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:838:    else if ([statusStr containsSubstring:@"DL_FAILED" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:841:    else if ([statusStr containsSubstring:@"IN_PROGRESS" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:844:    else if ([statusStr rangeOfString:@"SUCCESS"].location != NSNotFound) {
Sezam/Intellivision/IVCameraServices.mm:847:    else if ([statusStr containsSubstring:@"FAILED" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:865:        cameraName = [[[ivCS.mAllCamerasInfo[tID] valueForKey:@"metadata"] valueForKey:kCameraConfigKeyMetaDataCameraName] valueForKey:@"text"];
Sezam/Intellivision/IVCameraServices.mm:875:    if ([trimmedCameraName isEqualToString:@""]) {
Sezam/Intellivision/IVCameraServices.mm:889:    NSString *motionDirectionStr = @"None";
Sezam/Intellivision/IVCameraServices.mm:892:            motionDirectionStr = @"Up";
Sezam/Intellivision/IVCameraServices.mm:895:            motionDirectionStr = @"Down";
Sezam/Intellivision/IVCameraServices.mm:898:            motionDirectionStr = @"Left";
Sezam/Intellivision/IVCameraServices.mm:901:            motionDirectionStr = @"Right";
Sezam/Intellivision/IVCameraServices.mm:905:            motionDirectionStr = @"None";
Sezam/Intellivision/IVCameraServices.mm:916:    NSString *audioSensititvityStr = @"Low";
Sezam/Intellivision/IVCameraServices.mm:921:            audioSensititvityStr = @"Lowest";
Sezam/Intellivision/IVCameraServices.mm:924:            audioSensititvityStr = @"Low";
Sezam/Intellivision/IVCameraServices.mm:927:            audioSensititvityStr = @"Normal";
Sezam/Intellivision/IVCameraServices.mm:930:            audioSensititvityStr = @"High";
Sezam/Intellivision/IVCameraServices.mm:934:            audioSensititvityStr = @"Highest";
Sezam/Intellivision/IVCameraServices.mm:943:    //only for @"FOG Cloud Camera",@"XMAN Cloud Camera",@"SL Cloud Camera", @"HPC01"
Sezam/Intellivision/IVCameraServices.mm:949:            flipName = @"None";
Sezam/Intellivision/IVCameraServices.mm:952:            flipName = @"Vertical Flip";
Sezam/Intellivision/IVCameraServices.mm:955:            flipName = @"Horizontal Flip";
Sezam/Intellivision/IVCameraServices.mm:959:            flipName = @"Rotate Clock wise";
Sezam/Intellivision/IVCameraServices.mm:971:            imageQualityName = @"Lowest";
Sezam/Intellivision/IVCameraServices.mm:974:            imageQualityName = @"Low";
Sezam/Intellivision/IVCameraServices.mm:977:            imageQualityName = @"Normal";
Sezam/Intellivision/IVCameraServices.mm:980:            imageQualityName = @"High";
Sezam/Intellivision/IVCameraServices.mm:984:            imageQualityName = @"Highest";
Sezam/Intellivision/IVCameraServices.mm:1004:    // NSLog(@"all upgrade firmware is %@",dict);
Sezam/Intellivision/IVCameraServices.mm:1010:        NSLog(@"%@ - %@",key,[dict objectForKey:key]);
Sezam/Intellivision/IVCameraServices.mm:1014:        NSLog(@"revmoing timeInSecs is %d",timeInSecs);
Sezam/Intellivision/IVCameraServices.mm:1016:            NSLog(@"revmoing timeInSecs is %@",key);
Sezam/Intellivision/IVCameraServices.mm:1025:    //NSLog(@"dict is %@",dict);
Sezam/Intellivision/IVCameraServices.mm:1035:    NSLog(@"selected camera id is %@",cId);
Sezam/Intellivision/IVCameraServices.mm:1064:    //NSLog(@"addCameraIdUpgradeInfo selected camera id is %@",ivcs.mSelectedCameraID);
Sezam/Intellivision/IVCameraServices.mm:1079:    NSString* pxStr =  cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaPX][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1093:    NSString* ptStr =  cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaPT][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1103:    // NSLog(@"cId %@",cId);
Sezam/Intellivision/IVCameraServices.mm:1110:    NSString *cameraStatus = cameraInfo[@"status"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1111:    // NSLog(@"cameraStatus is %@",cameraStatus);
Sezam/Intellivision/IVCameraServices.mm:1118:        [cameraStatus isEqualToString:@"offline"]) {
Sezam/Intellivision/IVCameraServices.mm:1133:            textValue = @"Vertical Flip";
Sezam/Intellivision/IVCameraServices.mm:1136:            textValue = @"Horizontal Flip";
Sezam/Intellivision/IVCameraServices.mm:1141:            NSString* cameraType =  cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaDataCameraType][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1142:            NSArray *cameraTypes = @[@"XMAN Cloud Camera", @"HPC01"];
Sezam/Intellivision/IVCameraServices.mm:1144:                textValue = @"Center Rotate";
Sezam/Intellivision/IVCameraServices.mm:1147:                textValue = @"Rotate Clockwise";
Sezam/Intellivision/IVCameraServices.mm:1152:            textValue = @"None";
Sezam/Intellivision/IVCameraServices.mm:1161:    if ([textValue containsSubstring:@"vertic" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:1164:    else if ([textValue containsSubstring:@"horizon" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:1167:    else if ([textValue containsSubstring:@"rotate" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:1203:    return connectionType == nil ? @"UDP" : connectionType;
Sezam/Intellivision/IVCameraServices.mm:1241:    NSString *postSkeletonXML = @"<request><messages><message><messageId>%lld</messageId><clientId>%@</clientId><meta><![CDATA[%@\\r\\n]]></meta><body><![CDATA[%@\\r\\n]]></body></message></messages></request>";
Sezam/Intellivision/IVCameraServices.mm:1244:    NSLog(@"CameraControlPostXML created %@",postXML);
Sezam/Intellivision/IVCameraServices.mm:1263:    NSString* cameraType =  cameraInfo[kCameraConfigKeyMetaData][kCameraConfigKeyMetaDataCameraType][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1264:    // NSLog(@"camera Type %@",cameraType);
Sezam/Intellivision/IVCameraServices.mm:1266:    if ([cameraType caseInsensitiveCompare:@"SL Cloud Camera"] != NSOrderedSame)
Sezam/Intellivision/IVCameraServices.mm:1305:        NSLog(@"temprature is %@",newTemperature);
Sezam/Intellivision/IVCameraServices.mm:1368:    loc = ([loc isEqualToString:@"China"]) ? @"CN" : @"US";
Sezam/Intellivision/IVCameraServices.mm:1387:        NSString *camID = [NSString stringWithFormat:@"%ld",(long)error.code];
Sezam/Intellivision/IVCameraServices.mm:1396:    NSString *camID = @"400";
Sezam/Intellivision/IVCameraServices.mm:1401:    if ([responseString containsSubstring:@"success" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVCameraServices.mm:1402:        camID =   [NSString stringWithFormat:@"%d",200];
Sezam/Intellivision/IVCameraServices.mm:1467:    NSLog(@"camera settting infor is %@",cameraSettingInfo);
Sezam/Intellivision/IVCameraServices.mm:1469:    NSString* proxyIp = cameraSettingInfo[kCameraConfigKeyMetaData][@"proxyip"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1470:    NSString* proxyId = cameraSettingInfo[kCameraConfigKeyMetaData][@"proxysession"][@"text"];
Sezam/Intellivision/IVCameraServices.mm:1471:    NSString* rtspUrl = cameraSettingInfo[kCameraConfigKeyMetaData][@"rtspUrl"][@"text"];
Sezam/Intellivision/IVP2PSessionWrapper.mm:58:    NSLog(@"deallocated p2p instance for camera id %@",self.cameraId);
Sezam/Intellivision/IVP2PSessionWrapper.mm:72:            NSString *uniqueQueueName = [NSString stringWithFormat:@"com.intellivision.%@",self];
Sezam/Intellivision/IVP2PSessionWrapper.mm:91:        NSLog(@"configuring dedicated dispatch resource required.");
Sezam/Intellivision/IVP2PSessionWrapper.mm:114:                NSString *proxyResponseString = [NSString stringWithFormat:@"%@ failure",mainCommand];
Sezam/Intellivision/IVP2PSessionWrapper.mm:145:        NSLog(@"sent successfully");
Sezam/Intellivision/IVP2PSessionWrapper.mm:147:        NSLog(@"sent failure");
Sezam/Intellivision/IVP2PSessionWrapper.mm:180:    BOOL error  = [[info valueForKey:@"IVError"] boolValue];
Sezam/Intellivision/IVP2PSessionWrapper.mm:182:    NSLog(@"onStreamStarted:: stream status is %d" ,(int)error);
Sezam/Intellivision/IVP2PSessionWrapper.mm:205:    NSString *response = [NSString stringWithFormat:@"%s",data];
Sezam/Intellivision/IVP2PSessionWrapper.mm:206:    NSLog(@"response of websocket command is %@",response);
Sezam/Intellivision/IVP2PSessionWrapper.mm:209:    if ([response containsSubstring:@"success" options:NSCaseInsensitiveSearch]) {
Sezam/Intellivision/IVP2PSessionWrapper.mm:227:        NSLog(@"no main command presend");
Sezam/Intellivision/IVP2PSessionWrapper.mm:299:    @"<request><messages><message><messageId>%lld</messageId><clientId>%@</clientId><meta><![CDATA[%@]]></meta><body><![CDATA[%@]]></body></message></messages></request>";
Sezam/Intellivision/IVP2PSessionWrapper.mm:320:    NSString *upgradeURLString = camInfo[@"firmware"][@"url"][@"text"];
Sezam/Intellivision/IVP2PSessionWrapper.mm:321:    upgradeURLString = (upgradeURLString == nil) ? @"" : upgradeURLString;
Sezam/Intellivision/IVP2PSessionWrapper.mm:324:    upgradeURLString = @"https://s3.amazonaws.com/ivi-firmware/11001-HPC01-14.09.05.7z";
Sezam/Intellivision/IVP2PSessionWrapper.mm:327:    NSLog(@"upgrade string is %@",upgradeURLString);
Sezam/Intellivision/IVP2PSessionWrapper.mm:353:            NSString *skeletonXML = @"<response><hasMessage>true</hasMessage><messages><message><messageId>T1</messageId><clientId>123</clientId><meta><![CDATA[getUpgStatus]]></meta><body><![CDATA[STATUS:%@;DL_PERCENT:%d;UPG_PERCENT:%d;]]></body></message></messages></response>";
Sezam/Intellivision/IVP2PSessionWrapper.mm:362:            NSString *responseStr = [NSString stringWithFormat:@"%@ failure",kMainCommandGetFirmwareUpgradeStatus];
Sezam/Intellivision/IVP2PSessionWrapper.mm:412:    NSLog(@"Closing the orphan %@",self.cameraId);
Sezam/Intellivision/IVP2PSessionWrapper.mm:431:            NSString *proxyResponseString = [NSString stringWithFormat:@"%@ failure",mainCommand];
Sezam/Intellivision/IVP2PSessionWrapper.mm:436:            NSString *proxyResponseString = [NSString stringWithFormat:@"%@ failure",mainCommand];
Sezam/Intellivision/IVP2PSessionWrapper.mm:529:    NSLog(@"rtsp url string is %@",urlStr);
Sezam/Intellivision/Foundation+Extensions.m:17:    NSString *key1key2 = [NSString stringWithFormat:@"%@%@",tKey1,tKey2];
Sezam/Intellivision/Foundation+Extensions.m:38:    NSString *key1key2 = [NSString stringWithFormat:@"%@%@",tKey1,tKey2];
Sezam/Intellivision/Foundation+Extensions.m:66:            if([stringVal isEqualToString:@"<null>"]){
Sezam/Intellivision/Foundation+Extensions.m:72:    //  NSLog(@"%@",self);
Sezam/Intellivision/Foundation+Extensions.m:131:            if([stringVal isEqualToString:@"<null>"]){
Sezam/Intellivision/Foundation+Extensions.m:147:                                                                                           (CFStringRef)@" \"'&",
Sezam/Intellivision/Foundation+Extensions.m:164:    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
Sezam/Intellivision/Foundation+Extensions.m:165:    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
Sezam/Intellivision/Foundation+Extensions.m:187:    hash = [hash stringByReplacingOccurrencesOfString:@" " withString:@""];
Sezam/Intellivision/Foundation+Extensions.m:188:    hash = [hash stringByReplacingOccurrencesOfString:@"<" withString:@""];
Sezam/Intellivision/Foundation+Extensions.m:189:    hash = [hash stringByReplacingOccurrencesOfString:@">" withString:@""];
Sezam/Intellivision/Foundation+Extensions.m:194:    // @"EE, d LLLL yyyy HH:mm:ss Z" == @"Tue, 25 May 2010 12:53:58 +0000"
Sezam/Intellivision/Foundation+Extensions.m:202:        NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
Sezam/Intellivision/Foundation+Extensions.m:224:        NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
Sezam/Intellivision/Foundation+Extensions.m:253:    NSTimeZone *utcTimeZone = [NSTimeZone timeZoneWithAbbreviation:@"UTC"];
Sezam/Intellivision/Foundation+Extensions.m:273:    NSMutableArray *periods = [NSMutableArray arrayWithObjects:@"second", @"minute", @"hour", @"day", @"week", @"month", @"year", @"decade", nil];
Sezam/Intellivision/Foundation+Extensions.m:283:        [periods insertObject:[[periods objectAtIndex:j] stringByAppendingString:@"s"] atIndex:j];
Sezam/Intellivision/Foundation+Extensions.m:285:    return [NSString stringWithFormat:@"%li %@%@", (long)difference, [periods objectAtIndex:j], @" ago"];
Sezam/Intellivision/XMLReader.m:3:NSString *const kXMLReaderTextNodeKey = @"text";
Sezam/Intellivision/DBManager.m:75:   /* if ([rFilename isEqualToString:@"cameras"]) {
Sezam/Intellivision/DBManager.m:101:	//	NSLog(@"file is deleted.");
Sezam/Intellivision/DBManager.m:124:            return [self setRecords:records :kAppName rFilename:@"events"];
Sezam/Intellivision/DBManager.m:126:            return [self setRecords:records :kAppName rFilename:@"customer"];
Sezam/Intellivision/DBManager.m:128:            return [self setRecords:records :kAppName rFilename:@"cameras"];
Sezam/Intellivision/DBManager.m:130:            return [self setRecords:records :kAppName rFilename:@"subcriptions"];
Sezam/Intellivision/DBManager.m:149:            return [self getRecordsFromFolder:kAppName rFilename:@"events"];
Sezam/Intellivision/DBManager.m:152:            return [self getRecordsFromFolder:kAppName rFilename:@"customer"];
Sezam/Intellivision/DBManager.m:155:            return [self getRecordsFromFolder:kAppName rFilename:@"cameras"];
Sezam/Intellivision/DBManager.m:157:            return [self getRecordsFromFolder:kAppName rFilename:@"subcriptions"];
Sezam/Intellivision/DBManager.m:172:            [self deleteRecordFilewithFolderName:kAppName rFilename:@"events"];
Sezam/Intellivision/DBManager.m:175:            [self deleteRecordFilewithFolderName:kAppName rFilename:@"customer"];
Sezam/Intellivision/DBManager.m:178:             [self deleteRecordFilewithFolderName:kAppName rFilename:@"cameras"];
Sezam/en.lproj/Localizable.strings:181:"error: %@" = "error: %@";
Sezam/en.lproj/Localizable.strings:206:"App Version %@" = "App Version %@";
Sezam/en.lproj/Localizable.strings:213:"%@ TO %@" = "%@ TO %@";
Sezam/en.lproj/Localizable.strings:269:"Firmware %@" = "Firmware %@";
Sezam/en.lproj/Localizable.strings:278:"%@ added %@" = "%@ added %@";
Sezam/en.lproj/Localizable.strings:279:"%@ removed %@" = "%@ removed %@";
Sezam/AGAutoUnlockLocationPermissionListener.m:14:NSString * const AGAutoUnlockLocationPermissionUpdatedNotificationKey = @"AGAutoUnlockLocationPermissionUpdatedNotificationKey";
Sezam/AGAutoUnlockLocationPermissionListener.m:69:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Location Needed" message:@"For Auto-Unlock to function, please set location permissions for the August app to “Always” in your Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockLocationPermissionListener.m:71:    [alertController addAction:[UIAlertAction actionWithTitle:@"Open Settings" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockLocationPermissionListener.m:75:    [alertController addAction:[UIAlertAction actionWithTitle:@"Disable Auto-Unlock" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockSetupConfirmLocationController.m:38:    [self.view.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:39:    [self.view.cancelButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:43:    UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_4_location.jpg"]];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:64:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:67:    NSString *title = @"Confirm Location";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:68:    NSString *paragraph1 = @"Drag the map to position the house icon on your home.";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:70:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:78:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupConfirmLocationController.m:93:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:102:    [self.view.actionButton setTitle:@"CONFIRM LOCATION" forState:UIControlStateNormal];
Sezam/AGUserAccessViewController.m:25:#define kAGDiaryCategory @"AGUserAccessViewController"
Sezam/AGUserAccessViewController.m:62:    if ((![[[self user]  firstName] isEqualToString:@""] && [[self user]  firstName])||(![[[self user]  lastName] isEqualToString:@""] && [[self user]  lastName])) {
Sezam/AGUserAccessViewController.m:70:        [[self userImageView] setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGUserAccessViewController.m:79:        if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGUserAccessViewController.m:81:            formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGUserAccessViewController.m:138:            if (![user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGUserAccessViewController.m:202:        AGTableViewCell *profileCell =[tableView dequeueReusableCellWithIdentifier:@"ProfileCell1"];
Sezam/AGUserAccessViewController.m:206:            [profileCell.imageView0 setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGUserAccessViewController.m:215:            if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGUserAccessViewController.m:217:                formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGUserAccessViewController.m:231:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessType"];
Sezam/AGUserAccessViewController.m:239:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleAlways"];
Sezam/AGUserAccessViewController.m:247:            AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleRecurring"];
Sezam/AGUserAccessViewController.m:259:            AGTemporaryAccessTableViewCell *tempCell = (AGTemporaryAccessTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleTemporary"];
Sezam/AGUserAccessViewController.m:269:        AGTableViewCell *pinCell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessPIN"];
Sezam/AGUserAccessViewController.m:337:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGUserAccessViewController.m:353:    UIAlertController *deleteYourselfAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Delete Yourself?",nil) message:NSLocalizedString(@"If you delete yourself, you will have to be invited again before you can use this lock.",nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUserAccessViewController.m:354:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleCancel handler:nil];
Sezam/AGUserAccessViewController.m:356:    UIAlertAction *deleteAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Delete",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUserAccessViewController.m:377:                    AGDiaryInfo(@"RemoveSelfError", [NSString stringWithFormat:@"LockId: %@ Error Description: %@",userDeviceMap.lock.objectId, [error description]]);
Sezam/AGUserAccessViewController.m:378:                    UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error removing yourself." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUserAccessViewController.m:379:                    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGHouseTabBarViewController.m:27:static NSString* kAGDiaryCategory = @"TabBar";
Sezam/AGHouseTabBarViewController.m:50:    if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGHouseTabBarViewController.m:64:        AGDiaryDebug(@"SettingInstaToggle", [toggleState description]);
Sezam/AGHouseTabBarViewController.m:124:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHouseTabBarViewController.m:125:    UIViewController *keychain = [lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGHouseTabBarViewController.m:145:    if ([segue.identifier isEqualToString:@"EmbedTabBarController"]) {
Sezam/AGHouseTabBarViewController.m:172:            AGDiaryDebug(@"NoConnection", @"Due to a security or other error the house or items in the house are all gone. Go back to keychain");
Sezam/AGHouseTabBarViewController.m:173:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound)  || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGHouseTabBarViewController.m:213:                self.isSuperUser = [lock.type isEqualToString:@"superuser"];
Sezam/AGHouseTabBarViewController.m:234:    UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGHouseTabBarViewController.m:236:    self.myPermissionsViewController = (AGUserAccessViewController*)[guestListStoryboard instantiateViewControllerWithIdentifier:@"MyAccessViewController"];
Sezam/AGHouseTabBarViewController.m:240:    self.myPermissionsViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"my_access_unselected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"my_access_selected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:246:    self.myPermissionsViewController.tabBarItem.accessibilityLabel = @"My Permissions";
Sezam/AGHouseTabBarViewController.m:257:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHouseTabBarViewController.m:258:    self.houseSettingsTabViewController = (AGHouseSettingsTabViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"HouseSettingsTabViewController"];
Sezam/AGHouseTabBarViewController.m:260:    if ([self.house.houseType isEqualToString:@"superuser"]) {
Sezam/AGHouseTabBarViewController.m:266:    self.houseSettingsTabViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"house_settings_unselected"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"house_settings_selected"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:268:    self.houseSettingsTabViewController.tabBarItem.accessibilityLabel = @"Settings";
Sezam/AGHouseTabBarViewController.m:274:    UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGHouseTabBarViewController.m:275:    self.guestListViewController = (AGGuestListViewController*)[guestListStoryboard instantiateViewControllerWithIdentifier:@"GuestList"];
Sezam/AGHouseTabBarViewController.m:278:    self.guestListViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"guest_list_unselected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"guest_list_selected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:284:    self.guestListViewController.tabBarItem.accessibilityLabel = @"Guest List";
Sezam/AGHouseTabBarViewController.m:290:    UIStoryboard *activityLogGuestbookStoryboard = [UIStoryboard storyboardWithName:@"ActivityLogGuestbook" bundle:nil];
Sezam/AGHouseTabBarViewController.m:292:    self.activityLogViewController = (AGLogBookViewController*)[activityLogGuestbookStoryboard instantiateViewControllerWithIdentifier:@"LogBook"];
Sezam/AGHouseTabBarViewController.m:294:    self.activityLogViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"activity_feed_unselected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"activity_feed_selected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:300:    self.activityLogViewController.tabBarItem.accessibilityLabel = @"Activity Log";
Sezam/AGHouseTabBarViewController.m:306:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGHouseTabBarViewController.m:307:    self.doorbellViewController = (AGDoorbellViewController *)[storyboard instantiateViewControllerWithIdentifier:@"DoorbellHouseTabViewController"];
Sezam/AGHouseTabBarViewController.m:310:    self.doorbellViewController.title = @"";
Sezam/AGHouseTabBarViewController.m:311:    self.doorbellViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"camera_unselected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"camera_selected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:317:    self.doorbellViewController.tabBarItem.accessibilityLabel = @"Doorbell";
Sezam/AGHouseTabBarViewController.m:324:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGHouseTabBarViewController.m:325:    self.lockPaginationViewController = (AGLockPaginationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockPaginationViewController"];
Sezam/AGHouseTabBarViewController.m:328:    self.lockPaginationViewController.title = @"";
Sezam/AGHouseTabBarViewController.m:331:    self.lockPaginationViewController.tabBarItem= [[UITabBarItem alloc] initWithTitle:nil image:[[UIImage imageNamed:@"lock_unselected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]  selectedImage:[[UIImage imageNamed:@"lock_selected_v2"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal] ];
Sezam/AGHouseTabBarViewController.m:337:    self.lockPaginationViewController.tabBarItem.accessibilityLabel = @"Your Locks";
Sezam/AGHouseTabBarViewController.m:364:    if ([self.house.houseType isEqualToString:@"superuser"] || [self.house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGHouseTabBarViewController.m:410:    NSDictionary *superUserInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"SuperUserForHouse"];
Sezam/AGHouseTabBarViewController.m:422:    NSMutableDictionary *superUserInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"SuperUserForHouse"];
Sezam/AGHouseTabBarViewController.m:431:    [[NSUserDefaults standardUserDefaults] setObject:superUserInfo forKey:@"SuperUserForHouse"];
Sezam/AJNotificationView.m:41:        _titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:20.0];
Sezam/AJNotificationView.m:82:    if ([[[UIDevice currentDevice] systemVersion] compare:@"7.0" options:NSNumericSearch] == NSOrderedAscending) {
Sezam/AJNotificationView.m:200:            [_closeButton setImage:[UIImage imageNamed:@"button_close.png"] forState:UIControlStateNormal];
Sezam/AJNotificationView.m:205:            [_closeButton setImage:[UIImage imageNamed:@"button_close_red.png"] forState:UIControlStateNormal];
Sezam/AGPickLockTypeViewController.m:70:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"LockTypeCell"];
Sezam/AGPickLockTypeViewController.m:73:        cell.imageView0.image = [UIImage imageNamed:@"onboard_callisto"];
Sezam/AGPickLockTypeViewController.m:74:        cell.imageView2.image = [UIImage imageNamed:@"onboard_callisto_bg"];
Sezam/AGPickLockTypeViewController.m:75:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGPickLockTypeViewController.m:76:        cell.label3.text = @"3RD GENERATION";
Sezam/AGPickLockTypeViewController.m:79:        cell.imageView0.image = [UIImage imageNamed:@"onboard_asl"];
Sezam/AGPickLockTypeViewController.m:80:        cell.imageView2.image = [UIImage imageNamed:@"onboard_asl_bg"];
Sezam/AGPickLockTypeViewController.m:81:        cell.label2.text = @"AUGUST SMART LOCK PRO";
Sezam/AGPickLockTypeViewController.m:82:        cell.label3.text = @"3RD GENERATION";
Sezam/AGPickLockTypeViewController.m:85:        cell.imageView0.image = [UIImage imageNamed:@"onboard_asl_hk"];
Sezam/AGPickLockTypeViewController.m:86:        cell.imageView2.image = [UIImage imageNamed:@"onboard_asl_hk_bg"];
Sezam/AGPickLockTypeViewController.m:87:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGPickLockTypeViewController.m:88:        cell.label3.text = @"1ST OR 2ND GENERATION";
Sezam/AGPickLockTypeViewController.m:100:        [self performSegueWithIdentifier:@"pickLockTypeToTwoStepEuropaSetup" sender:nil];
Sezam/AGPickLockTypeViewController.m:103:        [self performSegueWithIdentifier:@"pickLockTypeToTwoStepEuropaSetup" sender:nil];
Sezam/AGPickLockTypeViewController.m:113:    UINavigationController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGPickLockTypeViewController.m:131:    if ([segue.identifier isEqualToString:@"pickLockTypeToTwoStepEuropaSetup"]) {
Sezam/AGListPickerView.m:52:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGListPickerView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGListPickerView.m:69:    [self.closeButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGListPickerView.m:113:    NSString *reuseID = @"AGListPickerViewCellID";
Sezam/AGListPickerView.m:117:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGListPickerView.m:134:    cell.accessoryView = indexPath.row == self.selectedIndex ? [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]] : nil;
Sezam/AGGeoRegionEntranceDetector.m:12:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGGeoRegionEntranceDetector.m:78:    AGDiaryInfo(@"GeofenceEntrance", @"region: %@", region.identifier);
Sezam/AGGeoRegionEntranceDetector.m:120:    return [NSString stringWithFormat:@"AGGeoRegionEntranceDetector-%@", self.region.identifier];
Sezam/AGVideoStreamIntellivisionInitializer.m:82:            streamError = [NSError errorWithDomain:@"AGVideoStream" code:-1301 userInfo:@{@"AGError":@"AGVideoStreamErrorIVServerFetchFailed",
Sezam/AGVideoStreamIntellivisionInitializer.m:83:                                                                                          @"AGErrorInfo":error}];
Sezam/AGKeypadCentralProtocol.m:19:#define kAGDiaryCategory @"KeypadCentralProtocol"
Sezam/AGKeypadCentralProtocol.m:161:    AGDiaryDebug(@"KeypadCentralDebug", @"Message: %@", [NSString stringWithCString:format encoding:NSASCIIStringEncoding]);
Sezam/AGKeypadCentralProtocol.m:166:    AGDiaryDebug(@"SetSetupHandshakeKey", @"Will use handshake key %@", setupKey);
Sezam/AGKeypadCentralProtocol.m:173:        AGDiaryWarn(@"UsingDefaultSetupKey", @"Using default handshake key since none was specified from server");
Sezam/AGKeypadCentralProtocol.m:199:        uint32_t  paramID = (uint32_t)[(NSNumber *)[paramInfo objectForKey:@"index"] integerValue];
Sezam/AGKeypadCentralProtocol.m:200:        uint32_t paramValue = (uint32_t)[(NSNumber *)[paramInfo objectForKey:@"value"] integerValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:76:    NSString *initialString = @"This test will analyze how well video is likely to stream from your Doorbell Cam. \n\n Results shown are for Doorbell Cam only, and may not reflect overall network performance.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:82:    UIAlertController *noConnectAlert = [UIAlertController alertControllerWithTitle:@"Unable to Connect to Doorbell"
Sezam/AGDoorbellVideoSpeedTestViewController.m:83:                                                                            message:@"Make sure your Doorbell Cam is installed correctly and is powered on."
Sezam/AGDoorbellVideoSpeedTestViewController.m:85:    [noConnectAlert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"OK",nil) style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:131:    NSString *downloadString = @"The test can take a few minutes, depending on the speed of your connection.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:133:    self.testingStatusLabel.text = @"TESTING DOWNLOAD SPEED...";
Sezam/AGDoorbellVideoSpeedTestViewController.m:142:    NSDictionary *downloadTestCommand = @{@"status":@"speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellVideoSpeedTestViewController.m:149:    NSString *uploadString = @"The test can take a few minutes, depending on the speed of your connection.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:151:    self.testingStatusLabel.text = @"TESTING UPLOAD SPEED...";
Sezam/AGDoorbellVideoSpeedTestViewController.m:154:    NSDictionary *uploadTestCommand = @{@"status":@"upload_speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellVideoSpeedTestViewController.m:161:    NSString *errorString = @"Test failed, please try again.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:163:    self.testingStatusLabel.text = @"TEST ERROR";
Sezam/AGDoorbellVideoSpeedTestViewController.m:174:    UIAlertController *longTestAlert = [UIAlertController alertControllerWithTitle:@"Test is Taking Longer Than Usual"
Sezam/AGDoorbellVideoSpeedTestViewController.m:175:                                                                            message:@"This could indicate a poor connection, or a momentary issue. Would you like to stop the test, or continue waiting?"
Sezam/AGDoorbellVideoSpeedTestViewController.m:177:    [longTestAlert addAction:[UIAlertAction actionWithTitle:@"Stop Test"
Sezam/AGDoorbellVideoSpeedTestViewController.m:183:    [longTestAlert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Continue",nil) style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:203:    NSString *testSucceededInfoString = @"Your connection speed should be sufficient for streaming Doorbell Cam video.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:204:    NSString *testFailedInfoString = @"A connection speed of 1 Mbps is required to provide enough bandwidth for Doorbell Cam video.\n\nYou are likely to experience performance issues when streaming video.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:206:    NSString *testSucceededStatusString = @"GOOD CONNECTION SPEED";
Sezam/AGDoorbellVideoSpeedTestViewController.m:207:    NSString *testFailedStatusString = @"LOW CONNECTION SPEED";
Sezam/AGDoorbellVideoSpeedTestViewController.m:251:        if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_progress"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:252:            float downloadTotal = [[messageData objectForKey:@"download_total"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:253:            float downloadNow = [[messageData objectForKey:@"download_now"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:260:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_completed"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:261:            self.downloadActualSpeedLabel.text = [NSString stringWithFormat:@"%.2f Mbps", [[messageData objectForKey:@"speed_mbps"] floatValue]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:263:            self.goodDownload = [[messageData objectForKey:@"speed_mbps"] floatValue] < 1 ? NO : YES;
Sezam/AGDoorbellVideoSpeedTestViewController.m:266:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_progress"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:267:            float uploadTotal = [[messageData objectForKey:@"upoad_total"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:268:            float uploadNow = [[messageData objectForKey:@"upload_now"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:275:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_completed"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:277:            self.uploadActualSpeedLabel.text = [NSString stringWithFormat:@"%.2f Mbps", [[messageData objectForKey:@"speed_mbps"] floatValue]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:279:            self.goodUpload = [[messageData objectForKey:@"speed_mbps"] floatValue] < 1 ? NO : YES;
Sezam/AGDoorbellVideoSpeedTestViewController.m:283:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"speed_test_failed"]) {
Sezam/AGGeneralCrossProcessUtility.m:14:NSString * const kAGGeneralCrossProcessAppGroupID = @"group.com.august.general-cross-process";
Sezam/AGGeneralCrossProcessUtility.m:28:    NSURL *lockUsageLogsDirectoryURL = [crossProcessContainerURL URLByAppendingPathComponent:@"LockUsageLogs"];
Sezam/AGGeneralCrossProcessUtility.m:46:    NSString *baseURLString = [[self userDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGGeneralCrossProcessUtility.m:49:        baseURLString = @"https://api-production.august.com";
Sezam/AGGeneralCrossProcessUtility.m:54:    if (![baseURLString containsString:@"https://"] || [baseURL.host hasSuffix:@".august.com"]) {
Sezam/AGGeneralCrossProcessUtility.m:55:        baseURLString = @"https://api-production.august.com";
Sezam/AGGeneralCrossProcessUtility.m:70:    query.service = @"Sezam";
Sezam/AGGeneralCrossProcessUtility.m:71:    query.account = @"AugustAccessToken";
Sezam/AGBasicNetworkClient.m:36:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
Sezam/AGBasicNetworkClient.m:37:    [updatedRequest setValue:@"en-US;q=1" forHTTPHeaderField:@"Accept-Language"];
Sezam/AGBasicNetworkClient.m:38:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Sezam/AGBasicNetworkClient.m:39:    [updatedRequest setValue:[self apiKey] forHTTPHeaderField:@"x-august-api-key"];
Sezam/AGBasicNetworkClient.m:43:            [updatedRequest setValue:accessToken forHTTPHeaderField:@"x-august-access-token"];
Sezam/AGBasicNetworkClient.m:55:    NSString *fullPathURL = [NSString stringWithFormat:@"%@%@", self.baseURLPath, relativeURLPath];
Sezam/AGBasicNetworkClient.m:60:    return @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
Sezam/AGDiaryGoogleAnalytics.m:16:static NSString* kAGDiaryLabelMetric = @"metric";
Sezam/AGDiaryGoogleAnalytics.m:32:    self.categoriesToInclude = [NSSet setWithObjects: @"DoorbellSetupv2", @"RemoteOperation", @"VenusSetup", @"KeypadSetup", @"MarsVideo",
Sezam/AGDiaryGoogleAnalytics.m:33:                                 @"AutoUnlock.DetectInputSuccess", @"AutoUnlock.DetectInputFail", @"AutoUnlock.AuthorizedInitial", @"AutoUnlock.ManualOpenWhileAutoUnlockOn", nil];
Sezam/AGDiaryGoogleAnalytics.m:46:                AGDiaryWarn(nil, @"Can't create category from dictionary key that is not a string. &@", key);
Sezam/AGDiaryGoogleAnalytics.m:53:                AGDiaryWarn(nil, @"Can't create metrics from category '%@' - it does not contain a dictionary", key);
Sezam/AGDiaryGoogleAnalytics.m:63:                        AGDiaryWarn(nil, @"Can't create metric from dictionary key that is not a string. &@", key);
Sezam/AGDiaryGoogleAnalytics.m:68:                    NSString* canonicalName = [NSString stringWithFormat:@"%@.%@", category, metricShortName];
Sezam/AGDiaryGoogleAnalytics.m:72:                        AGDiaryWarn(nil, @"Can't create metric '%@' because it doesn't store a dictionary", metricShortName);
Sezam/AGDiaryGoogleAnalytics.m:91:        AGDiaryWarn(nil, @"Replacing metric '%@' with new metric of the same name.  Any existing measurements will be lost.", metric.name);
Sezam/AGDiaryGoogleAnalytics.m:95:    AGDiaryDebug(nil, @"Adding metric '%@'", metric.name);
Sezam/AGDiaryGoogleAnalytics.m:181:                AGDiaryError([NSString stringWithFormat:@"GoogleUploadFailedForMetric.%@", metric.name],
Sezam/AGDiaryGoogleAnalytics.m:182:                             @"Metric '%@' has been computed, but AGDiaryGoogleAnalytics doesn't know how to upload it.", metric.name);
Sezam/AGDiaryGoogleAnalytics.m:193:     [tracker send:[[GAIDictionaryBuilder createTimingWithCategory:@"performance_timing"
Sezam/AGSmartAlertEditorView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertEditorView.m:64:    [self.closeButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGSmartAlertEditorView.m:71:    self.editorDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertEditorView.m:72:    self.editorDescriptionLabel.text = @"Alert me when:";
Sezam/AGSmartAlertEditorView.m:89:    self.destructiveActionButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertEditorView.m:102:    self.saveButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertEditorView.m:108:    [self.saveButton setTitle:@"SAVE" forState:UIControlStateNormal];
Sezam/AGVideoStreamCallRecord.m:15:#define kAGDiaryCategory @"AGVideoStreamCallRecord"
Sezam/AGVideoStreamCallRecord.m:51:            AGDiaryInfo(@"Timeout", @"Action %@ timed out", self.action);
Sezam/AGVideoStreamCallRecord.m:52:            NSError *timeoutError = [NSError errorWithDomain:@"AGVideoStreamCallRecord" code:-7004 userInfo:@{@"AGError":@"AGVideoStreamErrorPubNubTimeout", NSLocalizedDescriptionKey : @"timeout"}];
Sezam/AGVideoStreamCallRecord.m:101:    AGDiaryDebug(@"Attach", @"Attaching call record to video stream. Stream: %@ is %@", stream, stream.localizedStatus);
Sezam/AGVideoStreamCallRecord.m:110:    NSAssert(self.callRecordState == AGInitiateHangupCallRecordState_Uninitialized, @"API Misuse. A call record cannot be started if it's already been started once.");
Sezam/AGVideoStreamCallRecord.m:111:    NSAssert(self.callType != AGCallTypeUnknown, @"Call record requires a call type!");
Sezam/AGVideoStreamCallRecord.m:149:    NSString *callDurationStr = self.heartbeatStartDate ? [NSString stringWithFormat:@"%fl", [[NSDate date] timeIntervalSinceDate:self.heartbeatStartDate]] : @"0";
Sezam/AGVideoStreamCallRecord.m:150:    self.callStats = @{@"callstats":@{@"approximateCallDuration":callDurationStr}};
Sezam/AGVideoStreamCallRecord.m:163:    NSString *status = messageData[@"status"];
Sezam/AGVideoStreamCallRecord.m:247:    AGDiaryDebug(@"POSTAction", @"-> %@", endpoint);
Sezam/AGVideoStreamCallRecord.m:250:    parameters[@"token"] = self.callID;
Sezam/AGVideoStreamCallRecord.m:259:        AGDiaryDebug(@"POSTAction", @"<- %i", response.statusCode);
Sezam/AGAutoUnlockRecord.m:14:    return @"lockID";
Sezam/AGBridgeSetupProgressViewController.m:26:static NSString *kSignalStregthBad = @"Bad";
Sezam/AGBridgeSetupProgressViewController.m:27:static NSString *kSignalStregthPoor = @"Poor";
Sezam/AGBridgeSetupProgressViewController.m:28:static NSString *kSignalStregthGood = @"Good";
Sezam/AGBridgeSetupProgressViewController.m:29:static NSString *kSignalStregthGreat = @"Great";
Sezam/AGBridgeSetupProgressViewController.m:122:        _label1Image.image = [UIImage imageNamed:@"wifi great text"];
Sezam/AGBridgeSetupProgressViewController.m:125:        _label1Image.image = [UIImage imageNamed:@"wifi good text"];
Sezam/AGBridgeSetupProgressViewController.m:128:        _label1Image.image = [UIImage imageNamed:@"wifi poor text"];
Sezam/AGBridgeSetupProgressViewController.m:131:        _label1Image.image = [UIImage imageNamed:@"wifi bad text"];
Sezam/AGBridgeSetupProgressViewController.m:136:        _label2Image.image = [UIImage imageNamed:@"bluetooth great text"];
Sezam/AGBridgeSetupProgressViewController.m:139:        _label2Image.image = [UIImage imageNamed:@"bluetooth good text"];
Sezam/AGBridgeSetupProgressViewController.m:142:        _label2Image.image = [UIImage imageNamed:@"bluetooth poor text"];
Sezam/AGBridgeSetupProgressViewController.m:145:        _label2Image.image = [UIImage imageNamed:@"bluetooth bad text"];
Sezam/AGBridgeSetupProgressViewController.m:152:    AGDiaryInfo([NSString stringWithFormat:@"ConnectSetupProgressState%d", self.bridgeProgressState], @"Showing UI for state");
Sezam/AGBridgeSetupProgressViewController.m:154:    self.bleSignalStrengthLabel.text  = @"";
Sezam/AGBridgeSetupProgressViewController.m:155:    self.routerSignalStrengthLabel.text = @"";
Sezam/AGBridgeSetupProgressViewController.m:163:    self.bodyLabel.text= @"";
Sezam/AGBridgeSetupProgressViewController.m:172:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:173:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:176:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:177:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 blue circles"];
Sezam/AGBridgeSetupProgressViewController.m:178:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:179:        self.bodyLabel.text = [NSString stringWithFormat:@"August Connect has been added to %@.\n\nNext, let’s test your Bluetooth and Wi-Fi signals.", self.setupNavController.wifiSSID];
Sezam/AGBridgeSetupProgressViewController.m:181:        [self.bigCenterButton setTitle:@"TEST SIGNALS" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:184:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:185:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 red circles"];
Sezam/AGBridgeSetupProgressViewController.m:186:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:188:        self.bodyLabel.text = @"Unfortunately, we failed to get August Connect onto your network.\n\nLet’s see if we can help.";
Sezam/AGBridgeSetupProgressViewController.m:191:        [self.leftButton setTitle:[@"Get Wi-Fi Help" uppercaseString] forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:192:        [self.rightButton setTitle:[@"Continue"uppercaseString] forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:195:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:196:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 white circles 1 arrow"];
Sezam/AGBridgeSetupProgressViewController.m:197:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:198:        self.bodyLabel.text = @"Unplug your Connect, then plug it into an outlet as close to your router as possible.";
Sezam/AGBridgeSetupProgressViewController.m:200:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:203:        _backImage.image = [UIImage imageNamed:@"3 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:204:        _colorImage.image = [UIImage imageNamed:@"3 circles white circles"];
Sezam/AGBridgeSetupProgressViewController.m:205:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:206:        _label1Image.image = [UIImage imageNamed:@"August Smart Lock and Wi-Fi Router text"];
Sezam/AGBridgeSetupProgressViewController.m:207:        _label2Image.image = [UIImage imageNamed:@"August Connect text"];
Sezam/AGBridgeSetupProgressViewController.m:208:        _devicesImage.image = [UIImage imageNamed:@"3 device images"];
Sezam/AGBridgeSetupProgressViewController.m:211:        self.bodyLabel.text = @"Please wait while we test your Bluetooth and Wi-Fi signals.";
Sezam/AGBridgeSetupProgressViewController.m:214:        self.statusLabel.text = @"Analyzing signal strength...";
Sezam/AGBridgeSetupProgressViewController.m:217:        _backImage.image = [UIImage imageNamed:@"3 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:218:        _colorImage.image = [UIImage imageNamed:@"3 circles blue and blue"];
Sezam/AGBridgeSetupProgressViewController.m:219:        _devicesImage.image = [UIImage imageNamed:@"3 device images"];
Sezam/AGBridgeSetupProgressViewController.m:220:        _otherTextLayer.image = [UIImage imageNamed:@"report text"];
Sezam/AGBridgeSetupProgressViewController.m:222:        self.bodyLabel.text = @"This looks like a good location for your Connect! Let’s finish the setup process.";
Sezam/AGBridgeSetupProgressViewController.m:224:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:226:        [self.bigCenterButton setTitle:@"FINALIZE SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:229:        _backImage.image = [UIImage imageNamed:@"3 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:230:        _colorImage.image = [UIImage imageNamed:@"3 circles blue and red copy"];
Sezam/AGBridgeSetupProgressViewController.m:231:        _devicesImage.image = [UIImage imageNamed:@"3 device images"];
Sezam/AGBridgeSetupProgressViewController.m:232:        _otherTextLayer.image = [UIImage imageNamed:@"report text"];
Sezam/AGBridgeSetupProgressViewController.m:234:        self.bodyLabel.text = @"It looks like we need a stronger connection to your Wi-Fi router.\n\nIs it possible to move your router and Connect closer together, or within direct line-of-sight?";
Sezam/AGBridgeSetupProgressViewController.m:237:        [self.leftButton setTitle:@"NO" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:238:        [self.rightButton setTitle:@"YES" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:239:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:242:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:243:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 white circles 2 arrows"];
Sezam/AGBridgeSetupProgressViewController.m:244:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:245:        self.bodyLabel.text = @"Unplug your Connect, then plug it in to the new outlet.\n\nFor best results, plug Connect into a wall opposite from your lock, with no obstructions.";
Sezam/AGBridgeSetupProgressViewController.m:247:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:248:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:252:        _backImage.image = [UIImage imageNamed:@"3 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:253:        _devicesImage.image = [UIImage imageNamed:@"3 device images"];
Sezam/AGBridgeSetupProgressViewController.m:254:        _otherTextLayer.image = [UIImage imageNamed:@"report text"];
Sezam/AGBridgeSetupProgressViewController.m:256:            _colorImage.image = [UIImage imageNamed:@"3 circles red and red"];
Sezam/AGBridgeSetupProgressViewController.m:258:            _colorImage.image = [UIImage imageNamed:@"3 circles red and blue"];
Sezam/AGBridgeSetupProgressViewController.m:260:        self.bodyLabel.text = @"It looks like we need a stronger Bluetooth connection to your August Smart Lock.\r\nAre any other outlets available within 10 feet of your door?";
Sezam/AGBridgeSetupProgressViewController.m:264:        [self.leftButton setTitle:@"NO" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:265:        [self.rightButton setTitle:@"YES" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:266:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:269:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:270:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:271:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 white circles 2 arrows"];
Sezam/AGBridgeSetupProgressViewController.m:272:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:273:        self.bodyLabel.text = @"Unplug your Connect, then plug it in to the new outlet.\n\nFor best results, plug Connect into a wall opposite from your lock, with no obstructions.";
Sezam/AGBridgeSetupProgressViewController.m:274:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:276:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:279:        _backImage.image = [UIImage imageNamed:@"connect and outlet copy"];
Sezam/AGBridgeSetupProgressViewController.m:280:        self.bodyLabel.text = @"Congratulations! August Connect is set up and ready to go.";
Sezam/AGBridgeSetupProgressViewController.m:282:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 3"];
Sezam/AGBridgeSetupProgressViewController.m:283:        [self.bigCenterButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:286:        AGDiaryInfo(@"ConnectSetupFinalCompletion", @"At the final completion");
Sezam/AGBridgeSetupProgressViewController.m:287:        _backImage.image = [UIImage imageNamed:@"remote connect"];
Sezam/AGBridgeSetupProgressViewController.m:288:        self.bodyLabel.text = @"Congratulations! August Connect is set up and ready to go. To access your lock remotely, press the remote connect icon in the top right corner of the lock screen.";
Sezam/AGBridgeSetupProgressViewController.m:290:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 3"];
Sezam/AGBridgeSetupProgressViewController.m:291:        [self.bigCenterButton setTitle:@"OK, GOT IT" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:294:        _backImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupProgressViewController.m:295:        _colorImage.image = [UIImage imageNamed:@"connect and router 2 red circles"];
Sezam/AGBridgeSetupProgressViewController.m:296:        _devicesImage.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupProgressViewController.m:297:        self.bodyLabel.text = @"Unfortunately, your Connect has gone offline. Make sure it’s plugged in within network range.";
Sezam/AGBridgeSetupProgressViewController.m:298:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:301:        [self.leftButton setTitle:@"GET WI-FI HELP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:302:        [self.rightButton setTitle:@"TRY AGAIN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:305:        _backImage.image = [UIImage imageNamed:@"connect and outlet copy"];
Sezam/AGBridgeSetupProgressViewController.m:306:        self.progressSectionImage.image = [UIImage imageNamed:@"Section 2"];
Sezam/AGBridgeSetupProgressViewController.m:307:        self.bodyLabel.text = @"Would you like to try to complete setup? Setup may succeed but you are likely to experience connection issues or lag time when operating your lock remotely.";
Sezam/AGBridgeSetupProgressViewController.m:308:        self.bodyLabel.text = @"Let’s complete the setup process. If you continue to experience connection problems, please contact support@august.com.";
Sezam/AGBridgeSetupProgressViewController.m:311:        [self.leftButton setTitle:@"GET HELP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:312:        [self.rightButton setTitle:@"COMPLETE SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:460:    AGBridgeSetupProgressViewController *progressVC = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupProgressViewController.m:485:    AGDiaryInfo(@"ProgessClickBack", @"User clicked the 'Close' button");
Sezam/AGBridgeSetupProgressViewController.m:507:    int wifiPoor = [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIPoor" withDefault:-77];
Sezam/AGBridgeSetupProgressViewController.m:508:    int wifiGood =  [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIGood" withDefault:-65];
Sezam/AGBridgeSetupProgressViewController.m:509:    int wifiExcellent = [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIExcellent" withDefault:-50];
Sezam/AGBridgeSetupProgressViewController.m:511:    int btPoor = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIPoor" withDefault:-77];
Sezam/AGBridgeSetupProgressViewController.m:512:    int btGood = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIGood" withDefault:-65];
Sezam/AGBridgeSetupProgressViewController.m:513:    int btExcellent = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIExcellent" withDefault:-50];
Sezam/AGBridgeSetupProgressViewController.m:555:        AGDiaryDebug(nil, @"Waiting for the bridge to finish connecting to the server.  App will continue waiting for %.0f seconds", WAIT_DURATION_SECS);
Sezam/AGBridgeSetupProgressViewController.m:560:    AGDiaryInfo(nil, @"Pinging the server to see if the bridge is online");
Sezam/AGBridgeSetupProgressViewController.m:561:    self.statusLabel.text = NSLocalizedString(@"Analyzing Signal Strength…", nil);
Sezam/AGBridgeSetupProgressViewController.m:562:    [self.setupNavController.agLock sendRemoteOperateCommandDetail:@"status" isDoingSetup:YES block:
Sezam/AGBridgeSetupProgressViewController.m:573:             AGDiaryInfo(nil, @"Could not get remote status from ACS Server.  This is expected if the bridge is not yet online. Status code %d.", _lastErrorCode);
Sezam/AGBridgeSetupProgressViewController.m:576:                 AGDiaryDebug(nil, @"Waiting %.0f seconds and then pinging the server again", WAIT_BETWEEN_PINGS_SECS);
Sezam/AGBridgeSetupProgressViewController.m:584:                 AGDiaryWarn(@"FailedRemoteOperate", @"It's been %.0f seconds and the bridge still isn't online.  Setup has failed.", WAIT_DURATION_SECS);
Sezam/AGBridgeSetupProgressViewController.m:601:             NSDictionary *info = [dict objectForKey:@"info"];
Sezam/AGBridgeSetupProgressViewController.m:604:                 int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSetupProgressViewController.m:605:                 int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSetupProgressViewController.m:606:                 int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGBridgeSetupProgressViewController.m:638:    AGDiaryInfo(@"StartRefreshLockData", @"Refreshing the cached lock data");
Sezam/AGBridgeSetupProgressViewController.m:641:            [self showFailedPageWithTitle:NSLocalizedString(@"Refresh Failed", nil)
Sezam/AGBridgeSetupProgressViewController.m:642:                             message:NSLocalizedString(@"August Connect has been configured, but we weren't able to update cached information.  Check your Internet connection then swipe vertically to refresh.", nil)];
Sezam/AGBridgeSetupProgressViewController.m:643:            AGDiaryError(@"FailedRefreshLock", @"Failed to update AGLock information after WAC setup");
Sezam/AGBridgeSetupProgressViewController.m:649:            [self showFailedPageWithTitle:NSLocalizedString(@"Data Inconsistency", nil)
Sezam/AGBridgeSetupProgressViewController.m:650:                             message:NSLocalizedString(@"August Connect has been configured, but an internal error occurred.  You may need to refresh your app or repeat setup. (lock.bridge=nil)", nil)];
Sezam/AGBridgeSetupProgressViewController.m:651:            AGDiaryError(@"FailedRefreshBridgeIsNil", @"AGLock.bridge = nil after refreshing");
Sezam/AGBridgeSetupProgressViewController.m:663:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupProgressViewController.m:674:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupProgressViewController.m:689:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBackButton.m:30:    [self setBackgroundImage:[UIImage imageNamed:@"left_arrow_gray"] forState:UIControlStateNormal];
Sezam/AGResetPasswordViewController.m:41:    if ([self.switchInputButton.titleLabel.text isEqualToString:[NSLocalizedString(@"Sign In With Phone Instead",nil) uppercaseString]])
Sezam/AGResetPasswordViewController.m:43:        [self.switchInputButton setTitle:[NSLocalizedString(@"Sign In With Email Instead",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGResetPasswordViewController.m:44:        [self.instructionsText setText:NSLocalizedString(@"Please enter your mobile number.",nil)];
Sezam/AGResetPasswordViewController.m:46:        [self.switchInputButton setTitle:[NSLocalizedString(@"Sign In With Phone Instead",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGResetPasswordViewController.m:47:        [self.instructionsText setText:NSLocalizedString(@"Please enter your email address.",nil)];
Sezam/AGResetPasswordViewController.m:49:    [self.instructionsText setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGResetPasswordViewController.m:61:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGResetPasswordViewController.m:63:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGResetPasswordViewController.m:111:                [self performSegueWithIdentifier:@"ResetPasswordToPhoneVerify" sender:nil];
Sezam/AGResetPasswordViewController.m:118:            UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil)
Sezam/AGResetPasswordViewController.m:119:                                                                                          message:NSLocalizedString(@"Please check the phone number you have entered and try again.", nil)
Sezam/AGResetPasswordViewController.m:121:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:143:                [self performSegueWithIdentifier:@"ResetPasswordToEmailVerify" sender:nil];
Sezam/AGResetPasswordViewController.m:150:            UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil)
Sezam/AGResetPasswordViewController.m:151:                                                                                          message:NSLocalizedString(@"Please check the email address you have entered and try again.", nil)
Sezam/AGResetPasswordViewController.m:153:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:165:        NSString * errorMsg = NSLocalizedString(@"Please enter your email or phone number.",nil);
Sezam/AGResetPasswordViewController.m:166:        NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGResetPasswordViewController.m:170:        [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:183:        message = NSLocalizedString(@"Sending Email...", nil);
Sezam/AGResetPasswordViewController.m:187:        message = NSLocalizedString(@"Sending SMS...", nil);
Sezam/AGResetPasswordViewController.m:206:                UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil)
Sezam/AGResetPasswordViewController.m:209:                [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:226:        [self.resetPasswordButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGResetPasswordViewController.m:229:        [self.resetPasswordButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGResetPasswordViewController.m:243:    if ([segue.identifier isEqualToString:@"ResetPasswordToEmailVerify"]) {
Sezam/AGResetPasswordViewController.m:249:    else if ([segue.identifier isEqualToString:@"ResetPasswordToPhoneVerify"]) {
Sezam/AGTimedBackgroundTaskManager.m:14:#define kAGDiaryCategory @"AGTimedBackgroundTaskManager"
Sezam/AGTimedBackgroundTaskManager.m:50:    AGDiaryInfo(@"StartingTask", @"id: %@", task.identifier);
Sezam/AGTimedBackgroundTaskManager.m:57:            AGDiaryInfo(@"UIBackgroundTaskExpiredPrematurely", @"");
Sezam/AGTimedBackgroundTaskManager.m:64:        AGDiaryInfo(@"StartingUIBackgroundTask", @"BackgroundTimeRemaining: %f", (float)backgroundTimeRemaining);
Sezam/AGTimedBackgroundTaskManager.m:85:        AGDiaryInfo(@"EndingTask", @"id: %@", storedTask.identifier);
Sezam/AGTimedBackgroundTaskManager.m:98:            AGDiaryInfo(@"EndingUIBackgroundTask", @"");
Sezam/AGNotifyMeViewController.m:35:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Notify Signup %@", self.partner.name] attributes:@{@"Promotion":self.partner.promotion}];
Sezam/AGNotifyMeViewController.m:40:    _promptLabel.text = @"When the beta begins you will receive an email from us which will contain details about participation. Please enter your email:";
Sezam/AGNotifyMeViewController.m:44:    NSString *emailRegExPattern = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
Sezam/AGNotifyMeViewController.m:47:    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegExPattern];
Sezam/AGNotifyMeViewController.m:50:        [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Submitted Email for %@", self.partner.name] attributes:@{}];
Sezam/AGNotifyMeViewController.m:64:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Invalid Email"
Sezam/AGNotifyMeViewController.m:65:                                                                       message:@"Please enter a valid email address."
Sezam/AGNotifyMeViewController.m:67:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGPreferencesContainerView.m:31:static NSString* kAGDiaryCategory = @"UserPreferences";
Sezam/AGPreferencesContainerView.m:64:    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(userRefreshed:) name:@"USER_REFRESHED" object:nil];
Sezam/AGPreferencesContainerView.m:65:    self.versionIcon.image = [UIImage imageNamed:@"menu_appversion_icon"];
Sezam/AGPreferencesContainerView.m:66:    self.versionLabel.text = [NSString stringWithFormat:@"App Version %@", [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]];
Sezam/AGPreferencesContainerView.m:86:    [rowTitlesConstruction addObject:@"My Account"];
Sezam/AGPreferencesContainerView.m:89:    if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGPreferencesContainerView.m:90:        [rowTitlesConstruction addObject:@"Keychain"];
Sezam/AGPreferencesContainerView.m:92:        [rowTitlesConstruction addObject:@"Home"];
Sezam/AGPreferencesContainerView.m:96:    [rowTitlesConstruction addObject:@"August Store"];
Sezam/AGPreferencesContainerView.m:99:    NSString *subscriptionsTitle = [AGActiveMonitoringUtility activeMonitoringAvailable] ? @"Subscriptions" : @"August Video Recording";
Sezam/AGPreferencesContainerView.m:103:    [rowTitlesConstruction addObject:@"August Access"];
Sezam/AGPreferencesContainerView.m:106:    [rowTitlesConstruction addObject:@"Help"];
Sezam/AGPreferencesContainerView.m:109:    [rowTitlesConstruction addObject:@"Set up a New Device"];
Sezam/AGPreferencesContainerView.m:144:        cell =  [tableView dequeueReusableCellWithIdentifier:@"LabelCell"];
Sezam/AGPreferencesContainerView.m:148:        cell =  [tableView dequeueReusableCellWithIdentifier:@"AccountCell"];
Sezam/AGPreferencesContainerView.m:152:            cell.imageView0.image = [UIImage imageNamed:@"avatar_large.png"];
Sezam/AGPreferencesContainerView.m:155:            [cell.imageView0 setImageWithURL:[NSURL URLWithString:[AGUser currentUser].thumbURL] placeholderImage:[UIImage imageNamed:@"avatar_large.png"]];
Sezam/AGPreferencesContainerView.m:165:        cell.imageView0.image = [UIImage imageNamed:@"menu_home_icon"];
Sezam/AGPreferencesContainerView.m:170:        cell.imageView0.image = [UIImage imageNamed:@"shopping_cart"];
Sezam/AGPreferencesContainerView.m:175:        cell.imageView0.image = [UIImage imageNamed:@"menu_august_access_icon"];
Sezam/AGPreferencesContainerView.m:180:        cell.imageView0.image = [UIImage imageNamed:@"menu_help_icon"];
Sezam/AGPreferencesContainerView.m:186:        cell.imageView0.image = [UIImage imageNamed:@"menu_setup_icon"];
Sezam/AGPreferencesContainerView.m:192:        cell.imageView0.image = [AGActiveMonitoringUtility activeMonitoringAvailable] ? [UIImage imageNamed:@"menuAugustActiveMonitoringIcon"] : [UIImage imageNamed:@"menu_august_video_recording_icon"];
Sezam/AGPreferencesContainerView.m:225:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"Profile"];
Sezam/AGPreferencesContainerView.m:234:        if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGPreferencesContainerView.m:243:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AugustAccessNavController"];
Sezam/AGPreferencesContainerView.m:249:        AGAnalyticsDiaryData(AGDiaryLevel_Info, @"UserAction", @"AugustStore", @{@"AugustStoreAccess":[NSNumber numberWithBool:YES]});
Sezam/AGPreferencesContainerView.m:251:        AGStoreWebViewController *vc = (AGStoreWebViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"StoreWebViewController"];
Sezam/AGPreferencesContainerView.m:252:        [vc setUrlToLoad:[NSURL URLWithString:@"https://store.august.com/?utm_source=august_app&utm_medium=iossidemenu"]];
Sezam/AGPreferencesContainerView.m:259:        AGWebViewController *vc = (AGWebViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"WebViewController"];
Sezam/AGPreferencesContainerView.m:261:        [vc setUrlToLoad:[NSURL URLWithString:@"http://www.august.com/support"]];
Sezam/AGPreferencesContainerView.m:269:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AddDeviceViewController"];
Sezam/AGPreferencesContainerView.m:277:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AGSubscriptions" bundle:nil];
Sezam/AGPreferencesContainerView.m:295:            UIViewController *subscriptionNoDbcVC= [storyboard instantiateViewControllerWithIdentifier:@"SubscriptionNoDoorbell"];
Sezam/AGPreferencesContainerView.m:298:            UIViewController *subscriptionVC= [storyboard instantiateViewControllerWithIdentifier:@"SubscriptionList"];
Sezam/AGPreferencesContainerView.m:310:        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"AugustInternal"] == YES)
Sezam/AGPreferencesContainerView.m:313:            [self performSegueWithIdentifier:@"preferencesToDebugMode" sender:nil];
Sezam/AGPreferencesContainerView.m:315:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"August" message:@"This function can't be performed." delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil] ;
Sezam/AGPreferencesContainerView.m:326:    userInfo = @{@"terminationType":[NSNumber numberWithInt:lockOperationTerminationType]};
Sezam/AGPreferencesContainerView.m:339:        [self performSegueWithIdentifier:@"preferencesToDebugMode" sender:nil];
Sezam/AGPreferencesContainerView.m:340:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AugustInternal"];
Sezam/AGPreferencesContainerView.m:347:        UIViewController *secretSupport = [self.storyboard instantiateViewControllerWithIdentifier:@"AGSecretSupportViewController"];
Sezam/AGPreferencesContainerView.m:351:        NSString *stagingServerUrl = @"https://staging.august.com";
Sezam/AGPreferencesContainerView.m:355:        NSString *productionServerUrl = @"https://api-production.august.com";
Sezam/AGPreferencesContainerView.m:401:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"August",nil) message:NSLocalizedString(@"You have been logged out of all your devices.",nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGPreferencesContainerView.m:406:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:error.localizedDescription delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGVerifiedGeoRegionExitDetector.m:16:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGProfileViewController.m:25:#define kAGDiaryCategory @"ProfileVC"
Sezam/AGProfileViewController.m:103:    [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:[AGUser currentUser]];
Sezam/AGProfileViewController.m:138:        self.imageView.image = [UIImage imageNamed:@"avatar_large.png"];
Sezam/AGProfileViewController.m:141:        [self.imageView setImageWithURL:[NSURL URLWithString:[AGUser currentUser].thumbURL] placeholderImage:[UIImage imageNamed:@"avatar_large.png"]];
Sezam/AGProfileViewController.m:163:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGProfileViewController.m:166:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), nil];
Sezam/AGProfileViewController.m:169:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGProfileViewController.m:178:    if ([buttonTitle isEqualToString:NSLocalizedString(@"Cancel",nil)]) {
Sezam/AGProfileViewController.m:181:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Take Photo",nil)]) {
Sezam/AGProfileViewController.m:184:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Select From Gallery",nil)]) {
Sezam/AGProfileViewController.m:265:        if ([[formattedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGProfileViewController.m:267:            formattedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formattedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(6, (formattedNumberNoCode.length-6))]];
Sezam/AGProfileViewController.m:273:            cell = [tableView dequeueReusableCellWithIdentifier:@"NameCell"];
Sezam/AGProfileViewController.m:277:            cell = [tableView dequeueReusableCellWithIdentifier:@"EmailCell"];
Sezam/AGProfileViewController.m:281:            cell = [tableView dequeueReusableCellWithIdentifier:@"MobileNumberCell"];
Sezam/AGProfileViewController.m:285:            cell = [tableView dequeueReusableCellWithIdentifier:@"ChangePasswordCell"];
Sezam/AGProfileViewController.m:288:            cell = [tableView dequeueReusableCellWithIdentifier:@"SignOutCell"];
Sezam/AGProfileViewController.m:322:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:323:        AGCreateAccountViewController *updateNameController = (AGCreateAccountViewController *)[storyboard instantiateViewControllerWithIdentifier:@"UpdateUserName"];
Sezam/AGProfileViewController.m:329:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:330:        AGAddEmailViewController* addEmailController = (AGAddEmailViewController*)[storyboard instantiateViewControllerWithIdentifier:@"AddEmail"];
Sezam/AGProfileViewController.m:338:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:339:        AGAddPhoneViewController* addPhoneController = (AGAddPhoneViewController*)[storyboard instantiateViewControllerWithIdentifier:@"AddPhone"];
Sezam/AGProfileViewController.m:347:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:348:        AGNewPasswordViewController* newPasswordController = (AGNewPasswordViewController*)[storyboard instantiateViewControllerWithIdentifier:@"NewPassword"];
Sezam/AGProfileViewController.m:354:        AGDiaryInfo(@"ClickLogout", @"Logout called from account");
Sezam/AGProfileViewController.m:363:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Sign Out?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGProfileViewController.m:364:    [alertController addAction:[UIAlertAction actionWithTitle:@"Sign Out" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGProfileViewController.m:365:        AGDiaryInfo(@"LogoutConfirmed", @"User confirmed logout");
Sezam/AGProfileViewController.m:380:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGProfileViewController.m:381:        AGDiaryInfo(@"LogoutCancelled", @"User cancelled logout");
Sezam/AGRobustBLEUnlocker.m:16:#define kAGDiaryCategory @"BlueSteelAutoUnlockRobustUnlocker"
Sezam/AGRobustBLEUnlocker.m:18:NSString *const AGRobustBLEUnlockerTimeoutError = @"AGRobustBLEUnlockerTimeoutError";
Sezam/AGRobustBLEUnlocker.m:19:NSString *const AGRobustBLEUnlockerCancelledError = @"AGRobustBLEUnlockerCancelledError";
Sezam/AGRobustBLEUnlocker.m:20:NSString *const AGRobustBLEUnlockerSuddenTaskExpirationError = @"AGRobustBLEUnlockerSuddenTaskExpirationError";
Sezam/AGRobustBLEUnlocker.m:21:NSString *const AGRobustBLEUnlockerRanOutOfBackgroundTimeError = @"AGRobustBLEUnlockerRanOutOfBackgroundTimeError";
Sezam/AGRobustBLEUnlocker.m:59:    AGDiaryInfo(@"BLEUnlockerStarting", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:66:        AGDiaryInfo(@"BackgroundTaskSuddenlyExpired", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:72:        AGDiaryInfo(@"ShuttingDownPreviousUnlockBackgroundTask", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:77:        AGDiaryInfo(@"TimedOut", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:82:        AGDiaryInfo(@"RanOutOfBackgroundTime", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:114:        AGDiaryInfo(@"EndingBackgroundTask", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:133:        AGDiaryInfo(@"RetryingUnlockAttempt", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:151:    AGDiaryInfo(@"Connected",@"lockid:%@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:155:        AGAnalyticsDiary(AGDiaryLevel_Info, @"AutoUnlock", @"AuthorizedInitial", @"");
Sezam/AGRobustBLEUnlocker.m:165:            AGDiaryInfo(@"GetStatusError", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:170:        BOOL lockLocked = [returnedValue isEqual:@"kAugLockState_Locked"];
Sezam/AGRobustBLEUnlocker.m:173:            AGDiaryInfo(@"LockAlreadyUnlocked",@"lockid:%@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:183:                AGDiaryInfo(@"UnlockCommandError", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:186:                AGDiaryInfo(@"Success", @"lock id: %@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:188:                [AGLock putLockUsage:agLock.objectId action:@"unlock" mechanical:@"success" crypto:@"success" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGRobustBLEUnlocker.m:199:    AGDiaryInfo(@"Disconnected",@"lockid:%@", self.lock.objectId);
Sezam/AGRobustBLEUnlocker.m:209:    return [NSError errorWithDomain:@"AGRobustBLEUnlocker" code:-2300 userInfo:@{@"AGError":AGRobustBLEUnlockerTimeoutError}];
Sezam/AGRobustBLEUnlocker.m:213:    return [NSError errorWithDomain:@"AGRobustBLEUnlocker" code:-2301 userInfo:@{@"AGError":AGRobustBLEUnlockerCancelledError}];
Sezam/AGRobustBLEUnlocker.m:217:    return [NSError errorWithDomain:@"AGRobustBLEUnlocker" code:-2302 userInfo:@{@"AGError":AGRobustBLEUnlockerSuddenTaskExpirationError}];
Sezam/AGRobustBLEUnlocker.m:221:    return [NSError errorWithDomain:@"AGRobustBLEUnlocker" code:-2303 userInfo:@{@"AGError":AGRobustBLEUnlockerRanOutOfBackgroundTimeError}];
Sezam/AGHomeKitManageHomesViewController.m:76:    AGTableViewCell *cell = (AGTableViewCell *)[self.homesTableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitManageHomesViewController.m:78:        cell.label.text = @"Add New Home...";
Sezam/AGHomeKitManageHomesViewController.m:79:        cell.label2.text = @"";
Sezam/AGHomeKitManageHomesViewController.m:83:        cell.label2.text = (hmHome.isPrimary)?@"Primary":@"";
Sezam/AGHomeKitManageHomesViewController.m:103:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateHome"];
Sezam/AGHomeKitManageHomesViewController.m:107:        AGHomeKitEditHomeViewController *vc = (AGHomeKitEditHomeViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitEditHome"];
Sezam/AGEventLogger.m:86:        [eventDict setObject:event.date forKey:@"date"];
Sezam/AGEventLogger.m:89:        [eventDict setObject:event.userInfo forKey:@"userInfo"];
Sezam/AGEventLogger.m:92:        [eventDict setObject:event.identifier forKey:@"identifier"];
Sezam/AGEventLogger.m:99:    return [AGLogEvent eventWithDate:dictionary[@"date"] userInfo:dictionary[@"userInfo"] identifier:dictionary[@"identifier"]];
Sezam/AGEventLogger.m:105:    return [NSString stringWithFormat:@"AGEventLogger-%@", self.identifier];
Sezam/AGEventLogger.m:109:    return [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:19:static NSString* kAGDiaryCategory = @"DoorbellLockAssociationPickDevice";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:53:        [self handleUnexpectedError:@"NoLockAndNoDoorbellSelected"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:58:        self.topTitle.text = @"SYNC TO DOORBELL";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:59:        self.topMessage.text = @"Which doorbell would you like to sync this lock to?";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:62:        self.topTitle.text = @"SYNC TO LOCK";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:63:        self.topMessage.text = @"Which lock would you like to sync this doorbell to?";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:80:            beganWithStringForError = @"Began With Lock";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:83:            beganWithStringForError = @"Began With Doorbell";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:86:    NSString *errorStringForLogsAppended = [NSString stringWithFormat:@"%@:%@", beganWithStringForError, errorStringForLogs];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:88:    AGDiaryInfo(@"DoorbellLockAssociationError", errorStringForLogsAppended);
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:90:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Setup Error" message:@"An unexpected setup error occured. Please retry Setup or contact support." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:92:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:106:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:107:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:111:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:224:    AGTableViewCell *houseHeadercell = [self.housesAndDevicesTableView dequeueReusableCellWithIdentifier: @"HouseSectionHeader"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:249:    AGTableViewCell *cell = [self.housesAndDevicesTableView dequeueReusableCellWithIdentifier: @"DevicePickerCell"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:300:        [self showGenericAlertWithTitle:@"Error" message:@"Please select a device to associate"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:305:        [self handleUnexpectedError:@"House Array out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:314:            [self handleUnexpectedError:@"Device Array for Doorbells out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:323:            [self handleUnexpectedError:@"Device Array for Locks out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:332:        [self handleUnexpectedError:@"Lock HouseId is nil"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:336:        [self handleUnexpectedError:@"Doorbell HouseId is nil"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:341:        [self performSegueWithIdentifier:@"AssociationPickerToDevicePermissions" sender:nil];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:343:        UIAlertController *differentHouseAlert = [UIAlertController alertControllerWithTitle:@"Different Houses" message:@"Your Lock and Doorbell are in different August Houses" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:344:        UIAlertAction *useLockHouseAction = [UIAlertAction actionWithTitle:@"Use Lock's House"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:348:                                                                           [self performSegueWithIdentifier:@"AssociationPickerToDevicePermissions" sender:nil];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:351:        UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:380:    if ([segue.identifier isEqualToString:@"AssociationPickerToDevicePermissions"]) {
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:395:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGBridgeSetupFailedViewController.m:40:        self.errorTitle = NSLocalizedString(@"August Connect is having Internet problems. Try the following:", nil);
Sezam/AGBridgeSetupFailedViewController.m:41:        self.errorMessage = NSLocalizedString(@"• Make sure Connect is in range of your Wi-Fi router.\n• Check that your outside Internet connection is working.", nil);
Sezam/AGBridgeSetupFailedViewController.m:45:        self.errorTitle = NSLocalizedString(@"August Connect can't find your Smart Lock. Try the following:", nil);
Sezam/AGBridgeSetupFailedViewController.m:46:        self.errorMessage = NSLocalizedString(@"• Plug Connect into an outlet closer to your lock.\n• Check your lock batteries.", nil);
Sezam/AGBridgeSetupFailedViewController.m:54:        AGDiaryError(@"UnhandledErrorType", @"Unhandled error cases in FailedViewController");
Sezam/AGBridgeSetupFailedViewController.m:69:    AGDiaryInfo(@"FailedClickRetry", @"The user clicked the Retry setup button to retry last setup steps.");
Sezam/AGBridgeSetupFailedViewController.m:70:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupFailedViewController.m:80:    AGDiaryInfo(@"FailedClickQuit", @"The user clicked the 'Quit Setup Button' button");
Sezam/AGAddFirstAndLastNameViewController.m:52:    [self performSegueWithIdentifier:@"AddNamesVCtoInviteEditVC" sender:self];
Sezam/AGAddFirstAndLastNameViewController.m:67:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v2"]];
Sezam/AGAddFirstAndLastNameViewController.m:70:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v2"]];
Sezam/AGAddFirstAndLastNameViewController.m:94:    if ([segue.identifier isEqualToString:@"AddNamesVCtoInviteEditVC"]) {
Sezam/AGTextPinToGuestCell.m:37:    doneToolbar.items = @[[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil],  [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(donePressed:)]];
Sezam/AGKeypadGiveEntryCodesViewController.m:54:    [self.setCodeButton setTitle:NSLocalizedString(@"Ok, got it.", nil) forState:UIControlStateNormal];
Sezam/AGKeypadGiveEntryCodesViewController.m:87:    self.instructionsLabel.text = @"Connecting to Server...";
Sezam/AGKeypadGiveEntryCodesViewController.m:103:                    NSString *pinCode = responseDict[@"pin"];
Sezam/AGKeypadGiveEntryCodesViewController.m:104:                    NSString *slot = responseDict[@"slot"];
Sezam/AGKeypadGiveEntryCodesViewController.m:144:    self.instructionsLabel.text = NSLocalizedString(@"Failed to update some codes.", nil);
Sezam/AGKeypadGiveEntryCodesViewController.m:147:    [self.setCodeButton setTitle:NSLocalizedString(@"Ok", nil) forState:UIControlStateNormal];
Sezam/AGKeypadGiveEntryCodesViewController.m:155:    self.instructionsLabel.text = NSLocalizedString(@"Entry codes have been shared! You’re all done with setup!", nil);
Sezam/AGKeypadGiveEntryCodesViewController.m:159:    [self.setCodeButton setTitle:NSLocalizedString(@"Ok, got it.", nil) forState:UIControlStateNormal];
Sezam/AGKeypadGiveEntryCodesViewController.m:177:    self.checkboxUncheckedImage = [UIImage imageNamed:@"checkbox_unchecked_v2"];
Sezam/AGKeypadGiveEntryCodesViewController.m:178:    self.checkboxCheckedImage = [UIImage imageNamed:@"checkbox_checked_v2"];
Sezam/AGKeypadGiveEntryCodesViewController.m:216:            if ([user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGKeypadGiveEntryCodesViewController.m:237:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Connection Problem" message:@"We had trouble connecting to your lock. Make sure your are in bluetooth range of the lock." delegate:self cancelButtonTitle:@"Skip" otherButtonTitles:@"Try Again", nil];
Sezam/AGKeypadGiveEntryCodesViewController.m:253:        cell = [tableView dequeueReusableCellWithIdentifier:@"UserPinSelectAllCell"];
Sezam/AGKeypadGiveEntryCodesViewController.m:255:        cell.checkMark.image = (self.isSelectAllMode)? (([self.usersToInvite count]>[self.checkedUserIDs count]) ? [UIImage imageNamed:@"checkbox_partial_v2"] : self.checkboxCheckedImage ) : self.checkboxUncheckedImage;
Sezam/AGKeypadGiveEntryCodesViewController.m:259:       cell =  [tableView dequeueReusableCellWithIdentifier:@"UserPinCell"];
Sezam/AGKeypadGiveEntryCodesViewController.m:271:        [cell.userImage setImageWithURL:[NSURL URLWithString:user.thumbURL] placeholderImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGKeypadGiveEntryCodesViewController.m:303:    self.instructionsLabel.text = @"Connecting to Lock";
Sezam/AGKeypadGiveEntryCodesViewController.m:325:        userString = @"selectall";
Sezam/AGKeypadGiveEntryCodesViewController.m:328:    if ([userString isEqualToString:@"selectall"]) {
Sezam/AGKeypadGiveEntryCodesViewController.m:382:    self.instructionsLabel.text = @"Sending Entry Codes...";
Sezam/AGHomeKitPickHouseViewController.m:33:            AGHomeKitCreateHouseViewController *createHouse = (AGHomeKitCreateHouseViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateHouse"];
Sezam/AGHomeKitPickHouseViewController.m:41:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickRoom"];
Sezam/AGHomeKitPickHouseViewController.m:94:    AGTableViewCell *cell = (AGTableViewCell *)[self.housesTableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitPickHouseViewController.m:96:        cell.label.text = @"Add a new HomeKit Home";
Sezam/AGHomeKitPickHouseViewController.m:102:    cell.accessoryView = (indexPath.row != self.selectedRow)? nil : [[UIImageView alloc] initWithImage: [UIImage imageNamed:@"check_v2"]];
Sezam/AGHomeKitEnableViewController.m:28:#define kAGDiaryCategory @"HomeEnable"
Sezam/AGHomeKitEnableViewController.m:85:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitEnableViewController.m:88:        self.instructLabel.text = @"Connecting To Lock...";
Sezam/AGHomeKitEnableViewController.m:94:                AGDiaryInfo(@"SharedDataLockNotFound",@"viewDidLoad");
Sezam/AGHomeKitEnableViewController.m:97:            AGDiaryDebug(@"DesiredLock", @"Will Search For Lock %@ from serials %@", self.locksToLookFor, serialNumber);
Sezam/AGHomeKitEnableViewController.m:100:        AGDiaryDebug(@"DesiredLockUnknown", @"Will search for any homekit lock, as user is not logged in.");
Sezam/AGHomeKitEnableViewController.m:117:        self.instructLabel.text = @"Make sure you’re standing near your Smart Lock and you’ve removed the battery tab. Once HomeKit is enabled you’ll need to create an August account and set up your lock.";
Sezam/AGHomeKitEnableViewController.m:126:    AGDiaryDebug(@"TurnOnHomeKit", @"GettingHK Data");
Sezam/AGHomeKitEnableViewController.m:130:            AGDiaryDebug(@"GettingHKStateOnLock", @"GettingHKStateOnLock");
Sezam/AGHomeKitEnableViewController.m:135:                    AGDiaryDebug(@"GotHKState", @"Got homekit state on lock %@",returnedValue);
Sezam/AGHomeKitEnableViewController.m:153:                                        AGDiaryDebug(@"HKDataTimeout", @"New HomeKit data not coming in. Look at what we have,");
Sezam/AGHomeKitEnableViewController.m:156:                                        AGDiaryDebug(@"HKDataTimeout", @"Timer fired but we already have processed HomeKit data.");
Sezam/AGHomeKitEnableViewController.m:164:                                AGDiaryDebug(@"LockAlreadyPairedInLockSetupLockSetup", @"");
Sezam/AGHomeKitEnableViewController.m:165:                                AGDiaryDebug(@"BLEUpdate", @"Setting inactivity timer on lock to 10 seconds");
Sezam/AGHomeKitEnableViewController.m:169:                                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Authorizing lock For HomeKit..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGHomeKitEnableViewController.m:182:                                item1.label = @"BLETimeout10";
Sezam/AGHomeKitEnableViewController.m:194:                    [self failWithError:@"Unable to connect to the lock. Please try again."];
Sezam/AGHomeKitEnableViewController.m:198:            AGDiaryDebug(@"Connected", @"Queuing command to get param state");
Sezam/AGHomeKitEnableViewController.m:202:            AGDiaryDebug(@"NotConnected", @"Error connecting");
Sezam/AGHomeKitEnableViewController.m:203:            [self failWithError:@"Unable to connect to the lock"];
Sezam/AGHomeKitEnableViewController.m:218:    AGDiaryDebug(@"DidGetHomeKitData", @"Got updated homeKit data");
Sezam/AGHomeKitEnableViewController.m:221:        AGDiaryDebug(@"ExitingHomeKitData", @"We don't care about HomeKit lock while not signed into the app.");
Sezam/AGHomeKitEnableViewController.m:227:    AGDiaryDebug(@"SearchingHomes", @"%d homes", [[[self navController] allHomes] count]);
Sezam/AGHomeKitEnableViewController.m:229:        AGDiaryDebug(@"SearchingHome", @"%@", home.name);
Sezam/AGHomeKitEnableViewController.m:233:            AGDiaryDebug(@"FindingAccessoryInHouse", @"%@", acc.name);
Sezam/AGHomeKitEnableViewController.m:237:                    AGDiaryDebug(@"PotentialLockToDisplay", @"acc %@ svc %@", acc.name, service.name);
Sezam/AGHomeKitEnableViewController.m:240:                            AGDiaryDebug(@"MatchedServiceName", @"%@", service.name);
Sezam/AGHomeKitEnableViewController.m:256:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitEnableViewController.m:262:                    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitEnableViewController.m:291:                                if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitEnableViewController.m:311:            AGDiaryDebug(@"NoHomeKitLock", @"Launched from Lock setup but lock has not been added to homekit.");
Sezam/AGHomeKitEnableViewController.m:321:                [self.enableButton setTitle:@"Disable HomeKit" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:324:                self.enableButton.accessibilityLabel = @"Disable HomeKit";
Sezam/AGHomeKitEnableViewController.m:340:        self.headerDark.text = @"HOME SETTINGS";
Sezam/AGHomeKitEnableViewController.m:351:        AGDiaryDebug(@"HomeKitFlowFoundLock", @"Will do auth blob for HomeKit flow from sign up screen");
Sezam/AGHomeKitEnableViewController.m:353:            AGDiaryDebug(@"HomeKitFlowFoundLock", @"Doing auth blob for HomeKit flow from sign up screen");
Sezam/AGHomeKitEnableViewController.m:360:    AGDiaryDebug(@"LockAlreadyAdded", @"LockExists on HomeKit");
Sezam/AGHomeKitEnableViewController.m:375:    self.instructLabel.text = [NSString stringWithFormat:@"HomeKit has now been enabled for %@.\n\nYou can now use Siri and third-party HomeKit apps to operate your lock.", [self navController].agLock.name];
Sezam/AGHomeKitEnableViewController.m:376:    [self.enableButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:382:        AGDiaryDebug(@"SettingAuthBlob", @"We are now resetting auth blob for this user, just in case it hasn't been set up before");
Sezam/AGHomeKitEnableViewController.m:385:                AGDiaryDebug(@"GotAuthBlob", @"Got stored auth blob");
Sezam/AGHomeKitEnableViewController.m:387:                NSString *homeKitKey = [result objectForKey:@"key"];
Sezam/AGHomeKitEnableViewController.m:388:                NSNumber *homeKitKeySlot = [result objectForKey:@"slot"];
Sezam/AGHomeKitEnableViewController.m:390:                NSString *combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitEnableViewController.m:391:                AGDiaryDebug(@"AuthBlobStringToPutOnLock", combinedString);
Sezam/AGHomeKitEnableViewController.m:399:                                    AGDiaryDebug(@"RemovingHomeKit", @"removing accessory %@", [[weakSelf navController].lockAccessoryToDelete description]);
Sezam/AGHomeKitEnableViewController.m:400:                                    [weakSelf failWithError:@"Failed to authorize HomeKit. Please go to Home Settings and try again later."];
Sezam/AGHomeKitEnableViewController.m:403:                            AGDiaryDebug(@"ErrorSettingAuthBlob", errorMessage);
Sezam/AGHomeKitEnableViewController.m:412:                AGDiaryDebug(@"FailedToGetAuthBlob", @"We don't have auth blob stored on mobile client yet");
Sezam/AGHomeKitEnableViewController.m:414:                    [self failWithError:@"Failed to authorize HomeKit. Please go to Home Settings and try again later."];
Sezam/AGHomeKitEnableViewController.m:423:    AGDiaryDebug(@"failWithError", @"error: %@", errorString);
Sezam/AGHomeKitEnableViewController.m:435:    [self.enableButton setTitle:@"OK" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:444:    AGDiaryDebug(@"HKState", @"state set to %d", (int)setupState);
Sezam/AGHomeKitEnableViewController.m:448:    AGDiaryDebug(@"StartSearchForLocks", @"Getting home data and finding accessories");
Sezam/AGHomeKitEnableViewController.m:478:            AGHomeKitSelectLockViewController *selectVC = (AGHomeKitSelectLockViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitSelectLock"];
Sezam/AGHomeKitEnableViewController.m:489:        AGDiaryDebug(@"TimerTimeout", @"Picking accessory %@", [self navController].lockAccessory.name);
Sezam/AGHomeKitEnableViewController.m:510:        self.instructLabel.text = @"We were unable to find your lock through HomeKit.";
Sezam/AGHomeKitEnableViewController.m:525:                    item1.label = @"ResetTimeout";
Sezam/AGHomeKitEnableViewController.m:552:    self.closeButton.imageView.image = [UIImage imageNamed:@"close_white_v2"];
Sezam/AGHomeKitEnableViewController.m:557:    self.instructLabel.text = @"Authorizing HomeKit for this lock.";
Sezam/AGHomeKitEnableViewController.m:560:    [self.enableButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:573:    self.closeButton.imageView.image = [UIImage imageNamed:@"close_white_v2"];
Sezam/AGHomeKitEnableViewController.m:578:    [self.enableButton setTitle:@"ENABLE HOMEKIT" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:580:    self.instructLabel.text = @"Enabling HomeKit allows you to use Siri and the iOS Home app to operate your August Smart Lock.";
Sezam/AGHomeKitEnableViewController.m:583:    self.enableButton.accessibilityLabel = @"ENABLE HOMEKIT";
Sezam/AGHomeKitEnableViewController.m:599:    self.closeButton.imageView.image = [UIImage imageNamed:@"Close_Button_v3"];
Sezam/AGHomeKitEnableViewController.m:602:    self.instructLabel.text = @"";
Sezam/AGHomeKitEnableViewController.m:604:    [self.enableButton setTitle:@"Disconnect" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:608:    self.enableButton.accessibilityLabel = @"Disconnect";
Sezam/AGHomeKitEnableViewController.m:623:                AGDiaryDebug(@"AutuBlobResent", @"Resending Auth blob to lock just to be safe");
Sezam/AGHomeKitEnableViewController.m:634:                    if ([(NSString *)[dict objectForKey:@"key"] isEqualToString:(NSString *)[homeKitKey objectForKey:@"key"]]) {
Sezam/AGHomeKitEnableViewController.m:644:                AGDiaryDebug(@"AutuBlobNotResent", @"No loaded auth blob to resend to lock");
Sezam/AGHomeKitEnableViewController.m:656:    self.instructLabel.text = @"Remove the faceplate from the front of your August Smart lock and locate the 8-digit accessory code.";
Sezam/AGHomeKitEnableViewController.m:672:                item1.label = @"EnableHomeKit";
Sezam/AGHomeKitEnableViewController.m:682:                        AGDiaryDebug(@"HomeKitResetComplete", @"HomeKitReset");
Sezam/AGHomeKitEnableViewController.m:686:                    homeKitReset.label = @"ResetHomeKit";
Sezam/AGHomeKitEnableViewController.m:700:                        AGDiaryDebug(@"DoDelay", @"5 second delay to allow completion of sending offline keys");
Sezam/AGHomeKitEnableViewController.m:705:                                AGDiaryDebug(@"CheckForRemovalNeeded", @"Checking to see if there is an old lock is removed prior to addding.");
Sezam/AGHomeKitEnableViewController.m:707:                                    AGDiaryDebug(@"RemovingOldAccessory", @"The lock is on homekit already.");
Sezam/AGHomeKitEnableViewController.m:713:                                        AGDiaryDebug(@"NoRemoval", @"No old accessory to remove prior to adding ");
Sezam/AGHomeKitEnableViewController.m:715:                                        AGHomeKitCompleteViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitEnableViewController.m:725:                        [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:730:                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:751:        AGDiaryDebug(@"StartingHKEnable", @"Will conenct to lock to set the setup commands");
Sezam/AGHomeKitEnableViewController.m:768:            self.homeKitOnLabel.text = @"Disconnecting from HomeKit...";
Sezam/AGHomeKitEnableViewController.m:771:                AGDiaryDebug(@"RemovingHomeKit", @"removing accessory %@", [[self navController].lockAccessoryToDelete description]);
Sezam/AGHomeKitEnableViewController.m:773:                    AGDiaryDebug(@"RemovingHomeKit", @"removed accessory %@ %@", [[self navController].lockAccessoryToDelete description], [error description]);
Sezam/AGHomeKitEnableViewController.m:775:                        AGDiaryDebug(@"RemovingHomeKitPart2", @"Finishing HomeKit reset after pairing end");
Sezam/AGHomeKitEnableViewController.m:789:    AGDiaryDebug(@"DismissWithHomeKitStillOn", @"Auth blob should be set");
Sezam/AGHomeKitEnableViewController.m:796:        AGDiaryDebug(@"BLEUpdate", @"Restoring inactivity timer on lock to normal setting");
Sezam/AGHomeKitEnableViewController.m:799:        item1.label = @"BLETimeout10";
Sezam/AGHomeKitEnableViewController.m:815:                homeKitReset.label = @"TurnOffHomeKit";
Sezam/AGHomeKitEnableViewController.m:819:                inactivityTimeoutSet.label = @"30SecTimeout";
Sezam/AGHomeKitEnableViewController.m:828:                    AGDiaryDebug(@"HKOff", @"Finished turning off homekit. is success %d", isSuccess);
Sezam/AGHomeKitEnableViewController.m:832:                    AGDiaryDebug(@"TurningOffHKParam", @"Turning off homekit param on lock");
Sezam/AGHomeKitEnableViewController.m:834:                    disableHomeKitAdvt.label = @"DisableHomeKit";
Sezam/AGHomeKitEnableViewController.m:847:                                            UIAlertController *alertViewController = [UIAlertController alertControllerWithTitle:@"Removal Completed" message:@"Your lock has been removed from HomeKit." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGHomeKitEnableViewController.m:848:                                            [alertViewController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGHomeKitEnableViewController.m:855:                                        AGDiaryDebug(@"turnOffHKParamAndDismissFailed", @"perform BLE Command disableHomeKitAdvt failed!");
Sezam/AGHomeKitEnableViewController.m:856:                                        [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:861:                                AGDiaryDebug(@"turnOffHKParamAndDismissFailed", @"connectToLockAndPerform failed!");
Sezam/AGHomeKitEnableViewController.m:862:                                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:870:                AGDiaryDebug(@"turnOffHKParamAndDismissFailed", @"Can't connect to the lock!");
Sezam/AGHomeKitEnableViewController.m:871:                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:888:    self.progressText.text = @"Closing HomeKit";
Sezam/AGHomeKitEnableViewController.m:926:    AGDiaryDebug(@"AcessoryName", @"Found %@", homeKitDeviceName);
Sezam/AGHomeKitEnableViewController.m:956:    AGDiaryDebug(@"GotNewAccessory", @"%@", accessory);
Sezam/AGHomeKitEnableViewController.m:962:        UIViewController *setLockName = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitLockName"];
Sezam/AGHomeKitEnableViewController.m:976:        AGSiriNameViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"SetSiriName"];
Sezam/AGHomeKitEnableViewController.m:988:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageHomes"];
Sezam/AGHomeKitEnableViewController.m:992:        AGHomeKitChangeRoomViewController *vc = (AGHomeKitChangeRoomViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitChangeRoom"];
Sezam/AGHomeKitEnableViewController.m:1027:        cell = (AGTableViewCell *)[self.tableView dequeueReusableCellWithIdentifier:@"HKHouseCellNoChevron"];
Sezam/AGHomeKitEnableViewController.m:1030:        cell = (AGTableViewCell *)[self.tableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitEnableViewController.m:1046:                cell.label.text = @"Siri Name";
Sezam/AGHomeKitEnableViewController.m:1051:                cell.label.text = @"Home";
Sezam/AGHomeKitEnableViewController.m:1059:                cell.label2.text = @"";
Sezam/AGHomeKitEnableViewController.m:1060:                cell.label.text = @"Find this lock (light will flash)";
Sezam/AGHomeKitEnableViewController.m:1069:                    name = @"Not Assigned";
Sezam/AGHomeKitEnableViewController.m:1071:                cell.label2.text =  (name!=nil)?name:@"None";
Sezam/AGHomeKitEnableViewController.m:1072:                cell.label.text = @"Room";
Sezam/AGHomeKitEnableViewController.m:1080:                cell.label.text = @"Manage Homes";
Sezam/AGHomeKitEnableViewController.m:1081:                cell.label2.text = @"";
Sezam/AGHomeKitEnableViewController.m:1084:                cell.label.text = @"";
Sezam/AGHomeKitEnableViewController.m:1085:                cell.label2.text = @"";
Sezam/AGRTCFactory.m:72:    NSArray *stunServersUrlStrings = @[@"stun:dev-turn.august.com:3478", @"stun:dev-turn.august.com:3479"];
Sezam/AGRTCFactory.m:78:    NSArray *turnServersUrlStrings = @[@"turn:dev-turn.august.com:3478", @"turn:dev-turn.august.com:3479"];
Sezam/AGRTCFactory.m:79:    NSArray * turnAccounts = [SAMKeychain accountsForService:@"turn"];
Sezam/AGRTCFactory.m:84:    NSString * password = [SAMKeychain passwordForService:@"turn" account:username];
Sezam/AGHomeKitCreateHouseViewController.m:12:static NSString* kAGDiaryCategory = @"AGHomeKit";
Sezam/AGHomeKitCreateHouseViewController.m:29:        self.instructionLabel.text = @"Choose a name for your new HomeKit Home.";
Sezam/AGHomeKitCreateHouseViewController.m:65:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat: NSLocalizedString(@"Creating HomeKit Home %@", nil), houseNameText] message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGHomeKitCreateHouseViewController.m:70:                AGDiaryInfo(@"CreateHomeError", [error description]);
Sezam/AGHomeKitCreateHouseViewController.m:72:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Home. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitCreateHouseViewController.m:75:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Home." inViewController:self];
Sezam/AGHomeKitCreateHouseViewController.m:78:                AGDiaryInfo(@"CreateHomeSuccess", @"Created HK home");
Sezam/AGHomeKitCreateHouseViewController.m:80:                UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickRoom"];
Sezam/AGDebugModeSelectServer.m:26:    self.availableServers = @[@"production", @"staging", @"api-dev-aws", @"dev-jonathan", @"dev-justin", @"dev-dan", @"dev-ingo", @"dev-phil", @"dev-ipalibo", @"dev-etienne", @"dev-sean", @"Other"];
Sezam/AGDebugModeSelectServer.m:54:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ServerCell"];
Sezam/AGDebugModeSelectServer.m:58:    NSString *serverUrl = [NSString stringWithFormat:@"https://%@.august.com", serverName.lowercaseString];
Sezam/AGDebugModeSelectServer.m:87:    if ([self.selectedServer isEqualToString:@"Other"]) {
Sezam/AGDebugModeSelectServer.m:88:        UIAlertView *customAlertView = [[UIAlertView alloc] initWithTitle:@"Custom server" message:@"Server full address (https://www.example.com)" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Custom", nil] ;
Sezam/AGDebugModeSelectServer.m:92:        UIAlertView *changeServerConfirmation = [[UIAlertView alloc] initWithTitle:@"Confirm Server" message:[NSString stringWithFormat:@"Switching server to %@", self.selectedServer] delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Confirm", nil];
Sezam/AGDebugModeSelectServer.m:101:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"The URL you specified is invalid" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGDebugModeSelectServer.m:105:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"DebugAddLock"];
Sezam/AGDebugModeSelectServer.m:122:    if ([buttonTitle isEqualToString:@"Cancel"]) {
Sezam/AGDebugModeSelectServer.m:126:    if ([buttonTitle isEqualToString:@"Custom"]) {
Sezam/AGDebugModeSelectServer.m:133:    if ([buttonTitle isEqualToString:@"Confirm"]) {
Sezam/AGDebugModeSelectServer.m:134:        NSString *newServerUrl = [NSString stringWithFormat:@"https://%@.august.com", self.selectedServer.lowercaseString];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:52:            NSDictionary *info = [response objectForKey:@"info"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:54:                self.bleSignalLevel =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:85:        self.bleIndicatorImageView.image = [UIImage imageNamed:@"bleSignalPoor"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:86:        self.bleTitleLabel.text = @"NO BLUETOOTH SIGNAL";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:87:        self.bleMessageLabel.text = @"Your Doorbell Cam is not reporting a bluetooth signal to to your August Smart Lock. Please check that your lock is powered on and in range.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:88:        self.bleSignalLevelText = @"No Signal";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:92:            self.bleIndicatorImageView.image = [UIImage imageNamed:@"bleSignalGood"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:93:            self.bleTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:94:            self.bleMessageLabel.text = @"Your Doorbell Cam is reporting a good bluetooth conection to your August Smart Lock.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:95:            self.bleSignalLevelText = [NSString stringWithFormat:@"Great (%i)", self.bleSignalLevel];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:98:            self.bleIndicatorImageView.image = [UIImage imageNamed:@"bleSignalPoor"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:99:            self.bleTitleLabel.text = @"POOR BLUETOOTH SIGNAL";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:100:            self.bleMessageLabel.text = @"Your Doorbell Cam is reporting a very poor bluetooth conection to your August Smart Lock. Remote lock operations may be slow or not work properly.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:101:            self.bleSignalLevelText = [NSString stringWithFormat:@"Poor (%i)", self.bleSignalLevel];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:136:        cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:137:        cell.label2.text = @"Lock Bluetooth Signal";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:141:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MessageRow"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:144:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGVideoStreamConstants.h:12:#define kServerXMLURLProduction @"http://v2servers.video-cloud.net/sv2servers.xml"
Sezam/AGVideoStreamConstants.h:15:#define kServerXMLURLStaging @"http://servers.video-cloud.net/v2servers.xml"
Sezam/AGVideoStreamConstants.h:19:static NSString * const AGVideoStreamProcessWillBecomeInactiveNotification = @"AGVideoStreamProcessWillBecomeInactiveNotification";
Sezam/AGVideoStreamConstants.h:20:static NSString * const AGVideoStreamProcessDidBecomeActiveNotification = @"AGVideoStreamProcessDidBecomeActiveNotification";
Sezam/AGInviteEditDoorbellViewController.m:17:static NSString* kAGDiaryCategory = @"InviteEditDoorbell";
Sezam/AGInviteEditDoorbellViewController.m:29:            self.userStatus.text = @"No Access";
Sezam/AGInviteEditDoorbellViewController.m:35:            self.userStatus.text = @"Owner";
Sezam/AGInviteEditDoorbellViewController.m:41:            self.userStatus.text = @"No Access";
Sezam/AGInviteEditDoorbellViewController.m:66:            [self.userPhotoImageView setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGInviteEditDoorbellViewController.m:73:        [[self userPhotoImageView] setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGInviteEditDoorbellViewController.m:80:        if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteEditDoorbellViewController.m:82:            formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteEditDoorbellViewController.m:123:           AGDiaryInfo(@"DoorbellAddUser", @"Success");
Sezam/AGInviteEditDoorbellViewController.m:124:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Success" message:@"User Added to Doorbell" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:132:            AGDiaryError(@"DoorbellAddUser", @"Failure");
Sezam/AGInviteEditDoorbellViewController.m:133:            UIAlertView *errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to Add this user" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:145:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Warning" message:@"You are the last owner of this doorbell and can not be removed. Please Factory reset your doorbell to remove all users." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:159:            AGDiaryInfo(@"DoorbellRemoveUser", @"Success");
Sezam/AGInviteEditDoorbellViewController.m:160:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Success" message:@"User Removed from Doorbell" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:168:            AGDiaryError(@"DoorbellAddUser", @"Failure");
Sezam/AGInviteEditDoorbellViewController.m:169:            UIAlertView *errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to remove this user" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGGuestListViewController.m:26:static NSString* kAGDiaryCategory = @"GuestList";
Sezam/AGGuestListViewController.m:126:            if ([AGUtility checkTriggerTooltipForKey:@"InviteUserTip" initialDefaultTriggerOn:false]) {
Sezam/AGGuestListViewController.m:128:                    [self showTooltipForString:@"Tap here to send someone an entry code." anchorItem:cell.contentView autoDismissDelay:5.0];
Sezam/AGGuestListViewController.m:156:    if ([self.addedRule.user.type.lowercaseString isEqualToString:@"user"]) {
Sezam/AGGuestListViewController.m:184:    self.poundBlueImage = [UIImage imageNamed:@"pin_icon_v2"];
Sezam/AGGuestListViewController.m:185:    self.poundGrayImage = [UIImage imageNamed:@"pin_icon_inactive_v2"];
Sezam/AGGuestListViewController.m:219:                    if ([onlyUser.type isEqualToString:@"superuser"] || [onlyUser.type isEqualToString:@"manager"]) {
Sezam/AGGuestListViewController.m:223:                            lock.type = @"user"; // This is a bit of a hack until server starts sending us our own user type
Sezam/AGGuestListViewController.m:281:    AGDiaryInfo(@"ClickBack", @"GuestList - User clicked the 'Go to Main Lock Page' button");
Sezam/AGGuestListViewController.m:391:                if (![ruleID isEqualToString:@"always"]) {
Sezam/AGGuestListViewController.m:464:                    if ([user.type isEqualToString:@"superuser"]) {
Sezam/AGGuestListViewController.m:465:                        houseUser.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:486:                    houseUser.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:490:                user.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:495:    [self.mergedLockUsersInHouse sortUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"firstName" ascending:YES]]];
Sezam/AGGuestListViewController.m:514:        if ([houseUser.highestHouseLevelType isEqualToString:@"superuser"]) {
Sezam/AGGuestListViewController.m:598:        AGDiaryWarn(@"GuestListDelegateNotSet", @"Guest List refreshed without delegate set");
Sezam/AGGuestListViewController.m:649:        AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"INVITE_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:650:                                  //dequeueReusableCellWithReuseIdentifier:@"INVITE_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:653:        cell.imageView0.image = [UIImage imageNamed:@"invite_btn_v2"];
Sezam/AGGuestListViewController.m:654:        cell.label.text = NSLocalizedString(@"Invite",nil);
Sezam/AGGuestListViewController.m:655:        cell.label2.text = @"";
Sezam/AGGuestListViewController.m:667:            cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL_ONE_LINE" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:669:            cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:676:            cell.label2.text = @"";
Sezam/AGGuestListViewController.m:682:                    cell.label2.text = @"ALWAYS";
Sezam/AGGuestListViewController.m:692:                cell.label2.text = @"";
Sezam/AGGuestListViewController.m:711:        if ([cell.label2.text isEqualToString:@""]) {
Sezam/AGGuestListViewController.m:712:            cell.accessibilityLabel = [NSString stringWithFormat:@"User %@ with ALWAYS access", cell.label.text];
Sezam/AGGuestListViewController.m:714:            cell.accessibilityLabel = [NSString stringWithFormat:@"User %@ with %@ access", cell.label.text, cell.label2.text];
Sezam/AGGuestListViewController.m:718:            cell.imageView0.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGGuestListViewController.m:721:            [cell.imageView0 setImageWithURL:[NSURL URLWithString:rule.user.thumbURL] placeholderImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGGuestListViewController.m:733:            AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:736:            cell.imageView0.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGGuestListViewController.m:739:            cell.label.text = [NSString stringWithFormat:@"%@ %@", pinUser.firstName, pinUser.lastName];
Sezam/AGGuestListViewController.m:747:            AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:759:            cell.imageView0.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGGuestListViewController.m:762:            cell.label.text = [NSString stringWithFormat:@"%@", rule.user.firstName];
Sezam/AGGuestListViewController.m:766:                cell.label2.text = @"";
Sezam/AGGuestListViewController.m:773:            if ([cell.label2.text isEqualToString:@""]) {
Sezam/AGGuestListViewController.m:774:                cell.accessibilityLabel = [NSString stringWithFormat:@"Pending invite for %@", cell.label.text];
Sezam/AGGuestListViewController.m:776:                cell.accessibilityLabel = [NSString stringWithFormat:@"Pending invite for %@ to lock %@", cell.label.text, cell.label2.text];
Sezam/AGGuestListViewController.m:791:            accssTimeStr = @"always";
Sezam/AGGuestListViewController.m:802:            NSString *recurTime = [NSString stringWithFormat:@"%@ - %@", starTimeStr, endTimeStr];
Sezam/AGGuestListViewController.m:804:            accssTimeStr = [NSString stringWithFormat:@"%@ %@", weekdaysStr, recurTime];
Sezam/AGGuestListViewController.m:812:            accssTimeStr = [NSString stringWithFormat:@"%@ %@", startTimeStr, endTimeStr];
Sezam/AGGuestListViewController.m:817:            accssTimeStr = @"";
Sezam/AGGuestListViewController.m:836:        titleLabel.text = NSLocalizedString(@"OWNERS",nil);
Sezam/AGGuestListViewController.m:839:        titleLabel.text = NSLocalizedString(@"GUESTS",nil);
Sezam/AGGuestListViewController.m:842:        titleLabel.text = NSLocalizedString(@"ENTRY CODE ONLY",nil);
Sezam/AGGuestListViewController.m:845:        titleLabel.text = @"INVITATIONS";
Sezam/AGGuestListViewController.m:848:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGGuestListViewController.m:903:                                   actionWithTitle:NSLocalizedString(@"App Access", nil)
Sezam/AGGuestListViewController.m:908:                                       [self performSegueWithIdentifier:@"GuestListToInvite" sender:nil];
Sezam/AGGuestListViewController.m:913:                               actionWithTitle:NSLocalizedString(@"Personal Entry Code Only", nil)
Sezam/AGGuestListViewController.m:918:                                   [self performSegueWithIdentifier:@"GuestListToPINInvite" sender:nil];
Sezam/AGGuestListViewController.m:923:                                actionWithTitle:NSLocalizedString(@"Cancel", nil)
Sezam/AGGuestListViewController.m:965:            [self performSegueWithIdentifier:@"GuestListToInvite" sender:nil];
Sezam/AGGuestListViewController.m:982:        [self performSegueWithIdentifier:@"lockGuestToSelectGuest" sender:nil];
Sezam/AGGuestListViewController.m:1000:    if (([segue.identifier isEqualToString:@"GuestListToInvite"]) || ([segue.identifier isEqualToString:@"GuestListToPINInvite"])) {
Sezam/AGGuestListViewController.m:1006:        if ([segue.identifier isEqualToString:@"lockGuestToSelectGuest"]) {
Sezam/AGDeviceInfoViewController.m:69:static NSString* kAGDiaryCategory = @"AGDeviceInfoViewController";
Sezam/AGDeviceInfoViewController.m:109:        self.sectionTitles = @[@"AUGUST MODULE"];
Sezam/AGDeviceInfoViewController.m:121:            @(AGDeviceInfoTypeSerialNumber): @"Serial Number",
Sezam/AGDeviceInfoViewController.m:122:            @(AGDeviceInfoTypeFWVersion): @"FW Version",
Sezam/AGDeviceInfoViewController.m:150:            @(AGDeviceInfoTypeModel): @"Model",
Sezam/AGDeviceInfoViewController.m:151:            @(AGDeviceInfoTypeFWVersion): @"FW Version",
Sezam/AGDeviceInfoViewController.m:161:    NSString *firmwareVersion = dict[@"firmwareVersion"];
Sezam/AGDeviceInfoViewController.m:162:    NSString *hostModelID = dict[@"hostModelID"];
Sezam/AGDeviceInfoViewController.m:171:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGDeviceInfoViewController.m:173:    return lockSerial ? lockSerial : @"";
Sezam/AGDeviceInfoViewController.m:177:    NSDictionary *uuidsToModelNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"];
Sezam/AGDeviceInfoViewController.m:179:    return modelNumber ? modelNumber : @"";
Sezam/AGDeviceInfoViewController.m:184:        AGDiaryDebug(@"getUnityLockInfo", @"skipped, because not connected!");
Sezam/AGDeviceInfoViewController.m:190:        AGDiaryDebug(@"getUnityLockInfo", @"response: %@", responseDict);
Sezam/AGDeviceInfoViewController.m:192:            AGDiaryDebug(@"getUnityLockInfo", @"link error: %@, other error_code: %d", error);
Sezam/AGDeviceInfoViewController.m:196:        AGDiaryDebug(@"getUnityLockInfo", @"get unity lock: %@ ", responseDict);
Sezam/AGDeviceInfoViewController.m:261:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGDeviceInfoViewController.m:282:    static NSString *cellIdentifier = @"cellIdentifier";
Sezam/AGDeviceInfoViewController.m:289:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGDeviceInfoViewController.m:290:    cell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGDeviceInfoViewController.m:298:        AGDiaryDebug(@"cellForRow", @"title str is: %@", str);
Sezam/AGDeviceInfoViewController.m:308:        AGDiaryDebug(@"cellForRow", @"title str is: %@", str);
Sezam/AGDeviceInfoViewController.m:346:            NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGDeviceInfoViewController.m:350:    NSString *firmwareVersionRemoveUndefined = [fwVersion stringByReplacingOccurrencesOfString:@"-undefined" withString:@"fwVersion"];
Sezam/AGDeviceInfoViewController.m:351:    NSString *showText = [NSString stringWithFormat:@"FW Version %@", firmwareVersionRemoveUndefined];
Sezam/AGDeviceInfoViewController.m:385:    NSString *zwaveDSKDescriptionPart = @"Z-Wave DSK - ";
Sezam/AGDeviceInfoViewController.m:393:    NSString *fullText = [NSString stringWithFormat:@"%@%@%@", zwaveDSKDescriptionPart, underlinedDSKPart, remainingDSKPart];
Sezam/AGDeviceInfoViewController.m:398:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGDeviceInfoViewController.m:417:    AGDiaryDebug(@"onStatusChange", @"message: %@", message);
Sezam/AGDeviceInfoViewController.m:422:    AGDiaryDebug(@"onLockStateChange", @"lockID: %@", agLock.objectId);
Sezam/AGDeviceInfoViewController.m:423:    AGDiaryDebug(@"onLockStateChange", @"state: %d", lockState);
Sezam/AGDeviceInfoViewController.m:428:    AGDiaryDebug(@"onDisconnected", @"lockID: %@", agLock.objectId);
Sezam/AGDeviceInfoViewController.m:434:    AGDiaryDebug(@"onConnected", @"lockID: %@", agLock.objectId);
Sezam/AGAutoUnlockSetupAwayController.m:39:    NSString *homeAreaRadius = [NSString stringWithFormat:@"%im", (int)[AGAutoUnlockUtility baseHomeLocationGeofenceRadius]];
Sezam/AGAutoUnlockSetupAwayController.m:42:    UIImageView *backgroundImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_2_away.jpg"]];
Sezam/AGAutoUnlockSetupAwayController.m:58:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size: isAnnoyingTinyScreenDevice ? 14.5 : 17.0],
Sezam/AGAutoUnlockSetupAwayController.m:63:    [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"Your “Neighborhood”\n(%@ Perimeter)", homeAreaRadius]
Sezam/AGAutoUnlockSetupAwayController.m:74:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupAwayController.m:76:    NSString *title = @"Leaving Home";
Sezam/AGAutoUnlockSetupAwayController.m:77:    NSString *paragraph1Part1 = @"Whenever your phone detects you’ve";
Sezam/AGAutoUnlockSetupAwayController.m:78:    NSString *paragraph1BoldPart1 = @" left your neighborhood";
Sezam/AGAutoUnlockSetupAwayController.m:79:    NSString *paragraph1Part2 = [NSString stringWithFormat:@" (at least %@ from home), Auto-Unlock will switch to", homeAreaRadius];
Sezam/AGAutoUnlockSetupAwayController.m:80:    NSString *paragraph1BoldPart2 = @" Away";
Sezam/AGAutoUnlockSetupAwayController.m:81:    NSString *paragraph1Part3 = @" mode.";
Sezam/AGAutoUnlockSetupAwayController.m:87:    NSString *paragraph1 = [NSString stringWithFormat:@"%@%@%@%@%@", paragraph1Part1, paragraph1BoldPart1, paragraph1Part2, paragraph1BoldPart2, paragraph1Part3];
Sezam/AGAutoUnlockSetupAwayController.m:89:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupAwayController.m:97:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupAwayController.m:112:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupAwayController.m:120:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupAwayController.m:131:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGDoorbellVideoDownloadManager.h:21:#define AG_DOWNLOAD_MANAGER_WAIT_STATUS                 @"AG_DOWNLOAD_MANAGER_WAIT_STATUS"
Sezam/AGDoorbellVideoDownloadManager.h:22:#define AG_DOWNLOAD_MANAGER_ERROR                       @"AG_DOWNLOAD_MANAGER_ERROR"
Sezam/AGDoorbellVideoDownloadManager.h:23:#define AG_DOORBELL_ACTIVITY_DISMISSED                  @"AG_DOORBELL_ACTIVITY_DISMISSED"
Sezam/AGDoorbellVideoDownloadManager.h:24:#define AG_DOORBELL_ACTIVITY_CANCELLED_DOWNLOAD         @"AG_DOORBELL_ACTIVITY_CANCELLED_DOWNLOAD"
Sezam/AGSmartAlertListView.m:45:    self.clockIconImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"iconClock"]];
Sezam/AGSmartAlertListView.m:57:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertListView.m:161:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertListView.m:162:    self.titleLabel.text = @"SMART ALERTS";
Sezam/AGSmartAlertListView.m:167:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:174:    self.centerLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertListView.m:199:    self.createAlertButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:200:    [self.createAlertButton setTitle:@"CREATE A SMART ALERT" forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:207:    self.learnMoreButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:208:    [self.learnMoreButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:273:    NSString *smartAlertListCellReuseID = @"SmartAlertListCell";
Sezam/AGSmartAlertListView.m:307:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:310:    label.text = @"MY SMART ALERTS";
Sezam/AGKeypadSetupCompleteViewController.m:14:#define kAGDiaryCategory @"KeypadSetup"
Sezam/AGKeypadSetupCompleteViewController.m:25:    [AGUtility setTooltipNeededForKey:@"InviteUserTip" needsToBeShown:true]; // Triggers tooltip on guestlist page
Sezam/AGKeypadSetupCompleteViewController.m:27:    self.lockNameLabel.text = [NSString stringWithFormat:@"\u201C%@\u201D", navController.lock.name];
Sezam/AGKeypadSetupCompleteViewController.m:28:    AGDiaryInfo(@"Success", @"complete");
Sezam/AGKeypadSetupCompleteViewController.m:38:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadTestCodeController"];
Sezam/AGMessagePool.m:16:static NSString* kAGDiaryCategory = @"AGMessagePool";
Sezam/AGMessagePool.m:57:        AGDiaryInfo(@"MessagePoolGetMessageHandler", @"Error:NoClientDetailsAndTopic");
Sezam/AGAirbnbConnectViewController.m:54:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAirbnbConnectViewController.m:67:            if ([partner.name isEqualToString:@"Airbnb"]) {
Sezam/AGAirbnbConnectViewController.m:93:            [self performSegueWithIdentifier:@"airbnbConnectToAirbnbMapping" sender:nil];
Sezam/AGAirbnbConnectViewController.m:122:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://www.airbnb.com/"]];
Sezam/AGAirbnbConnectViewController.m:152:    if ([segue.identifier isEqualToString:@"airbnbConnectToAirbnbMapping"]) {
Sezam/AGSmartAlertChooseEventView.m:55:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGSmartAlertChooseEventView.m:62:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertChooseEventView.m:63:    self.titleLabel.text = @"CHOOSE AN EVENT";
Sezam/AGSmartAlertChooseEventView.m:80:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertChooseEventView.m:86:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGDoorbellOTASetupViewController.m:52:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellOTASetupViewController.m:53:        images = [NSArray arrayWithObjects:[UIImage imageNamed:@"imgDoorbellcamHeader"], [UIImage imageNamed:@"DoorbellSetupTutorial_2"], [UIImage imageNamed:@"DoorbellSetupTutorial_3"], [UIImage imageNamed:@"DoorbellSetupTutorial_4"], nil];
Sezam/AGDoorbellOTASetupViewController.m:55:        images = [NSArray arrayWithObjects:[UIImage imageNamed:@"dbc2"], [UIImage imageNamed:@"DoorbellSetupTutorial_2_d2"], [UIImage imageNamed:@"DoorbellSetupTutorial_3_d2"], [UIImage imageNamed:@"DoorbellSetupTutorial_4_d2"], nil];
Sezam/AGDoorbellOTASetupViewController.m:56:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellOTASetupViewController.m:57:        [self.closeButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGDoorbellOTASetupViewController.m:60:    NSArray *strings = @[ @"Receive notifications and captured video when motion is detected at your door.",  @"See and speak with visitors who ring your doorbell - and let them in using your August Smart Lock!", @"Use August Video Recording to view archived videos of motion events and doorbell calls.", @"Download and share memorable video clips for later viewing." ];
Sezam/AGDoorbellOTASetupViewController.m:62:    NSDictionary *options = @{@"Image Content Mode": [NSNumber numberWithInt: UIViewContentModeScaleAspectFill]};
Sezam/AGDoorbellOTASetupViewController.m:74:    if (messageData[@"status"]) {
Sezam/AGDoorbellOTASetupViewController.m:75:        NSString *status = messageData[@"status"];
Sezam/AGDoorbellOTASetupViewController.m:76:        if ([status isEqual:@"online"]) {
Sezam/AGDoorbellOTASetupViewController.m:81:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellOTASetupViewController.m:83:            if ([status isEqualToString:@"ota_update_initiate"]) {
Sezam/AGDoorbellOTASetupViewController.m:85:            } else if ([status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellOTASetupViewController.m:86:                NSDictionary *data = (NSDictionary *)messageData[@"data"];
Sezam/AGDoorbellOTASetupViewController.m:87:                NSString *progressString = (NSString *)data[@"progress"];
Sezam/AGDoorbellOTASetupViewController.m:92:                self.progressLabel.text = [NSString stringWithFormat:@"Updating firmware… %@%% complete.",progress.stringValue];
Sezam/AGDoorbellOTASetupViewController.m:95:                self.progressLabel.text = @"Rebooting doorbell...";
Sezam/AGDoorbellOTASetupViewController.m:123:            if ([doorbell.firmwareVersion containsString:@"RC68"]) {
Sezam/AGDoorbellOTASetupViewController.m:133:    UIAlertController *otaFailureAlert = [UIAlertController alertControllerWithTitle:@"This Is Taking a While!" message:@"Try taking the Doorbell Cam off the mounting plate and placing it directly next to your router. This should speed up the update process." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellOTASetupViewController.m:134:    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok, I’ve placed the Doorbell Cam next to my router"
Sezam/AGDoorbellOTASetupViewController.m:138:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellOTASetupViewController.m:160:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellOTASetupViewController.m:197:        segueIdentifier = @"DoorbellOTAToDoorbellDiagnostics";
Sezam/AGDoorbellOTASetupViewController.m:199:        segueIdentifier = @"DoorbellOTAToSetupSuccess";
Sezam/AGDoorbellOTASetupViewController.m:206:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellOTASetupViewController.m:207:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellOTASetupViewController.m:211:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellOTASetupViewController.m:229:    if ([segue.identifier isEqualToString:@"DoorbellOTAToDoorbellDiagnostics"]) {
Sezam/AGDoorbellOTASetupViewController.m:234:    if ([segue.identifier isEqualToString:@"DoorbellOTAToSetupSuccess"]) {
Sezam/AGManualCalibrateViewController.m:25:static NSString* kAGDiaryCategory = @"Calibration";
Sezam/AGManualCalibrateViewController.m:131:    [self.actionButton setTitle:[NSLocalizedString(@"Continue",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:136:    [self.calibrateStageImageView setImage:[UIImage imageNamed:@"basic_lock_setup"]];
Sezam/AGManualCalibrateViewController.m:137:    self.locationLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:152:        self.infoLabel.text = NSLocalizedString(@"Your lock needs to be calibrated in order to operate properly.",nil);
Sezam/AGManualCalibrateViewController.m:153:        [self.actionButton setTitle:[@"Continue" uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:156:        self.infoLabel.text = NSLocalizedString(@"Almost done. Let’s calibrate your lock! If there is a strip of adhesive tape securing the top of your August Smart Lock, remove it now.",nil);
Sezam/AGManualCalibrateViewController.m:157:        [self.actionButton setTitle:[@"Ok" uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:217:    AGDiaryInfo(@"StartCalibration", @"Starting manual calibration");
Sezam/AGManualCalibrateViewController.m:221:    self.infoLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:224:    self.infoLabel.text = NSLocalizedString(@"Searching for your lock...",nil);
Sezam/AGManualCalibrateViewController.m:262:    self.infoLabel.text = NSLocalizedString(@"Connection lost. Restarting...",nil);
Sezam/AGManualCalibrateViewController.m:268:    AGDiaryInfo(@"ConnectedToLock", @"Connected to lock '%@'", lockUUID);
Sezam/AGManualCalibrateViewController.m:293:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGManualCalibrateViewController.m:315:        AGDiaryInfo(@"ClickStartCalibration", @"The user clicked the 'Continue' button; starting calibration");
Sezam/AGManualCalibrateViewController.m:319:        AGDiaryInfo(@"ClickNextDetectAngle", @"The user clicked the 'Next' button; detecting the current angle");
Sezam/AGManualCalibrateViewController.m:323:        AGDiaryInfo(@"ClickDone", @"The user clicked the 'Done' button; we're done with calibration");
Sezam/AGManualCalibrateViewController.m:328:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGManualCalibrateViewController.m:329:            AGHomeKitSetupNavController *hkSetup = [storyboard instantiateViewControllerWithIdentifier:@"HomeKitNav"];
Sezam/AGManualCalibrateViewController.m:332:            ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:hkSetup];
Sezam/AGManualCalibrateViewController.m:339:            self.finalChecksAlertView = [[UIAlertView alloc] initWithTitle:@"Performing final checks..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGManualCalibrateViewController.m:353:        AGDiaryInfo(@"ClickAcknowldgeError", @"The user clicked the 'Ok' button to acknowledge the error; try to restart calibration");
Sezam/AGManualCalibrateViewController.m:365:    self.closeButtonImageView.image = [UIImage imageNamed:@"close_white_v2"];
Sezam/AGManualCalibrateViewController.m:368:    self.infoLabel.text = NSLocalizedString(@"First, close your door, and rotate your August lock until your door is locked.",nil);
Sezam/AGManualCalibrateViewController.m:370:    [self.actionButton setTitle:[NSLocalizedString(@"OK, door is locked",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:373:    [self.calibrateStageImageView setImage:[UIImage imageNamed:@"Calibrate_lock_door"]];
Sezam/AGManualCalibrateViewController.m:400:    self.infoLabel.text = NSLocalizedString(@"Next, rotate August in the opposite direction by hand until your door is unlocked.",nil);
Sezam/AGManualCalibrateViewController.m:402:    [self.calibrateStageImageView setImage:[UIImage imageNamed:@"Calibrate_unlock_door"]];
Sezam/AGManualCalibrateViewController.m:403:    [self.actionButton setTitle:[NSLocalizedString(@"OK, door is unlocked",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:410:    self.locationLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:415:        self.rotationErrorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil)
Sezam/AGManualCalibrateViewController.m:416:                                                                                message:NSLocalizedString(@"Please make sure you rotate the lock ALL the way to its locked and unlocked positions!\n\nTap 'OK' to restart calibration.",nil)
Sezam/AGManualCalibrateViewController.m:419:        [self.rotationErrorAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"OK",nil)
Sezam/AGManualCalibrateViewController.m:432:    self.infoLabel.text = NSLocalizedString(@"Setting orientation",nil);
Sezam/AGManualCalibrateViewController.m:448:            self.infoLabel.text = NSLocalizedString(@"Setting clockwise target angle...",nil);
Sezam/AGManualCalibrateViewController.m:467:                    self.infoLabel.text = NSLocalizedString(@"Setting counter-clockwise target angle...",nil);
Sezam/AGManualCalibrateViewController.m:482:                    targetCCW.group =  @"CCW";
Sezam/AGManualCalibrateViewController.m:483:                    stallCCW.group = @"CCW";
Sezam/AGManualCalibrateViewController.m:492:            setTargetCW.group = @"CW";
Sezam/AGManualCalibrateViewController.m:493:            setStall.group = @"CW";
Sezam/AGManualCalibrateViewController.m:508:    self.closeButtonImageView.image = [UIImage imageNamed:@"Close_Button_v3"];
Sezam/AGManualCalibrateViewController.m:510:    self.lastCalibrationStatusLabel.text = NSLocalizedString(@"Finally, tap the green circle on the screen below to test your lock.", nil);
Sezam/AGManualCalibrateViewController.m:529:            errorTitle = @"Lock Overheated";
Sezam/AGManualCalibrateViewController.m:530:            errorMessage = @"Your lock has overheated.";
Sezam/AGManualCalibrateViewController.m:534:            errorTitle = @"Low Batteries";
Sezam/AGManualCalibrateViewController.m:535:            errorMessage = @"Your lock batteries are low. Please replace the batteries and recalibrate.";
Sezam/AGManualCalibrateViewController.m:539:            errorTitle = @"Lock Jammed";
Sezam/AGManualCalibrateViewController.m:540:            errorMessage = @"Your lock is jammed. It may be obstructed and need to be recalibrated.";
Sezam/AGManualCalibrateViewController.m:544:            errorTitle = @"Calibration Error";
Sezam/AGManualCalibrateViewController.m:545:            errorMessage = @"Calibration Error\n\n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.";
Sezam/AGManualCalibrateViewController.m:549:            errorTitle = @"Calibration Error";
Sezam/AGManualCalibrateViewController.m:550:            errorMessage = NSLocalizedString(@"Calibration Error\n\nThere was an error calibrating your lock. Please call customer service at 844-AUGUST1 (284-8781) for assistance.",nil);
Sezam/AGManualCalibrateViewController.m:559:    AGDiaryError(@"LockCalibrateError", @"Calibration of lock '%@' failed with error '%@' at %@", self.agLock.objectId, error, situation);
Sezam/AGManualCalibrateViewController.m:565:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:[NSString stringWithFormat:NSLocalizedString(@"%@",nil), errorTitle]
Sezam/AGManualCalibrateViewController.m:566:                                                                        message:[NSString stringWithFormat:NSLocalizedString(@"%@",nil), errorMsg]
Sezam/AGManualCalibrateViewController.m:568:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"Recalibrate"
Sezam/AGManualCalibrateViewController.m:571:                                                     AGDiaryInfo(@"ClickAcknowldgeError", @"The user clicked the 'Ok' button to acknowledge the error; try to restart calibration");
Sezam/AGManualCalibrateViewController.m:574:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"Quit Calibration" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGManualCalibrateViewController.m:602:        self.lastCalibrationStatusLabel.text = NSLocalizedString(@"Calibration successful!",nil);
Sezam/AGManualCalibrateViewController.m:604:        self.lastCalibrationStatusLabel.text = NSLocalizedString(@"Your lock has been successfully calibrated!",nil);
Sezam/AGManualCalibrateViewController.m:606:    [self.actionButton setTitle:[NSLocalizedString(@"Continue",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:630:    self.infoLabel.text = NSLocalizedString(@"Setting parameters...",nil);
Sezam/AGManualCalibrateViewController.m:666:            self.infoLabel.text = NSLocalizedString(@"Getting lock state",nil);
Sezam/AGManualCalibrateViewController.m:681:        [self performSegueWithIdentifier:@"BackToLockSettings" sender:self];
Sezam/AGManualCalibrateViewController.m:686:            if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGOnboardingChecklistViewController"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:39:        self.headerTitleLabel.text = @"SETUP DOORBELL";
Sezam/AGDoorbellRunDiagnosticsViewController.m:101:    if (messageData[@"telemetry"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:102:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellRunDiagnosticsViewController.m:108:    if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_completed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:109:        float downloadSpeedfloat = [[messageData objectForKey:@"speed_mbps"] floatValue];
Sezam/AGDoorbellRunDiagnosticsViewController.m:115:    if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_completed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:116:        float uploadSpeedfloat = [[messageData objectForKey:@"speed_mbps"] floatValue];
Sezam/AGDoorbellRunDiagnosticsViewController.m:122:    if ([[messageData objectForKey:@"status"] isEqualToString:@"speed_test_failed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:146:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:152:    NSDictionary *downloadTestCommand = @{@"status":@"speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:158:    NSDictionary *uploadTestCommand = @{@"status":@"upload_speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:169:            self.progressLabel.text = @"Checking voltage and Wi-Fi signal…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:175:            self.progressLabel.text = @"Running Download speed test…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:181:            self.progressLabel.text = @"Running speed test…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:187:                self.progressLabel.text = @"Checking lock connection…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:203:            [self performSegueWithIdentifier:@"RunDiagnosticsToResults" sender:nil];
Sezam/AGDoorbellRunDiagnosticsViewController.m:212:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRunDiagnosticsViewController.m:213:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellRunDiagnosticsViewController.m:217:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellRunDiagnosticsViewController.m:235:    if ([segue.identifier isEqualToString:@"RunDiagnosticsToResults"]) {
Sezam/AGIntellivisionVideoStream.m:26:#define kAGDiaryCategory @"AGIntellivisionVideoStream"
Sezam/AGIntellivisionVideoStream.m:42:static NSString * const AGVideoStreamErrorFailedToDeliverFirstFrame = @"AGVideoStreamErrorFailedToDeliverFirstFrame";
Sezam/AGIntellivisionVideoStream.m:43:static NSString * const AGVideoStreamErrorUnknown = @"AGVideoStreamErrorUnknown";
Sezam/AGIntellivisionVideoStream.m:100:    [self addObserver:self forKeyPath:@"state" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGIntellivisionVideoStream.m:117:        [self.eventLogger logIndependentEvent:@"PubNub" status:@"no_hi_five_received" error:nil];
Sezam/AGIntellivisionVideoStream.m:146:                AGDiaryInfo(@"IVServerFetchFailed", @"");
Sezam/AGIntellivisionVideoStream.m:147:                [self.eventLogger logIndependentEvent:@"Intellivision" status:@"received_server_listing" error:@"get_server_listing_failed"];
Sezam/AGIntellivisionVideoStream.m:150:                AGDiaryInfo(@"IVServerFetchSucceeded", @"");
Sezam/AGIntellivisionVideoStream.m:151:                [self.eventLogger logIndependentEvent:@"Intellivision" status:@"received_server_listing" error:nil];
Sezam/AGIntellivisionVideoStream.m:164:        AGDiaryInfo(@"DoorbellProxyInfoDependencySucceeded", @"Proxy info was already available");
Sezam/AGIntellivisionVideoStream.m:176:        AGDiaryInfo(@"DoorbellProxyInfoDependencySucceeded", @"Proxy info was retrieved");
Sezam/AGIntellivisionVideoStream.m:204:                AGDiaryInfo(@"DoorbellAVSessionDependencySucceeded", @"%@", self.doorbell.objectId);
Sezam/AGIntellivisionVideoStream.m:207:                [self prepareStreamDependencyFailedWithError:[NSError errorWithDomain:@"AGVideoStream" code:-1337 userInfo:@{@"AGError":@"AGVideoStreamErrorAVSessionDetailsUnparseable"}]];
Sezam/AGIntellivisionVideoStream.m:210:            [self prepareStreamDependencyFailedWithError:[NSError errorWithDomain:@"AGVideoStream" code:-1338 userInfo:@{@"AGError":@"AGVideoStreamErrorAVSessionResponseError"}]];
Sezam/AGIntellivisionVideoStream.m:230:    AGDiaryInfo(@"PrepareStreamFailed", @"Error:%@", error);
Sezam/AGIntellivisionVideoStream.m:245:    AGDiaryInfo(@"PrepareStreamSucceeded", @"");
Sezam/AGIntellivisionVideoStream.m:259:    AGDiaryInfo(@"StartStreamingRequested", @"%@", self.doorbell.objectId);
Sezam/AGIntellivisionVideoStream.m:281:    [self.eventLogger logCallEvent:@"Application" status:@"valid_proxy_and_session_set" error:nil];//We can only get here if the proxy values and session token is valid
Sezam/AGIntellivisionVideoStream.m:284:        [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1315 userInfo:@{@"AGError":AGVideoStreamErrorFailedToDeliverFirstFrame}]];
Sezam/AGIntellivisionVideoStream.m:290:    AGDiaryInfo(@"InitiatingConnection", @"");
Sezam/AGIntellivisionVideoStream.m:292:    NSString *loggingProxyDetails = [NSString stringWithFormat:@"Session+%@+ProxyIP+%@+RTSPUrl+%@", self.doorbellPubSubPoll.proxyResponse.proxyInfo.sessionID, self.doorbellPubSubPoll.proxyResponse.proxyInfo.proxyIP, self.doorbellPubSubPoll.proxyResponse.proxyInfo.deviceIP];
Sezam/AGIntellivisionVideoStream.m:293:    [self.eventLogger logCallEvent:@"ProxyInfoOnConnection" status:loggingProxyDetails error:nil];
Sezam/AGIntellivisionVideoStream.m:294:    [self.eventLogger logCallEvent:@"Intellivision" status:@"attempt_direct_connect_with_rtspurl" error:nil];
Sezam/AGIntellivisionVideoStream.m:311:        streamUpdateDeviceID =  streamUpdateDict[@"deviceId"];
Sezam/AGIntellivisionVideoStream.m:319:        BOOL streamErrorOccurred = [((NSDictionary *) [streamUpdateNotif object])[@"IVError"] boolValue];
Sezam/AGIntellivisionVideoStream.m:329:                [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1306 userInfo:@{@"AGError":@"AGVideoStreamErrorIVStreamFailedToConnect"}]];
Sezam/AGIntellivisionVideoStream.m:331:                [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1318 userInfo:@{@"AGError":AGVideoStreamErrorUnknown}]];
Sezam/AGIntellivisionVideoStream.m:342:    AGDiaryInfo(@"rtspURLRetrieved", @"rtsp url: %@", rtspURL);
Sezam/AGIntellivisionVideoStream.m:349:    NSAssert(notWaitingOnFramesOrAlreadyStreaming, @"We shouldn't be restarting a stream that is already streaming or waiting on first frames");//Sanity check that intellivision isnt sending us stream status update while already trying to show the stream.
Sezam/AGIntellivisionVideoStream.m:352:    AGDiaryInfo(@"WaitingOnFirstVideoFrames", @"");
Sezam/AGIntellivisionVideoStream.m:381:            AGDiaryInfo(@"RecievedDataProcessingSlowError", @"");
Sezam/AGIntellivisionVideoStream.m:386:                                          @"AGError":@"AGVideoStreamErrorIVPlayerUnexpectedError",
Sezam/AGIntellivisionVideoStream.m:387:                                          @"AGErrorInfo":@{
Sezam/AGIntellivisionVideoStream.m:388:                                                  @"iv_error_code":[NSString stringWithFormat:@"%i", [playerError errorCode]]
Sezam/AGIntellivisionVideoStream.m:391:        [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1308 userInfo:streamErrorInfo]];
Sezam/AGIntellivisionVideoStream.m:400:            [self.eventLogger logCallEvent:@"IVSDK" status:@"IV_PLAYER_STATUS_INITIALIZING" error:nil];
Sezam/AGIntellivisionVideoStream.m:402:            [self.eventLogger logCallEvent:@"IVSDK" status:@"IV_PLAYER_STATUS_READY" error:nil];
Sezam/AGIntellivisionVideoStream.m:404:            [self.eventLogger logCallEvent:@"IVSDK" status:@"video_buffering_started" error:nil];
Sezam/AGIntellivisionVideoStream.m:406:            [self.eventLogger logCallEvent:@"IVSDK" status:@"first_video_frame_rendered" error:nil];
Sezam/AGIntellivisionVideoStream.m:409:            AGDiaryInfo(@"StreamingBegan", @"");
Sezam/AGIntellivisionVideoStream.m:413:            [self.eventLogger logCallEvent:@"Application" status:@"transition_into_active_call" error:nil];
Sezam/AGIntellivisionVideoStream.m:416:            AGDiaryInfo(@"PlayerStopped", @"");
Sezam/AGIntellivisionVideoStream.m:417:            [self.eventLogger logCallEvent:@"IVSDK" status:@"IV_PLAYER_STATUS_STOPPED" error:nil];
Sezam/AGIntellivisionVideoStream.m:427:        if (playerStatistics[@"Avg Video FPS"] != nil) {
Sezam/AGIntellivisionVideoStream.m:428:            framesPerSecond = [playerStatistics[@"Avg Video FPS"] intValue];
Sezam/AGIntellivisionVideoStream.m:436:                AGDiaryInfo(@"StartingNoFramesTimer", @"");
Sezam/AGIntellivisionVideoStream.m:438:                    [self.eventLogger logCallEvent:@"Application" status:@"doorbell_video_stopped" error:nil];
Sezam/AGIntellivisionVideoStream.m:439:                    [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1309 userInfo:@{@"AGError":@"AGVideoStreamErrorIVFramesStopped"}]];
Sezam/AGIntellivisionVideoStream.m:453:        [self.eventLogger logCallEvent:@"Application" status:@"video_call_retry_existing_call_record" error:nil];
Sezam/AGIntellivisionVideoStream.m:472:    AGDiaryInfo(@"StreamStopped", @"error:%@", error);
Sezam/AGIntellivisionVideoStream.m:473:    [self.eventLogger logCallEvent:@"Application" status:@"invalid_active_call" error:[NSString stringWithFormat:@"error:%@", error]];
Sezam/AGIntellivisionVideoStream.m:515:        [self.eventLogger logCallEvent:@"User" status:@"user_hangup_call" error:nil];
Sezam/AGIntellivisionVideoStream.m:517:        [self.eventLogger logCallEvent:@"User" status:@"user_initiated_cancel" error:[NSString stringWithFormat:@"status:%@", self.status]];
Sezam/AGIntellivisionVideoStream.m:551:    NSString *status = messageData[@"status"];
Sezam/AGIntellivisionVideoStream.m:553:    if ([status isEqual:@"hangup"]) {
Sezam/AGIntellivisionVideoStream.m:555:    }else if ([status isEqual:@"simulate-ios-reconnect"]) {
Sezam/AGIntellivisionVideoStream.m:561:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"hangup" error:nil];
Sezam/AGIntellivisionVideoStream.m:565:        AGDiaryInfo(@"ReceivedUnexpectedHangup", @"");
Sezam/AGIntellivisionVideoStream.m:569:        AGDiaryInfo(@"ReceivedHangup", @"");
Sezam/AGIntellivisionVideoStream.m:574:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"simulate-ios-reconnect" error:nil];
Sezam/AGIntellivisionVideoStream.m:578:        AGDiaryInfo(@"SimulateiOSReconnect", @"Received while streaming %@", self.doorbell.objectId);
Sezam/AGIntellivisionVideoStream.m:579:        [self stopStreamForError:[NSError errorWithDomain:@"AGVideoStream" code:-1329 userInfo:@{@"AGError":@"AGVideoStreamErrorSimulatedRestart"}]];
Sezam/AGIntellivisionVideoStream.m:581:        AGDiaryInfo(@"SimulateiOSReconnect", @"Not received while streaming. Will have no effect %@", self.doorbell.objectId);
Sezam/AGIntellivisionVideoStream.m:641:    NSString *status = @"Unknown";
Sezam/AGIntellivisionVideoStream.m:645:        status = @"ReadyToConnect";
Sezam/AGIntellivisionVideoStream.m:647:        status = @"StartingConnectionToProxy";
Sezam/AGIntellivisionVideoStream.m:649:        status = @"WaitingForFirstFrame";
Sezam/AGIntellivisionVideoStream.m:651:        status = @"Streaming";
Sezam/AGIntellivisionVideoStream.m:653:        status = @"WaitingForRestart";
Sezam/AGIntellivisionVideoStream.m:655:        status = @"EndingStream";
Sezam/AGIntellivisionVideoStream.m:667:        [pendingPrepareSteps addObject:@"WaitingForIVServerFetch"];
Sezam/AGIntellivisionVideoStream.m:674:            [pendingPrepareSteps addObject:@"WaitingForDoorbellAwakeWithAwakeNoProxy"];
Sezam/AGIntellivisionVideoStream.m:676:            [pendingPrepareSteps addObject:@"WaitingForDoorbellAwake"];
Sezam/AGIntellivisionVideoStream.m:681:        [pendingPrepareSteps addObject:@"WaitingForAVSessionInfo"];
Sezam/AGIntellivisionVideoStream.m:686:    NSString *pendingSteps = @"";
Sezam/AGIntellivisionVideoStream.m:690:            pendingSteps = [pendingSteps stringByAppendingString:@"-"];
Sezam/AGIntellivisionVideoStream.m:693:    NSAssert(![pendingSteps isEqualToString:@""], @"We shouldn't be calculating the pending dependency steps if none of them are actually pending");
Sezam/AGIntellivisionVideoStream.m:701:     if([keyPath isEqualToString:@"state"]){
Sezam/AGIntellivisionVideoStream.m:705:         AGDiaryDebug(@"KVO", @"Steam %@ -> Internal state now %@", self, [NSString stringFromVideoState:new]);
Sezam/AGIntellivisionVideoStream.m:708:                 NSAssert(old == AGVideoStreamStateUnknown, @"Unknown state transition!");
Sezam/AGIntellivisionVideoStream.m:714:                         old == AGVideoStreamStateRestarting, @"Initialized twice!");
Sezam/AGIntellivisionVideoStream.m:722:                 , @"Preparing after prepared!");
Sezam/AGIntellivisionVideoStream.m:726:                 NSAssert(old == AGVideoStreamStatePreparing || AGVideoStreamStatePrepared, @"Prepared without preparing!");
Sezam/AGIntellivisionVideoStream.m:732:                         || old == AGVideoStreamStateError, @"Stable, but not prepared?");
Sezam/AGIntellivisionVideoStream.m:737:                 NSAssert(old == AGVideoStreamStateClosing, @"Closed without notifying of closing!");
Sezam/AGIntellivisionVideoStream.m:744:                         || old == AGVideoStreamStatePrepared, @"Buffering without prepared!");
Sezam/AGIntellivisionVideoStream.m:751:                 NSAssert(old == AGVideoStreamStateRestarting, @"We should try until we reach our limit.");
Sezam/AGIntellivisionVideoStream.m:768:    return @"intellivision";
Sezam/AGIntellivisionVideoStream.m:773: return @"intellivision";
Sezam/AGSmartAlertListController.m:18:#define kAGDiaryCategory @"AGSmartAlertListController"
Sezam/AGSmartAlertListController.m:94:            self.view.centerLabel.text = @"Let’s add some Smart Alerts! Tap the button below to get started.";
Sezam/AGSmartAlertListController.m:104:            self.view.ctaLabel.text = @"You will not receive some Smart Alerts without a Wi-Fi bridge.";
Sezam/AGSmartAlertListController.m:105:            [self.view.ctaButton setTitle:@"LEARN\nMORE" forState:UIControlStateNormal];
Sezam/AGSmartAlertListController.m:113:            self.view.ctaLabel.text = @"Your Wi-Fi bridge is currently offline. You will not receive some Smart Alerts until it is back online.";
Sezam/AGSmartAlertListController.m:133:            [self showErrorAlertWithMessage:@"There was an error loading smart alerts. Please try again later."];
Sezam/AGSmartAlertListController.m:205:    NSArray *doorUserIDs = @[@"onetouchlock", @"manuallock", @"autorelock", @"door_open"];
Sezam/AGSmartAlertListController.m:216:        BOOL shouldDisplayNotification = notificationRuleIsDisplayable || [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];//In debug mode, show the notification even if it can't be parsed
Sezam/AGSmartAlertListController.m:219:            AGDiaryInfo(@"UnparseableSmartAlert", @"ruleID:%@ userID:%@", curNotificationRule.objectId, curNotificationRule.userID);
Sezam/AGSmartAlertListController.m:223:        alertDescription = alertDescription ? alertDescription : @"Error parsing SmartAlert. Please try again later.";
Sezam/AGSmartAlertListController.m:229:            curListItem.defaultImage = [UIImage imageNamed:@"activity_profile_blank_v2"];
Sezam/AGSmartAlertListController.m:238:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertListController.m:239:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGCollectionViewController.h:14:#define CELL @"CELL"
Sezam/AGBridgeSetupNavController.m:26:NSString* const kAGBridgeSetupLogAction = @"VenusSetup";
Sezam/AGBridgeSetupNavController.m:46:    AGDiaryInfo(@"ViewSetupStart", @"Loading the Bridge Setup nav controller");
Sezam/AGUtilityTests.m:33:    lock.objectId = @"0";
Sezam/AGUtilityTests.m:36:    user1.objectId = @"1";
Sezam/AGUtilityTests.m:37:    user1.type = @"superuser";
Sezam/AGUtilityTests.m:40:    user2.objectId = @"2";
Sezam/AGUtilityTests.m:41:    user2.type = @"superuser";
Sezam/AGUtilityTests.m:44:    user3.objectId = @"3";
Sezam/AGUtilityTests.m:45:    user3.type = @"user";
Sezam/AGUtilityTests.m:47:    lock.users = @{@"1":user1, @"2":user2, @"3":user3};
Sezam/AGUtilityTests.m:50:    pinEntry1.userID = @"4";
Sezam/AGUtilityTests.m:51:    pinEntry1.firstName = @"User";
Sezam/AGUtilityTests.m:52:    pinEntry1.lastName = @"Four";
Sezam/AGUtilityTests.m:64:    XCTAssert([((AGUser *)owners[0]).objectId isEqual:@"1"], @"Expected user 1 to be an owner");
Sezam/AGUtilityTests.m:65:    XCTAssert([((AGUser *)owners[1]).objectId isEqual:@"2"], @"Expected user 2 to be an owner");
Sezam/AGUtilityTests.m:66:    XCTAssert([((AGUser *)guests[0]).objectId isEqual:@"3"], @"Expected user 3 to be a guest");
Sezam/AGUtilityTests.m:67:    XCTAssert([((AGUser *)pinOnlyUsers[0]).objectId isEqual:@"4"], @"Expected user 4 to be a pin only user");
Sezam/AGUtilityTests.m:75:    NSSet *expectedAllUsersObjectIDs =  [NSSet setWithArray:@[@"1", @"2", @"3", @"4"]];
Sezam/AGUtilityTests.m:78:    XCTAssert([allUserObjectIDs isEqual:expectedAllUsersObjectIDs], @"All users should equal the expected users");
Sezam/AGVideoPlayerViewController.m:21:    ///    NSURL *streamURL = [NSURL URLWithString:@"https://storage.googleapis.com/aug-bucket-test/20160714002752_proglist.m3u8"];
Sezam/AGVideoPlayerViewController.m:22:    NSURL *streamURL = [NSURL URLWithString:@"http://10.0.29.59:8000/20160714224745_playlist.m3u8"];
Sezam/AGVideoPlayerViewController.m:67:    self.videoPlayer = [[IVVideoPlayerViewController alloc] initWithURL:@"http://10.0.29.59:8000/20160714224745_playlist.m3u8"
Sezam/AGVideoPlayerViewController.m:125:        NSError *mediaPlayerError = [notificationUserInfo objectForKey:@"error"];
Sezam/AGVideoPlayerViewController.m:128:            NSLog(@"playback failed with error description: %@", [mediaPlayerError localizedDescription]);
Sezam/AGVideoPlayerViewController.m:132:            NSLog(@"playback failed without any given reason");
Sezam/AGDoorbellBrightnessPopoverView.m:45:    self.floodBrightnessLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13.0];
Sezam/AGDoorbellBrightnessPopoverView.m:47:    self.floodBrightnessLabel.text = @"FLOOD LIGHT BRIGHTNESS";
Sezam/AGDoorbellBrightnessPopoverView.m:57:    [self.lightbulbButton setImage:[UIImage imageNamed:@"iconHaloSliderLight"] forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:62:    [self.offButton setTitle:@"OFF" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:65:    [self.lowButton setTitle:@"LOW" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:68:    [self.mediumButton setTitle:@"MED" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:71:    [self.highButton setTitle:@"HIGH" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:231:    button.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13.0];
Sezam/AGDoorbellBrightnessPopoverView.m:250:    NSAssert(false, @"Buttons sent to userBrightnessForButton: should be a button of AGDoorbellBrightnessPopoverView");
Sezam/AGGeoRegionDurationTracker.m:26:    return @"regionID";
Sezam/AGGeoRegionDurationTracker.m:147:    return [NSString stringWithFormat:@"AGGeoRegionDurationTracker-%@", self.region.identifier];
Sezam/AGKeypadSettingsViewController.m:18:static NSString* kAGDiaryCategory = @"KeypadSettings";
Sezam/AGKeypadSettingsViewController.m:86:    [identifiers addObject:@"KeypadTitleCell"];
Sezam/AGKeypadSettingsViewController.m:88:    [identifiers addObject:@"KeypadEnabled"];
Sezam/AGKeypadSettingsViewController.m:95:        EDSemver *minFirmwareVersion = [[EDSemver alloc] initWithString:@"2.1.99"]; // 2.2.0 and above supports power savings mode
Sezam/AGKeypadSettingsViewController.m:101:    [identifiers addObject:@"KeypadOneTouch"];
Sezam/AGKeypadSettingsViewController.m:105:        [identifiers addObject:@"KeypadOneTouchNotifications"];
Sezam/AGKeypadSettingsViewController.m:112:        [identifiers addObject:@"KeypadPowerSaving"];
Sezam/AGKeypadSettingsViewController.m:118:    [identifiers addObject:@"KeypadBattery"];
Sezam/AGKeypadSettingsViewController.m:120:    [identifiers addObject:@"KeypadSerial"];
Sezam/AGKeypadSettingsViewController.m:122:    [identifiers addObject:@"KeypadTroubleshooting"];
Sezam/AGKeypadSettingsViewController.m:124:    [identifiers addObject:@"KeypadDisconnect"];
Sezam/AGKeypadSettingsViewController.m:126:    [identifiers addObject:@"KeypadFirmware"];
Sezam/AGKeypadSettingsViewController.m:231:        cell.label.text = [NSString stringWithFormat:@"FW Version %@", self.agLock.associatedKeypad.currentFirmwareVersion];
Sezam/AGKeypadSettingsViewController.m:255:                    UIAlertView *keypadEnabledAlert = [[UIAlertView alloc] initWithTitle:@"Keypad Disabled" message:@"Toggling \"Keypad Enabled\" off temporarily disables all entry codes." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:280:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle: NSLocalizedString(@"Not Connected",nil) message:NSLocalizedString(@"You must be connected to the lock to change this setting.",nil) delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:295:                    UIAlertView *keypadEnabledAlert = [[UIAlertView alloc] initWithTitle:@"Power Saving Enabled" message:@"Toggling Power Saving Mode on will disable your keypad’s motion triggered backlight in order to preserve battery life." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:331:    NSString *newStateStr = newState ? @"both" : @"neither";
Sezam/AGKeypadSettingsViewController.m:335:    user.objectId = @"onetouchlock";
Sezam/AGKeypadSettingsViewController.m:367:            AGKeypadDisconnectViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"KeypadDisconnect"];
Sezam/AGKeypadSettingsViewController.m:374:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"You must be connected to the lock to disconnect your keypad." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:414:    [AGLock getNotificationStateForLock:self.agLock.objectId user:@"onetouchlock" responseBlock:^(AGNotificationState state) {
Sezam/AGKeypadSettingsViewController.m:452:        AGDiaryInfo(@"ConnectedForRemovePins", @"Connected for removing pins we should be in online mode theoretically");
Sezam/AGKeypadSettingsViewController.m:458:                    AGDiaryInfo(@"ClearedPinsSuccess", @"Cleared all PINs from lock");
Sezam/AGKeypadSettingsViewController.m:461:                    AGDiaryInfo(@"ClearedPinsFailure", @"Failed to clear PINs from lock");
Sezam/AGKeypadSettingsViewController.m:469:            oper.label = @"Clear data";
Sezam/AGKeypadSettingsViewController.m:482:        oper.label = @"Get Keypad Enabled";
Sezam/AGKeypadSettingsViewController.m:492:        oper.label = @"Get Backlight";
Sezam/AGKeypadSettingsViewController.m:502:        oper.label = @"Get One Touch";
Sezam/AGRemoteLock.m:23:#define  kRemoteCallingUserIdKey   @"callingUserID"
Sezam/AGRemoteLock.m:24:#define  kRemoteStatusKey   @"status"
Sezam/AGRemoteLock.m:25:#define  kRemoteLockedKey   @"locked"
Sezam/AGRemoteLock.m:26:#define  kRemoteUnLockedKey   @"unlocked"
Sezam/AGRemoteLock.m:27:#define  kRemoteLockingKey   @"locking"
Sezam/AGRemoteLock.m:28:#define  kRemoteUnLockingKey   @"unlocking"
Sezam/AGRemoteLock.m:29:#define  kRemoteUnknownKey   @"unknown"
Sezam/AGRemoteLock.m:31:static NSString* kAGDiaryCategory = @"RemoteLock";
Sezam/AGRemoteLock.m:33:static NSString* kAGAnalyticsDiaryCategory = @"AmazonReview";
Sezam/AGRemoteLock.m:35:static NSString* kRemoteEventKey = @"remoteEvent";
Sezam/AGRemoteLock.m:54:    if ([bridge.model isEqualToString:@"august-connect"]) {
Sezam/AGRemoteLock.m:56:    } else if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGRemoteLock.m:61:    AGDiaryDebug(@"AGMessageSubscribe", @"Subscribing to Topic:%@", self.lock.pubsubChannel);
Sezam/AGRemoteLock.m:100:    NSDictionary *responseDetails = @{@"AppResignedActive":[NSNumber numberWithBool:YES]};
Sezam/AGRemoteLock.m:177:                            AGDiaryInfo(@"EnabledHomekitNotification", [NSString stringWithFormat:@"ForLockMechanismStateAndLockId: %@",self.lock.objectId]);
Sezam/AGRemoteLock.m:180:                            AGDiaryInfo(@"EnabledHomekitNotification", [NSString stringWithFormat:@"ForDoorStateAndLockId: %@",self.lock.objectId]);
Sezam/AGRemoteLock.m:223:            bridgeType =  @"UnknownBridge";
Sezam/AGRemoteLock.m:226:            bridgeType = @"ConnectBridge";
Sezam/AGRemoteLock.m:229:            bridgeType = @"DoorbellBridge";
Sezam/AGRemoteLock.m:232:            bridgeType = @"HomekitBridge";
Sezam/AGRemoteLock.m:235:            bridgeType = @"UnknownBridge";
Sezam/AGRemoteLock.m:247:            requestType = @"StartRequestStatus";
Sezam/AGRemoteLock.m:250:            requestType = @"StartRequestLock";
Sezam/AGRemoteLock.m:253:            requestType = @"StartRequestUnlock";
Sezam/AGRemoteLock.m:256:            requestType = @"UnknownRequest";
Sezam/AGRemoteLock.m:269:            requestSuccessType = @"RequestStatusSuccess";
Sezam/AGRemoteLock.m:272:            requestSuccessType = @"RequestLockSuccess";
Sezam/AGRemoteLock.m:275:            requestSuccessType = @"RequestUnlockSuccess";
Sezam/AGRemoteLock.m:278:            requestSuccessType = @"RequestUnknownSuccess";
Sezam/AGRemoteLock.m:291:            requestFailureType = @"RequestStatusFailed";
Sezam/AGRemoteLock.m:294:            requestFailureType = @"RequestLockFailed";
Sezam/AGRemoteLock.m:297:            requestFailureType = @"RequestUnlockFailed";
Sezam/AGRemoteLock.m:300:            requestFailureType = @"RequestUnknownFailed";
Sezam/AGRemoteLock.m:313:            bridgeModeString = @"BridgeModeNone";
Sezam/AGRemoteLock.m:316:            bridgeModeString = @"BridgeModeSlow";
Sezam/AGRemoteLock.m:319:            bridgeModeString = @"BridgeModeFast";
Sezam/AGRemoteLock.m:322:            bridgeModeString = @"BridgeModeHyper";
Sezam/AGRemoteLock.m:325:            bridgeModeString = @"BridgeModeHomeKit";
Sezam/AGRemoteLock.m:343:    NSString *logMessage = [NSString stringWithFormat:@"%@, Remote status = '%@'", bridgeType, status];
Sezam/AGRemoteLock.m:353:        bleConnectedString = @"YES";
Sezam/AGRemoteLock.m:355:        bleConnectedString = @"NO";
Sezam/AGRemoteLock.m:362:    NSString *logMessage = [NSString stringWithFormat:@"%@, BLEConnected = '%@'", bridgeType, [self bleConnectedString]];
Sezam/AGRemoteLock.m:421:    NSNumber *homekitDelay =[AGUtility getAppFeatureNumber:@"homekitDelay"];
Sezam/AGRemoteLock.m:466:         AGDiaryInfo(@"HyperBridge", @"Initialized Async and Persistent Remote Connection");
Sezam/AGRemoteLock.m:534:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:554:    NSString *status = [response treatNSNullAsNilObjectForKey:@"status"];
Sezam/AGRemoteLock.m:555:    if ([status isEqual:@"none"]) { // Logic for Homekit Response Failure
Sezam/AGRemoteLock.m:568:                if ([error.userInfo objectForKey:@"pubnubError"]) {
Sezam/AGRemoteLock.m:569:                    NSDictionary *pubnubError = (NSDictionary *)[error.userInfo objectForKey:@"pubnubError"];
Sezam/AGRemoteLock.m:570:                    httpErrorCode = [[pubnubError objectForKey:@"statusCode"] longValue];
Sezam/AGRemoteLock.m:572:                    NSHTTPURLResponse *httpResponse = [error.userInfo objectForKey:@"response"];
Sezam/AGRemoteLock.m:578:        responseDetails = @{@"ErrorCode":[NSNumber numberWithLong:httpErrorCode]};
Sezam/AGRemoteLock.m:580:        [self updateAGDiaryAndSetStateForErrorCode:httpErrorCode ForActionType:@"Status"];
Sezam/AGRemoteLock.m:586:        if ([response objectForKey:@"info"]) {
Sezam/AGRemoteLock.m:587:            NSDictionary *info = (NSDictionary *)[response objectForKey:@"info"];
Sezam/AGRemoteLock.m:588:            if ([info objectForKey:@"context"]) {
Sezam/AGRemoteLock.m:589:                NSDictionary *context = (NSDictionary *)[info objectForKey:@"context"];
Sezam/AGRemoteLock.m:590:                if ([context objectForKey:@"transactionID"]) {
Sezam/AGRemoteLock.m:591:                    [responseDetails setObject:[context objectForKey:@"transactionID"] forKey:@"transactionID"];
Sezam/AGRemoteLock.m:594:            if ([info objectForKey:@"action"]) {
Sezam/AGRemoteLock.m:595:                [responseDetails setObject:[info objectForKey:@"action"] forKey:@"action"];
Sezam/AGRemoteLock.m:598:        if ([response objectForKey:@"totalTime"]) {
Sezam/AGRemoteLock.m:599:            float totalTimeFloat = [[response objectForKey:@"totalTime"] floatValue];
Sezam/AGRemoteLock.m:601:            [responseDetails setObject:totalTime forKey:@"TotalTimeByACS"];
Sezam/AGRemoteLock.m:605:            if ([[responseDetails objectForKey:@"action"] isEqualToString:@"status"]) {
Sezam/AGRemoteLock.m:607:                    AGDiaryInfo(@"HyperBridgeLoggingIgnoreStatus", [NSString stringWithFormat:@"RequestIsInFlightForLockId: %@",self.lock.objectId]);
Sezam/AGRemoteLock.m:618:            if ([doorState isEqual:@"kAugDoorState_Init"]) {
Sezam/AGRemoteLock.m:620:            }else if ([doorState isEqual:@"kAugDoorState_Closed"]) {
Sezam/AGRemoteLock.m:622:            }else if ([doorState isEqual:@"kAugDoorState_Ajar"]) {
Sezam/AGRemoteLock.m:624:            }else if ([doorState isEqual:@"kAugDoorState_Open"]) {
Sezam/AGRemoteLock.m:626:            }else if ([doorState isEqual:@"kAugDoorState_Unknown"]) {
Sezam/AGRemoteLock.m:641:        else if ([status isEqual:@"DoorStateChanged"]) {
Sezam/AGRemoteLock.m:645:            AGDiaryError(@"UnrecongizedRemoteStatus", @"Remote Status '%@' is not recognized by RemoteOperateController.startStatusRequest", status);
Sezam/AGRemoteLock.m:646:            NSAssert(false, @"Remote Status '%@' is not recognized by RemoteOperateController.startStatusRequest", status);
Sezam/AGRemoteLock.m:666:    AGDiaryDebug(@"StartRequestLock", @"Sending request to Lock via bridge");
Sezam/AGRemoteLock.m:669:        AGDiaryDebug(@"DoorbellStartRequestLock", @"Sending request to Lock via bridge");
Sezam/AGRemoteLock.m:673:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:694:    AGDiaryDebug(@"StartRequestUnlock", @"Sending request to Unlock via bridge");
Sezam/AGRemoteLock.m:696:        AGDiaryDebug(@"DoorbellStartRequestUnlock", @"Sending request to Unlock via bridge");
Sezam/AGRemoteLock.m:700:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:742:            AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGRemoteLock.m:745:                AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeContactState);
Sezam/AGRemoteLock.m:750:                AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeCurrentLockMechanismState);
Sezam/AGRemoteLock.m:755:                        AGDiaryDebug(nil, @"Received API response after remote mode was cancelled.  Ignoring it.");
Sezam/AGRemoteLock.m:766:                            AGDiaryError(@"FailedToGetState", [error description]);
Sezam/AGRemoteLock.m:775:            AGDiaryError(@"StatusRequestError", @"Lock characteristic not found");
Sezam/AGRemoteLock.m:796:        AGDiaryDebug(@"LockReachable", @"HomeKit Lock is available");
Sezam/AGRemoteLock.m:798:            AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGRemoteLock.m:801:                AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeContactState);
Sezam/AGRemoteLock.m:806:                AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeCurrentLockMechanismState);
Sezam/AGRemoteLock.m:819:                            AGDiaryError(@"FailedToOperateViaHomekit", [error description]);
Sezam/AGRemoteLock.m:828:            AGDiaryError(@"StatusRequestError", @"Lock characteristic not found");
Sezam/AGRemoteLock.m:867:        AGDiaryError(@"UnknownState", @"Unknown state returned from lock");
Sezam/AGRemoteLock.m:868:        status = @"none";
Sezam/AGRemoteLock.m:870:    NSDictionary *response = @{@"status":status};
Sezam/AGRemoteLock.m:891:        if ([messageData objectForKey:@"error"]) {
Sezam/AGRemoteLock.m:892:            NSDictionary *pubnubError = (NSDictionary *)[messageData objectForKey:@"error"];
Sezam/AGRemoteLock.m:893:            NSDictionary *userInfo = @{@"pubnubError":pubnubError};
Sezam/AGRemoteLock.m:894:            NSError *error = [NSError errorWithDomain:@"RemoteEventError" code:0 userInfo:userInfo];
Sezam/AGRemoteLock.m:910:    if ([callingUserIdString isEqualToString:@"manuallock"] || [callingUserIdString isEqualToString:@"manualunlock"] || [lockStatusString isEqualToString:kRemoteLockedKey] || [lockStatusString isEqualToString:kRemoteUnLockedKey] || [lockStatusString isEqualToString:kRemoteLockingKey] || [lockStatusString isEqualToString:kRemoteUnLockingKey]) {
Sezam/AGRemoteLock.m:922:        if ([messageData objectForKey:@"error"]) {
Sezam/AGRemoteLock.m:923:            NSDictionary *error = (NSDictionary *)[messageData objectForKey:@"error"];
Sezam/AGRemoteLock.m:924:            if ([error objectForKey:@"code"]) {
Sezam/AGRemoteLock.m:925:                errorCode = [[error objectForKey:@"code"] longValue];
Sezam/AGRemoteLock.m:943:    BOOL permitAsyncTimeout = [AGUtility disableWithAppFeature:@"disableAsyncTimeOutForRemoteOps"];
Sezam/AGRemoteLock.m:964:                               @"pubnubError": @{
Sezam/AGRemoteLock.m:965:                                                @"statusCode": @402
Sezam/AGRemoteLock.m:968:    NSError *error = [NSError errorWithDomain:@"RemoteEventError" code:402 userInfo:userInfo];
Sezam/AGRemoteLock.m:979:    if (([callingUserId isEqualToString:@"manuallock"]) || ([callingUserId isEqualToString:@"manualunlock"])) {
Sezam/AGRemoteLock.m:980:        if ([callingUserId isEqualToString:@"manuallock"]) {
Sezam/AGRemoteLock.m:983:        if ([callingUserId isEqualToString:@"manualunlock"]) {
Sezam/AGRemoteLock.m:1225:    NSString *agDiaryEvent = [NSString stringWithFormat:@"Request%@Failed",actionType];
Sezam/AGRemoteLock.m:1228:        errorCode = @"000";
Sezam/AGRemoteLock.m:1230:        errorCode = [NSString stringWithFormat:@"%lu",httpErrorCode];
Sezam/AGRemoteLock.m:1236:        bridgeFirmwareVersion = @"NA";
Sezam/AGRemoteLock.m:1240:    NSString *failureCodeWithBridgeModelAndFirmWareVersion = [NSString stringWithFormat:@"%@+%@+%@", errorCode, bridgeModel, bridgeFirmwareVersion];
Sezam/AGRemoteLock.m:1243:    NSString *mergedDiaryEventForGoogleAnalytics = [NSString stringWithFormat:@"%@+%@",agDiaryEvent, failureCodeWithBridgeModelAndFirmWareVersion];
Sezam/AGRemoteLock.m:1245:    mergedDiaryEventForGoogleAnalytics = [mergedDiaryEventForGoogleAnalytics stringByReplacingOccurrencesOfString:@"." withString:@"+"];
Sezam/AGRemoteLock.m:1246:    mergedDiaryEventForGoogleAnalytics = [mergedDiaryEventForGoogleAnalytics stringByReplacingOccurrencesOfString:@"-" withString:@"+"];
Sezam/AGRemoteLock.m:1254:    BOOL showRBSError = [AGUtility checkForAppFeature:@"showrbserror"];
Sezam/AGRemoteLock.m:1261:            label.text = [NSString stringWithFormat:@"RBS TIMED OUT on %@", doorName];
Sezam/AGRemoteLock.m:1263:            label.text = [NSString stringWithFormat:@"RBS ERRROR %d on %@", errorCode, doorName];
Sezam/AGRemoteLock.m:1267:        label.font = [UIFont fontWithName:@"ProximaNova" size:30.0];
Sezam/AGRemoteLock.m:1283:    NSDictionary *connectSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"ConnectSuccessMetics"];
Sezam/AGRemoteLock.m:1285:        NSNumber *successCount = (NSNumber *)connectSuccessMetrics[@"successCount"];
Sezam/AGRemoteLock.m:1286:        NSNumber *failureCount = (NSNumber *)connectSuccessMetrics[@"failureCount"];
Sezam/AGRemoteLock.m:1300:    NSDictionary *updatedSuccessMetrics = [NSDictionary dictionaryWithObjectsAndKeys:successCount, @"successCount", failureCount, @"failureCount", nil];
Sezam/AGRemoteLock.m:1301:    [[NSUserDefaults standardUserDefaults] setObject:updatedSuccessMetrics forKey:@"ConnectSuccessMetics"];
Sezam/AGRemoteLock.m:1316:    [remoteOperationDetails setObject:[NSNumber numberWithBool:self.connectedByBLE] forKey:@"ConnectedByBLE"];
Sezam/AGRemoteLock.m:1318:    [remoteOperationDetails setObject:bridgeMode forKey:@"BridgeMode"];
Sezam/AGRemoteLock.m:1325:        if ([responseDetails objectForKey:@"action"]) {
Sezam/AGRemoteLock.m:1326:            if ([[responseDetails objectForKey:@"action"] isEqualToString:@"status"]) {
Sezam/AGRemoteLock.m:1352:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGRemoteLock.m:1355:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGRemoteLock.m:1362:                AGAnalyticsDiaryInfo(@"ConnectEvaluateSuccessRate", [NSString stringWithFormat:@"%f", connectSuccessRate]);
Sezam/AGRemoteLock.m:1370:                    AGAnalyticsDiaryInfo(@"ConnectShowAlertMessage", @"No");
Sezam/AGWeeklyRecurrenceSchedule.m:39:    iCalSchedule = [iCalSchedule stringByReplacingOccurrencesOfString:@"TZID=/" withString:@"TZID="];
Sezam/AGWeeklyRecurrenceSchedule.m:52:    NSAssert(mxlIsSynchronouslyParsing, @"MXL is no longer synchrously parsing and this logic needs to be updated");
Sezam/AGWeeklyRecurrenceSchedule.m:64:        NSDateFormatter *dateFormatter = [event valueForKey:@"dateFormatter"];
Sezam/AGWeeklyRecurrenceSchedule.m:124:                                             @"SU":@(AGDay_Sunday),
Sezam/AGWeeklyRecurrenceSchedule.m:125:                                             @"MO":@(AGDay_Monday),
Sezam/AGWeeklyRecurrenceSchedule.m:126:                                             @"TU":@(AGDay_Tuesday),
Sezam/AGWeeklyRecurrenceSchedule.m:127:                                             @"WE":@(AGDay_Wednesday),
Sezam/AGWeeklyRecurrenceSchedule.m:128:                                             @"TH":@(AGDay_Thursday),
Sezam/AGWeeklyRecurrenceSchedule.m:129:                                             @"FR":@(AGDay_Friday),
Sezam/AGWeeklyRecurrenceSchedule.m:130:                                             @"SA":@(AGDay_Saturday),
Sezam/AGTestCodeViewController.m:14:#define kAGDiaryCategory @"KeypadSetup"
Sezam/AGTestCodeViewController.m:53:    CABasicAnimation *scaleAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
Sezam/AGTestCodeViewController.m:60:    [self.codeTextLabel.layer addAnimation:scaleAnimation forKey:@"scaleAnimation"];
Sezam/AGTestCodeViewController.m:79:    [self.myCodeWorkedButton setTitle:NSLocalizedString(@"Next", nil) forState:UIControlStateNormal];
Sezam/AGTestCodeViewController.m:88:    AGDiaryInfo(@"TestWorked", @"TestWorked");
Sezam/AGTestCodeViewController.m:94:        UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadGiveEntryCodes"];
Sezam/AGHomeKitPrimaryHomeViewController.m:75:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitPrimaryHomeViewController.m:79:    cell.accessoryView = (indexPath.row != self.selectedRow)? nil : [[UIImageView alloc] initWithImage: [UIImage imageNamed:@"check_v2"]];
Sezam/AGSecretSupportViewController.m:33:    [AGUtility sendLogs:self toEmail:@"support@august.com"];
Sezam/AGAddLockSelectLockViewController.m:25:static NSString* kAGDiaryCategory = @"AGAddLockSelectLockViewController";
Sezam/AGAddLockSelectLockViewController.m:86:    self.promptTextView.text = NSLocalizedString(@"Let’s set up your August Smart Lock. Please remain near your door during the setup procress.",nil);
Sezam/AGAddLockSelectLockViewController.m:104:        self.heroImage.image = [UIImage imageNamed:@"CallistoLockSetup"];
Sezam/AGAddLockSelectLockViewController.m:106:        self.heroImage.image = [UIImage imageNamed:@"unity_setup"];
Sezam/AGAddLockSelectLockViewController.m:108:        self.heroImage.image = [UIImage imageNamed:@"basic_lock_setup"];
Sezam/AGAddLockSelectLockViewController.m:126:        self.promptTextView.text = NSLocalizedString(@"Make sure you’re standing near your Smart Lock, you’ve removed the battery tab and any remaining adhesive tape from the front of your door.",nil);
Sezam/AGAddLockSelectLockViewController.m:145:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Bluetooth Disabled",nil)
Sezam/AGAddLockSelectLockViewController.m:146:                                                                        message:NSLocalizedString(@"Please enable Bluetooth in order to setup your lock.",nil)
Sezam/AGAddLockSelectLockViewController.m:148:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:153:    AGDiaryInfo(@"AddLockDiscovered", @"Discovered lock named '%@'", lock.name);
Sezam/AGAddLockSelectLockViewController.m:160:        NSString *typeCheck = [advertisementData objectForKey:@"kCBAdvDataLocalName"];
Sezam/AGAddLockSelectLockViewController.m:163:            lockType = @"Unknown";
Sezam/AGAddLockSelectLockViewController.m:164:        } else if ([typeCheck isEqualToString:@"Aug"]) {
Sezam/AGAddLockSelectLockViewController.m:165:            lockType = @"Helios/Jupiter";
Sezam/AGAddLockSelectLockViewController.m:166:        } else if ([typeCheck hasPrefix:@"L3"]) {
Sezam/AGAddLockSelectLockViewController.m:167:            lockType = @"Europa";
Sezam/AGAddLockSelectLockViewController.m:168:        } else if ([typeCheck hasPrefix:@"L4"]) {
Sezam/AGAddLockSelectLockViewController.m:169:            lockType = @"Callisto";
Sezam/AGAddLockSelectLockViewController.m:171:            lockType = @"Unknown";
Sezam/AGAddLockSelectLockViewController.m:173:        NSDictionary *lockDictionary = @{@"lockId":lock.name, @"lockType":lockType};
Sezam/AGAddLockSelectLockViewController.m:179:            AGDiaryDebug(@"duplicateLockId", @"lock name: %@", lock.name);
Sezam/AGAddLockSelectLockViewController.m:194:    self.bluetoothError = [error.userInfo objectForKey:@"Error"];
Sezam/AGAddLockSelectLockViewController.m:214:        NSString *lockID = [lockDictionary objectForKey:@"lockId"];
Sezam/AGAddLockSelectLockViewController.m:215:        NSString *lockType = [lockDictionary objectForKey:@"lockType"];
Sezam/AGAddLockSelectLockViewController.m:223:                if ((error != nil) && ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGAddLockSelectLockViewController.m:242:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGAddLockSelectLockViewController.m:245:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Server Timed Out"
Sezam/AGAddLockSelectLockViewController.m:246:                                                                                message:[NSString stringWithFormat:@"The server timed out on at least one request.\n\nBTLE visible locks: %ld\nPaired locks: %ld\nUnpaired locks: %ld\nLocks with server timeout: %ld", (long)self.numberOfLocksLoaded, (long)self.numberOfPairedLocks, (long)self.unpairedLocks.count, (long)self.numberOfLockRefreshTimeouts]
Sezam/AGAddLockSelectLockViewController.m:248:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:266:        [self performSegueWithIdentifier:@"selectLockToDebugSelectLock" sender:sortedVisibleLocksArray];
Sezam/AGAddLockSelectLockViewController.m:280:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Server Connection Failure",nil)
Sezam/AGAddLockSelectLockViewController.m:281:                                                                            message:NSLocalizedString(@"We were unable to connect to the server. This may be due to a slow internet connection or a problem with the August server. Please try again.",nil)
Sezam/AGAddLockSelectLockViewController.m:283:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:287:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Lock Already Registered",nil)
Sezam/AGAddLockSelectLockViewController.m:288:                                                                            message:NSLocalizedString(@"A lock has been discovered that is already registered. Please factory reset this lock and attempt to set it up again. If you are unable to, call customer service at 844-284-8781.",nil)
Sezam/AGAddLockSelectLockViewController.m:290:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:291:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"Call August" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGAddLockSelectLockViewController.m:292:            NSURL *augustSupportURL = [NSURL URLWithString:@"tel://8442848781"];
Sezam/AGAddLockSelectLockViewController.m:299:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"No Locks Found",nil)
Sezam/AGAddLockSelectLockViewController.m:300:                                                                            message:NSLocalizedString(@"Please make sure that you are standing near the lock and that the batteries have been installed correctly.",nil)
Sezam/AGAddLockSelectLockViewController.m:302:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:306:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Multiple Locks Found",nil)
Sezam/AGAddLockSelectLockViewController.m:307:                                                                            message:NSLocalizedString(@"Only one August lock can be set up at a time.\n\nPlease remove the batteries from any other non-configured locks in range, then try again.",nil)
Sezam/AGAddLockSelectLockViewController.m:309:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:343:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGAddLockSelectLockViewController.m:344:                AGDiaryWarn(@"Logout", @"Session token/verify error logout getLocks");
Sezam/AGAddLockSelectLockViewController.m:351:                AGDiaryError(@"NetworkError", @"Error loading locks: %@, localized: %@", error, error.localizedDescription);
Sezam/AGAddLockSelectLockViewController.m:360:                AGDiaryInfo(@"KeychainLoadComplete", @"Loaded array of houses");
Sezam/AGAddLockSelectLockViewController.m:372:                        [self performSegueWithIdentifier:@"selectLockToNoHouse" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:380:                        [self performSegueWithIdentifier:@"selectLockToNoHouse" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:387:                        [self performSegueWithIdentifier:@"selectLockToAddLockName" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:393:                AGDiaryError(@"NetworkError", @"Error loading keychain: %@", error.localizedDescription);
Sezam/AGAddLockSelectLockViewController.m:395:                [AGUtility showError:@"Unable to load Houses." inViewController:self];
Sezam/AGAddLockSelectLockViewController.m:406:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"No Locks Found or Selected",nil)
Sezam/AGAddLockSelectLockViewController.m:407:                                                                        message:NSLocalizedString(@"Please make sure that you are standing near the lock and that the batteries have been installed correctly.",nil)
Sezam/AGAddLockSelectLockViewController.m:409:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:417:    self.scanningLabel.text = @"Selecting Lock...";
Sezam/AGAddLockSelectLockViewController.m:434:    if ([segue.identifier isEqualToString:@"selectLockToNoHouse"]) {
Sezam/AGAddLockSelectLockViewController.m:438:        [lockSetupAddHouseViewController setLockName:@""];
Sezam/AGAddLockSelectLockViewController.m:439:    } else if ([segue.identifier isEqualToString:@"selectLockToAddLockName"]) {
Sezam/AGAddLockSelectLockViewController.m:443:    } else if ([segue.identifier isEqualToString:@"selectLockToBuyLock"]) {
Sezam/AGAddLockSelectLockViewController.m:444:        [segue.destinationViewController setUrlToLoad:[NSURL URLWithString:@"http://www.august.com/?reserve=true"]];
Sezam/AGAddLockSelectLockViewController.m:445:    } else if ([segue.identifier isEqualToString:@"selectLockToDebugSelectLock"]){
Sezam/AGUtilityCommon.m:19:    return [environment objectForKey:@"TESTING"] != nil;
Sezam/AGUtilityCommon.m:85:        [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGUtilityCommon.m:88:    [dateFormatter setDateFormat:@"h:mm a"];
Sezam/AGUtilityCommon.m:91:    NSString *finalStr = [NSString stringWithFormat:@"%@ %@", dateStr, timeStr];
Sezam/AGUtilityCommon.m:93:    if ([dateStr.uppercaseString isEqual:@"TODAY"]||[dateStr.uppercaseString isEqual:@"YESTERDAY"]) {
Sezam/AGUtilityCommon.m:94:        finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:103:        [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGUtilityCommon.m:106:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:109:    NSString *finalStr = [NSString stringWithFormat:@"%@ %@", dateStr, timeStr];
Sezam/AGUtilityCommon.m:119:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:122:    NSString *finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:130:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:133:    NSString *finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:139:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtilityCommon.m:146:        return @"Today";
Sezam/AGUtilityCommon.m:149:        return @"Tomorrow";
Sezam/AGUtilityCommon.m:152:        return @"Yesterday";
Sezam/AGUtilityCommon.m:191:            statusLabelString = @"";
Sezam/AGUtilityCommon.m:194:            statusLabelString = @"Connecting...";
Sezam/AGUtilityCommon.m:197:            statusLabelString = @"Discovered";
Sezam/AGUtilityCommon.m:200:            statusLabelString = @"Connected";
Sezam/AGUtilityCommon.m:203:            statusLabelString = @"Lock Not Calibrated";
Sezam/AGUtilityCommon.m:206:            statusLabelString = @"Locked";
Sezam/AGUtilityCommon.m:209:            statusLabelString = @"Closed | Locked";
Sezam/AGUtilityCommon.m:212:            statusLabelString = @"Open | Locked";
Sezam/AGUtilityCommon.m:215:            statusLabelString = @"Unlocked";
Sezam/AGUtilityCommon.m:218:            statusLabelString = @"Closed | Unlocked";
Sezam/AGUtilityCommon.m:221:            statusLabelString = @"Open | Unlocked";
Sezam/AGUtilityCommon.m:224:            statusLabelString = @"Connecting Remotely...";
Sezam/AGUtilityCommon.m:227:            statusLabelString = @"Locking...";
Sezam/AGUtilityCommon.m:230:            statusLabelString = @"Unlocking...";
Sezam/AGUtilityCommon.m:233:            statusLabelString = NSLocalizedString(@"LOCK IN USE", nil);
Sezam/AGUtilityCommon.m:236:            statusLabelString = NSLocalizedString(@"TURN BLUETOOTH ON", nil);
Sezam/AGUtilityCommon.m:239:            statusLabelString = NSLocalizedString(@"BLUETOOTH ERROR", nil);
Sezam/AGUtilityCommon.m:242:            statusLabelString = NSLocalizedString(@"SECURITY ERROR", nil);
Sezam/AGUtilityCommon.m:245:            statusLabelString = NSLocalizedString(@"RESTARTING LOCK...",nil);
Sezam/AGUtilityCommon.m:248:            statusLabelString = @""; // We no longer show scanning for lock UI
Sezam/AGUtilityCommon.m:252:            statusLabelString = @"";
Sezam/AGUtilityCommon.m:255:            statusLabelString = NSLocalizedString(@"LOCK UNAVAILABLE", nil);
Sezam/AGUtilityCommon.m:258:            statusLabelString = NSLocalizedString(@"BRIDGE UNAVAILABLE", nil);
Sezam/AGUtilityCommon.m:261:            statusLabelString = NSLocalizedString(@"LOCK IN USE", nil);
Sezam/AGUtilityCommon.m:264:            statusLabelString = NSLocalizedString(@"SERVER FAILURE", nil);
Sezam/AGUtilityCommon.m:267:            statusLabelString = NSLocalizedString(@"LOCK IS JAMMED", nil);
Sezam/AGUtilityCommon.m:270:            statusLabelString = NSLocalizedString(@"LOCK CALIBRATION FAILURE", nil);
Sezam/AGUtilityCommon.m:273:            statusLabelString = NSLocalizedString(@"LOCK FAILURE (532)", nil);
Sezam/AGUtilityCommon.m:276:            statusLabelString = NSLocalizedString(@"LOCK FAILURE (533)", nil);
Sezam/AGUtilityCommon.m:279:            statusLabelString = NSLocalizedString(@"LOCK FAILURE (534)", nil);
Sezam/AGUtilityCommon.m:282:            statusLabelString = NSLocalizedString(@"LOCK FAILURE (540)", nil);
Sezam/AGUtilityCommon.m:285:            statusLabelString = NSLocalizedString(@"LOCK FAILURE (541)", nil);
Sezam/AGUtilityCommon.m:288:            statusLabelString = NSLocalizedString(@"LOW BATTERY FAILURE", nil);
Sezam/AGUtilityCommon.m:291:            statusLabelString = NSLocalizedString(@"HIGH TEMPERATURE FAILURE", nil);
Sezam/AGUtilityCommon.m:294:            statusLabelString = NSLocalizedString(@"LOCK DISCONNECTED", nil);
Sezam/AGUtilityCommon.m:297:            statusLabelString = NSLocalizedString(@"COMMUNICATION FAILURE (562)", nil);
Sezam/AGUtilityCommon.m:300:            statusLabelString = NSLocalizedString(@"COMMUNICATION FAILURE (563)", nil);
Sezam/AGUtilityCommon.m:303:            statusLabelString = NSLocalizedString(@"COMMUNICATION FAILURE (564)", nil);
Sezam/AGUtilityCommon.m:306:            statusLabelString = NSLocalizedString(@"COMMUNICATION FAILURE (565)", nil);
Sezam/AGUtilityCommon.m:309:            statusLabelString = NSLocalizedString(@"FAILED TO LOCK", nil);
Sezam/AGUtilityCommon.m:312:            statusLabelString = NSLocalizedString(@"FAILED TO UNLOCK", nil);
Sezam/AGUtilityCommon.m:315:            statusLabelString = NSLocalizedString(@"CHECKING LOCK", nil);
Sezam/AGUtilityCommon.m:318:            statusLabelString = @"";
Sezam/AGTemporaryAccessTableViewCell.m:27:    [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGTemporaryAccessTableViewCell.m:35:    [timeOfDayFormatter setDateFormat:@"h:mm a"];
Sezam/AGAutoUnlockSetupBaseController.m:32:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Cancel Auto-Unlock Setup?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockSetupBaseController.m:33:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel Setup" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockSetupBaseController.m:37:    [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Setup" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeychainViewController.m:29:#define AG_NOTIFICATION_GOT_NEST_TEMPERATURES               @"AG_NOTIFICATION_GOT_NEST_TEMPERATURES"
Sezam/AGKeychainViewController.m:32:static NSString* kAGDiaryCategory = @"Keychain";
Sezam/AGKeychainViewController.m:66:	if ([identifier isEqualToString:@"locksToHouses"])
Sezam/AGKeychainViewController.m:68:		ZoomOutSegue * zoomOutSegue = [[ZoomOutSegue alloc] initWithIdentifier:@"customUnwind" source:fromViewController destination:toViewController];
Sezam/AGKeychainViewController.m:98:    AGDiaryInfo(@"EndGetKeychainData", @"Finished getting API data for the keychain");
Sezam/AGKeychainViewController.m:119:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGKeychainViewController.m:120:                AGDiaryWarn(@"AuthErrorLogout", @"Session token error logout getHouses");
Sezam/AGKeychainViewController.m:124:                AGDiaryError(@"NetworkError", @"Error loading houses: %@, localized: %@", error, error.description);
Sezam/AGKeychainViewController.m:153:                    NSString *displayTemperature = @"";
Sezam/AGKeychainViewController.m:158:                        displayTemperature = [NSString stringWithFormat:@"%@°", [objects objectAtIndex:0]];
Sezam/AGKeychainViewController.m:164:                            displayTemperature = [NSString stringWithFormat:@"%@°", [objects objectAtIndex:0]];
Sezam/AGKeychainViewController.m:170:                            displayTemperature = [NSString stringWithFormat:@"%@°-%@°", [sortedTemps objectAtIndex:0], [sortedTemps objectAtIndex:(objects.count-1)]];
Sezam/AGKeychainViewController.m:208:    BOOL debugMode = [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
Sezam/AGKeychainViewController.m:212:        if ([baseURL isEqualToString:@"https://production.august.com"] || [baseURL isEqualToString:@"https://api-production.august.com"]) {
Sezam/AGKeychainViewController.m:213:            serverLabelText = @"Prod";
Sezam/AGKeychainViewController.m:215:        } else if ([baseURL isEqualToString:@"https://staging.august.com"]) {
Sezam/AGKeychainViewController.m:216:            serverLabelText = @"Staging";
Sezam/AGKeychainViewController.m:218:        } else if ([baseURL isEqualToString:@"https://api-dev-aws.august.com"]) {
Sezam/AGKeychainViewController.m:219:            serverLabelText = @"Api-Dev-AWS";
Sezam/AGKeychainViewController.m:221:        } else if ([baseURL isEqualToString:@"https://dev-jonathan.august.com"]) {
Sezam/AGKeychainViewController.m:222:            serverLabelText = @"Jonathan";
Sezam/AGKeychainViewController.m:224:        } else if ([baseURL isEqualToString:@"https://dev-justin.august.com"]) {
Sezam/AGKeychainViewController.m:225:            serverLabelText = @"Justin";
Sezam/AGKeychainViewController.m:227:        } else if ([baseURL isEqualToString:@"https://dev-dan.august.com"]) {
Sezam/AGKeychainViewController.m:228:            serverLabelText = @"Dan";
Sezam/AGKeychainViewController.m:230:        } else if ([baseURL isEqualToString:@"https://dev-ingo.august.com"]) {
Sezam/AGKeychainViewController.m:231:            serverLabelText = @"Ingo";
Sezam/AGKeychainViewController.m:233:        } else if ([baseURL isEqualToString:@"https://dev-phil.august.com"]) {
Sezam/AGKeychainViewController.m:234:            serverLabelText = @"Phil";
Sezam/AGKeychainViewController.m:236:        } else if ([baseURL isEqualToString:@"https://dev-ipalibo.august.com"]) {
Sezam/AGKeychainViewController.m:237:            serverLabelText = @"Ipalibo";
Sezam/AGKeychainViewController.m:239:        } else if ([baseURL isEqualToString:@"https://dev-etienne.august.com"]) {
Sezam/AGKeychainViewController.m:240:            serverLabelText = @"Etienne";
Sezam/AGKeychainViewController.m:242:        } else if ([baseURL isEqualToString:@"https://dev-sean.august.com"]) {
Sezam/AGKeychainViewController.m:243:            serverLabelText = @"Sean";
Sezam/AGKeychainViewController.m:246:            serverLabelText = @"Custom";
Sezam/AGKeychainViewController.m:290:            houseCell.label2.text = @"";
Sezam/AGKeychainViewController.m:316:            AGDiaryInfo(@"LogoutOnAppear", @"Logout from keychain appear");
Sezam/AGKeychainViewController.m:324:                        //[self performSegueWithIdentifier:@"mainToKeyRing" sender:nil];
Sezam/AGKeychainViewController.m:352:    AGDiaryDebug(@"ShowKeychain", @"Showing the keychain page - viewDidAppear");
Sezam/AGKeychainViewController.m:387:    AGCollectionViewCell *cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGKeychainViewController.m:407:        cell.label.accessibilityIdentifier = @"house name";
Sezam/AGKeychainViewController.m:416:            cell.label2.text = @"";
Sezam/AGKeychainViewController.m:467:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGKeychainViewController.m:468:    UIViewController *vc = [storyboard instantiateViewControllerWithIdentifier:@"AddDeviceViewController"];
Sezam/AGKeychainViewController.m:480:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGKeychainViewController.m:481:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGKeychainViewController.m:521:    NSAssert(house, @"House=nil inside showHouse");
Sezam/AGKeychainViewController.m:523:        AGDiaryInfo(nil, @"The house has locks. Go to the LockPagingationViewController & HouseTabBar");
Sezam/AGKeychainViewController.m:525:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGKeychainViewController.m:526:        AGHouseTabBarViewController *houseTabBar =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGKeychainViewController.m:531:        [AGUtility showError:[NSString stringWithFormat:NSLocalizedString(@"%@ has no devices! Add a device from settings.",nil), house.name] inViewController:self];
Sezam/AGAutoUnlockSetupCompleteController.m:38:    self.view.topView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_5_wireless_on.jpg"]];
Sezam/AGAutoUnlockSetupCompleteController.m:42:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupCompleteController.m:44:    NSString *title = @"Auto-Unlock Activated";
Sezam/AGAutoUnlockSetupCompleteController.m:45:    NSString *paragraph1 = @"You’re good to go! We’ll see you the next time you return home.";
Sezam/AGAutoUnlockSetupCompleteController.m:46:    NSString *paragraph2Part1 = @"Pro Tip: for best location detection, ";
Sezam/AGAutoUnlockSetupCompleteController.m:47:    NSString *paragraph2Part2 = @"please leave Wi-Fi turned on at all times.";
Sezam/AGAutoUnlockSetupCompleteController.m:50:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@\n\n%@%@", title, paragraph1, paragraph2Part1, paragraph2Part2];
Sezam/AGAutoUnlockSetupCompleteController.m:58:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupCompleteController.m:73:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupCompleteController.m:81:    [paragraph2Part2Attributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupCompleteController.m:89:    [self.view.actionButton setTitle:@"OK, GOT IT" forState:UIControlStateNormal];
Sezam/AGAutoUnlockPersistenceManager.m:28:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:31:    [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] setObject:updatedDict forKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:39:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:50:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:62:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:65:    [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] setObject:updatedDict forKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:73:                                                                                      @"lockID":record.lockID,
Sezam/AGAutoUnlockPersistenceManager.m:74:                                                                                      @"state":[NSNumber numberWithInteger:record.state],
Sezam/AGAutoUnlockPersistenceManager.m:76:                                                                                      @"enabled":[NSNumber numberWithInteger:record.enabled],
Sezam/AGAutoUnlockPersistenceManager.m:77:                                                                                      @"region":@{
Sezam/AGAutoUnlockPersistenceManager.m:78:                                                                                              @"lat":[NSString stringWithFormat:@"%f", record.region.center.latitude],
Sezam/AGAutoUnlockPersistenceManager.m:79:                                                                                              @"lon":[NSString stringWithFormat:@"%f", record.region.center.longitude],
Sezam/AGAutoUnlockPersistenceManager.m:80:                                                                                              @"radius":[NSString stringWithFormat:@"%f", record.region.radius]
Sezam/AGAutoUnlockPersistenceManager.m:82:                                                                                      @"shouldNotifyUserOfAutoUnlockRegionExit":@(record.shouldNotifyUserOfAutoUnlockRegionExit),
Sezam/AGAutoUnlockPersistenceManager.m:83:                                                                                      @"shouldNotifyUserOfSuccessfulUnlock":@(record.shouldNotifyUserOfSuccessfulUnlock)
Sezam/AGAutoUnlockPersistenceManager.m:87:        [dictionary setObject:record.lastRegionExitDate forKey:@"lastRegionExitDate"];
Sezam/AGAutoUnlockPersistenceManager.m:91:        [dictionary setObject:record.lastRegionExitDate forKey:@"lastSpuriousExitDate"];
Sezam/AGAutoUnlockPersistenceManager.m:101:    record.lockID = dict[@"lockID"];
Sezam/AGAutoUnlockPersistenceManager.m:103:    record.state = ((NSNumber *)dict[@"state"]).integerValue;
Sezam/AGAutoUnlockPersistenceManager.m:104:    record.lastRegionExitDate = ((NSDate *)dict[@"lastRegionExitDate"]);
Sezam/AGAutoUnlockPersistenceManager.m:105:    record.lastSpuriousExitDate = ((NSDate *)dict[@"lastSpuriousExitDate"]);
Sezam/AGAutoUnlockPersistenceManager.m:106:    record.enabled = ((NSNumber *)dict[@"enabled"]).integerValue;
Sezam/AGAutoUnlockPersistenceManager.m:108:    AGCircularGeoRegion *geoRegion = [[AGCircularGeoRegion alloc] initWithCenter:CLLocationCoordinate2DMake(((NSNumber *)dict[@"region"][@"lat"]).doubleValue, ((NSNumber *)dict[@"region"][@"lon"]).doubleValue) radius:((NSNumber *)dict[@"region"][@"radius"]).doubleValue identifier:record.lockID];
Sezam/AGAutoUnlockPersistenceManager.m:111:    record.shouldNotifyUserOfAutoUnlockRegionExit = ((NSNumber *)dict[@"shouldNotifyUserOfAutoUnlockRegionExit"]).boolValue;
Sezam/AGAutoUnlockPersistenceManager.m:112:    record.shouldNotifyUserOfSuccessfulUnlock = ((NSNumber *)dict[@"shouldNotifyUserOfSuccessfulUnlock"]).boolValue;
Sezam/AGDoorbellLockAssociationResultsViewController.m:24:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellLockAssociationResultsViewController.m:25:        [self.heroImageView setImage:[UIImage imageNamed:@"dbc2_LockDoorbellSyncInProgress"]];
Sezam/AGDoorbellLockAssociationResultsViewController.m:28:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellLockAssociationResultsViewController.m:29:        [self.heroImageView setImage:[UIImage imageNamed:@"LockDoorbellSyncInProgress"]];
Sezam/AGDoorbellLockAssociationResultsViewController.m:34:        self.heroMessage.text = @"Congratulations! Your Doorbell Cam and Smart Lock have been synced.";
Sezam/AGDoorbellLockAssociationResultsViewController.m:38:        self.heroMessage.text = @"Your Doorbell Cam and Smart Lock have been synced, but we couldn’t connect to your lock.";
Sezam/AGActiveMonitoringUtilityTests.m:37:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:43:    XCTAssert([alertDescription isEqualToString:@"Alert me when the door is locked or unlocked manually between 6:00AM-9:00AM on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:47:    AGWeeklyRecurrenceSchedule *schedule = [[AGWeeklyRecurrenceSchedule alloc] initWithDays:[NSSet setWithArray:@[@(AGDay_Wednesday), @(AGDay_Friday)]] startTime:21600 endTime:32400 timeZone:[NSTimeZone timeZoneWithAbbreviation:@"EST"]];//6am-9am
Sezam/AGActiveMonitoringUtilityTests.m:50:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:56:    XCTAssert([alertDescription isEqualToString:@"Alert me when the door is locked or unlocked manually between 6:00AM-9:00AM EDT on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:62:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:66:    XCTAssert([alertDescription isEqualToString:@"Alert me any time the door is locked or unlocked manually"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:70:    AGWeeklyRecurrenceSchedule *schedule = [[AGWeeklyRecurrenceSchedule alloc] initWithDays:[NSSet setWithArray:@[@(AGDay_Wednesday), @(AGDay_Friday)]] startTime:21600 endTime:32400 timeZone:[NSTimeZone timeZoneWithAbbreviation:@"EST"]];//6am-9am
Sezam/AGActiveMonitoringUtilityTests.m:73:    user.objectId = @"1234";
Sezam/AGActiveMonitoringUtilityTests.m:74:    user.firstName = @"Maya";
Sezam/AGActiveMonitoringUtilityTests.m:75:    user.lastName = @"Warner";
Sezam/AGActiveMonitoringUtilityTests.m:84:    XCTAssert([alertDescription isEqualToString:@"Alert me when Maya Warner locks or unlocks the door between 6:00AM-9:00AM EDT on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:93:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:97:    XCTAssert([alertDescription isEqualToString:@"The door is locked or unlocked manually"], @"The actual action description should match the expected action description");
Sezam/AGActiveMonitoringUtilityTests.m:103:    user.objectId = @"1234";
Sezam/AGActiveMonitoringUtilityTests.m:104:    user.firstName = @"Maya";
Sezam/AGActiveMonitoringUtilityTests.m:105:    user.lastName = @"Warner";
Sezam/AGActiveMonitoringUtilityTests.m:112:    XCTAssert([alertDescription isEqualToString:@"The door is locked or unlocked by Maya Warner"], @"The actual action description should match the expected action description");
Sezam/AGUnityModuleInstallationViewController.m:35:static NSString* kAGDiaryCategory = @"AGUnityModuleInstallationViewController";
Sezam/AGUnityModuleInstallationViewController.m:48:    self.titles = @[@"INSTALL LOCK", @"INSTALL MODULE", @"INSTALL DOORSENSE"];
Sezam/AGUnityModuleInstallationViewController.m:49:    self.heroImgNames = @[@"unity_header_lock_on_door", @"unity_header_module_in_lock", @"doorsenseSettingsImage"];
Sezam/AGUnityModuleInstallationViewController.m:53:            @"Make sure your Yale lock is installed and set up on your door, then continue.",
Sezam/AGUnityModuleInstallationViewController.m:54:            @"Make sure your August module is installed in your lock, then continue.",
Sezam/AGUnityModuleInstallationViewController.m:55:            @"DoorSense gives your August Smart Lock the ability to detect if your door is open or closed.\n If wish to use DoorSense, make sure it is installed, then continue."];
Sezam/AGUnityModuleInstallationViewController.m:56:    self.primaryBtnTitles = @[@"CONTINUE", @"CONTINUE", @"CONTINUE"];
Sezam/AGUnityModuleInstallationViewController.m:57:    self.secondBtnTitles = @[@"INSTALLATION INSTRUCTIONS", @"INSTALLATION INSTRUCTIONS", @"INSTALLATION INSTRUCTIONS"];
Sezam/AGUnityModuleInstallationViewController.m:89:        AGDiaryDebug(@"backBtnPressed", @"should not be here!");
Sezam/AGUnityModuleInstallationViewController.m:118:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGUnityModuleInstallationViewController.m:119:    AGInstallGuideWebViewController *guideWebVC = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGCreatePasswordViewController.m:103:    if ([segue.identifier isEqualToString:@"CreatePasswordToAddProfilePhoto"]) {
Sezam/AGCreatePasswordViewController.m:189:    NSString *weakPasswordAlertTitle   = NSLocalizedString(@"Please Create a Stronger Password", nil);
Sezam/AGCreatePasswordViewController.m:190:    NSString *weakPasswordAlertMessage = NSLocalizedString(@"August requires passwords to be at least 'medium' strength.", nil);
Sezam/AGCreatePasswordViewController.m:193:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:weakPasswordAlertTitle message:weakPasswordAlertMessage delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGCreatePasswordViewController.m:214:                        [self performSegueWithIdentifier:@"CreatePasswordToAddProfilePhoto" sender:nil];
Sezam/AGCreatePasswordViewController.m:219:                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:weakPasswordAlertTitle message:weakPasswordAlertMessage delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGCreatePasswordViewController.m:222:                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGCreatePasswordViewController.m:232:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGCreatePasswordViewController.m:254:    NSString *showHidePasswordButtonText = self.showPasswordCharacters ? NSLocalizedString(@"HIDE PASSWORD", nil) : NSLocalizedString(@"SHOW PASSWORD", nil);
Sezam/AGCreatePasswordViewController.m:265:        [self.createAccountButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGCreatePasswordViewController.m:268:        [self.createAccountButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGCreatePasswordViewController.m:285:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:286:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:287:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:288:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:309:            passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MINIMUM 8 CHARACTERS", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreatePasswordViewController.m:318:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"WEAK", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreatePasswordViewController.m:325:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MEDIUM", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreatePasswordViewController.m:332:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"STRONG", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreatePasswordViewController.m:338:            NSMutableAttributedString *temporaryString = [[NSMutableAttributedString alloc] initWithString:NSLocalizedString(@"PASSWORD STRENGTH: ", nil) attributes:@{ NSForegroundColorAttributeName: mediumLabelColor }];
Sezam/AGDoorbellPubSubPollTests.m:46://    XCTestExpectation *waitBetweenTests = [self expectationWithDescription:@"Should never fail"];
Sezam/AGDoorbellPubSubPollTests.m:62://    XCTestExpectation *proxyResponseSuccessExpectation = [self expectationWithDescription:@"Proxy response polling should succeed"];
Sezam/AGDoorbellPubSubPollTests.m:72://    XCTestExpectation *deviceStateSuccessExpectation = [self expectationWithDescription:@"Device state polling should succeed"];
Sezam/AGDoorbellPubSubPollTests.m:93://    XCTestExpectation *proxyResponseSuccessExpectation = [self expectationWithDescription:@"Reconnect should succeed"];
Sezam/AGDoorbellPubSubPollTests.m:102://                    XCTAssert(false, @"Second phase(get new proxy info) of reconnect test failed");
Sezam/AGDoorbellPubSubPollTests.m:108://            XCTAssert(false, @"First phase(get initial proxy info) of reconnect test failed");
Sezam/AGDoorbellPubSubPollTests.m:125://    XCTestExpectation *pubSubConnectionStateSuccessExpectation = [self expectationWithDescription:@"PubSub Connectivity polling should succeed"];
Sezam/AGIconListPickerView.m:66:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGIconListPickerView.m:73:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGIconListPickerView.m:79:    [self.closeButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGIconListPickerView.m:96:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGIconListPickerView.m:102:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGIconListPickerView.m:134:    NSString *reuseID = @"AGIconListPickerViewCellID";
Sezam/AGCallRecordHeartbeat.h:15:#define kHeartbeatEndpoint @"doorbells/%@/avsession/heartbeat"
Sezam/AGCropViewController.m:80:    [_acceptButton.titleLabel setFont:[UIFont fontWithName:@"Helvetica" size:16.0]];
Sezam/AGCropViewController.m:82:    [_acceptButton setTitle:NSLocalizedString(@"Choose",nil) forState:UIControlStateNormal];
Sezam/AGCropViewController.m:94:    [_cancelButton.titleLabel setFont:[UIFont fontWithName:@"Helvetica" size:16.0]];
Sezam/AGCropViewController.m:96:    [_cancelButton setTitle:NSLocalizedString(@"Cancel",nil) forState:UIControlStateNormal];
Sezam/AGWeeklyRecurrenceWidgetView.m:49:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:161:    self.startTimeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:162:    self.startTimeDescriptionLabel.text = @"START";
Sezam/AGWeeklyRecurrenceWidgetView.m:169:    self.endTimeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:170:    self.endTimeDescriptionLabel.text = @"END";
Sezam/AGWeeklyRecurrenceWidgetView.m:180:    self.startTimeLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:24];
Sezam/AGWeeklyRecurrenceWidgetView.m:189:    self.endTimeLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:24];
Sezam/AGWeeklyRecurrenceWidgetView.m:250:    [dayViews addObject:[self defaultDayViewWithDayText:@"SU"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:253:    [dayViews addObject:[self defaultDayViewWithDayText:@"MO"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:256:    [dayViews addObject:[self defaultDayViewWithDayText:@"TU"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:259:    [dayViews addObject:[self defaultDayViewWithDayText:@"WE"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:262:    [dayViews addObject:[self defaultDayViewWithDayText:@"TH"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:265:    [dayViews addObject:[self defaultDayViewWithDayText:@"FR"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:268:    [dayViews addObject:[self defaultDayViewWithDayText:@"SA"]];
Sezam/AGNewPasswordViewController.m:57:                                                                                                NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Regular" size:17.0]}];
Sezam/AGNewPasswordViewController.m:62:                                                                                                      NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Regular" size:17.0]}];
Sezam/AGNewPasswordViewController.m:68:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGNewPasswordViewController.m:70:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGNewPasswordViewController.m:101:        errorMsg = NSLocalizedString(@"Please enter a password.",nil);
Sezam/AGNewPasswordViewController.m:104:        errorMsg = NSLocalizedString(@"Your passwords do not match.",nil);
Sezam/AGNewPasswordViewController.m:108:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGNewPasswordViewController.m:113:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Signing in...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNewPasswordViewController.m:122:                UIAlertController *passwordUpdatedAlertController = [UIAlertController alertControllerWithTitle:@"Password Updated" message:@"Your password has been changed." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGNewPasswordViewController.m:123:                [passwordUpdatedAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGNewPasswordViewController.m:142:                if ((error != nil) && ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound)) {
Sezam/AGNewPasswordViewController.m:143:                    NSString *errorTitle = NSLocalizedString(@"Your password must be at least 8 characters and must contain the following:",nil);
Sezam/AGNewPasswordViewController.m:144:                    NSString *errorMsg = NSLocalizedString(@"\n at least one upper-case letter\n at least one lower-case letter\n at least one number\n at least one non-alphanumeric char\n",nil);
Sezam/AGNewPasswordViewController.m:148:                    [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGNewPasswordViewController.m:153:                    NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGNewPasswordViewController.m:158:                    [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGNewPasswordViewController.m:186:            [self.resetPasswordButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGNewPasswordViewController.m:191:    [self.resetPasswordButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGNewPasswordViewController.m:247:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:248:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:249:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:250:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:271:            passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MINIMUM 8 CHARACTERS", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGNewPasswordViewController.m:280:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"WEAK", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGNewPasswordViewController.m:287:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MEDIUM", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGNewPasswordViewController.m:294:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"STRONG", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGNewPasswordViewController.m:300:            NSMutableAttributedString *temporaryString = [[NSMutableAttributedString alloc] initWithString:NSLocalizedString(@"PASSWORD STRENGTH: ", nil) attributes:@{ NSForegroundColorAttributeName: mediumLabelColor }];
Sezam/AGSignupPickLockViewController.m:73:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"LockTypeCell"];
Sezam/AGSignupPickLockViewController.m:76:        cell.imageView0.image = [UIImage imageNamed:@"onboard_callisto"];
Sezam/AGSignupPickLockViewController.m:77:        cell.imageView2.image = [UIImage imageNamed:@"onboard_callisto_bg"];
Sezam/AGSignupPickLockViewController.m:78:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGSignupPickLockViewController.m:79:        cell.label3.text = @"3RD GENERATION";
Sezam/AGSignupPickLockViewController.m:82:        cell.imageView0.image = [UIImage imageNamed:@"onboard_asl"];
Sezam/AGSignupPickLockViewController.m:83:        cell.imageView2.image = [UIImage imageNamed:@"onboard_asl_bg"];
Sezam/AGSignupPickLockViewController.m:84:        cell.label2.text = @"AUGUST SMART LOCK PRO";
Sezam/AGSignupPickLockViewController.m:85:        cell.label3.text = @"3RD GENERATION";
Sezam/AGSignupPickLockViewController.m:88:        cell.imageView0.image = [UIImage imageNamed:@"onboard_asl_hk"];
Sezam/AGSignupPickLockViewController.m:89:        cell.imageView2.image = [UIImage imageNamed:@"onboard_asl_hk_bg"];
Sezam/AGSignupPickLockViewController.m:90:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGSignupPickLockViewController.m:91:        cell.label3.text = @"1ST OR 2ND GENERATION";
Sezam/AGSignupPickLockViewController.m:104:        [self performSegueWithIdentifier:@"signupPickLockTypeToThreeStateChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:107:        [self performSegueWithIdentifier:@"signupPickLockTypeToThreeStateChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:110:        [self performSegueWithIdentifier:@"signupPickLockTypeToTwoStepChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:125:    if ([segue.identifier isEqualToString:@"signupPickLockTypeToThreeStateChecklist"]) {
Sezam/AGSignupPickLockViewController.m:130:    } else if ([segue.identifier isEqualToString:@"signupPickLockTypeToTwoStepChecklist"]) {
Sezam/AGDoorbellSettingsViewController.m:33:static NSString* kAGDiaryCategory = @"DoorbellSettingsViewController";
Sezam/AGDoorbellSettingsViewController.m:35:static NSString*const kAppFeatureForImageQuality = @"mars-image-slider";
Sezam/AGDoorbellSettingsViewController.m:147:    if (self.doorbell.doorbellCapability.canControlIndoorChime == YES && ([AGUtility checkForAppFeature:@"disableDoorbellChimeControl"] == NO)) {
Sezam/AGDoorbellSettingsViewController.m:157:    if ([AGUtility checkForAppFeature:@"doorbellmotion"]) {_motionDoorbellSettingRow = _numRowsSection1++;}
Sezam/AGDoorbellSettingsViewController.m:179:    if ([AGUtility checkForAppFeature:@"doorbelldiagnostics"]) {_diagnosticsRow = _numRowsSection1++;}
Sezam/AGDoorbellSettingsViewController.m:210:     self.showVideoQuality = [AGUtility checkForAppFeature:@"mars_video_quality"];
Sezam/AGDoorbellSettingsViewController.m:230:            self.firmwareVersion.text = [NSString stringWithFormat:@"FW Version %@", self.doorbell.firmwareVersion];
Sezam/AGDoorbellSettingsViewController.m:232:            self.firmwareVersion.text = @"FW Version Unknown";
Sezam/AGDoorbellSettingsViewController.m:276:        title = @"YOUR NOTIFICATIONS";
Sezam/AGDoorbellSettingsViewController.m:278:        title = @"DEVICE SETTINGS";
Sezam/AGDoorbellSettingsViewController.m:286:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGDoorbellSettingsViewController.m:307:            cell =  [tableView dequeueReusableCellWithIdentifier:@"OfflineNotification"];
Sezam/AGDoorbellSettingsViewController.m:313:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MotionNotifications"];
Sezam/AGDoorbellSettingsViewController.m:319:            cell =  [tableView dequeueReusableCellWithIdentifier:@"CallNotifications"];
Sezam/AGDoorbellSettingsViewController.m:327:            cell =  [tableView dequeueReusableCellWithIdentifier:@"DoorbellName"];
Sezam/AGDoorbellSettingsViewController.m:329:                cell.label2.text = @"Lock Connection";
Sezam/AGDoorbellSettingsViewController.m:338:                cell.label2.text = @"Doorbell Name";
Sezam/AGDoorbellSettingsViewController.m:343:            cell =  [tableView dequeueReusableCellWithIdentifier:@"LockBluetoothSignal"];
Sezam/AGDoorbellSettingsViewController.m:346:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"PowerSlider"];
Sezam/AGDoorbellSettingsViewController.m:364:            cell =  [tableView dequeueReusableCellWithIdentifier:@"DoorbellSounds"];
Sezam/AGDoorbellSettingsViewController.m:376:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"SpeakerVolume"];
Sezam/AGDoorbellSettingsViewController.m:377:            sliderCell.label2.text = [NSString stringWithFormat:@"%i",self.doorbell.speakerVolume];
Sezam/AGDoorbellSettingsViewController.m:394:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MotionDoorbellSetting"];
Sezam/AGDoorbellSettingsViewController.m:400:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"MotionSensitivity"];
Sezam/AGDoorbellSettingsViewController.m:402:            sliderCell.label2.text = [NSString stringWithFormat:@"%i%%",motionSliderValue];
Sezam/AGDoorbellSettingsViewController.m:418:            cell =  [tableView dequeueReusableCellWithIdentifier:@"LiveVideoQuality"];
Sezam/AGDoorbellSettingsViewController.m:423:            cell =  [tableView dequeueReusableCellWithIdentifier:@"Diagnostics"];
Sezam/AGDoorbellSettingsViewController.m:426:            cell =  [tableView dequeueReusableCellWithIdentifier:@"ImageQuality"];
Sezam/AGDoorbellSettingsViewController.m:429:            cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGDoorbellSettingsViewController.m:432:            cell =  [tableView dequeueReusableCellWithIdentifier:@"WiFiSetup"];
Sezam/AGDoorbellSettingsViewController.m:435:            cell =  [tableView dequeueReusableCellWithIdentifier:@"AssociateDoorbellToLock"];
Sezam/AGDoorbellSettingsViewController.m:438:            cell =  [tableView dequeueReusableCellWithIdentifier:@"PowerAndBattery"];
Sezam/AGDoorbellSettingsViewController.m:441:            cell = [tableView dequeueReusableCellWithIdentifier:@"VideoSpeedTest"];
Sezam/AGDoorbellSettingsViewController.m:444:            cell =  [tableView dequeueReusableCellWithIdentifier:@"FactoryReset"];
Sezam/AGDoorbellSettingsViewController.m:447:            cell =  [tableView dequeueReusableCellWithIdentifier:@"InstallationInstructions"];
Sezam/AGDoorbellSettingsViewController.m:450:            cell =  [tableView dequeueReusableCellWithIdentifier:@"Troubleshooting"];
Sezam/AGDoorbellSettingsViewController.m:453:            cell =  [tableView dequeueReusableCellWithIdentifier:@"SerialNumber"];
Sezam/AGDoorbellSettingsViewController.m:458:                cell.label2.text = @"SN Unknown";
Sezam/AGDoorbellSettingsViewController.m:462:            cell =  [tableView dequeueReusableCellWithIdentifier:@"FirmwareVersion"];
Sezam/AGDoorbellSettingsViewController.m:464:                cell.label.text = [NSString stringWithFormat:@"Firmware %@",self.doorbell.firmwareVersion.uppercaseString];
Sezam/AGDoorbellSettingsViewController.m:467:                cell.label.text = @"FW Unknown";
Sezam/AGDoorbellSettingsViewController.m:515:    self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Rebooting Doorbell...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:521:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Doorbell Rebooted" message:@"Your doorbell was successfully rebooted." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:525:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Doorbell Reboot Error" message:[NSString stringWithFormat:@"There was a problem rebooting your doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:581:                [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellChangeName" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:584:                [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellFactoryReset" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:587:            [self performSegueWithIdentifier:@"DoorbellSettingsToLockSignalStrength" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:603:            [self performSegueWithIdentifier:@"doorbellSettingsToVideoQuality" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:606:            [self performSegueWithIdentifier:@"doorbellSettingsToDiagnostics" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:609:            [self performSegueWithIdentifier:@"DoorbellSettingsToImageQuality" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:612:            [self performSegueWithIdentifier:@"doorbellSettingsToSignalStrength" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:615:            [self performSegueWithIdentifier:@"doorbellSettingToWiFiSetup" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:618:            [self performSegueWithIdentifier:@"DoorbellSettingsToAssociateLock" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:621:            [self performSegueWithIdentifier:@"doorbellSettingsToPowerAndBattery" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:624:            [self performSegueWithIdentifier:@"doorbellSettingsToVideoSpeedTest" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:628:            [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellFactoryReset" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:653:            self.associatedLockName = @"N/A";
Sezam/AGDoorbellSettingsViewController.m:663:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGDoorbellSettingsViewController.m:664:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGDoorbellSettingsViewController.m:666:        installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/dbc2"];
Sezam/AGDoorbellSettingsViewController.m:678:            self.powerSliderLabel.text = @"Low";
Sezam/AGDoorbellSettingsViewController.m:682:            self.powerSliderLabel.text = @"Medium";
Sezam/AGDoorbellSettingsViewController.m:686:            self.powerSliderLabel.text = @"High";
Sezam/AGDoorbellSettingsViewController.m:697:        self.powerSliderLabel.text = @"Low";
Sezam/AGDoorbellSettingsViewController.m:699:        self.powerSliderLabel.text = @"Medium";
Sezam/AGDoorbellSettingsViewController.m:701:        self.powerSliderLabel.text = @"High";
Sezam/AGDoorbellSettingsViewController.m:726:    self.powerSliderLabel.text = @"Updating...";
Sezam/AGDoorbellSettingsViewController.m:729:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Power Mode: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:744:    self.speakerVolumeValue.text = [NSString stringWithFormat:@"%.0f", self.speakerVolumeSlider.value];
Sezam/AGDoorbellSettingsViewController.m:756:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Speaker Volume" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:759:            self.speakerVolumeValue.text = [NSString stringWithFormat:@"%i",self.doorbell.speakerVolume];
Sezam/AGDoorbellSettingsViewController.m:784:    self.motionValueLabel.text = [NSString stringWithFormat:@"%.0f%%", self.motionValueSlider.value];
Sezam/AGDoorbellSettingsViewController.m:798:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Motion Sensitivity" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:802:            self.motionValueLabel.text = [NSString stringWithFormat:@"%i%%",motionSliderValue];
Sezam/AGDoorbellSettingsViewController.m:864:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars2MotionSensitivityLowerBound"];
Sezam/AGDoorbellSettingsViewController.m:868:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars1MotionSensitivityLowerBound"];
Sezam/AGDoorbellSettingsViewController.m:884:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars2MotionSensitivityUpperBound"];
Sezam/AGDoorbellSettingsViewController.m:888:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars1MotionSensitivityUpperBound"];
Sezam/AGDoorbellSettingsViewController.m:914:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting sound: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:923:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting motion: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:935:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Doorbell motion: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:945:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting offline notification: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:958:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Call notification: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:968:    if ([segue.identifier isEqualToString:@"doorbellSettingsToDoorbellChangeName"]) {
Sezam/AGDoorbellSettingsViewController.m:972:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToDoorbellFactoryReset"]) {
Sezam/AGDoorbellSettingsViewController.m:976:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToDiagnostics"]) {
Sezam/AGDoorbellSettingsViewController.m:981:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToSignalStrength"]) {
Sezam/AGDoorbellSettingsViewController.m:985:    else if ([segue.identifier isEqualToString:@"doorbellSettingToWiFiSetup"]) {
Sezam/AGDoorbellSettingsViewController.m:989:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToPowerAndBattery"]) {
Sezam/AGDoorbellSettingsViewController.m:993:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToVideoSpeedTest"]) {
Sezam/AGDoorbellSettingsViewController.m:997:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToVideoQuality"]) {
Sezam/AGDoorbellSettingsViewController.m:1002:    else if ([segue.identifier isEqualToString:@"DoorbellSettingsToAssociateLock"]) {
Sezam/AGDoorbellSettingsViewController.m:1006:    else if ([segue.identifier isEqualToString:@"DoorbellSettingsToLockSignalStrength"]) {
Sezam/AGDoorbellSettingsViewController.m:1009:    } else if ([segue.identifier isEqualToString:@"DoorbellSettingsToImageQuality"]) {
Sezam/AGDoorbellSettingsViewController.m:1027:    self.motionBrightnessCell =  [self.settingsTableView dequeueReusableCellWithIdentifier:@"MotionBrightness"];
Sezam/AGDoorbellSettingsViewController.m:1041:    doorbellBrightnessPickerController.title = @"MOTION LIGHT";
Sezam/AGDoorbellSettingsViewController.m:1042:    doorbellBrightnessPickerController.listItemTitles = @[@"Off", @"Low Brightness", @"Medium Brightness"];
Sezam/AGDoorbellSettingsViewController.m:1099:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellSettingsViewController.m:1100:                                                                                message:[NSString stringWithFormat:@"Error updating Motion Light Brightness: %@", error.localizedDescription]
Sezam/AGDoorbellSettingsViewController.m:1102:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellSettingsViewController.m:1113:    self.indoorChimeEnabledCell = [self.settingsTableView dequeueReusableCellWithIdentifier:@"IndoorChimeEnabledCell"];
Sezam/AGDoorbellSettingsViewController.m:1114:    self.indoorChimeEnabledCell.titleLabel.text = @"Indoor Chime";
Sezam/AGDoorbellSettingsViewController.m:1115:    self.indoorChimeEnabledCell.descriptionLabel.text = @"You can turn this OFF to disable the doorbell chime you hear inside your house.";
Sezam/AGDoorbellSettingsViewController.m:1126:    NSDictionary *settingsChanges = @{@"bellTimerConfig":[self indoorChimeDelayForChimeEnabled:chimeEnabled]};
Sezam/AGDoorbellSettingsViewController.m:1135:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellSettingsViewController.m:1136:                                                                                message:[NSString stringWithFormat:@"Error updating Indoor Chime setting: %@", error.localizedDescription]
Sezam/AGDoorbellSettingsViewController.m:1138:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellSettingsViewController.m:1150:    NSNumber *indoorChimeDelay = [self.doorbell.settings treatNSNullAsNilObjectForKey:@"bellTimerConfig"];
Sezam/DateRangeView.m:70:    self.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:16];
Sezam/DateRangeView.m:197:    [_startDateTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:198:    [_endDateTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:199:    [_timeTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:236:    CGSize maxDateTextSize = [@"MMM MMM MM" sizeWithAttributes:
Sezam/DateRangeView.m:239:    CGSize maxTimeTextSize = [@"MM MM" sizeWithAttributes:
Sezam/DateRangeView.m:257:    CGRect endTitleTextRect = [self drawText:@"END"
Sezam/DateRangeView.m:267:    CGRect timeTitleTextRect = [self drawText:@"TIME"
Sezam/DateRangeView.m:334:    static NSString *const cellID = @"cell";
Sezam/DateRangeView.m:374:        timeStr = @"NEVER";
Sezam/DateRangeView.m:377:        timeStr = @"12 AM";
Sezam/DateRangeView.m:380:        timeStr = @"12 PM";
Sezam/DateRangeView.m:383:        timeStr = [NSString stringWithFormat:@"%ld PM", (long)time-12];
Sezam/DateRangeView.m:386:        timeStr = [NSString stringWithFormat:@"%ld AM", (long)time];
Sezam/DateRangeView.m:487:        return @"NEVER";
Sezam/DateRangeView.m:492:        return @"TODAY";
Sezam/DateRangeView.m:495:    NSString *week = @"ERR";
Sezam/DateRangeView.m:497:        case 1: week = @"SUN"; break;
Sezam/DateRangeView.m:498:        case 2: week = @"MON"; break;
Sezam/DateRangeView.m:499:        case 3: week = @"TUE"; break;
Sezam/DateRangeView.m:500:        case 4: week = @"WED"; break;
Sezam/DateRangeView.m:501:        case 5: week = @"THU"; break;
Sezam/DateRangeView.m:502:        case 6: week = @"FRI"; break;
Sezam/DateRangeView.m:503:        case 7: week = @"SAT"; break;
Sezam/DateRangeView.m:507:    NSString *month = @"ERR";
Sezam/DateRangeView.m:509:        case 1: month = @"JAN"; break;
Sezam/DateRangeView.m:510:        case 2: month = @"FEB"; break;
Sezam/DateRangeView.m:511:        case 3: month = @"MAR"; break;
Sezam/DateRangeView.m:512:        case 4: month = @"APR"; break;
Sezam/DateRangeView.m:513:        case 5: month = @"MAY"; break;
Sezam/DateRangeView.m:514:        case 6: month = @"JUN"; break;
Sezam/DateRangeView.m:515:        case 7: month = @"JUL"; break;
Sezam/DateRangeView.m:516:        case 8: month = @"AUG"; break;
Sezam/DateRangeView.m:517:        case 9: month = @"SEP"; break;
Sezam/DateRangeView.m:518:        case 10: month = @"OCT"; break;
Sezam/DateRangeView.m:519:        case 11: month = @"NOV"; break;
Sezam/DateRangeView.m:520:        case 12: month = @"DEC"; break;
Sezam/DateRangeView.m:524:    return [NSString stringWithFormat:@"%@ %@ %d", week, month, (int)dateComponents.day];
Sezam/DateRangeView.m:837:    if ( [keyPath isEqualToString:@"visible"] ) {
Sezam/DateRangeView.m:870:    [_startDateTableView removeObserver:self forKeyPath:@"visible"];
Sezam/DateRangeView.m:871:    [_endDateTableView removeObserver:self forKeyPath:@"visible"];
Sezam/DateRangeView.m:872:    [_timeTableView removeObserver:self forKeyPath:@"visible"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:18:static NSString* kAGDiaryCategory = @"DoorbellLockAssociation";
Sezam/AGDoorbellLockAssociationValidationViewController.m:32:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:33:        [self.closeButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGDoorbellLockAssociationValidationViewController.m:34:        [self.heroImageView setImage:[UIImage imageNamed:@"dbc2_LockDoorbellSyncInProgress"]];
Sezam/AGDoorbellLockAssociationValidationViewController.m:36:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:37:        [self.heroImageView setImage:[UIImage imageNamed:@"LockDoorbellSyncInProgress"]];
Sezam/AGDoorbellLockAssociationValidationViewController.m:58:        doorbellModel = @"Doorbell v1.0";
Sezam/AGDoorbellLockAssociationValidationViewController.m:59:        doorbellType = @"mars";
Sezam/AGDoorbellLockAssociationValidationViewController.m:61:        doorbellModel = @"Doorbell v2.0";
Sezam/AGDoorbellLockAssociationValidationViewController.m:62:        doorbellType = @"mars2";
Sezam/AGDoorbellLockAssociationValidationViewController.m:69:            if ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound) {
Sezam/AGDoorbellLockAssociationValidationViewController.m:70:                errorMessage = @"Doorbell Serial Number is not Valid";
Sezam/AGDoorbellLockAssociationValidationViewController.m:73:            if ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound) {
Sezam/AGDoorbellLockAssociationValidationViewController.m:74:                errorMessage = @"Doorbell is already Registered. Please contact August support.";
Sezam/AGDoorbellLockAssociationValidationViewController.m:76:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:77:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:97:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"We were unable to associate your Lock and Doorbell. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:98:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:114:        [AGBridge postBridgeWithMfgId:self.doorbell.serialNumber bridgeModel:@"august-doorbell" lockId:self.lock.objectId resultBlock: ^(AGBridge *bridge, NSError *error) {
Sezam/AGDoorbellLockAssociationValidationViewController.m:116:                UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"We were unable to enable your Doorbell for Lock operation over WiFi." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:117:                UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:186:        AGDiaryInfo(@"AddingUsersToDevice",@"Dispatch Group Complete");
Sezam/AGDoorbellLockAssociationValidationViewController.m:196:        self.progressLabel.text = @"Testing Remote Lock Connection...";
Sezam/AGDoorbellLockAssociationValidationViewController.m:205:                        [self performSegueWithIdentifier:@"ValidationToResults" sender:nil];
Sezam/AGDoorbellLockAssociationValidationViewController.m:213:                    [self performSegueWithIdentifier:@"ValidationToResults" sender:nil];
Sezam/AGDoorbellLockAssociationValidationViewController.m:233:    self.progressLabel.text = @"Updating Lock and Doorbell...";
Sezam/AGDoorbellLockAssociationValidationViewController.m:243:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:244:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationValidationViewController.m:248:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationValidationViewController.m:268:    if ([segue.identifier isEqualToString:@"ValidationToResults"]) {
Sezam/AGAmazonReviews.m:17:static NSString* kAGDiaryCategory = @"AmazonReviews";
Sezam/AGAmazonReviews.m:19:static NSString* kAGAnalyticsDiaryCategory = @"AmazonReviews";
Sezam/AGAmazonReviews.m:21:NSString* const kProductName = @"productName";                  // Product Name as it's displayed to the user
Sezam/AGAmazonReviews.m:22:NSString* const kProductImage = @"productImage";                // Product Image Identifier as found in the Image Assets Catalog Images.xcassets->AmazonReviewProductShots
Sezam/AGAmazonReviews.m:23:NSString* const kNoFeedbackReviewKey = @"noFeedbackReviewKey";  // This is the key for the NSUserDefault bool which indicates not to show the popup again to the user
Sezam/AGAmazonReviews.m:24:NSString* const kProductAsin = @"asin";                         // This is the Amazon ASIN as defined by amazon
Sezam/AGAmazonReviews.m:25:NSString* const kAppFeatureAsinKey = @"appFeatureAsinKey";      // This is an override for the Amazon Asin for the product for use with AppFeatures (In case the asin needs to be switched with an appFeature on the fly)
Sezam/AGAmazonReviews.m:26:NSString* const kReviewType = @"reviewType";                    // This is for Analytics Logging Purposes
Sezam/AGAmazonReviews.m:27:NSString* const kProductFamily = @"productFamily";                  
Sezam/AGAmazonReviews.m:28:NSString* const kProductModel = @"productModel";
Sezam/AGAmazonReviews.m:36:    NSDictionary *doorbellReviewDictionary = @{kProductName:@"August Doorbell Cam", kProductImage:@"DoorbellD1ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Doorbell", kProductAsin: @"B0168IXNLA", kAppFeatureAsinKey:@"doorbell-asin", kReviewType:@"DoorbellReview", kProductFamily:@"Doorbell", kProductModel:@"D1"};
Sezam/AGAmazonReviews.m:37:    NSDictionary *lockReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Lock", kProductAsin: @"B0168IXNZQ", kAppFeatureAsinKey:@"smartlock-asin", kReviewType:@"LockReview", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:38:    NSDictionary *keypadReviewDictionary = @{kProductName:@"August Smart Keypad", kProductImage:@"KeypadForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Keypad", kProductAsin: @"B015SLMR1U", kAppFeatureAsinKey:@"mercury-asin", kReviewType:@"KeypadReview", kProductFamily:@"Keypad", kProductModel:@"K2"};
Sezam/AGAmazonReviews.m:39:    NSDictionary *connectReviewDictionary = @{kProductName:@"August Connect Wi-Fi Bridge", kProductImage:@"ConnectForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Connect", kProductAsin: @"B0168IXNFQ", kAppFeatureAsinKey:@"venus-asin", kReviewType:@"ConnectReview", kProductFamily:@"Connect", kProductModel:@"C3"};
Sezam/AGAmazonReviews.m:41:    NSDictionary *doorbellD2ReviewDictionary = @{kProductName:@"August Doorbell Cam", kProductImage:@"DoorbellD2ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-DoorbellD2", kProductAsin: @"B075SY59M9", kAppFeatureAsinKey:@"doorbell2-asin", kReviewType:@"DoorbellReviewD2", kProductFamily:@"Doorbell", kProductModel:@"D2"};
Sezam/AGAmazonReviews.m:42:    NSDictionary *lockL3EuropaReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL3", kProductAsin: @"B0765JNS2D", kAppFeatureAsinKey:@"smartlock3-europa-asin", kReviewType:@"LockReviewL3Europa", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:43:    NSDictionary *lockL3GalileoReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL3", kProductAsin: @"B0752V8D8D", kAppFeatureAsinKey:@"smartlock3-galileo-asin", kReviewType:@"LockReviewL3Galileo", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:44:    NSDictionary *lockL4ReviewDictionary= @{kProductName:@"August Smart Lock", kProductImage:@"LockL4ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL4", kProductAsin: @"B0752XNC8M", kAppFeatureAsinKey:@"smartlock4-asin", kReviewType:@"LockReviewL4", kProductFamily:@"Lock", kProductModel:@"L4"};
Sezam/AGAmazonReviews.m:83:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGAmazonReviews.m:85:    NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily] ?: @"";
Sezam/AGAmazonReviews.m:86:    NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel]  ?: @"";
Sezam/AGAmazonReviews.m:87:    NSDate *mostRecentReviewPopupDate = [[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@",reviewType]];
Sezam/AGAmazonReviews.m:104:        AGAnalyticsDiaryInfo(@"AmazonReviewFeedbackShowAlert", reviewType);
Sezam/AGAmazonReviews.m:105:        [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@",reviewType]];
Sezam/AGAmazonReviews.m:108:        AGAlertController *howsEverythingGoingAlertController = [[AGAlertController alloc] initWithTitle:@"How’s Everything Going?" andDescription:[NSString stringWithFormat:@"How are things going with your %@?", productName] andImage:[UIImage imageNamed:imageName]];
Sezam/AGAmazonReviews.m:110:        [howsEverythingGoingAlertController addActionWithTitle:@"It’s Great!" andActionBlock:^{
Sezam/AGAmazonReviews.m:112:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Positive", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:116:        [howsEverythingGoingAlertController addActionWithTitle:@"Not So Great" andActionBlock:^{
Sezam/AGAmazonReviews.m:118:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Negative", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:122:        [howsEverythingGoingAlertController addActionWithTitle:@"Don’t Ask Again" andActionBlock:^{
Sezam/AGAmazonReviews.m:126:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Close", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:142:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGAmazonReviews.m:149:        NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily]  ?: @"";
Sezam/AGAmazonReviews.m:150:        NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel] ?: @"";
Sezam/AGAmazonReviews.m:154:        NSString *reviewUrlString = [NSString stringWithFormat:@"https://www.amazon.com/review/create-review?asin=%@", asin];
Sezam/AGAmazonReviews.m:155:        UIAlertController *reviewAlertController  = [UIAlertController alertControllerWithTitle:@"Rate us on Amazon?"
Sezam/AGAmazonReviews.m:156:                                                                                        message:@"That’s good to hear! Can you help us spread the word by rating us on Amazon? It'll take 30 seconds, and mean the world to us."
Sezam/AGAmazonReviews.m:158:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAmazonReviews.m:162:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"ProceededToReview", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:164:                                                                    AGAnalyticsDiaryInfo(reviewType, @"DeepLinkingToAmazaon");
Sezam/AGAmazonReviews.m:167:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me Later"
Sezam/AGAmazonReviews.m:171:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"RemindLater", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:174:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks"
Sezam/AGAmazonReviews.m:180:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"DeclinedToReview", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:199:    NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily] ?: @"";
Sezam/AGAmazonReviews.m:200:    NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel] ?: @"";
Sezam/AGAmazonReviews.m:201:    UIAlertController *feedbackAlertController  = [UIAlertController alertControllerWithTitle:@"Send Feedback?"
Sezam/AGAmazonReviews.m:202:                                                                                      message:[NSString stringWithFormat:@"We’re sorry you’re having problems with your %@. Would you like to send us feedback on what we could be doing better?", productName]
Sezam/AGAmazonReviews.m:204:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAmazonReviews.m:209:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"ProceededToProvideEmailFeedback", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:212:                                                                  AGAnalyticsDiaryInfo(reviewType, @"DeepLinkingToEmailFeedback");
Sezam/AGAmazonReviews.m:213:                                                                  NSString *toEmail = @"feedback@august.com";
Sezam/AGAmazonReviews.m:214:                                                                  NSString *subject = [NSString stringWithFormat:@"In-app Feedback - %@", productName];
Sezam/AGAmazonReviews.m:217:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me Later"
Sezam/AGAmazonReviews.m:221:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"RemindLater", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:224:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks"
Sezam/AGAmazonReviews.m:230:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"DeclinedToProvideEmailFeedback", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGFancyTutorialViewer.m:104:        if ([self.optionsToUse objectForKey:@"Image Size"]) {
Sezam/AGFancyTutorialViewer.m:105:            frame.size = [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue];
Sezam/AGFancyTutorialViewer.m:111:        if ([self.optionsToUse objectForKey:@"Image Content Mode"]) {
Sezam/AGFancyTutorialViewer.m:112:            imageView.contentMode = [[self.optionsToUse objectForKey:@"Image Content Mode"] doubleValue];
Sezam/AGFancyTutorialViewer.m:127:        if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Auto-Unlock Explanation"]) {
Sezam/AGFancyTutorialViewer.m:130:            [label setFrame:CGRectMake(self.frame.size.width * i+30, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+49.5, self.frame.size.width-60, 75)];
Sezam/AGFancyTutorialViewer.m:132:                [label setFrame:CGRectMake(self.frame.size.width * i+20, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+33, self.frame.size.width-40, 78)];
Sezam/AGFancyTutorialViewer.m:134:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:136:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Small Style"]) {
Sezam/AGFancyTutorialViewer.m:138:            [label setValue:@"BodyWhite" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:140:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"August Access Style"]) {
Sezam/AGFancyTutorialViewer.m:143:            [label setValue:@"BodyWhite" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:145:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Setup OTA Style"]) {
Sezam/AGFancyTutorialViewer.m:146:            [label setFrame:CGRectMake(self.frame.size.width * i+20, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+49, self.frame.size.width-40, 75)];
Sezam/AGFancyTutorialViewer.m:147:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:149:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Motion And Video Explain Style"]) {
Sezam/AGFancyTutorialViewer.m:152:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:156:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:165:    if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Auto-Unlock Explanation"]) {
Sezam/AGFancyTutorialViewer.m:166:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:168:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Small Style"]) {
Sezam/AGFancyTutorialViewer.m:169:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height-20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:171:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"August Access Style"]) {
Sezam/AGFancyTutorialViewer.m:172:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height-20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:174:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Setup OTA Style"]) {
Sezam/AGFancyTutorialViewer.m:175:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-28.5, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+20, 57, 9)];
Sezam/AGFancyTutorialViewer.m:183:    if ([[self.optionsToUse objectForKey:@"Current Page Indicator Color"] isEqualToString:@"White"]) {
Sezam/AGUtility.m:50:static NSString *const kAugustAssociatedAuthDomain = @"auth.august.com";
Sezam/AGUtility.m:52:static NSString * const kDVRBetaOnPassword = @"eKDXj9H059hmbQGHvHvfuIoujng=";
Sezam/AGUtility.m:53:static NSString * const kDVRBetaOffPassword = @"IRfqJ2M317//zaXT4gK8veBY7kc=";
Sezam/AGUtility.m:54:static NSString * const kSezamDebugPassword = @"M6Xonnuz+nWf51u0Ken9RQ6aUU8=";
Sezam/AGUtility.m:55:static NSString * const kSezamLogPassword = @"mUV++nx0+w63S/T+U0eGY5dgcOA=";
Sezam/AGUtility.m:56:static NSString * const kSHASecret = @"agiohb891nx9c;a";
Sezam/AGUtility.m:57:static NSString * const kSHABetaSecret = @"mx9aOzB6*zJu!=.";
Sezam/AGUtility.m:60:static NSString* minimumLockVersionForSeamless = @"1.1.4";      // This is the minimum Lock firmware Version for Seamless BLE WiFi Operation
Sezam/AGUtility.m:61:static NSString* minimumBridgeVersionForSeamless = @"2.1.0";    // This is the minimum Bridge firmware Version for Seamless BLE WiFi Operation
Sezam/AGUtility.m:64:#define kAGDiaryCategory @"Utility"
Sezam/AGUtility.m:85:    NSString *fwName = [NSString stringWithFormat:@"LockFirmwareVersion_%@", lockID];
Sezam/AGUtility.m:92:    NSString *fwName = [NSString stringWithFormat:@"LockFirmwareVersion_%@", lockID];
Sezam/AGUtility.m:98:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"tooltip"];
Sezam/AGUtility.m:120:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"tooltip"];
Sezam/AGUtility.m:123:    [[NSUserDefaults standardUserDefaults] setObject:mutableDict forKey:@"tooltip"];
Sezam/AGUtility.m:133:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"batterySnoozed"];
Sezam/AGUtility.m:139:    [[NSUserDefaults standardUserDefaults] setObject:mutableSnoozes forKey:@"batterySnoozed"];
Sezam/AGUtility.m:147:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"batterySnoozed"];
Sezam/AGUtility.m:161:	UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:[NSBundle mainBundle]];
Sezam/AGUtility.m:162:    AGSignupNavController *signupNC = [storyboard instantiateViewControllerWithIdentifier:@"signupEntry"];
Sezam/AGUtility.m:186:                if ([lock.type isEqualToString:@"superuser"])
Sezam/AGUtility.m:189:                        house.highestDeviceType = @"superuser";
Sezam/AGUtility.m:190:                    } else if (![house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGUtility.m:191:                        house.highestDeviceType = @"manager";
Sezam/AGUtility.m:211:                    house.highestDeviceType = @"superuser";
Sezam/AGUtility.m:212:                } else if (![house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGUtility.m:213:                    house.highestDeviceType = @"manager";
Sezam/AGUtility.m:224:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name=%@", key];
Sezam/AGUtility.m:238:    NSUInteger commaPos = [platformName rangeOfString:@","].location;
Sezam/AGUtility.m:263:    NSString *stringWithComma = [[platformName substringWithRange:NSMakeRange(firstDigitStart, secondDigitEnd-firstDigitStart)] stringByReplacingOccurrencesOfString:@"," withString:@"."];
Sezam/AGUtility.m:313:            return [cset countForObject:@"awdl0"] > 1 ? AGWifiStateEnabled : AGWifiStateDisabled;
Sezam/AGUtility.m:329:    NSString *logsDirectory = [[shareURL path] stringByAppendingPathComponent:@"Logs"];
Sezam/AGUtility.m:345:        NSDictionary *fileInfo = @{@"fileName": [prefix stringByAppendingString:logFileInfo.fileName], @"fileData" : fileData};
Sezam/AGUtility.m:358:    NSMutableArray *appLogs = [AGUtility retrieveLogDataForLogger:appDelegate.fileLogger withNamePrefix:@""];
Sezam/AGUtility.m:361:    DDFileLogger *watchLogger = [AGUtility loggerForApplicationGroupID:@"group.com.august.watchkitextension"];
Sezam/AGUtility.m:362:    NSMutableArray *watchLogs = [AGUtility retrieveLogDataForLogger:watchLogger withNamePrefix:@"AppleWatch-"];
Sezam/AGUtility.m:368:    NSString *logsFilePath = [NSString stringWithFormat:@"%@logs.zip", tmpDirPath];
Sezam/AGUtility.m:372:        NSString *logFilePath = [NSString stringWithFormat:@"%@%@", tmpDirPath, curLogFile[@"fileName"]];
Sezam/AGUtility.m:373:        NSData *logData = curLogFile[@"fileData"];
Sezam/AGUtility.m:379:    BOOL zipSucceeded = [SSZipArchive createZipFileAtPath:logsFilePath withFilesAtPaths:logFilePaths withPassword:@"BlackBeard5"];
Sezam/AGUtility.m:389:    return zipSucceeded ? logsFilePath : @"";
Sezam/AGUtility.m:403:            NSString *logsTitle = [NSString stringWithFormat:@"AugustLogs_%li_%li_%li.zip", components.month, (long)components.day, (long)components.year];
Sezam/AGUtility.m:405:            [mailViewController addAttachmentData:logData mimeType:@"text/plain" fileName:logsTitle];
Sezam/AGUtility.m:413:        [mailViewController setSubject:NSLocalizedString(@"August Logs", @"")];
Sezam/AGUtility.m:421:        NSString *message = NSLocalizedString(@"Sorry, your logs can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m:422:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m:438:        NSString *message = NSLocalizedString(@"Sorry, your Feedback can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m:439:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m:456:            NSString *logsTitle = [NSString stringWithFormat:@"AugustLogs_%li_%li_%li.zip", components.month, (long)components.day, (long)components.year];
Sezam/AGUtility.m:458:            [mailViewController addAttachmentData:logData mimeType:@"text/plain" fileName:logsTitle];
Sezam/AGUtility.m:470:        NSString *message = NSLocalizedString(@"Sorry, your Feedback can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m:471:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m:520:	NSString * errorCode = @"";
Sezam/AGUtility.m:527:			errorCode = jsonDict[@"code"];
Sezam/AGUtility.m:544:	NSString * userFacingDescription = @"";
Sezam/AGUtility.m:551:			userFacingDescription = jsonDict[@"message"];
Sezam/AGUtility.m:587:    NSArray* components = [macAddress componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@":,. "]];
Sezam/AGUtility.m:603:            [result appendFormat:@"%02X:", intValue];
Sezam/AGUtility.m:694:        return @"User";
Sezam/AGUtility.m:736:    if (NSClassFromString(@"NCWidgetController")){
Sezam/AGUtility.m:738:        [widgetController setHasContent:TRUE forWidgetWithBundleIdentifier:@"group.com.august.today"];
Sezam/AGUtility.m:781:        if ([errorString isEqualToString:@"An SSL error has occurred and a secure connection to the server cannot be made."]) {
Sezam/AGUtility.m:782:            errorString = @"Connection to the server cannot be made.";
Sezam/AGUtility.m:784:        [AGUtility sharedInstance].errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:errorString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGUtility.m:802:        [AGUtility sharedInstance].infoAlertView = [[UIAlertView alloc] initWithTitle:@"August" message:infoString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGUtility.m:867:    if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGUtility.m:905:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m:914:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m:924:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m:938:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m:949:                           componentsJoinedByString:@""];
Sezam/AGUtility.m:958:    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"countries" ofType:@"json"];
Sezam/AGUtility.m:968:        NSString *shortCode = [entry objectForKey:@"code"];
Sezam/AGUtility.m:970:            countryCode = [entry objectForKey:@"dial_code"];
Sezam/AGUtility.m:978:        countryCode = @"+1";
Sezam/AGUtility.m:990:    NSString *matchedUSDomesticNumber = [NSString stringWithFormat:@"%@%@%@",
Sezam/AGUtility.m:991:                                         (usDomesticAreaCode ? : @""),
Sezam/AGUtility.m:992:                                         (usDomesticGroupOne ? : @""),
Sezam/AGUtility.m:993:                                         (usDomesticGroupTwo ? : @"")];
Sezam/AGUtility.m:996:    NSString *formattedPhoneNumber = @"";
Sezam/AGUtility.m:997:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticAreaCode ? [NSString stringWithFormat:@"(%@) ", usDomesticAreaCode] : @"")];
Sezam/AGUtility.m:998:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticGroupOne ? [NSString stringWithFormat:@"%@-", usDomesticGroupOne] : @"")];
Sezam/AGUtility.m:999:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticGroupTwo ? : @"")];
Sezam/AGUtility.m:1014:    return [NSString stringWithFormat:@"+%@", parsedPhoneNumber.countryCode.description];
Sezam/AGUtility.m:1019:    [phoneNumberCharacterSet addCharactersInString:@"+"];
Sezam/AGUtility.m:1021:    return [[phoneNumber componentsSeparatedByCharactersInSet:nonPhoneNumberCharacterSet] componentsJoinedByString:@""];
Sezam/AGUtility.m:1038:    BOOL containsPlus = [dirtyPhone rangeOfString:@"+"].location != NSNotFound;
Sezam/AGUtility.m:1044:        cleanedPhone = [NSString stringWithFormat:@"+%@", cleanedPhone];
Sezam/AGUtility.m:1048:        if ([countryCode isEqualToString:@"+1"]) {
Sezam/AGUtility.m:1049:            if ((cleanedPhone.length == 11) && ([[cleanedPhone substringToIndex:1] isEqualToString:@"1"])) {
Sezam/AGUtility.m:1050:                cleanedPhone = [NSString stringWithFormat:@"+%@", cleanedPhone];
Sezam/AGUtility.m:1053:                cleanedPhone = [NSString stringWithFormat:@"+1%@", cleanedPhone];
Sezam/AGUtility.m:1060:            cleanedPhone = [NSString stringWithFormat:@"%@%@", countryCode, cleanedPhone];
Sezam/AGUtility.m:1065:        cleanedPhone = [NSString stringWithFormat:@"phone:%@", cleanedPhone];
Sezam/AGUtility.m:1073:    for (NSString *knownTypeLabelString in @[@"home", @"work", @"mobile", @"main", @"home fax", @"work fax", @"pager", @"other"]) {
Sezam/AGUtility.m:1086:        cleanedEmail = [NSString stringWithFormat:@"email:%@", cleanedEmail];
Sezam/AGUtility.m:1139:    if(firstName == nil) { firstName = @""; }
Sezam/AGUtility.m:1140:    if(lastName == nil) { lastName = @""; }
Sezam/AGUtility.m:1142:    NSString *name = [[NSString stringWithFormat:@"%@%@", firstName, lastName] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
Sezam/AGUtility.m:1161:    if ([user.type.lowercaseString isEqualToString:@"superuser"]) {
Sezam/AGUtility.m:1162:        return @"Owner";
Sezam/AGUtility.m:1164:    else if ([user.type.lowercaseString isEqualToString:@"manager"]) {
Sezam/AGUtility.m:1165:        return @"Host";
Sezam/AGUtility.m:1167:    else if ([user.type.lowercaseString isEqualToString:@"limited"] || [user.type.lowercaseString isEqualToString:@"user"]) {
Sezam/AGUtility.m:1168:        return @"Guest";
Sezam/AGUtility.m:1171:    return @"";
Sezam/AGUtility.m:1177:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtility.m:1186:        return @"today";
Sezam/AGUtility.m:1189:        return @"tomorrow";
Sezam/AGUtility.m:1192:        return @"yesterday";
Sezam/AGUtility.m:1195:        return @"upcoming";
Sezam/AGUtility.m:1198:        return @"the past week";
Sezam/AGUtility.m:1201:        return @"earlier";
Sezam/AGUtility.m:1210:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtility.m:1218:        return @"today";
Sezam/AGUtility.m:1221:        return @"yesterday";
Sezam/AGUtility.m:1273:    [dateKeyFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGUtility.m:1274:    [dateKeyFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGUtility.m:1442:        [dateKeyFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGUtility.m:1443:        [dateKeyFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGUtility.m:1512:    NSArray *orderArray = @[@"earlier", @"the past week", @"yesterday", @"today", @"tomorrow", @"upcoming"];
Sezam/AGUtility.m:1537:    if ([sectionArray containsObject:@"today"]) {
Sezam/AGUtility.m:1538:        [datesOnlyArray removeObject:@"today"];
Sezam/AGUtility.m:1539:        [sortedSectionArray addObject:@"today"];
Sezam/AGUtility.m:1541:    if ([sectionArray containsObject:@"yesterday"]) {
Sezam/AGUtility.m:1542:        [datesOnlyArray removeObject:@"yesterday"];
Sezam/AGUtility.m:1543:        [sortedSectionArray addObject:@"yesterday"];
Sezam/AGUtility.m:1572:    return ([identifier rangeOfString:@"@"].location != NSNotFound);
Sezam/AGUtility.m:1590:        NSString* SSID = [networkInfo objectForKey:@"SSID"];
Sezam/AGUtility.m:1626:        if ([[partnerToken objectForKey:@"type"] isEqualToString:@"nest"]) {
Sezam/AGUtility.m:1627:            if (![[partnerToken objectForKey:@"token"] isEqualToString:@"deleted"]) {
Sezam/AGUtility.m:1638:        if ([[partnerToken objectForKey:@"type"] isEqualToString:@"airbnb"]) {
Sezam/AGUtility.m:1639:            if (![[partnerToken objectForKey:@"token"] isEqualToString:@"deleted"]) {
Sezam/AGUtility.m:1652:    if (([deviceType isEqualToString:@""]) || ([deviceType isEqual:[NSNull null]]) || (deviceType == nil)) {
Sezam/AGUtility.m:1653:        deviceType = @"Unknown";
Sezam/AGUtility.m:1742:        NSArray* recurrencesSplit = [rule.recurrence componentsSeparatedByString: @";"];
Sezam/AGUtility.m:1750:        NSString* days = [bydayString stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGUtility.m:1751:        NSArray* daysSplit = [days componentsSeparatedByString: @","];
Sezam/AGUtility.m:1754:        return [NSString stringWithFormat:@"%@ %@ - %@",
Sezam/AGUtility.m:1760:        return [NSString stringWithFormat:@"%@ - %@",
Sezam/AGUtility.m:1768:    if ([doorbell.status isEqualToString:@"doorbell_offline"] || (doorbell.status == nil)) {
Sezam/AGUtility.m:1809:    if ((lockFirmwareVersion_ThreeParts != nil) || ([lockFirmwareVersion_ThreeParts rangeOfString:@"-"].location != NSNotFound)) {
Sezam/AGUtility.m:1810:        NSArray *lockFirmwareVersionComponentArray = [lockFirmwareVersion_ThreeParts componentsSeparatedByString:@"-"];
Sezam/AGUtility.m:1830:    if (([lock.bridge.model isEqualToString:@"august-connect"]) || ([lock.bridge.model isEqualToString:@"august-doorbell"])) {
Sezam/AGUtility.m:1841:    if (lockIsSeamlessCapable) {AGDiaryDebug(@"SeamlessBLEWifi", @"Lock is Seamless Capable");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"Lock is NOT Seamless Capable");}
Sezam/AGUtility.m:1842:    if (bridgeIsSeamlessCapable) {AGDiaryDebug(@"SeamlessBLEWifi", @"Bridge is Seamless Capable");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"Bridge is NOT Seamless Capable");}
Sezam/AGUtility.m:1848:    if (userhasSeamlessVenusWorkflowFirmware) {AGDiaryDebug(@"SeamlessBLEWifi", @"User has Firmware Capable of Seamless BLE WiFi Operation");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"User does NOT have Firmware Capable of Seamless BLE WiFi Operation");}
Sezam/AGUtility.m:1936:            NSString *timeZoneAbbreviation = [NSString stringWithFormat:@" %@",theTimezone.abbreviation];
Sezam/AGUtility.m:1948:    [formatter setDateFormat:@"h:mm a"];
Sezam/AGUtility.m:1956:        [timeLabel appendString:[NSString stringWithFormat:@" %@", timeZone.abbreviation]];
Sezam/AGUtility.m:1966:    NSArray* recurrencesSplit = [recurrenceString componentsSeparatedByString: @";"];
Sezam/AGUtility.m:1976:    NSString* days = [bydayString stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGUtility.m:1977:    return [NSMutableSet setWithArray:[days componentsSeparatedByString: @","]];
Sezam/AGUtility.m:1985:    NSArray *daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGUtility.m:1993:    NSString * byDay = [[[setToOrder array] valueForKey:@"description"] componentsJoinedByString:@","];
Sezam/AGUtility.m:1995:    byDay = [[reversedArray valueForKey:@"description"] componentsJoinedByString:@","];
Sezam/AGUtility.m:1999:    NSString *rruleString = [NSString stringWithFormat:@"FREQ=WEEKLY;INTERVAL=1;BYDAY=%@", byDay];
Sezam/AGUtility.m:2007:        AGDiaryInfo(@"UnableToCreateiCalString", @"Missing one of needed values: startDate or endDate or lock or picked Days");
Sezam/AGUtility.m:2022:    [iCalString appendString:@"BEGIN:VCALENDAR"];
Sezam/AGUtility.m:2023:    [iCalString appendString:@"\r\nVERSION:2.0"];
Sezam/AGUtility.m:2024:    [iCalString appendString:@"\r\nPRODID:August Home App"];
Sezam/AGUtility.m:2027:    [iCalString appendString:@"\r\nBEGIN:VEVENT"];
Sezam/AGUtility.m:2031:    [iCalString appendFormat:@"\r\nUID:%@",uuid];
Sezam/AGUtility.m:2036:    [dateFormatterTZ setDateFormat:@"yyyyMMdd'T'HHmmss"];
Sezam/AGUtility.m:2040:    [dateFormatterNoTZ setDateFormat:@"yyyyMMdd'T'HHmmss'Z'"];
Sezam/AGUtility.m:2041:    dateFormatterNoTZ.timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
Sezam/AGUtility.m:2044:    [iCalString appendString:@"\r\nDTSTAMP:"];    //date the event was created, ie. now
Sezam/AGUtility.m:2049:    [iCalString appendString:[NSString stringWithFormat:@"\r\nDTSTART;TZID=%@:", timeZone]];
Sezam/AGUtility.m:2054:    [iCalString appendString:[NSString stringWithFormat:@"\r\nDTEND;TZID=%@:", timeZone]];
Sezam/AGUtility.m:2059:    [iCalString appendString:@"\r\nLAST-MODIFIED:"];
Sezam/AGUtility.m:2064:    NSString *rrule = [NSString stringWithFormat:@"\r\nRRULE:%@", recurrenceString];
Sezam/AGUtility.m:2068:    [iCalString appendString:@"\r\nEND:VEVENT"];
Sezam/AGUtility.m:2071:    [iCalString appendString:@"\r\nEND:VCALENDAR"];
Sezam/AGUtility.m:2084:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m:2149:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m:2166:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m:2174:    [[NSUserDefaults standardUserDefaults] setObject:houseLocksMutableDictionaryFromNSUserDefaults.copy forKey:@"lockOrder"];
Sezam/AGUtility.m:2212:    NSString *deviceID = [SAMKeychain passwordForService:@"DeviceID" account:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m:2214:        deviceID = [[NSUserDefaults standardUserDefaults] objectForKey:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m:2246:    [SAMKeychain setPassword:deviceID forService:@"DeviceID" account:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m:2247:    [[NSUserDefaults standardUserDefaults] setObject:deviceID forKey:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m:2324:        case ERRNO_COMM_SUCCESS: return @"COMM_SUCCESS";
Sezam/AGUtility.m:2325:        case ERRNO_PARAM_NOT_PAIRED: return @"PARAM_NOT_PAIRED";
Sezam/AGUtility.m:2326:        case ERRNO_PARAM_NOT_READABLE: return @"PARAM_NOT_READABLE";
Sezam/AGUtility.m:2327:        case ERRNO_WRONG_KEY: return @"WRONG_KEY";
Sezam/AGUtility.m:2328:        case ERRNO_KEYCODE_INVALID_ACCESS: return @"KEYCODE_INVALID_ACCESS";
Sezam/AGUtility.m:2329:        case ERRNO_KEYCODE_EXISTING_KEY: return @"KEYCODE_EXISTING_KEY";
Sezam/AGUtility.m:2330:        case ERRNO_KEYCODE_NOSPACE: return @"KEYCODE_NOSPACE";
Sezam/AGUtility.m:2331:        case ERRNO_KEYCODE_DISABLE: return @"KEYCODE_DISABLE";
Sezam/AGUtility.m:2332:        case ERRNO_KEYCODE_TIMEOUT: return @"KEYCODE_TIMEOUT";
Sezam/AGUtility.m:2333:        case ERRNO_KEYCODE_DIS_ONETOUCH: return @"KEYCODE_DIS_ONETOUCH";
Sezam/AGUtility.m:2334:        case ERRNO_MECH_TIMEOUT: return @"MECH_TIMEOUT";
Sezam/AGUtility.m:2335:        case ERRNO_MECH_POSITION: return @"MECH_POSITION";
Sezam/AGUtility.m:2336:        case ERRNO_MECH_MOTPOL: return @"MECH_MOTPOL";
Sezam/AGUtility.m:2337:        case ERRNO_MECH_TIMEOUT_CAL: return @"MECH_TIMEOUT_CAL";
Sezam/AGUtility.m:2338:        case ERRNO_MECH_BACKOFF: return @"MECH_BACKOFF";
Sezam/AGUtility.m:2339:        case ERRNO_EMPTY_LOG: return @"EMPTY_LOG";
Sezam/AGUtility.m:2340:        case ERRNO_READING_LOG: return @"READING_LOG";
Sezam/AGUtility.m:2341:        case ERRNO_VBAT_LOW: return @"VBAT_LOW";
Sezam/AGUtility.m:2342:        case ERRNO_OVERTEMP: return @"OVERTEMP";
Sezam/AGUtility.m:2344:            return [NSString stringWithFormat:@"UNKNOWN_%ld", (long)errorCode];
Sezam/AGUtility.m:2394:    NSNumber *acInVoltageNum = [telemetry treatNSNullAsNilObjectForKey:@"ac_in"];
Sezam/AGUtility.m:2395:    NSNumber *dcInVoltageNum = telemetry[@"mcu_dc_in"];
Sezam/AGUtility.m:2396:    NSNumber *batteryIsLowNum = [telemetry treatNSNullAsNilObjectForKey:@"doorbell_low_battery"];
Sezam/AGUtility.m:2428:        return @"imgDoorbellcamHeader";
Sezam/AGUtility.m:2430:        return @"dbc2";
Sezam/AGUtility.m:2432:        return @"imgDoorbellcamHeader";
Sezam/AGUtility.m:2493:    NSInteger numberOfSuccessfulOperations = [[NSUserDefaults standardUserDefaults] integerForKey:@"NumberOfSuccessfulOperations"];
Sezam/AGUtility.m:2495:    [[NSUserDefaults standardUserDefaults] setInteger:numberOfSuccessfulOperations forKey:@"NumberOfSuccessfulOperations"];
Sezam/AGUtility.m:2497:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGUtility.m:2498:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGUtility.m:2553:    return lock.lockCapability.definedVersion?:@"0.0.0";
Sezam/AGUtility.m:2560:        if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGUtility.m:2577:                if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGUtility.m:2633:    user.objectId = @"me";
Sezam/AGUtility.m:2653:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Save Password?" message:@"Would you like to save this password to the iCloud Keychain?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUtility.m:2655:        [alertController addAction:[UIAlertAction actionWithTitle:@"Save Password" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUtility.m:2659:        [alertController addAction:[UIAlertAction actionWithTitle:@"Don't Save Password" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUtility.m:2682:                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"iCloud Keychain Error" message:@"There was an error saving your password to iCloud Keychain." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUtility.m:2683:                [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGUtility.m:2697:        if([curUser.type isEqual:@"superuser"]){
Sezam/AGUtility.m:2708:        if([curUser.type isEqual:@"user"] || [curUser.type isEqual:@"limited"]){
Sezam/AGAugustAccessViewController.m:66:    [AGUtility logEventToFabric:@"August Access - Main Page" attributes:@{}];
Sezam/AGAugustAccessViewController.m:75:                        forCellWithReuseIdentifier:@"CategoryMenuCell"];
Sezam/AGAugustAccessViewController.m:90:    NSArray *stringsArray = @[@"August has partnered with top service providers to make your busy life easier.",
Sezam/AGAugustAccessViewController.m:91:                              @"Imagine coming home to a sparkling-fresh house, dry cleaning hung, packages picked up, and freshly arranged flowers - all with the peace of mind that things can still get done, even when you can’t be there.",
Sezam/AGAugustAccessViewController.m:92:                              @"While you’re at work or away, grant secure access to your home for deliveries and in-home services.",
Sezam/AGAugustAccessViewController.m:93:                              @"To participate, tap one of the services you are interested in and learn more about the beta program. Or, go to www.august.com/august-access"];
Sezam/AGAugustAccessViewController.m:97:        [imageArray addObject:[UIImage imageNamed:[NSString stringWithFormat:@"august_access_%d.jpg", i]]];
Sezam/AGAugustAccessViewController.m:101:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize], [NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"August Access Style", @"White"]
Sezam/AGAugustAccessViewController.m:102:                                                                              forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style", @"Current Page Indicator Color"]];
Sezam/AGAugustAccessViewController.m:141:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error"
Sezam/AGAugustAccessViewController.m:142:                                                                message:[NSString stringWithFormat:@"Error loading data: %@", error.localizedDescription]
Sezam/AGAugustAccessViewController.m:144:                                                      cancelButtonTitle:@"Ok"
Sezam/AGAugustAccessViewController.m:147:            self.dataNotLoadedLabel.text = @"Failed to download data.";
Sezam/AGAugustAccessViewController.m:208:    AGPartnerCell *cell = [tableView dequeueReusableCellWithIdentifier:@"partnerCell"];
Sezam/AGAugustAccessViewController.m:215:    if ([partner.logoURL isEqualToString:@""]) {
Sezam/AGAugustAccessViewController.m:226:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"Check_Mark.png"]
Sezam/AGAugustAccessViewController.m:227:                                               highlightedImage:[UIImage imageNamed:@"Check_Mark.png"]];
Sezam/AGAugustAccessViewController.m:238:        if ([[[connectedApp objectForKey:@"name"] lowercaseString] isEqualToString:partnerName.lowercaseString]) {
Sezam/AGAugustAccessViewController.m:247:    if ([currentPartner.type isEqualToString:@"works with"]) {
Sezam/AGAugustAccessViewController.m:248:        if ([currentPartner.name isEqualToString:@"Airbnb"]) {
Sezam/AGAugustAccessViewController.m:250:                [self performSegueWithIdentifier:@"augustAccessToAirbnbMapping" sender:nil];
Sezam/AGAugustAccessViewController.m:252:                [self performSegueWithIdentifier:@"augustAccessToAirbnbConnect" sender:nil];
Sezam/AGAugustAccessViewController.m:254:        } else if ([currentPartner.name isEqualToString:@"Nest"]) {
Sezam/AGAugustAccessViewController.m:255:            if ([self partnerDictionary:@"nest"] != nil) {
Sezam/AGAugustAccessViewController.m:256:                [self performSegueWithIdentifier:@"augustAccessToNestCameraToLock" sender:nil];
Sezam/AGAugustAccessViewController.m:258:                [self performSegueWithIdentifier:@"augustAccessToNestConnect" sender:nil];
Sezam/AGAugustAccessViewController.m:262:            [self performSegueWithIdentifier:@"augustAccessToConnectedAppDetail" sender:[NSNumber numberWithInteger:indexPath.item]];
Sezam/AGAugustAccessViewController.m:265:        [self performSegueWithIdentifier:@"augustAccessToAugustAccessDetail" sender:nil];
Sezam/AGAugustAccessViewController.m:287:    if ([segue.identifier isEqualToString:@"augustAccessToAugustAccessDetail"]) {
Sezam/AGAugustAccessViewController.m:290:    } else if ([segue.identifier isEqualToString:@"augustAccessToConnectedAppDetail"]) {
Sezam/AGAugustAccessViewController.m:292:        if ([selectedPartner.name isEqualToString:@"Harmony"]) {
Sezam/AGAugustAccessViewController.m:294:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"harmony control"];
Sezam/AGAugustAccessViewController.m:296:            connectedAppDetailViewController.connectedAppName = @"harmony control";
Sezam/AGAugustAccessViewController.m:297:        } else if ([selectedPartner.name isEqualToString:@"Xfinity Home"]) {
Sezam/AGAugustAccessViewController.m:299:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"comcast"];
Sezam/AGAugustAccessViewController.m:301:            connectedAppDetailViewController.connectedAppName = @"comcast";
Sezam/AGAugustAccessViewController.m:302:        } else if ([selectedPartner.name isEqualToString:@"Honeywell"]) {
Sezam/AGAugustAccessViewController.m:304:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"honeywell"];
Sezam/AGAugustAccessViewController.m:306:            connectedAppDetailViewController.connectedAppName = @"honeywell";
Sezam/AGAugustAccessViewController.m:307:        } else if ([selectedPartner.name isEqualToString:@"IFTTT"]) {
Sezam/AGAugustAccessViewController.m:309:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"ifttt"];
Sezam/AGAugustAccessViewController.m:311:            connectedAppDetailViewController.connectedAppName = @"ifttt";
Sezam/AGAugustAccessViewController.m:312:        } else if ([selectedPartner.name isEqualToString:@"Amazon Alexa"]) {
Sezam/AGAugustAccessViewController.m:314:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"alexa"];
Sezam/AGAugustAccessViewController.m:316:            connectedAppDetailViewController.connectedAppName = @"alexa";
Sezam/AGAugustAccessViewController.m:318:    } else if ([segue.identifier isEqualToString:@"augustAccessToAirbnbConnect"]) {
Sezam/AGAugustAccessViewController.m:321:    } else if ([segue.identifier isEqualToString:@"augustAccessToNestConnect"]) {
Sezam/AGAugustAccessViewController.m:335:    AGAugustAccessCategoryMenuCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"CategoryMenuCell" forIndexPath:indexPath];
Sezam/AGAugustAccessViewController.m:338:    cell.categoryLabel.nuiClass = @"StandardLabel";
Sezam/AGAugustAccessViewController.m:360:    CGSize labelSize = [currentCategoryLabelText sizeWithAttributes:@{ NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Semibold" size:13]}];       // determine size of this text
Sezam/AGShareWithAugustExplainViewController.m:36:    [self performSegueWithIdentifier:@"ExplainToCompose" sender:nil];
Sezam/AGDoorbellVideoStreamView.m:118:    self.loadingDescriptionLabel.nuiClass = @"body_small_regular_white_v2";
Sezam/AGDoorbellVideoStreamView.m:119:    self.loadingDescriptionLabel.text = @"Connecting to Camera...";
Sezam/AGDoorbellVideoStreamView.m:141:    [self.closeButton setBackgroundImage:[UIImage imageNamed:@"declineDoorbellCall"] forState:UIControlStateNormal];
Sezam/AGDoorbellVideoStreamView.m:146:    self.closeButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:155:    self.speakButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:156:    self.speakButtonDescriptionLabel.text = @"SPEAK";
Sezam/AGDoorbellVideoStreamView.m:176:    self.speakButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:181:    self.speakOverlayLabel.nuiClass = @"label_allcaps_white_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:182:    self.speakOverlayLabel.text = @"SPEAK NOW";
Sezam/AGDoorbellVideoStreamView.m:185:    self.speakOverlayMicrophoneImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"mic_icon_white.png"]];
Sezam/AGDoorbellVideoStreamView.m:340:            [self.speakButton setBackgroundImage:[UIImage imageNamed:@"VulcanMutedIcon"] forState:UIControlStateNormal];
Sezam/AGDoorbellVideoStreamView.m:345:            [self.speakButton setBackgroundImage:[UIImage imageNamed:@"unmuteButton"] forState:UIControlStateNormal];
Sezam/AGDoorbellVideoStreamView.m:361:        image = [UIImage imageNamed:@"VulcanVoiceActiveIcon"];
Sezam/AGDoorbellVideoStreamView.m:363:        image = [UIImage imageNamed:@"VulcanMutedIcon"];
Sezam/AGDoorbellVideoStreamView.m:389:    [self showTooltipForView:self.speakButton description:NSLocalizedString(@"Press and hold this button to speak.", nil)];
Sezam/AGDoorbellVideoStreamView.m:393:    [self showTooltipForView:self.dialView description:NSLocalizedString(@"Tapping here will operate your August Smart Lock.", nil)];
Sezam/AGDoorbellVideoStreamView.m:405:    UIFont *font = [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGLoginViewController.m:81:    self.backButton.accessibilityLabel = @"back";
Sezam/AGLoginViewController.m:87:    if ([self.switchInputButton.titleLabel.text isEqualToString:[NSLocalizedString(@"Sign In With Phone Instead",nil) uppercaseString]]) {
Sezam/AGLoginViewController.m:89:        [self.switchInputButton setTitle:[NSLocalizedString(@"Sign In With Email Instead",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGLoginViewController.m:92:        self.switchInputButton.accessibilityLabel = [NSLocalizedString(@"Sign In With Email Instead",nil) uppercaseString];
Sezam/AGLoginViewController.m:97:        [self.switchInputButton setTitle:[NSLocalizedString(@"Sign In With Phone Instead",nil) uppercaseString] forState:UIControlStateNormal];
Sezam/AGLoginViewController.m:99:        self.switchInputButton.accessibilityLabel = [NSLocalizedString(@"Sign In With Phone Instead",nil) uppercaseString];
Sezam/AGLoginViewController.m:106:    NSURL *url = [NSURL URLWithString:@"http://www.august.com/lostphone"];
Sezam/AGLoginViewController.m:109:        NSLog(@"%@%@",@"Failed to open url:",[url description]);
Sezam/AGLoginViewController.m:190:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AugustInternal"];
Sezam/AGLoginViewController.m:193:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLoginViewController.m:194:        AGDebugModeViewController* debugModeController = (AGDebugModeViewController*)[storyboard instantiateViewControllerWithIdentifier:@"DebugMode"];
Sezam/AGLoginViewController.m:200:            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLoginViewController.m:201:            UIViewController *secretSupport = [storyboard instantiateViewControllerWithIdentifier:@"AGSecretSupportViewController"];
Sezam/AGLoginViewController.m:207:                errorMsg = NSLocalizedString(@"Please enter your email or phone number.",nil);
Sezam/AGLoginViewController.m:210:                errorMsg = NSLocalizedString(@"Please enter your password.",nil);
Sezam/AGLoginViewController.m:214:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGLoginViewController.m:228:                self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Signing in...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLoginViewController.m:249:                                    errorTitle = NSLocalizedString(@"Incorrect email or password.",nil);
Sezam/AGLoginViewController.m:252:                                    errorTitle = NSLocalizedString(@"Incorrect phone number or password.",nil);
Sezam/AGLoginViewController.m:255:                                [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:263:                                    self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Validating email...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLoginViewController.m:268:                                            [self performSegueWithIdentifier:@"LoginToVerifyEmail" sender:nil];
Sezam/AGLoginViewController.m:271:                                            NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGLoginViewController.m:274:                                            [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:281:                                    self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Validating phone...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLoginViewController.m:287:                                            [self performSegueWithIdentifier:@"LoginToVerifyPhone" sender:nil];
Sezam/AGLoginViewController.m:290:                                            NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGLoginViewController.m:293:                                            [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:302:                        NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGLoginViewController.m:305:                        [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:318:        [self.signinButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGLoginViewController.m:321:        [self.signinButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGLoginViewController.m:329:    if ([segue.identifier isEqualToString:@"LoginToVerifyEmail"]) {
Sezam/AGLoginViewController.m:335:    else if ([segue.identifier isEqualToString:@"LoginToVerifyPhone"]) {
Sezam/AGLoginViewController.m:341:    else if ([segue.identifier isEqualToString:@"LoginToPasswordInstructions"]) {
Sezam/AGTimedBackgroundTaskManagerTests.m:30:    XCTestExpectation * task1CompletedExpectation = [self expectationWithDescription:@"Expecting task to complete"];
Sezam/AGTimedBackgroundTaskManagerTests.m:31:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:2 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:38:    XCTestExpectation * task2CompletedExpectation = [self expectationWithDescription:@"Expecting task to complete"];
Sezam/AGTimedBackgroundTaskManagerTests.m:39:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:4 identifier:@"task2" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:54:    XCTestExpectation * cancelExpectation = [self expectationWithDescription:@"Expecting to cancel the task"];
Sezam/AGTimedBackgroundTaskManagerTests.m:55:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:5 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:59:            XCTFail(@"Did not cancel the task!");
Sezam/AGTimedBackgroundTaskManagerTests.m:71:    XCTestExpectation * task1CancelExpectation = [self expectationWithDescription:@"Expecting task1 to be canceled"];
Sezam/AGTimedBackgroundTaskManagerTests.m:72:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:20 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:76:                XCTFail(@"Task ended with incorrect expiration type");
Sezam/AGTimedBackgroundTaskManagerTests.m:86:    XCTestExpectation * task2SuccessExpectation = [self expectationWithDescription:@"Expecting task2 to be cancelled"];
Sezam/AGTimedBackgroundTaskManagerTests.m:87:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:5 identifier:@"task2" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:95:                XCTFail(@"Task ended with incorrect expiration type");
Sezam/AGTimedBackgroundTaskManagerTests.m:114:    XCTestExpectation * task1CancelledExpectation = [self expectationWithDescription:@"Expecting task to be cancelled"];
Sezam/AGTimedBackgroundTaskManagerTests.m:115:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:4 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:119:            XCTFail(@"Unexpected task completion!");
Sezam/AGTimedBackgroundTaskManagerTests.m:126:    XCTestExpectation * task2CompletedExpectation = [self expectationWithDescription:@"Expecting task to complete"];
Sezam/AGTimedBackgroundTaskManagerTests.m:127:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:2 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:131:            XCTFail(@"Unexpected task completion!");
Sezam/AGTimedBackgroundTaskManagerTests.m:144:    XCTestExpectation * sleepExpectation = [[XCTestExpectation alloc] initWithDescription:@"Should always fail"];
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:41:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:57:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:78:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:108:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:195:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:210:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGAutoUnlockGeofenceSizeCreatorTests.m:226:    NSLog(@"Geofence Radius : %f", geofenceRadius);
Sezam/AGDoorbellSetupDebugPickerViewController.m:39:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PickerCell"];
Sezam/AGBridgeDisconnectViewController.m:15:static NSString* kAGDiaryCategory = @"BridgeDisconnect";
Sezam/AGBridgeDisconnectViewController.m:50:    AGDiaryInfo(nil, @"User clicked the 'Back' button on Bridge Disconnect");
Sezam/AGBridgeDisconnectViewController.m:57:    AGDiaryInfo(@"ClickRemoveBridge", @"User clicked the 'Remove Bridge' button");
Sezam/AGBridgeDisconnectViewController.m:60:    NSString* title = NSLocalizedString(@"Disconnect Lock?",nil);
Sezam/AGBridgeDisconnectViewController.m:61:    NSString* message = NSLocalizedString(@"You'll need to go through the setup process again to use August Connect.",nil);
Sezam/AGBridgeDisconnectViewController.m:63:                                              cancelButtonTitle:NSLocalizedString(@"Cancel",nil)
Sezam/AGBridgeDisconnectViewController.m:64:                                              otherButtonTitles:NSLocalizedString(@"Disconnect",nil), nil];
Sezam/AGBridgeDisconnectViewController.m:75:            AGDiaryInfo(@"StartRemoveBridge", @"User confirmed that he wants to remove the bridge.  Starting removal request");
Sezam/AGBridgeDisconnectViewController.m:79:            NSString* title = NSLocalizedString(@"Disconnecting Lock", nil);
Sezam/AGDataItemStore.m:20:    NSAssert(uploadItem.fileName, @"An upload item cannot be saved if there is no file name");
Sezam/AGDataItemStore.m:26:    NSString *itemFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems/%@", self.storedItemsPath, uploadItem.fileName];
Sezam/AGDataItemStore.m:38:    NSString *logsFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGDataItemStore.m:48:        NSDictionary* file1Properties  = [[NSFileManager defaultManager] attributesOfItemAtPath:[NSString stringWithFormat:@"%@/%@", logsFilePath, obj1] error:nil];
Sezam/AGDataItemStore.m:51:        NSDictionary* file2Properties  = [[NSFileManager defaultManager] attributesOfItemAtPath:[NSString stringWithFormat:@"%@/%@", logsFilePath, obj2] error:nil];
Sezam/AGDataItemStore.m:59:        NSString *curFullPathFileName = [NSString stringWithFormat:@"%@/%@", logsFilePath, curLogFileName];
Sezam/AGDataItemStore.m:82:    NSAssert(uploadItem.fileName, @"An upload item cannot be deleted if there is no file name");
Sezam/AGDataItemStore.m:87:    NSString *itemFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems/%@", self.storedItemsPath, uploadItem.fileName];
Sezam/AGDataItemStore.m:100:    NSString *logsFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGDataItemStore.m:115:        NSString *curFullPathFileName = [NSString stringWithFormat:@"%@/%@", logsFilePath, curLogFileName];
Sezam/AGDataItemStore.m:129:        BOOL fileCreated = [[NSFileManager defaultManager] createFileAtPath:storedItemsLockFile contents:[NSData dataFromHexString:@"00000000"] attributes:nil];
Sezam/AGDataItemStore.m:132:                action([NSError errorWithDomain:@"AGDataItemStore" code:2443 userInfo:@{@"Cause" : @"Unable to create lock file"}]);
Sezam/AGDataItemStore.m:172:    return [NSString stringWithFormat:@"%@/DataUploader.lock", self.storedItemsPath];
Sezam/AGDataItemStore.m:181:    return [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGShareWithAugustConfirmViewController.m:14:static NSString* kAGDiaryCategory = @"ShareWithAugustConfirm";
Sezam/AGShareWithAugustConfirmViewController.m:33:                                                   AGDiaryDebug(@"ShareWithAugustDoorbellImage", @"Image Download Success");
Sezam/AGShareWithAugustConfirmViewController.m:38:                                                   AGDiaryError(@"ShareWithAugustDoorbellImage", @"Image Download Failure");
Sezam/AGLeftImageAndRightLabelCell.m:46:    self.rightLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGLeftImageAndRightLabelCell.m:133:            accessoryImage = [UIImage imageNamed:@"check_v2"];
Sezam/AGLeftImageAndRightLabelCell.m:136:            accessoryImage = [UIImage imageNamed:@"menu_arrow_v2"];
Sezam/AGLeftImageAndRightLabelCell.m:140:            accessoryImage = [UIImage imageNamed:@"check_v2"];
Sezam/AGLeftImageAndRightLabelCell.m:143:            accessoryImage = [UIImage imageNamed:@"menu_arrow_v2"];
Sezam/AGActivityShareWithAugust.m:25:    return @"UIActivityShareWithAugustType";
Sezam/AGActivityShareWithAugust.m:28:    return @"Share with August";
Sezam/AGActivityShareWithAugust.m:31:    UIImage *activityImage = [UIImage imageNamed:@"ShareSheetAugustIcon"];
Sezam/AGActivityShareWithAugust.m:46:    UIStoryboard *videoSharingStoryboard = [UIStoryboard storyboardWithName:@"VideoSharing" bundle:nil];
Sezam/AGActivityShareWithAugust.m:47:    AGShareWithAugustExplainViewController *vc = [videoSharingStoryboard instantiateViewControllerWithIdentifier:@"ShareWithAugustExplainVC"];
Sezam/AGAutoUnlockSettingsView.m:60:    self.enableAutoUnlockCell.label.text = @"Enable Auto-Unlock";
Sezam/AGAutoUnlockSettingsView.m:64:    self.successfulAutoUnlockNotificationsCell.label.text = @"Auto-Unlock attempted";
Sezam/AGAutoUnlockSettingsView.m:68:    self.awayModeActivatedNotificationsAutoUnlockCell.label.text = @"You left your neighborhood";
Sezam/AGAutoUnlockSettingsView.m:73:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockSettingsView.m:80:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockSettingsView.m:81:    self.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSettingsView.m:99:    self.reportProblemButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockSettingsView.m:100:    [self.reportProblemButton setTitle:@"REPORT A PROBLEM" forState:UIControlStateNormal];
Sezam/AGAutoUnlockSettingsView.m:157:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockSettingsView.m:161:        label.text = @"SETTINGS";
Sezam/AGAutoUnlockSettingsView.m:165:        label.text = @"NOTIFICATIONS";
Sezam/AGAutoUnlockSettingsView.m:193:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockSettingsView.m:195:        cell.textLabel.text = @"About Auto-Unlock";
Sezam/AGAutoUnlockSettingsView.m:196:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"external_link"]];
Sezam/AGAutoUnlockSettingsView.m:201:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockSettingsView.m:203:        cell.textLabel.text = @"Advanced Settings";
Sezam/AGAutoUnlockSettingsView.m:204:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"menu_arrow_v2"]];
Sezam/AGSubscriptionPromoViewController.m:52:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com"]];
Sezam/AGSubscriptionPromoViewController.m:63:    UIAlertController *cancelFreeTrialAlert = [UIAlertController alertControllerWithTitle:@"Cancel Free Trial?"
Sezam/AGSubscriptionPromoViewController.m:64:                                                                                     message:@"Are you sure you want to cancel your August Premium free trial?\n\nTo get access to the features of August Premium you’ll need to subscribe."
Sezam/AGSubscriptionPromoViewController.m:66:    [cancelFreeTrialAlert addAction:[UIAlertAction actionWithTitle:@"Don't Cancel"
Sezam/AGSubscriptionPromoViewController.m:71:    [cancelFreeTrialAlert addAction:[UIAlertAction actionWithTitle:@"Cancel Free Trial"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:22:    self.heroImage.image = [UIImage imageNamed:@"connect and outlet copy"];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:34:    [self performSegueWithIdentifier:@"ExistingConnectToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:40:    [self performSegueWithIdentifier:@"ExistingConnectToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:51:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:52:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:56:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:74:    if ([segue.identifier isEqualToString:@"ExistingConnectToValidation"]) {
Sezam/AGVerificationCodeSegmentedTextField.m:54:        textField.text = @"";
Sezam/AGVerificationCodeSegmentedTextField.m:65:    if ([string isEqualToString:@""]) {
Sezam/AGVerificationCodeSegmentedTextField.m:66:        [textField setText:@""];
Sezam/AGLockViewController.m:42:#define kLongLockConnectionPopupTimeout @"longLockConnectionPopupTimeout"
Sezam/AGLockViewController.m:44:static NSString* kAGDiaryCategory = @"LockView";
Sezam/AGLockViewController.m:134:        AGDiaryDebug(@"InBTOperationMode", @"Deleting the view controller wihout a ViewWillDissapear call. This shouldn't happen.");
Sezam/AGLockViewController.m:155:    [self performSegueWithIdentifier:@"LockViewToLockSelector" sender:nil];
Sezam/AGLockViewController.m:185:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"ShowOTAStatusLabel"]) {
Sezam/AGLockViewController.m:197:    self.lockAndDoorStateLabel.accessibilityIdentifier = @"Lock and Door State Label";
Sezam/AGLockViewController.m:211:                                              NSLocalizedString(@"Siri Access Is Activated", nil) message:
Sezam/AGLockViewController.m:212:                                              [NSString stringWithFormat: NSLocalizedString(@"You can now use Siri to lock and unlock %@ in %@.", nil), self.agLock.name, self.house.name]
Sezam/AGLockViewController.m:213:                                                                       delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGLockViewController.m:279:    if (([AGUtility isConnectedToAirbnb]) && (![[NSUserDefaults standardUserDefaults] boolForKey:@"ShownHowItWorksScreen"]) && ([AGUtility clientDeviceTypeBasedOnScreenSize] != AGiPhone4)) {
Sezam/AGLockViewController.m:350:    if ([segue.identifier isEqualToString:@"lockToRateApp"]) {
Sezam/AGLockViewController.m:354:    if ([segue.identifier isEqualToString:@"LockViewToLockSelector"]) {
Sezam/AGLockViewController.m:443:        AGDiaryDebug(nil, @"Already in operation Mode %@", self.operationModeString);
Sezam/AGLockViewController.m:463:                    AGDiaryDebug(@"LeavingBTMode", @"Invalidating instatoggle state %@", [self.instaToggleState description]);
Sezam/AGLockViewController.m:473:            AGDiaryWarn(@"UnrecognizedOperationMode", @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:474:            NSAssert(false, @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:483:            AGDiaryInfo(nil, @"Switching to operationMode = Disabled");
Sezam/AGLockViewController.m:486:            self.remoteModeImage.image = [UIImage imageNamed:@"remote_connect_off.png"];
Sezam/AGLockViewController.m:490:            AGDiaryInfo(nil, @"Switching to Remote (Venus) operation mode");
Sezam/AGLockViewController.m:493:            self.remoteModeImage.image = [UIImage imageNamed:@"remote_connect_on.png"];
Sezam/AGLockViewController.m:497:            AGDiaryInfo(nil, @"Switching to Bluetooth operation mode");
Sezam/AGLockViewController.m:499:            self.remoteModeImage.image = [UIImage imageNamed:@"remote_connect_off.png"];
Sezam/AGLockViewController.m:504:            AGDiaryDebug(@"SeamlessBLEWifi", @"Entering AGOperationMode_Bluetooth (Seamless)");
Sezam/AGLockViewController.m:507:            AGDiaryWarn(@"UnrecognizedOperationMode", @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:508:            NSAssert(false, @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:520:        case AGOperationMode_Disabled:      return @"Disabled";
Sezam/AGLockViewController.m:521:        case AGOperationMode_Bluetooth:     return @"Bluetooth";
Sezam/AGLockViewController.m:522:        case AGOperationMode_Remote:        return @"Remote";
Sezam/AGLockViewController.m:523:        case AGOperationMode_Seamless:      return @"Seamless";
Sezam/AGLockViewController.m:525:            AGDiaryWarn(@"BadOperationMode", @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:526:            NSAssert(false, @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:527:            return [NSString stringWithFormat:@"Unrecognized-%u", self.operationMode];
Sezam/AGLockViewController.m:536:        AGDiaryDebug(@"BluetoothLockController", @"Instantiating BT Lock Controller");
Sezam/AGLockViewController.m:551:    AGDiaryDebug(@"SettingInstaToggle", @"For %@ %@", self.agLock.objectId, [instaToggleState description]);
Sezam/AGLockViewController.m:574:    AGDiaryInfo(@"ClickRemoteOperate", @"User clicked the 'Remote Operate' button");
Sezam/AGLockViewController.m:587:                UIAlertController *noInternetConnectionAlert = [UIAlertController alertControllerWithTitle:@"No Internet Connection" message:@"Remote Lock operations require an internet connection." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:588:                UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:595:            AGDiaryWarn(nil, @"Operation mode was disabled.... Cleaning things up by switching to Bluetooth mode");
Sezam/AGLockViewController.m:600:            AGDiaryWarn(nil, @"Operation mode was seamless.... Cleaning things up by switching to Bluetooth mode");
Sezam/AGLockViewController.m:604:            AGDiaryWarn(@"UnrecognizedOperationMode", @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:605:            NSAssert(false, @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:617:    AGDiaryInfo(@"ClickDial", @"User clicked the Dial button");
Sezam/AGLockViewController.m:630:            AGDiaryWarn(nil, @"Ignoring the user's click because operation mode = Disabled");
Sezam/AGLockViewController.m:635:                AGDiaryDebug(@"SeamlessBLEWifi", @"Attempting Lock/Unlock action via Bluetooth connection - Connected");
Sezam/AGLockViewController.m:646:            AGDiaryWarn(@"UnrecognizedOperationMode", @"Unhandled operation mode %u inside valueChanged:(AGDialView)", self.operationMode);
Sezam/AGLockViewController.m:647:            NSAssert(false, @"Unhandled operation mode %u inside valueChanged:(AGDialView)", self.operationMode);
Sezam/AGLockViewController.m:654:    AGDiaryInfo(@"ClickDial", @"User clicked the Dial for lock '%@'", self.agLock.name);
Sezam/AGLockViewController.m:677:    } else if ([lockOperationType isEqualToString:@"lock"]) {
Sezam/AGLockViewController.m:679:    } else if ([lockOperationType isEqualToString:@"unlock"]) {
Sezam/AGLockViewController.m:702:    AGDiaryInfo(@"StartGetLockData", @"Sending API request to get lock data");
Sezam/AGLockViewController.m:708:            AGDiaryInfo(@"EndGetLockData", @"Got API response with lock data");
Sezam/AGLockViewController.m:711:            AGDiaryError(@"NetworkError", @"Error getting lock data: %@", error.description);
Sezam/AGLockViewController.m:718:            if (([[AGUtility userFacingDescriptionFromError:error] rangeOfString:@"session token" options:NSCaseInsensitiveSearch].location != NSNotFound) || ([[AGUtility userFacingDescriptionFromError:error] rangeOfString:@"not verified" options:NSCaseInsensitiveSearch].location != NSNotFound)) {
Sezam/AGLockViewController.m:729:                if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound)  || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGLockViewController.m:738:            AGDiaryInfo(@"ForceKeychain", @"lock user type changed from current shared date to refreshed data.");
Sezam/AGLockViewController.m:745:            AGDiaryInfo(@"ForceKeychain", @"New Bridge for user.");
Sezam/AGLockViewController.m:752:            AGDiaryInfo(@"ForceKeychain", @"hyperbridge status has changed");
Sezam/AGLockViewController.m:764:                    NSString *nestAwayStatus = [dict objectForKey:@"away"];
Sezam/AGLockViewController.m:765:                    if ([nestAwayStatus isEqualToString:@"home"]) {
Sezam/AGLockViewController.m:786:    AGDiaryInfo(@"ShowLock", @"initView - Showing Lock named %@", self.agLock.name);
Sezam/AGLockViewController.m:791:    BOOL doesNeedSetupOTA = [[NSUserDefaults standardUserDefaults] boolForKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGLockViewController.m:793:        self.setupOTAAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Lock Setup Not Complete", nil) message:NSLocalizedString(@"You will not be able to operate your August Smart Lock until an important lock update is installed and your lock is calibrated.\n\nTo complete this update as quickly as possible (about 10 minutes), please leave your phone near the lock with the app running.\n\nWe’ll calibrate your lock once the update is done.", nil) delegate:self cancelButtonTitle:@"Later" otherButtonTitles:@"Finish Setup", nil];
Sezam/AGLockViewController.m:863:            //[AGUtility showError:NSLocalizedString(@"You are not an authorized user of this lock.", nil) inViewController:self];
Sezam/AGLockViewController.m:879:            NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId, @"batteryLevel":self.agLock.batteryPercentageNumber};
Sezam/AGLockViewController.m:889:        self.batteryLevelImageView.image = [UIImage imageNamed:@"battery_low.png"];
Sezam/AGLockViewController.m:891:        self.batteryLevelImageView.image = [UIImage imageNamed:@""];
Sezam/AGLockViewController.m:904:            AGDiaryDebug(@"TriggerSeamlessWidgetLock", @"Triggering seamless lock due to a widget operation. %@", isLockInRange?@"LockInRange":@"LockNotInRange");
Sezam/AGLockViewController.m:909:            AGDiaryDebug(@"TriggerSeamlessWidgetUnlock", @"Triggering seamless unlock due to a widget operation. %@", isLockInRange?@"LockInRange":@"LockNotInRange");
Sezam/AGLockViewController.m:919:    AGDiaryDebug(@"SeamlessBLEWifi", @"PerformSeamless%@Operation. Max BLE wait %f seconds", doLock?@"Lock":@"Unlock", (float)maxWaitForBluetooth);
Sezam/AGLockViewController.m:932:    [self performSelector:@selector(takeLockActionViaRemoteController:) withObject:doLock?@"lock":@"unlock" afterDelay:REMOTE_ACTION_DELAY_TIMER ];
Sezam/AGLockViewController.m:948:    if (![user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGLockViewController.m:962:            [ruleScanner scanUpToString:@"BYDAY=" intoString:nil];
Sezam/AGLockViewController.m:963:            [ruleScanner scanUpToString:@";" intoString:&dayStr];
Sezam/AGLockViewController.m:964:            dayStr = [dayStr stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGLockViewController.m:965:            NSArray* daysSplit = [dayStr componentsSeparatedByString: @","];
Sezam/AGLockViewController.m:968:            [myFormatter setDateFormat:@"c"]; // day number, like 7 for saturday
Sezam/AGLockViewController.m:972:            NSArray* daysOfTheWeek = [[NSArray alloc] initWithObjects: @"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA", nil];
Sezam/AGLockViewController.m:996:            NSString * joinedDaysString = [[[setToOrder array] valueForKey:@"description"] componentsJoinedByString:@", "];
Sezam/AGLockViewController.m:999:            NSString *baseStr = @"NEXT ACCESS";
Sezam/AGLockViewController.m:1003:            NSString *thirdLineStr = [NSString stringWithFormat:@"%@ TO %@", startTimeStr, endTimeStr];
Sezam/AGLockViewController.m:1004:            NSString *showText = [NSString stringWithFormat:@"%@\n %@\n %@ %@", baseStr, joinedDaysString, thirdLineStr, timeZoneOrNot];
Sezam/AGLockViewController.m:1010:            NSString *expiredText = @"your access to this lock has expired";
Sezam/AGLockViewController.m:1017:            NSString* nextAccessBaseString = NSLocalizedString(@"NEXT ACCESS\n%@\n%@ TO %@ %@",
Sezam/AGLockViewController.m:1022:            NSString* baseStr = @"NEXT ACCESS";
Sezam/AGLockViewController.m:1027:            NSString *showText = [NSString stringWithFormat:@"%@: %@ - %@ %@", baseStr, starTimeStr, endTimeStr, timeZoneOrNot];
Sezam/AGLockViewController.m:1038:    AGDiaryError(@"PermissionDenied", @"Couldn't find a appropriate rule that provides user access to the lock");
Sezam/AGLockViewController.m:1039:    [AGUtility showError:NSLocalizedString(@"Access Rights Error - you might not have permission to operate this lock", nil) inViewController:self];
Sezam/AGLockViewController.m:1055:    NSString *timeZoneAbbreviation = @"";
Sezam/AGLockViewController.m:1090:        AGDiaryDebug(@"SeamlessBLEWifi", @"Seamless BLE WiFi Operation Enabled");
Sezam/AGLockViewController.m:1093:        AGDiaryDebug(@"SeamlessBLEWifi", @"Seamless HyperBridge BLE WiFi Operation Enabled");
Sezam/AGLockViewController.m:1096:        AGDiaryDebug(@"SeamlessBLEWifi", @"Seamless BLE WiFi Operation Disabled");
Sezam/AGLockViewController.m:1103:    AGDiaryDebug(@"SeamlessBLEWifi", @"Updating LockView UI for Seamless Operation. Setting OperationMode==Bluetooth->scanning (Seamless)");
Sezam/AGLockViewController.m:1108:            [self.seamlessModeImage setImage:[UIImage imageNamed:@"BLEActive"]];
Sezam/AGLockViewController.m:1110:        AGDiaryDebug(@"SeamlessBLEWifi", @"Updating LockView UI for Seamless Operation. isConnected==true, show BLE icon (Seamless)");
Sezam/AGLockViewController.m:1112:        AGDiaryDebug(@"SeamlessBLEWifi", @"Updating LockView UI for Seamless Operation.");
Sezam/AGLockViewController.m:1133:            [self.seamlessModeImage setImage:[UIImage imageNamed:@"WiFiAvailable"]];
Sezam/AGLockViewController.m:1135:            [self.seamlessModeImage setImage:[UIImage imageNamed:@"WiFiActive"]];
Sezam/AGLockViewController.m:1162:    AGDiaryInfo(nil, @"LockViewController dismissView is disabling UI and connection to lock.");
Sezam/AGLockViewController.m:1209:    AGDiaryDebug(@"forceUpdateKeyChain", @"clear cache data, then go to key chain. ");
Sezam/AGLockViewController.m:1212:    if ([AGUtility checkForAppFeature:@"disableForceToKeychain"]) {
Sezam/AGLockViewController.m:1258:    AGDiaryDebug(@"AppResigned", @"App will be minimized");
Sezam/AGLockViewController.m:1277:        AGDiaryWarn(@"BecameActiveWithoutResign", @"Skipping Lock view activation code because it did not get a resign notification previously. This happens on a widget launch.");
Sezam/AGLockViewController.m:1331:            [self performSegueWithIdentifier:@"lockToRateApp" sender:nil];
Sezam/AGLockViewController.m:1335:            [self performSegueWithIdentifier:@"lockToRateApp" sender:nil];
Sezam/AGLockViewController.m:1356:            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockViewController.m:1357:            AGSetupOTAViewController* setupOTAViewController = (AGSetupOTAViewController*)[storyboard instantiateViewControllerWithIdentifier:@"SetupOTAViewController"];
Sezam/AGLockViewController.m:1376:        NSNumber *terminationType = (NSNumber *)[notification.userInfo objectForKey:@"terminationType"];
Sezam/AGLockViewController.m:1427:    NSString *title = @"Unable To Get Status";
Sezam/AGLockViewController.m:1428:    NSString *message = @"There’s an issue determining the state of your lock. If this persists, please call August Support at 844-284-8781. \n\nWould you like to unlock your door without knowing the state?";
Sezam/AGLockViewController.m:1431:    UIAlertAction *unlockMyDoorAction = [UIAlertAction actionWithTitle:@"Unlock My Door" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1438:    UIAlertAction *doNothingAction = [UIAlertAction actionWithTitle:@"Don't Do Anything" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1451:    UIAlertController *longConnectionAlert = [UIAlertController alertControllerWithTitle:@"Connecting to Lock?"
Sezam/AGLockViewController.m:1452:                                                                                 message:[NSString stringWithFormat:@"Are you trying to connect to %@?", self.agLock.name]
Sezam/AGLockViewController.m:1454:    [longConnectionAlert addAction:[UIAlertAction actionWithTitle:@"No"
Sezam/AGLockViewController.m:1457:                                                              [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"TryingToConnectResponse"];
Sezam/AGLockViewController.m:1460:    [longConnectionAlert addAction:[UIAlertAction actionWithTitle:@"Yes"
Sezam/AGLockViewController.m:1464:                                                              [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"TryingToConnectResponse"];
Sezam/AGLockViewController.m:1469:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedTryingToConnectPopup"];
Sezam/AGLockViewController.m:1479:    UIAlertController *rangeExplainerAlert = [UIAlertController alertControllerWithTitle:@"Out of Bluetooth Range"
Sezam/AGLockViewController.m:1480:                                                                                 message:@"In order to connect to the lock, you must be within 30 feet or less of the door. Please try again when you are closer to the lock."
Sezam/AGLockViewController.m:1482:    [rangeExplainerAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGLockViewController.m:1484:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedBluetoothRangePopup"];
Sezam/AGLockViewController.m:1496:    UIAlertController *seamlessExplainerAlert = [UIAlertController alertControllerWithTitle:@"Automatic Connection"
Sezam/AGLockViewController.m:1497:                                                                                 message:@"The August app seamlessly uses the best connection, automatically switching between Wi-Fi and Bluetooth."
Sezam/AGLockViewController.m:1499:    UIAlertAction *learnMoreAction = [UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1500:        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/kb-remote-connect"]];
Sezam/AGLockViewController.m:1503:    UIAlertAction *gotItAction = [UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:1512:     UIAlertController *getConnectAlert = [UIAlertController alertControllerWithTitle:@"Control your Lock Remotely With August Connect"
Sezam/AGLockViewController.m:1513:                                                                              message:@"Get $20 off a Connect Wi-Fi Bridge, discount applied at checkout, available in app ONLY."
Sezam/AGLockViewController.m:1515:     [getConnectAlert addAction:[UIAlertAction actionWithTitle:@"Exit" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1516:         [self.lockOperationLog updateLongLockConnectionUserResponse:@"Exit" forMetric:@"ConnectPromoPopupResponse"];
Sezam/AGLockViewController.m:1519:     [getConnectAlert addAction:[UIAlertAction actionWithTitle:@"$20 Off Connect"
Sezam/AGLockViewController.m:1522:                                                           NSString *storeURL =  @"https://store.august.com/discount/fromanywhere20?redirect=%2Fproducts%2Faugust-connect&utm_source=august_app&utm_medium=iossidemenu";
Sezam/AGLockViewController.m:1524:                                                           [self.lockOperationLog updateLongLockConnectionUserResponse:@"LearnMore" forMetric:@"ConnectPromoPopupResponse"];
Sezam/AGLockViewController.m:1527:     [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedConnectPromoPopup"];
Sezam/AGLockViewController.m:1535:    UIAlertController *getHelpAlert = [UIAlertController alertControllerWithTitle:@"Get Connection Help"
Sezam/AGLockViewController.m:1536:                                                                          message:@"There may be a bluetooth issue with your phone or a problem with the lock. Would you like help wih improving your lock connection?"
Sezam/AGLockViewController.m:1538:    [getHelpAlert addAction:[UIAlertAction actionWithTitle:@"No Thanks" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1539:        [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"GetConnectionHelpResponse"];
Sezam/AGLockViewController.m:1542:    [getHelpAlert addAction:[UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGLockViewController.m:1545:                                                       [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"GetConnectionHelpResponse"];
Sezam/AGLockViewController.m:1549:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedGetConnectionHelpPopup"];
Sezam/AGLockViewController.m:1557:    UIAlertController *standingNextToLockAlert = [UIAlertController alertControllerWithTitle:@"Standing Next to Door?"
Sezam/AGLockViewController.m:1558:                                                                                      message:[NSString stringWithFormat:@"Are you standing next to %@?", self.agLock.name]
Sezam/AGLockViewController.m:1560:    [standingNextToLockAlert addAction:[UIAlertAction actionWithTitle:@"No"
Sezam/AGLockViewController.m:1563:                                                                   [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"NextToLockResponse"];
Sezam/AGLockViewController.m:1573:                                                                                                                               tooltipText:@"Tap here to access your lock over Wi-Fi."
Sezam/AGLockViewController.m:1576:                                                                       self.bridgeTooltip.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGLockViewController.m:1580:                                                                       [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedRemoteConnectTooltip"];
Sezam/AGLockViewController.m:1595:    [standingNextToLockAlert addAction:[UIAlertAction actionWithTitle:@"Yes"
Sezam/AGLockViewController.m:1598:                                                                   [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"NextToLockResponse"];
Sezam/AGLockViewController.m:1603:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedNextToLockPopup"];
Sezam/AGLockViewController.m:1648:    AGAnalyticsDiaryData(AGDiaryLevel_Info, @"UserAction", @"AugustStore", @{@"AugustStoreConnectPromotion":[NSNumber numberWithBool:YES]});
Sezam/AGLockViewController.m:1649:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockViewController.m:1650:    AGStoreWebViewController *vc = (AGStoreWebViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"StoreWebViewController"];
Sezam/AGLockViewController.m:1660:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockViewController.m:1707:        AGDiaryWarn(@"BadCallbackAGLock", @"Received didUpdateLock: callback for lock %@, but AGLockViewController.agLock = %@", lock.objectId, self.agLock.objectId);
Sezam/AGLockViewController.m:1737:                                       NSLocalizedString(@"Important Smart Keypad Update", nil)
Sezam/AGLockViewController.m:1738:                                                                 message: NSLocalizedString(@"There is an important update for your keypad. Would you like to install this keypad update?", nil)
Sezam/AGLockViewController.m:1739:                                                                delegate:self cancelButtonTitle:NSLocalizedString(@"Later", nil) otherButtonTitles:NSLocalizedString(@"Start", nil), nil];
Sezam/AGLockViewController.m:1747:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGLockViewController.m:1749:    UINavigationController *keypadSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"KeypadOTANavigationController"];
Sezam/AGLockViewController.m:1764:            self.otaUpdateProgressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Lock Update In Progress", nil) message:NSLocalizedString(@"The August app is installing an important update to your lock that will improve connection speed and motor operation.\n\nTo speed up this process, please leave your phone next to your lock until the update completes. This will take several minutes.\n\nYou can still operate your lock during the update, but it will need to briefly restart at the end of the process.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGLockViewController.m:1789:     UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Lock Update Successful", nil) message:NSLocalizedString(@"You can now set up your August Smart Keypad.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel", nil) otherButtonTitles:@"Ok", nil];
Sezam/AGLockViewController.m:1795:        AGDiaryDebug(@"ShowOTAMessage", @"Showing OTA message for fw version %@", fwVersion);
Sezam/AGLockViewController.m:1796:        NSString *userString = NSLocalizedString(@"Congratulations, your lock is now updated!", nil);
Sezam/AGLockViewController.m:1797:        NSString *findString = @"3.0.29";
Sezam/AGLockViewController.m:1800:            userString = [userString stringByAppendingString:@"\n\nBecause this is a major update, you may need to set up any HomeKit triggers and scenes you have again."];
Sezam/AGLockViewController.m:1803:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Lock Update Successful", nil) message: userString delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGLockViewController.m:1888:    NSString *title = @"Module Communication Error";
Sezam/AGLockViewController.m:1889:    NSString *msg = @"Your August module is unable to communicate with your lock. Let's fix this!";
Sezam/AGLockViewController.m:1894:    [alertVC addAction:[UIAlertAction actionWithTitle:@"Fix This Now" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1902:    [alertVC addAction:[UIAlertAction actionWithTitle:@"Do Nothing" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1911:    AGDiaryDebug(@"lostKeyExchangeFinished", @"");
Sezam/AGLockViewController.m:1919:    AGDiaryDebug(@"lostKeyExchangeCancelled", @"");
Sezam/AGLockViewController.m:1932:    NSString *title = @"Calibration Needed";
Sezam/AGLockViewController.m:1933:    NSString *message = @"This lock must be calibrated before it can be operated from the August app.";
Sezam/AGLockViewController.m:1935:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:1936:    UIAlertAction *calibrateNowAction = [UIAlertAction actionWithTitle:@"Calibrate Now" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1937:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGLockViewController.m:1938:        AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGLockViewController.m:1965:    NSDictionary *batteryDictionary = @{@"lockId":self.agLock.objectId, @"batteryLevel":self.agLock.batteryPercentageNumber};
Sezam/AGLockViewController.m:1966:    NSString *title = NSLocalizedString(@"Low Battery",nil);
Sezam/AGLockViewController.m:1967:    NSString *message = NSLocalizedString(@"The batteries in your Smart Lock are at 20% capacity or lower. Please replace immediately.",nil);
Sezam/AGLockViewController.m:1969:    UIAlertAction *okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action){
Sezam/AGLockViewController.m:1970:        AGDiaryInfo(@"LockLowBattery", @"LowBatteryActionOk, LockId: %@", self.agLock.objectId);
Sezam/AGLockViewController.m:1971:        AGAnalyticsDiaryData(AGDiaryLevel_Info, @"LockLowBatteries", @"LowBatteryActionOk", batteryDictionary);
Sezam/AGLockViewController.m:1973:    UIAlertAction *replacedBatteriesAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"I've Replaced The Batteries",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1974:        self.batteryLevelImageView.image = [UIImage imageNamed:@""];
Sezam/AGLockViewController.m:1976:        AGDiaryInfo(@"LockLowBattery", @"LowBatteryActionSnooze, LockId: %@", self.agLock.objectId);
Sezam/AGLockViewController.m:1977:        AGAnalyticsDiaryData(AGDiaryLevel_Info, @"LockLowBatteries", @"LowBatteryActionSnooze", batteryDictionary);
Sezam/AGLockViewController.m:1982:    AGDiaryInfo(@"LockLowBattery", @"LowBatteryAlertShow, LockId: %@", self.agLock.objectId);
Sezam/AGLockViewController.m:1983:    AGAnalyticsDiaryData(AGDiaryLevel_Info, @"LockLowBatteries", @"LowBatteryAlertShow", batteryDictionary);
Sezam/AGLockViewController.m:1995:        NSString *awayMessage = [NSString stringWithFormat:@"\n%@ is set to Home.\n\nDo you want to set to Away?", self.agLock.house.name];
Sezam/AGLockViewController.m:1996:        UIAlertController *nestSetAwayAlertController = [UIAlertController alertControllerWithTitle:@"Nest: Set to Away?" message:awayMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:1997:        UIAlertAction *setToAwayAction = [UIAlertAction actionWithTitle:@"Set to Away" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1998:            [AGHouse updateNestAwayStatus:self.agLock.house.objectId awayStatus:@"away" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGLockViewController.m:2000:        UIAlertAction *remainHomeAction = [UIAlertAction actionWithTitle:@"Remain Home" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:2007:        NSString *homeMessage = [NSString stringWithFormat:@"\n%@ is set to Away\n\nDo you want to end Away?", self.agLock.house.name];
Sezam/AGLockViewController.m:2008:        UIAlertController *nestSetHomeAlertController = [UIAlertController alertControllerWithTitle:@"Nest: Set to Home?" message:homeMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:2009:        UIAlertAction *setToHomeAction = [UIAlertAction actionWithTitle:@"Set to Home" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:2010:            [AGHouse updateNestAwayStatus:self.agLock.house.objectId awayStatus:@"home" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGLockViewController.m:2012:        UIAlertAction *remainAwayAction = [UIAlertAction actionWithTitle:@"Remain Away" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:2046:                [self.seamlessModeImage setImage:[UIImage imageNamed:@"WiFiDisconnected"]];
Sezam/AGLockViewController.m:2048:                [self.seamlessModeImage setImage:[UIImage imageNamed:@"WiFiActive"]];
Sezam/AGHomeKitPickRoomViewController.m:15:#define kAGDiaryCategory @"PickRoom"
Sezam/AGHomeKitPickRoomViewController.m:36:            AGHomeKitCreateRoomViewController *createRoom = (AGHomeKitCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateRoom"];
Sezam/AGHomeKitPickRoomViewController.m:45:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitPickRoomViewController.m:51:            AGDiaryDebug(@"UserSelectedRoom", @"Room %@", [self navController].selectedRoom.name);
Sezam/AGHomeKitPickRoomViewController.m:52:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitPickRoomViewController.m:63:    self.instructionLabel.text = [NSString stringWithFormat:@"Choose which room in %@ you want to add this lock to.", [self navController].selectedHome.name];
Sezam/AGHomeKitPickRoomViewController.m:98:    AGTableViewCell *cell = (AGTableViewCell *)[self.roomsTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitPickRoomViewController.m:100:        cell.label.text = @"Add a New Room";
Sezam/AGHomeKitPickRoomViewController.m:103:        cell.label.text = @"None";
Sezam/AGHomeKitPickRoomViewController.m:110:    cell.accessoryView = (indexPath.row != self.selectedRow)? nil : [[UIImageView alloc] initWithImage: [UIImage imageNamed:@"check_v2"]];
Sezam/AGFancyProgressSpinner.m:98:    rotationAnimation = [CABasicAnimation animationWithKeyPath:@"transform"];
Sezam/AGFancyProgressSpinner.m:113:    [self.layer addAnimation:rotationAnimation forKey:@"rotationAnimation"];
Sezam/AGWifiNetworkUtility.m:28:        if (info[@"BSSID"]) {
Sezam/AGWifiNetworkUtility.m:29:            bssid = info[@"BSSID"];
Sezam/AGWifiNetworkUtility.m:31:        if (info[@"SSID"]) {
Sezam/AGWifiNetworkUtility.m:32:            ssid = info[@"SSID"];
Sezam/AGBridgeSetupScanViewController.m:105:    self.setupImage.image = [UIImage imageNamed:@"connect solo image"];
Sezam/AGBridgeSetupScanViewController.m:110:        self.scanTitle.text = @"SET UP CONNECT";
Sezam/AGBridgeSetupScanViewController.m:111:        self.scanMessage.text = @"Let’s set up your August Connect!\n\nBefore you begin, make sure this phone is connected to your home Wi-Fi network.";
Sezam/AGBridgeSetupScanViewController.m:146:    self.setupImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupScanViewController.m:147:    self.setupImageProducts.image = [UIImage imageNamed:@"connect and router 2 white circles 1 arrow"];
Sezam/AGBridgeSetupScanViewController.m:148:    self.setupImageTextOverlay.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupScanViewController.m:151:    self.scanMessage.text = @"Unplug your Connect, then plug it into an outlet as close to your router as possible.\n\n This will help us get Connect onto your network.";
Sezam/AGBridgeSetupScanViewController.m:152:    [self.actionButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:162:    AGDiaryInfo(@"ScanClickExit", @"User clicked the 'Exit' button");
Sezam/AGBridgeSetupScanViewController.m:167:    AGDiaryInfo(@"ConnectSetupWACFail", @"WAC failed. config sent: %@", configSent?@"YES":@"NO");
Sezam/AGBridgeSetupScanViewController.m:176:    self.setupImage.image = [UIImage imageNamed:@"2 devices background"];
Sezam/AGBridgeSetupScanViewController.m:177:    self.setupImageProducts.image = [UIImage imageNamed:@"connect and router 2 red circles"];
Sezam/AGBridgeSetupScanViewController.m:178:    self.setupImageTextOverlay.image = [UIImage imageNamed:@"connect and router devices"];
Sezam/AGBridgeSetupScanViewController.m:180:    self.scanMessage.text = @"Unfortunately, we failed to get August Connect onto your network. Let’s see if we can help.";
Sezam/AGBridgeSetupScanViewController.m:197:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:226:            self.setupImage.image = [UIImage imageNamed:@"connect and outlet copy"];
Sezam/AGBridgeSetupScanViewController.m:227:            self.scanMessage.text = @"Plug Connect into an outlet as close to your door as possible.\n\nFor best performance, make sure there is a strong Wi-Fi signal at your door.";
Sezam/AGBridgeSetupScanViewController.m:228:            [self.actionButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:229:            self.setupImage.image = [UIImage imageNamed:@"3 devices background"];
Sezam/AGBridgeSetupScanViewController.m:230:            self.setupImageProducts.image = [UIImage imageNamed:@"3 device images"];
Sezam/AGBridgeSetupScanViewController.m:231:            self.circlesImage.image = [UIImage imageNamed:@"3 circles white circles"];
Sezam/AGBridgeSetupScanViewController.m:232:            self.setupImageTextOverlay.image = [UIImage imageNamed:@"August Smart Lock and Wi-Fi Router text"];
Sezam/AGBridgeSetupScanViewController.m:233:            self.setupImageTextOverlay2.image = [UIImage imageNamed:@"August Connect text"];
Sezam/AGBridgeSetupScanViewController.m:238:            self.setupImage.image = [UIImage imageNamed:@"connect and outlet copy"];
Sezam/AGBridgeSetupScanViewController.m:240:            CABasicAnimation *flash = [CABasicAnimation animationWithKeyPath:@"opacity"];
Sezam/AGBridgeSetupScanViewController.m:251:            /// [self.blinkyOverlayView.layer addAnimation:flash forKey:@"flashAnimation"];
Sezam/AGBridgeSetupScanViewController.m:253:            self.scanMessage.text = @"Next, press and hold the front button on your Connect for 5 seconds, then wait a moment for the green light to begin blinking slowly.";
Sezam/AGBridgeSetupScanViewController.m:254:            [self.actionButton setTitle:@"OK, LIGHT IS BLINKING GREEN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:257:                AGDiaryInfo(@"ConnectSetupStart", @"Starting scan for first time");
Sezam/AGBridgeSetupScanViewController.m:259:            AGDiaryInfo(@"ConnectSetupScan", @"Starting scan");
Sezam/AGBridgeSetupScanViewController.m:302:        AGDiaryInfo(@"FirstScan", @"This is the user's first click of the 'Scan' button");
Sezam/AGBridgeSetupScanViewController.m:304:    AGDiaryInfo(@"ClickScan", @"User clicked the 'Scan' button.  numAttempts = %d", self.numAttempts);
Sezam/AGBridgeSetupScanViewController.m:315:            UIAlertController *turnOnWiFiAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Please Connect to Your Wi-Fi Network", nil) message:NSLocalizedString(@"This device must be connected to your wireless network in order to set up your August Connect.", nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:316:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK",nil) style:UIAlertActionStyleDefault handler:nil];
Sezam/AGBridgeSetupScanViewController.m:324:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name == 'August Connect'"];
Sezam/AGBridgeSetupScanViewController.m:339:    AGDiaryDebug(nil, @"Scanning for unconfigured WAC accessories.  Scan will continue for %.0f seconds", scanDuration);
Sezam/AGBridgeSetupScanViewController.m:356:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Scanning for Venus or Mars found %ld bridges", numBridges];
Sezam/AGBridgeSetupScanViewController.m:358:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:371:            UIAlertController *noConnectFoundAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Connect Not Found", nil) message:NSLocalizedString(@"We did not find your Connect.  Please check that it is plugged in and in range.", nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:372:            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleDefault handler:nil];
Sezam/AGBridgeSetupScanViewController.m:374:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:383:        BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGBridgeSetupScanViewController.m:387:            UIAlertController *multipleDevicesAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Multiple August Connect Devices Found", nil) message:NSLocalizedString(@"Only one August Connect can be set up at a time.\n\nPlease unplug any other nearby non-configured August Connect devices, then try again.", nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:388:            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:393:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:410:    self.scanMessage.text = @"We found your Connect! \n\nNow let’s get Connect onto your Wi-Fi network.";
Sezam/AGBridgeSetupScanViewController.m:411:    self.setupImage.image = [UIImage imageNamed:@"wac preview img"];
Sezam/AGBridgeSetupScanViewController.m:412:    [self.actionButton setTitle:@"BEGIN ACCESSORY SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:419:    UIStoryboard *bridgeSetupStoryboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGBridgeSetupScanViewController.m:420:    AGBridgeSetupSelectViewController* selectViewController = [bridgeSetupStoryboard instantiateViewControllerWithIdentifier:@"bridgeSetupSelect"];
Sezam/AGBridgeSetupScanViewController.m:433:    AGDiaryInfo(nil, @"Stopping WAC unconfigured accessory scan");
Sezam/AGBridgeSetupScanViewController.m:454:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupScanViewController.m:462:    AGDiaryInfo(@"StartRegister", @"Registering the bridge with the ACS server");
Sezam/AGBridgeSetupScanViewController.m:473:    regex = [NSRegularExpression regularExpressionWithPattern:@"August Connect-([0-9A-Z]+)-WAC"
Sezam/AGBridgeSetupScanViewController.m:477:        AGDiaryError(@"RegexpCreate", @"Could not create regexp with error %@'", error);
Sezam/AGBridgeSetupScanViewController.m:485:        AGDiaryError(@"RegexpResult", @"Could not extract serial number from bridge SSID '%@'", ssid);
Sezam/AGBridgeSetupScanViewController.m:493:        AGDiaryError(@"RegexpSerialNumber", @"Could not extract serial number from bridge SSID '%@'", ssid);
Sezam/AGBridgeSetupScanViewController.m:498:    AGDiaryDebug(nil, @"Bridge SSID = '%@', so bridge serial number = '%@'", ssid, serialNumber);
Sezam/AGBridgeSetupScanViewController.m:521:    NSString *bridgeModel = bridgeModel = @"august-connect";
Sezam/AGBridgeSetupScanViewController.m:522:    AGDiaryInfo(@"ConnectSetupFoundDevice", @"We have found an unconfigured device.");
Sezam/AGBridgeSetupScanViewController.m:523:    AGDiaryDebug(nil, @"Registering Bridge Serial Number: %@ to Lock with LockId: %@ as Device Model: %@", serialNumber, lockId, bridgeModel);
Sezam/AGBridgeSetupScanViewController.m:546:    AGDiaryInfo(@"WACStart", @"Running Wi-Fi Accessory Setup using iOS system view controller(s)");
Sezam/AGBridgeSetupScanViewController.m:558:    AGDiaryDebug(nil, @"New accessoryBrowserState = %d", (int)state);
Sezam/AGBridgeSetupScanViewController.m:563:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Found %d unconfigured accessories", (int)accessories.count];
Sezam/AGBridgeSetupScanViewController.m:565:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:572:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Removed %d unconfigured accessories", (int)accessories.count];
Sezam/AGBridgeSetupScanViewController.m:574:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:597:        AGDiaryWarn(nil, @"Ignoring configuration of accessory (%@, %@).  It's not the accessory that we started configuring", accessory.name, accessory.macAddress);
Sezam/AGBridgeSetupScanViewController.m:603:        AGDiaryInfo(@"WACSuccess", @"WAC configuration was successful");
Sezam/AGBridgeSetupScanViewController.m:611:            NSString *wifiChangeAlertMessage = [NSString stringWithFormat:@"Please be aware that your August Device has joined a different Wi-Fi Network named \"%@\". This may be due to incompatibilities between your original network and your August Device. For example, Connect does not support 5 GHz networks or 40 MHz channel width.", [AGUtility getWiFiSSID]];
Sezam/AGBridgeSetupScanViewController.m:613:            UIAlertController *wifiChangedAlertController = [UIAlertController alertControllerWithTitle:@"Warning: Wi-Fi Network has Changed" message:wifiChangeAlertMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:614:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGBridgeSetupScanViewController.m:621:            AGDiaryWarn(@"NoWifiSSIDAfterWAC", @"Wifi SSID is nil after WAC setup.");
Sezam/AGBridgeSetupScanViewController.m:622:            self.setupNavController.wifiSSID = NSLocalizedString(@"Unknown", @"Wifi SSID shown when setup succeeds but we don't know the network name");
Sezam/AGBridgeSetupScanViewController.m:627:        BOOL disableConnectOnlineCheckByPubNub = [AGUtility checkForAppFeature:@"disableConnectOnlineCheckByPubNub"];
Sezam/AGBridgeSetupScanViewController.m:629:            AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:640:        AGDiaryInfo(@"WACCanceled", @"The user clicked 'Cancel' in the iOS WiFi setup dialog");
Sezam/AGBridgeSetupScanViewController.m:642:        UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"August Connect Wi-Fi Setup Cancelled", nil) message:NSLocalizedString(@"We see that you cancelled setup of your August Device.  You can always re-run setup at a later time", nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:643:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:652:        AGDiaryWarn(@"WACFailed", @"WAC setup failed");
Sezam/AGBridgeSetupScanViewController.m:656:        AGDiaryWarn(@"WACFailedUnknownStatus", @"Unrecognized status value %d inside accessoryBrowser:didFinishConfiguringAccessory:", (int)status);
Sezam/AGBridgeSetupScanViewController.m:688:        AGDiaryDebug(@"PubNubMessageReceivedAtWACSetup", @"Message: %@", messageData);
Sezam/AGBridgeSetupScanViewController.m:697:    NSString *status = [messageData objectForKey:@"status"];
Sezam/AGBridgeSetupScanViewController.m:699:        if ([status isEqualToString:@"associated_bridge_online"]) {
Sezam/AGBridgeSetupScanViewController.m:724:    BOOL disableConnectOnlineCheckByPubNub = [AGUtility checkForAppFeature:@"disableConnectOnlineCheckByPubNub"];
Sezam/AGBridgeSetupScanViewController.m:732:        AGDiaryInfo(@"ConnectSetupBridgeWifiOnline", @"bridge is online");
Sezam/AGBridgeSetupScanViewController.m:733:        AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:748:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGAddContactBaseViewController.m:43:    AGTableViewCell *selectionCell = [tableView dequeueReusableCellWithIdentifier:@"SelectionCell"];
Sezam/AGAddContactBaseViewController.m:51:        selectionCell.label.text = NSLocalizedString(@"Invite via Mobile Number",nil);
Sezam/AGAddContactBaseViewController.m:56:        selectionCell.accessibilityLabel = NSLocalizedString(@"Invite via Mobile Number",nil);
Sezam/AGAddContactBaseViewController.m:60:        selectionCell.label.text = NSLocalizedString(@"Invite a Contact",nil);
Sezam/AGAddContactBaseViewController.m:109:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:114:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:120:        UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGAddContactBaseViewController.m:121:        self.contactPersonView = [guestListStoryboard instantiateViewControllerWithIdentifier:@"Contact Person View Controller"];
Sezam/AGAddContactBaseViewController.m:123:        if ([self.firstName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:124:            if ([self.lastName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:125:                self.contactPersonView.contactNameString = @"";
Sezam/AGAddContactBaseViewController.m:129:        } else if ([self.lastName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:132:            self.contactPersonView.contactNameString = [NSString stringWithFormat:@"%@ %@", self.firstName, self.lastName];
Sezam/AGAddContactBaseViewController.m:145:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:149:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:166:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:170:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:191:    UIAlertView *errorSelectingPhoneNumberAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"We're sorry but we're unable to select this record, please enter the phone number manually.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil, nil];
Sezam/AGAddContactBaseViewController.m:236:        UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"You can't add yourself.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddContactBaseViewController.m:258:        self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Searching for user...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddContactBaseViewController.m:294:    NSString * message = [NSString stringWithFormat:NSLocalizedString(@"%@ is already a user of this lock",nil), [self.allIdentifiersDictionary objectForKey:identifier]];
Sezam/AGAddContactBaseViewController.m:295:    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message: message delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddContactBaseViewController.m:301:    NSString * message = @"This person is already a user of this doorbell";
Sezam/AGAddContactBaseViewController.m:302:    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message: message delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGDoor.m:114:    if (self.bridge && [self.bridge.model isEqual:@"august-connect"]) {
Sezam/AGPubNubClient.m:21:static NSString* kAGDiaryCategory = @"AGPubNubClient";
Sezam/AGPubNubClient.m:27:NSString * const kPublishKey = @"pub-c-567d7f2d-270a-438a-a785-f0af12ad8312";
Sezam/AGPubNubClient.m:28:NSString * const kSubscribeKey = @"sub-c-1030e062-0ebe-11e5-a5c2-0619f8945a4f";
Sezam/AGPubNubClient.m:72:    AGDiaryInfo(@"PubNubClient", @"ResettingSubscribers");
Sezam/AGPubNubClient.m:82:        AGDiary(kDiaryLevel, kAGDiaryCategory, @"PubNubClientDidRecieveMessage", @"Topic:%@ Message:%@",subscription, messageData);
Sezam/AGPubNubClient.m:94:        [[NSNotificationCenter defaultCenter] postNotificationName:@"PubSubServiceReconnection" object:nil];
Sezam/AGPubNubClient.m:98:        AGDiaryInfo(@"PubNubClientSubscribe", @"StatusCategory:%@ Error:%@",subscribeStatus.stringifiedCategory, subscribeStatus.isError?@"YES":@"NO");
Sezam/AGPubNubClient.m:105:    [payload setObject:[AGUtility getIdentifierForVendor] forKey: @"deviceID"];
Sezam/AGPubNubClient.m:106:    [payload setObject:[self getSequenceForDevice:[AGUtility getIdentifierForVendor]] forKey: @"sequence"];
Sezam/AGFeatureManager.m:13:#define kAGDiaryCategory @"AGFeatureManager"
Sezam/AGFeatureManager.m:68:        NSAssert(false, @"BOOL type features should be parseable to NSNumbers");
Sezam/AGFeatureManager.m:87:    NSArray *featureComponents = [featureCharacteristicsStr componentsSeparatedByString:@","];
Sezam/AGFeatureManager.m:90:        NSAssert(featureComponentsCountCorrect, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", featureCharacteristicsStr]));
Sezam/AGFeatureManager.m:99:    NSArray *populationRangeComponents = [populationRange componentsSeparatedByString:@"-"];
Sezam/AGFeatureManager.m:102:        NSAssert(populationRangeComponentsCountCorrect, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", populationRange]));
Sezam/AGFeatureManager.m:113:        NSAssert(populationLowerAndUpperValParseable, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", populationRange]));
Sezam/AGFeatureManager.m:135:    NSString *populationIDInput = [NSString stringWithFormat:@"%@-%@", [AGUtility persistentDeviceID], feature.populationID];
Sezam/AGFeatureManager.m:154:    return [self.featureDictionary objectForKey:@"tests"];
Sezam/AGFeatureManager.m:182:    NSString *alreadyLoggedKey = [NSString stringWithFormat:@"LoggedFeatureUnparseable-(%@)",featureInfo];
Sezam/AGFeatureManager.m:188:        AGAnalyticsDiaryInfo(@"ExperimentalFeatureUnparseable", featureInfo);
Sezam/AGFeatureManager.m:218:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
Sezam/AGUnityLostKeyExchangeDriver.m:15:static NSString* kAGDiaryCategory = @"AGUnityLostKeyExchangeDriver";
Sezam/AGUnityLostKeyExchangeDriver.m:45:    AGDiaryDebug(@"dealloc", @"");
Sezam/AGUnityLostKeyExchangeDriver.m:50:    AGDiaryDebug(@"startWithController", @"flow started!");
Sezam/AGUnityLostKeyExchangeDriver.m:55:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGUnityLostKeyExchangeDriver.m:56:    AGUnityLostKeyViewController *beginVC = [storyboard instantiateViewControllerWithIdentifier:@"AGUnityLostKeyViewController"];
Sezam/AGUnityLostKeyExchangeDriver.m:65:    AGDiaryDebug(@"lostKeyExchangeCanceled", @"");
Sezam/AGUnityLostKeyExchangeDriver.m:78:    AGDiaryDebug(@"lostKeyExchangeNextStep", @"current step: %d", step);
Sezam/AGUnityLostKeyExchangeDriver.m:83:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGUnityLostKeyExchangeDriver.m:84:        AGUnityModuleRegisterViewController *registerVC = [storyboard instantiateViewControllerWithIdentifier:@"AGUnityModuleRegisterViewController"];
Sezam/AGDoorbellChangeNameViewController.m:36:        UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Please enter a name." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellChangeNameViewController.m:40:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Updating doorbell name...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGDoorbellChangeNameViewController.m:49:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error updating doorbell name: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGAddDeviceLockPickerViewController.m:85:    AGTableViewCell *houseHeadercell = [self.housesAndLocksTableView dequeueReusableCellWithIdentifier: @"HouseSectionHeader"];
Sezam/AGAddDeviceLockPickerViewController.m:110:    AGTableViewCell *cell = [self.housesAndLocksTableView dequeueReusableCellWithIdentifier: @"LockPickerCell"];
Sezam/AGAddDeviceLockPickerViewController.m:157:        [self performSegueWithIdentifier:@"unwindToAddDeviceViewController" sender:nil];
Sezam/AGAutoUnlockReportProblemController.m:15:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockReportProblemController.m:17:NSString *const kAGAutoUnlockReportProblemAdditionalInfoTextViewPlaceholder = @"Time and day of the problem, relevant details, etc.";
Sezam/AGAutoUnlockReportProblemController.m:49:                                    @"My door unlocked too late.",
Sezam/AGAutoUnlockReportProblemController.m:50:                                    @"My door did not unlock when I expected it to.",
Sezam/AGAutoUnlockReportProblemController.m:51:                                    @"My door unlocked when I did not want it to.",
Sezam/AGAutoUnlockReportProblemController.m:52:                                    @"Home or Away mode changed when I didn’t expect it to.",
Sezam/AGAutoUnlockReportProblemController.m:53:                                    @"Other"
Sezam/AGAutoUnlockReportProblemController.m:58:                                        @(0):@"DelayedAutoUnlock",
Sezam/AGAutoUnlockReportProblemController.m:59:                                        @(1):@"FailedToUnlock",
Sezam/AGAutoUnlockReportProblemController.m:60:                                        @(2):@"UnexpectedUnlock",
Sezam/AGAutoUnlockReportProblemController.m:61:                                        @(3):@"UnexpectedChangeToAwayMode",
Sezam/AGAutoUnlockReportProblemController.m:62:                                        @(4):@"Other"
Sezam/AGAutoUnlockReportProblemController.m:84:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"We need a little more info" message:@"Please select the type of issue to send a report." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockReportProblemController.m:85:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockReportProblemController.m:96:                                                                                                 @"au_problem_category":self.indexToProblemCategoryDict[@(self.view.selectedProblemCategoryIndex)],
Sezam/AGAutoUnlockReportProblemController.m:99:        [reportProblemDataDict setObject:userDescription forKey:@"au_user_description"];
Sezam/AGAutoUnlockReportProblemController.m:102:    AGAnalyticsDiaryInfoData(@"AutoUnlockReportProblem", reportProblemDataDict);
Sezam/AGAutoUnlockReportProblemController.m:103:    [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"You reported a problem"} identifier:@"AutoUnlockReportProblemSent"]];
Sezam/AGAutoUnlockManager.m:25:NSString *const kAutoUnlockActiveBLERegionsDetectionKey = @"kAutoUnlockActiveBLERegionsDetectionKey";
Sezam/AGAutoUnlockManager.m:26:NSString *const kAutoUnlockEnableBLERegionDetectionFeature = @"blue_steel";
Sezam/AGAutoUnlockManager.m:27:NSString *const kAutoUnlockDisableMinOutsideDurationCheckFeature = @"disable_autounlock_min_outside_duration_check";
Sezam/AGAutoUnlockManager.m:90:        self.unlockAttemptSessionID = @"";
Sezam/AGAutoUnlockManager.m:91:        self.bleRegionDetector = [[AGBLERegionDetector alloc] initWithID:@"autounlock_ble_region_detector"];
Sezam/AGAutoUnlockManager.m:116:    AGDiaryInfo(@"MotionEvent", @"%@", activity.startDate);
Sezam/AGAutoUnlockManager.m:118:        AGDiaryInfo(@"Walking", @"Walking");
Sezam/AGAutoUnlockManager.m:121:        AGDiaryInfo(@"Running", @"Running");
Sezam/AGAutoUnlockManager.m:124:        AGDiaryInfo(@"Car", @"Car");
Sezam/AGAutoUnlockManager.m:128:            AGDiaryInfo(@"Cycling", @"Cycling");
Sezam/AGAutoUnlockManager.m:132:        AGDiaryInfo(@"UnknownMotion", @"UnknownMotion");
Sezam/AGAutoUnlockManager.m:135:        AGDiaryInfo(@"Stationary", @"Stationary");
Sezam/AGAutoUnlockManager.m:210:                AGDiaryInfo(@"AddedLast", @"Time %f last walking activity, which we assume is continuing as user is walking up to lock", (float)timeElapsed);
Sezam/AGAutoUnlockManager.m:213:                AGDiaryInfo(@"AddedLast", @"Time %f last non-walking activity", (float)timeElapsed);
Sezam/AGAutoUnlockManager.m:234:        AGDiaryInfo(@"TestMotion", @"Geofence settings call for motion data. Testing whether we can get it");
Sezam/AGAutoUnlockManager.m:241:                AGDiaryInfo(@"NoMotion", @"Error testing getting motion");
Sezam/AGAutoUnlockManager.m:243:                AGDiaryInfo(@"GotMotion", @"Test getting motion succeded");
Sezam/AGAutoUnlockManager.m:247:        AGDiaryInfo(@"TestMotionOff", @"Geofence settings don't call for motion data.");
Sezam/AGAutoUnlockManager.m:256:    AGDiaryInfo(@"didUpdateLocations", @"Got location update");
Sezam/AGAutoUnlockManager.m:266:                AGDiaryWarn(@"BGTaskExpired", @"BG location update task expired prematurely");
Sezam/AGAutoUnlockManager.m:284:                AGDiaryInfo(@"AmbiguousExit", @"Geolocation cannot verify that we left the geofence");
Sezam/AGAutoUnlockManager.m:326:    NSNumber *radius = [fencePrefs objectForKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:328:        AGDiaryError(@"MissingCrossedRaidus", @"Can't verify fence cross due to missing crossedradius param");
Sezam/AGAutoUnlockManager.m:331:    double latitude = [[fencePrefs objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:332:    double longitude = [[fencePrefs objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:342:    AGDiaryInfo(@"VeifyingAccuracy", @"radius %@ our distance %@  distance from radius %@ accuracy %@", radius, [NSNumber numberWithFloat:distanceFromCenterToEstimatedPosition], [NSNumber numberWithFloat:distanceInsideOrOutsideRadius], [NSNumber numberWithFloat:accuracy]);
Sezam/AGAutoUnlockManager.m:358:    NSNumber *radius = [fencePrefs objectForKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:360:        AGDiaryError(@"MissingCrossedRaidus", @"Can't verify fence cross due to missing crossedradius param");
Sezam/AGAutoUnlockManager.m:362:    double latitude = [[fencePrefs objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:363:    double longitude = [[fencePrefs objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:371:    AGDiaryInfo(@"VeifyingExit", @"radius %@ our distance %@  distance from radius %@ accuracy %@", radius, [NSNumber numberWithFloat:distanceFromCenterToEstimatedPosition], [NSNumber numberWithFloat:distanceInsideOrOutsideRadius], [NSNumber numberWithFloat:accuracy]);
Sezam/AGAutoUnlockManager.m:386:    AGDiaryInfo(@"endLocationUpdates", @"Ending location updates");
Sezam/AGAutoUnlockManager.m:401:        NSString *uuid = [curExitFence objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:402:        NSMutableDictionary *exitRegionEventDetail = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"]];
Sezam/AGAutoUnlockManager.m:407:            [detail setObject:@1 forKey:@"gpsexitverifysuccess"];
Sezam/AGAutoUnlockManager.m:408:            AGDiaryInfo(@"VerifiedExit", @"Geolocation verified that we have left the geofence around the house");
Sezam/AGAutoUnlockManager.m:411:            AGDiaryInfo(@"RejectedExit", @"Geolocation rejects that we left the geofence around the house. Setting gpsexitverifyfailed");
Sezam/AGAutoUnlockManager.m:412:            [detail setObject:@1 forKey:@"gpsexitverifyfailed"];
Sezam/AGAutoUnlockManager.m:416:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetail forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:419:        AGDiaryInfo(@"AmbibuousExit", @"Geolocation doesn't have enough data to verify the exit");
Sezam/AGAutoUnlockManager.m:437:        [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Geofence relaunch, locationManager: %@, delegate: %@", self.locationManager, self.locationManager.delegate] isDebugMessage:YES logWithEvent:@"geofenceRelaunch" lockID:nil];
Sezam/AGAutoUnlockManager.m:440:            AGDiaryInfo(@"GeofenceRelaunch", @"App relaunching because phone crossed a geofence");
Sezam/AGAutoUnlockManager.m:443:            AGDiaryInfo(@"GeofenceRelaunch", @"App relaunching because phone detected a BLE region");
Sezam/AGAutoUnlockManager.m:468:    NSString *kHasWarnedUserKey = @"WarnedUserAutoUnlockWifi";
Sezam/AGAutoUnlockManager.m:469:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:478:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Auto-Unlock Location" message:@"Enabling Wi-Fi in Settings will improve your location accuracy. Auto-Unlock may not perform reliably if Wi-Fi remains off." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGAutoUnlockManager.m:498:        AGDiaryInfo(@"AppLaunchedDuringAutoUnlock", @"%@ AASID:%@", self.currentAutoUnlockingLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:518:    NSDictionary *exitRegionEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:523:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:550:        AGDiaryDebug(@"NormalizingDeprecated", @"returning deprecated flag");
Sezam/AGAutoUnlockManager.m:551:        returnBlock([NSDictionary dictionaryWithObject:@"1" forKey:@"deprecatedenable"]);
Sezam/AGAutoUnlockManager.m:554:    if ([outDict objectForKey:@"time"])
Sezam/AGAutoUnlockManager.m:556:        NSTimeInterval timeExited = [(NSNumber *)[outDict objectForKey:@"time"] doubleValue];
Sezam/AGAutoUnlockManager.m:557:        AGDiaryDebug(@"CheckingExited", @"Checking time exited");
Sezam/AGAutoUnlockManager.m:564:        [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Time elapsed was %@ seconds", [NSNumber numberWithInt:(int)timeElapsed]] isDebugMessage:YES  logWithEvent:@"enteredLockRegion" lockID:uuid];
Sezam/AGAutoUnlockManager.m:565:        [outDict setObject:[NSNumber numberWithFloat:timeElapsed] forKey:@"outsideseconds"];
Sezam/AGAutoUnlockManager.m:567:        NSTimeInterval exit1 = [(NSNumber *)[outDict objectForKey:@"exit1"] doubleValue];
Sezam/AGAutoUnlockManager.m:568:        NSTimeInterval exit2 = [(NSNumber *)[outDict objectForKey:@"exit2"] doubleValue];
Sezam/AGAutoUnlockManager.m:574:            [outDict setObject:[NSNumber numberWithFloat:exitDiff] forKey:@"exitdiff"];
Sezam/AGAutoUnlockManager.m:579:        [outDict setObject:[NSNumber numberWithFloat:timeOfDay] forKey:@"hour24enter"];
Sezam/AGAutoUnlockManager.m:583:        [outDict setObject:[NSNumber numberWithFloat:timeOfDay] forKey:@"hour24exit"];
Sezam/AGAutoUnlockManager.m:590:            AGDiaryDebug(@"SuportsMotion", @"app supports motion and");
Sezam/AGAutoUnlockManager.m:593:                AGDiaryInfo(@"StartMotionRequest", @"Looking at motion since exit");
Sezam/AGAutoUnlockManager.m:607:                        AGDiaryInfo(@"GotMotionActivities", @"Checking %d activities", [activities count]);
Sezam/AGAutoUnlockManager.m:611:                        [outDict setObject:[NSNumber numberWithFloat:1.0] forKey:@"queriedactivity"];
Sezam/AGAutoUnlockManager.m:615:                            [outDict setObject:[NSNumber numberWithFloat: [self timeDoingMovingActivity:activities startingFrom:startDate computeWalkingOnly:TRUE]] forKey:@"walkseconds" ];
Sezam/AGAutoUnlockManager.m:616:                            [outDict setObject:[NSNumber numberWithFloat:  [self timeDoingMovingActivity:activities startingFrom:startDate computeWalkingOnly:FALSE]] forKey:@"othertransseconds" ];
Sezam/AGAutoUnlockManager.m:623:                AGDiaryInfo(@"NoActivityAvailable", @"No new motion activity available");
Sezam/AGAutoUnlockManager.m:627:            AGDiaryInfo(@"NoMotionAvailable", @"No motion data available or authorized");
Sezam/AGAutoUnlockManager.m:632:        AGDiaryInfo(@"UnexpectedState", @"Missing exit time in region record");
Sezam/AGAutoUnlockManager.m:639:    if ([attributes objectForKey:@"deprecatedenable"] != nil) {
Sezam/AGAutoUnlockManager.m:645:    if ([preferences objectForKey:@"debounce"] != nil)
Sezam/AGAutoUnlockManager.m:646:        debounceInterval = [[preferences objectForKey:@"debounce"] floatValue];
Sezam/AGAutoUnlockManager.m:648:    NSNumber *outsideseconds = (NSNumber *) [attributes objectForKey:@"outsideseconds"];
Sezam/AGAutoUnlockManager.m:651:        AGDiaryWarn(@"GeofenceIgnored", @"Lock geofence ignored because there was no exit recorded");
Sezam/AGAutoUnlockManager.m:657:    AGDiaryInfo(@"GeofenceSecondsOutside", [NSString stringWithFormat:@"%@", [NSNumber numberWithInt:(int) timeElapsed]]);
Sezam/AGAutoUnlockManager.m:661:         AGDiaryWarn(@"GeofenceIgnored", @"Lock geofence ignored because time %f since exit smaller than %f", timeElapsed, debounceInterval);
Sezam/AGAutoUnlockManager.m:666:         AGDiaryWarn(@"GeofenceBounceThreshold", @"Passed debounce threshold %f", debounceInterval);
Sezam/AGAutoUnlockManager.m:685:        BOOL isEnteringOuterFence = ([region.identifier rangeOfString:@":OUTER"].location !=  NSNotFound);
Sezam/AGAutoUnlockManager.m:691:            NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:692:            NSString *lockUUID = [regionsDictionary objectForKey:lockID][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:693:            AGDiaryInfo(@"BLERegionDetection", @"Canceling ble region detection for %@ due to geofence trigger", lockUUID);
Sezam/AGAutoUnlockManager.m:700:            AGAnalyticsDiaryInfoData(@"BLERegionDetectionInnerGeofenceFired", [self autoUnlockEnvironmentFactorsForLogging]);
Sezam/AGAutoUnlockManager.m:722:    AGDiaryInfo(@"CrossedGeofence", @"Lock geofence crossed");
Sezam/AGAutoUnlockManager.m:725:    NSString *uuid = [autoUnlockPrefs objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:726:    AGDiaryDebug(@"CrossedGeofence1", @"Got prefs");
Sezam/AGAutoUnlockManager.m:728:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Entered region radius:%d lock:%@", (int)((CLCircularRegion *)region).radius, uuid] isDebugMessage:YES  logWithEvent:@"enteredLockRegion" lockID:[self lockIDFromRegionIdentifier:region.identifier]];
Sezam/AGAutoUnlockManager.m:730:    NSArray *exitRegionLockUUIDs = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockUUIDs"];     // Deprecated storage method. Remove in future version of the app
Sezam/AGAutoUnlockManager.m:735:        NSNumber *timeExitedNum = (NSNumber *)[exitEventDetail objectForKey:@"time"];
Sezam/AGAutoUnlockManager.m:743:                AGAnalyticsDiaryInfoData(@"CancelAutoUnlockForImmediateFenceReentry", (@{@"timeElapsed":[NSString stringWithFormat:@"%f", timeElapsed]}));
Sezam/AGAutoUnlockManager.m:749:    AGDiaryDebug(@"CrossedGeofence2", @"event detail");
Sezam/AGAutoUnlockManager.m:752:        AGDiaryDebug(@"EnteringFenceExited", @"clearing location manager");
Sezam/AGAutoUnlockManager.m:753:        NSString *exitingFence = [self.curExitingFence objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:763:    AGDiaryDebug(@"NormalizingAttributeStart", @"calling normalize autounlock attribute function");
Sezam/AGAutoUnlockManager.m:765:        AGDiaryDebug(@"NormalizingAttributeReturnBlock", @"done normalizing attributes");
Sezam/AGAutoUnlockManager.m:771:            [normalizedAttributes setValue:lockID forKey:@"lockid"];
Sezam/AGAutoUnlockManager.m:778:            AGDiaryInfo(@"GeofenceNotScanning", @"Lock not exited, not scanning LockID:%@",lockID);
Sezam/AGAutoUnlockManager.m:795:            [normalizedAttributes setValue:self.unlockAttemptSessionID forKey:@"AASID"]; // This is our session ID for tracking results of our autounlock
Sezam/AGAutoUnlockManager.m:796:            AGAnalyticsDiaryInfoData(@"DetectInputSuccess", normalizedAttributes);
Sezam/AGAutoUnlockManager.m:797:            AGDiaryInfo(@"AutoUnlockTriggered", @"passed probablity test for LockID:%@", lockID);
Sezam/AGAutoUnlockManager.m:800:                [self doAutoUnlockLockID:[self lockIDFromRegionIdentifier:region.identifier] uuid:uuid timeElapsed:[((NSNumber *)[normalizedAttributes objectForKey:@"outsideseconds"]) floatValue]];
Sezam/AGAutoUnlockManager.m:809:            AGAnalyticsDiaryInfoData(@"DetectInputFail", normalizedAttributes);
Sezam/AGAutoUnlockManager.m:810:            AGDiaryInfo(@"AutoUnlockSkipped", @"failed probability test for LockID:%@",lockID);
Sezam/AGAutoUnlockManager.m:823:    AGDiaryInfo(@"AutounlockGeofenceStartScan", @"StartingBTScan %@ AASID:%@", lockID, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:824:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Start scan for lock %@", uuid] isDebugMessage:YES logWithEvent:@"retrieveLock" lockID:lockID];
Sezam/AGAutoUnlockManager.m:845:    AGDiaryInfo(@"GeofenceExited", @"Lock geofence exited");
Sezam/AGAutoUnlockManager.m:847:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:849:    NSString *uuid = [coordinateDict objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:852:        AGDiaryError(@"MissingAutoUnlockRegion", @"No region found");
Sezam/AGAutoUnlockManager.m:857:    NSString *wifiStatus = wifiOn ? @"yes":@"no";
Sezam/AGAutoUnlockManager.m:858:    NSString *msgForLog = [NSString stringWithFormat:@"Left region radius:%d wifi:%@ lock:%@",(int)((CLCircularRegion *)region).radius, wifiStatus, uuid];
Sezam/AGAutoUnlockManager.m:859:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:msgForLog isDebugMessage:YES  logWithEvent:@"exitLockRegion" lockID:[self lockIDFromRegionIdentifier:region.identifier]];
Sezam/AGAutoUnlockManager.m:860:    AGDiaryInfo(@"ExitLockRegion", msgForLog);
Sezam/AGAutoUnlockManager.m:862:    NSMutableDictionary *exitRegionEventDetails = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"]];
Sezam/AGAutoUnlockManager.m:873:    BOOL exitingOuterRadius = ([((CLCircularRegion *)region).identifier rangeOfString:@":OUTER"].location !=  NSNotFound); // Check id to see if this is an outer geofence
Sezam/AGAutoUnlockManager.m:877:    if ((exitingOuterRadius)  && ([eventDetail objectForKey:@"time"] != nil))
Sezam/AGAutoUnlockManager.m:883:        [eventDetail setObject:timeNumber forKey:@"time"];
Sezam/AGAutoUnlockManager.m:887:        [eventDetail setObject:timeNumber forKey:@"exit2"];
Sezam/AGAutoUnlockManager.m:889:        [eventDetail setObject:timeNumber forKey:@"exit1"];
Sezam/AGAutoUnlockManager.m:891:    [eventDetail setObject: (wifiOn?@1:@0) forKey:@"wifionexit"];
Sezam/AGAutoUnlockManager.m:895:    AGDiaryInfo(@"SetExitDetailObject", @"Exit detail object UUID = %@", uuid);
Sezam/AGAutoUnlockManager.m:896:    [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetails forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:911:        if ([coordinateDict objectForKey:@"radius"] != nil) {
Sezam/AGAutoUnlockManager.m:912:            userSetRadius = [((NSNumber *)[coordinateDict objectForKey:@"radius"]) floatValue];
Sezam/AGAutoUnlockManager.m:920:                  AGDiaryInfo(@"UpdatedLocation", @"Updating location in background");
Sezam/AGAutoUnlockManager.m:925:                  [self.curExitingFence setObject: [NSNumber numberWithInt:((CLCircularRegion *)region).radius] forKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:964:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:966:        NSString *uuid = [regionsDictionary objectForKey:curKey][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:980:            AGDiaryInfo(@"BLERegionDetection", [NSString stringWithFormat:@"Region detection skipped for %@ because it is no longer an autounlock region", curUUID]);//Too verbose, remove
Sezam/AGAutoUnlockManager.m:986:                AGDiaryInfo(@"BLERegionDetection", @"Error starting monitoring %@", [error description]);
Sezam/AGAutoUnlockManager.m:989:            AGDiaryInfo(@"BLERegionDetection", [NSString stringWithFormat:@"Did enter region: %@", curUUID]);
Sezam/AGAutoUnlockManager.m:992:                NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:993:                NSString *curRegionLockUUID = [regionsDictionary objectForKey:curRegionLockID][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:997:                        AGAnalyticsDiaryInfoData(@"BLERegionDetectionSucceededWhenGeofencesFailed", [self autoUnlockEnvironmentFactorsForLogging]);
Sezam/AGAutoUnlockManager.m:1016:                AGDiaryInfo(@"BLERegionDetection", @"Error stopping region detection for %@. Error: %@", uuid, error.userInfo);
Sezam/AGAutoUnlockManager.m:1025:            AGDiaryInfo(@"BLERegionDetection", @"Error stopping region detection for %@. Error: %@", uuid, error.userInfo);
Sezam/AGAutoUnlockManager.m:1035:    AGDiaryInfo(@"BLERegionDetection", [NSString stringWithFormat:@"Starting monitoring for exited region: %@", exitedRegion.identifier]);
Sezam/AGAutoUnlockManager.m:1037:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1039:    NSString *uuid = [coordinateDict objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:1042:        AGDiaryInfo(@"BLERegionDetection", @"Could not retrieve uuid of lock for exited region");
Sezam/AGAutoUnlockManager.m:1047:        AGDiaryInfo(@"BLERegionDetection", @"Already monitoring exited region");
Sezam/AGAutoUnlockManager.m:1064://Used for analytics to see what kind of impact disabling wifi has on geofence success. This may change over time and become unreliable as it is based on @"awdl0" presence which apple could change at anytime.
Sezam/AGAutoUnlockManager.m:1079:    return [cset countForObject:@"awdl0"] > 1 ? YES : NO;
Sezam/AGAutoUnlockManager.m:1086:        [observations setObject:(lowPowerModeEnabled ? @"true": @"false") forKey:@"low_power_mode_enabled"];
Sezam/AGAutoUnlockManager.m:1088:    [observations setObject:([self isWiFiEnabled] ? @"true": @"false") forKey:@"wifi_enabled"];
Sezam/AGAutoUnlockManager.m:1098:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1106:            NSDictionary *exitRegionEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1132:    AGDiaryInfo(@"BackgroundTimeRemaining", @"App is running in background.");
Sezam/AGAutoUnlockManager.m:1148:        AGDiaryDebug(@"MissingLock", @"Lock missing from shared data. This should not happen");
Sezam/AGAutoUnlockManager.m:1154:    AGDiaryInfo(@"RetrieveLock", @"Autounlock: Retrieving lock ID %@ peripheral id %@", lockID, peripheralIdentifier);
Sezam/AGAutoUnlockManager.m:1163:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1172:    NSString *versionID = [geofenceRegion objectForKey:@"version"];
Sezam/AGAutoUnlockManager.m:1174:        versionID = @"oldtodelete";
Sezam/AGAutoUnlockManager.m:1177:        AGDiaryInfo(@"DebounceIntervalChange", @"DebounceIntervalChange to %f", lock.geofenceLimits.debounceInterval);
Sezam/AGAutoUnlockManager.m:1180:        [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1191:    [[NSUserDefaults standardUserDefaults] setObject:featureList forKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1199:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1203:    NSNumber *motionDisabled = [dict objectForKey:@"disablemotiondata"];
Sezam/AGAutoUnlockManager.m:1214:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1218:    return [[dict objectForKey:@"forcemotionupdate"] boolValue];
Sezam/AGAutoUnlockManager.m:1223:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1227:        return [[dict objectForKey:@"askedmotionpermissions"] boolValue];
Sezam/AGAutoUnlockManager.m:1235:    NSMutableDictionary *dict =  [NSMutableDictionary dictionaryWithDictionary: [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"]];
Sezam/AGAutoUnlockManager.m:1238:    [dict setObject:[NSNumber numberWithBool:TRUE] forKey:@"askedmotionpermissions"];
Sezam/AGAutoUnlockManager.m:1239:    [[NSUserDefaults standardUserDefaults] setObject:dict forKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1244:    NSMutableDictionary *regionsToRemoveDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1252:        if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGAutoUnlockManager.m:1260:        AGDiaryInfo(@"RemoveAutoUnlock", @"Canceling AutoUnlock because lock is removed from keychain");
Sezam/AGAutoUnlockManager.m:1275:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1279:    return [[dict objectForKey:@"backgroundgps"] boolValue];
Sezam/AGAutoUnlockManager.m:1284:    [geofenceRegion setValue:geo.versionID forKey:@"version"];
Sezam/AGAutoUnlockManager.m:1285:    [geofenceRegion setValue:[NSString stringWithFormat:@"%f", geo.debounceInterval] forKey:@"debounce"];
Sezam/AGAutoUnlockManager.m:1287:        [geofenceRegion setValue:geo.thresholds forKey:@"thresholds"];
Sezam/AGAutoUnlockManager.m:1289:        [geofenceRegion removeObjectForKey:@"thresholds"];
Sezam/AGAutoUnlockManager.m:1293:        [geofenceRegion setValue:geo.probabilities forKey:@"probabilities"];
Sezam/AGAutoUnlockManager.m:1295:        [geofenceRegion removeObjectForKey:@"probabilities"];
Sezam/AGAutoUnlockManager.m:1301:        [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"Unable to set auto-unlock. Please switch it off and on again.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil] show];
Sezam/AGAutoUnlockManager.m:1305:        [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"You need to allow location access to August in Settings to use auto-unlock",nil)  delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil] show];
Sezam/AGAutoUnlockManager.m:1309:    NSString *latitude = [NSString stringWithFormat:@"%f", lockLocation.latitude];
Sezam/AGAutoUnlockManager.m:1310:    NSString *longitude = [NSString stringWithFormat:@"%f", lockLocation.longitude];
Sezam/AGAutoUnlockManager.m:1311:    NSString *radiusString = [NSString stringWithFormat:@"%f", radius];
Sezam/AGAutoUnlockManager.m:1313:    NSMutableDictionary *coordinateDict = [NSMutableDictionary dictionaryWithDictionary: @{@"latitude": latitude, @"longitude": longitude, @"radius":radiusString, @"lockUUID":lockIdentifier}];
Sezam/AGAutoUnlockManager.m:1316:    AGDiaryInfo(@"LockSettingsLocationSaved", @"Lock location saved: %@", lockID);
Sezam/AGAutoUnlockManager.m:1318:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1320:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1329:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1335:    AGDiaryInfo(@"LockSettingsLocationRemoved", @"Lock location removed: %@", lockID);
Sezam/AGAutoUnlockManager.m:1337:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1340:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1349:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1357:        [coordinateDict setObject:lockIdentifier forKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:1360:        [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1367:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1378:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1397:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1403:        double latitude = [[coordinateDict objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:1404:        double longitude = [[coordinateDict objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:1405:        float radius = [[coordinateDict objectForKey:@"radius"] floatValue];
Sezam/AGAutoUnlockManager.m:1412:            CLCircularRegion *lockMonitoringRegionOuter = [[CLCircularRegion alloc] initWithCenter:CLLocationCoordinate2DMake(latitude, longitude) radius:LOCK_MONITORING_OUTER_RADIUS identifier:[NSString stringWithFormat:@"%@:OUTER", lockID]];
Sezam/AGAutoUnlockManager.m:1429:        if(![region.identifier containsString:@"ExitDetector"]){//It would be nice if we could positively identify which regions this class is responsible for but for now this is the easiest thing. After the old autounlock system has been completely migrated away from we should remove this class.
Sezam/AGAutoUnlockManager.m:1447:    NSArray *legacyLockInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockUUIDs"];
Sezam/AGAutoUnlockManager.m:1451:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionLockUUIDs forKey:@"ExitRegionLockUUIDs"];
Sezam/AGAutoUnlockManager.m:1456:    NSDictionary *exitRegionEventDetailOriginal = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1460:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetail forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1483:    NSString *lockID = @"unknown";
Sezam/AGAutoUnlockManager.m:1489:        AGDiaryInfo(@"BLEConnectedInitial", @"%@ AASID:%@", lockID, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1491:    AGDiaryInfo(@"BLEConnected", @"%@ AASID:%@", lockID, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1499:        AGAnalyticsDiaryInfo(@"AppActivatedToForeground", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1510:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:@"Lock Fully Connected" isDebugMessage:YES logWithEvent:@"connectedLock" lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1514:        AGAnalyticsDiaryInfo(@"AuthorizedInitial", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1518:    AGDiaryInfo(@"Connected",@"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1521:        AGDiaryInfo(@"UnneededConnect",@"%@ relinquishing unexpected connection.", agLock.objectId);
Sezam/AGAutoUnlockManager.m:1531:        [AGLock putLockUsage:agLock.objectId action:@"unlock" mechanical:@"success" crypto:@"success" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGAutoUnlockManager.m:1541:            [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Auto-Unlocking %@. Welcome back to %@.", lockName, houseName] isDebugMessage:NO logWithEvent:kSendUnlockCommandEvent lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1543:            [[AGAppDelegate app] displayLocalNotifiationWithMessage:@"Auto-Unlocking August" isDebugMessage:NO logWithEvent:kSendUnlockCommandEvent lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1546:        AGDiaryInfo(@"AutoUnlockCommandSent", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1554:            AGAnalyticsDiaryInfo(@"AutoUnlockPerformSuccess", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1558:            AGAnalyticsDiaryInfo(@"AutoUnlockPerformFail", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1572:    NSString *errorMessage =  [error.userInfo objectForKey:@"Error"];
Sezam/AGAutoUnlockManager.m:1574:    if ([errorMessage isEqualToString:@"Connection soft timeout"])
Sezam/AGAutoUnlockManager.m:1578:        AGDiaryInfo(@"ConnectionError", [error description]);
Sezam/AGAutoUnlockManager.m:1583:    NSUInteger endOfIdIndex = [regionIdentifier rangeOfString:@":OUTER"].location;
Sezam/AGTerminationSimulationConstants.h:13:NSString *const kAGTerminationSimulationLastPID = @"com.august.kAGTerminationSimulationLastPID"; //This can be checked as darwin state. The state is the listerners PID. The PID is updated upon receipt of kAGTerminationSimulationStatusRequest.
Sezam/AGTerminationSimulationConstants.h:15:NSString *const kAGTerminationSimulationStatusRequest = @"com.august.kAGTerminationSimulationStatusRequest"; //Sent by a client to request the status
Sezam/AGTerminationSimulationConstants.h:16:NSString *const kAGTerminationSimulationStatusResponse = @"com.august.kAGTerminationSimulationStatusResponse"; //Sent by a listener to indicate the app is alive
Sezam/AGTerminationSimulationConstants.h:18:NSString *const kAGTerminationSimulationCrashRequest = @"com.august.kAGTerminationSimulationCrashRequest"; //Sent by a client to request the app crash itself
Sezam/AGTerminationSimulationConstants.h:19:NSString *const kAGTerminationSimulationCrashResponse = @"com.august.kAGTerminationSimulationCrashResponse"; //Sent by a listener to indicate it will crash itself
Sezam/AGTerminationSimulationConstants.h:21:NSString *const kAGTerminationSimulationExitRequest = @"com.august.kAGTerminationSimulationExitRequest"; //Sent by a client to request the app exit
Sezam/AGTerminationSimulationConstants.h:22:NSString *const kAGTerminationSimulationExitResponse = @"com.august.kAGTerminationSimulationExitResponse"; //Sent by a listener to indicate it will exit itself
Sezam/AGDelayedGeoRegionVerifier.m:17:#define kAGDiaryCategory @"AGDelayedGeoRegionVerifier"
Sezam/AGDelayedGeoRegionVerifier.m:62:            self.completion(NO, nil, [NSError errorWithDomain:@"AGGeofenceVerifier" code:-2201 userInfo:@{@"AGError":@"AGGeofenceVerifierFailedToVerify"}]);
Sezam/AGUnitySettingModel.m:17:            return @"English";
Sezam/AGUnitySettingModel.m:19:            return @"Spanish";
Sezam/AGUnitySettingModel.m:21:            return @"French";
Sezam/AGUnitySettingModel.m:23:            return @"English";
Sezam/AGUnitySettingModel.m:30:            return @"High Volume";
Sezam/AGUnitySettingModel.m:32:            return @"Low Volume";
Sezam/AGUnitySettingModel.m:34:            return @"Silent";
Sezam/AGUnitySettingModel.m:36:            return @"Low Volume";
Sezam/AGUnitySettingModel.m:43:            return @"Normal";
Sezam/AGUnitySettingModel.m:45:            return @"Privacy";
Sezam/AGUnitySettingModel.m:47:            return @"Vacation";
Sezam/AGUnitySettingModel.m:49:            return @"Normal";
Sezam/AGUnitySettingModel.m:55:    return [NSString stringWithFormat:@"showIndicator: %d, allowOneTouch: %d, languagStr: %@, volumeStr: %@, operatingStr: %@",
Sezam/AGPinEnableViewController.m:51:#define kAGDiaryCategory @"KeyPad"
Sezam/AGPinEnableViewController.m:102:    AGDiaryDebug(@"PinCodeAccessTypeChanged", @"Adding the new pin code");
Sezam/AGPinEnableViewController.m:109:    NSString *currentStateString = (currentState)?[AGUserPinEntry pinStateStringFromEnum:currentState.curState] : @"none";
Sezam/AGPinEnableViewController.m:111:    NSString *futureStateString = (futureState)? [AGUserPinEntry pinStateStringFromEnum:futureStateEnum] : @"none";
Sezam/AGPinEnableViewController.m:115:                                       @"none|none":[NSNull null],
Sezam/AGPinEnableViewController.m:116:                                       @"none|created":[[AGPinServerAction alloc] initWithState:AGPinActionLoad action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:117:                                       @"none|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:118:                                       @"none|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:119:                                       @"none|deleting":[NSNull null], // PIN is already off device
Sezam/AGPinEnableViewController.m:121:                                       @"deleting|none":[NSNull null],
Sezam/AGPinEnableViewController.m:122:                                       @"deleting|created":[[AGPinServerAction alloc] initWithState:AGPinActionLoad action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:123:                                       @"deleting|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:124:                                       @"deleting|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:125:                                       @"deleting|deleting":[NSNull null],
Sezam/AGPinEnableViewController.m:127:                                       @"disabled|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:128:                                       @"disabled|created":[[AGPinServerAction alloc] initWithState:AGPinActionEnable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:129:                                       @"disabled|disabled":[NSNull null],
Sezam/AGPinEnableViewController.m:130:                                       @"disabled|disabling":[NSNull null],
Sezam/AGPinEnableViewController.m:131:                                       @"disabled|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:133:                                       @"created|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:134:                                       @"created|created":[NSNull null],
Sezam/AGPinEnableViewController.m:135:                                       @"created|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:136:                                       @"created|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:137:                                       @"created|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:139:                                       @"loaded|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:140:                                       @"loaded|created":[NSNull null],
Sezam/AGPinEnableViewController.m:141:                                       @"loaded|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:142:                                       @"loaded|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:143:                                       @"loaded|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:145:                                       @"enabling|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent] ,
Sezam/AGPinEnableViewController.m:146:                                       @"enabling|created":[NSNull null],
Sezam/AGPinEnableViewController.m:147:                                       @"enabling|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:148:                                       @"enabling|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionEnable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:149:                                       @"enabling|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit]
Sezam/AGPinEnableViewController.m:152:    NSString *stateTransitionText = [NSString stringWithFormat:@"%@|%@", currentStateString, futureStateString];
Sezam/AGPinEnableViewController.m:153:    AGDiaryInfo(@"PinStateTransition", @"Performing state transition %@", stateTransitionText);
Sezam/AGPinEnableViewController.m:154:    NSObject *objectAction = [stateTransitions objectForKey:[NSString stringWithFormat:@"%@|%@", currentStateString, futureStateString]];
Sezam/AGPinEnableViewController.m:165:                    AGDiaryDebug(@"reservePinCodeForUnity", @"error: %@", error);
Sezam/AGPinEnableViewController.m:168:                AGDiaryDebug(@"reservePinCodeForUnity", @"success! response: %@", responseDict);
Sezam/AGPinEnableViewController.m:169:                NSNumber *reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:179:                AGDiaryInfo(@"PinStateTransitionComplete", @"No command needed for transition");
Sezam/AGPinEnableViewController.m:187:        AGDiaryInfo(@"PinStateTransitionNone", @"No command needed for transition");
Sezam/AGPinEnableViewController.m:203:    AGDiaryDebug(@"PinCodeAccessTypeChanged", @"deleting the old pin code");
Sezam/AGPinEnableViewController.m:206:    NSString *oldStateString = (oldState)?[AGUserPinEntry pinStateStringFromEnum:oldState.curState] : @"none";
Sezam/AGPinEnableViewController.m:210:    NSDictionary *stateTransitions = @{@"loaded":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:211:                                       @"deleting":[NSNull null],
Sezam/AGPinEnableViewController.m:212:                                       @"disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:213:                                       @"disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:214:                                       @"enabling":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:215:                                       @"created":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit] };
Sezam/AGPinEnableViewController.m:218:    AGDiaryVerbose(@"OldPinStateTransition", @"Performing state transition for old pin %@ %@", oldStateString, oldState.pinCode);
Sezam/AGPinEnableViewController.m:232:        AGDiaryVerbose(@"OldPinStateTransitionNone", @"No transition needed");
Sezam/AGPinEnableViewController.m:235:        NSAssert(([serverActions count] == 2), @"Only two state transitions are supported at a time to disable a PIN");
Sezam/AGPinEnableViewController.m:284:                NSString *channel = [dict objectForKey:@"channelID"];
Sezam/AGPinEnableViewController.m:285:                NSNumber *numRecords = [dict objectForKey:@"numRecords"];
Sezam/AGPinEnableViewController.m:288:                AGDiaryDebug(@"PinSyncResponse", @"channel %@  %@ records to sync", channel, numRecords);
Sezam/AGPinEnableViewController.m:290:                    AGDiaryDebug(@"PinSyncDone", @"No records to sync");
Sezam/AGPinEnableViewController.m:293:                    AGDiaryDebug(@"PinSyncWait", @"Subscribing to channel %@", channel);
Sezam/AGPinEnableViewController.m:317:        ((void (^)(NSError *error))block)([NSError errorWithDomain:@"PinSync" code:-1 userInfo:@{NSLocalizedDescriptionKey:@"Remote bridge never returned"}]);
Sezam/AGPinEnableViewController.m:324:        NSString *messageText = [d objectForKey:@"message"];
Sezam/AGPinEnableViewController.m:325:        if ([messageText isEqualToString:@"PinSyncComplete"])
Sezam/AGPinEnableViewController.m:327:            AGDiaryDebug(@"PinSyncComplete", @"Success message came in on message handler");
Sezam/AGPinEnableViewController.m:335:        if ([messageText isEqualToString:@"PinSyncFail"])
Sezam/AGPinEnableViewController.m:337:            AGDiaryDebug(@"PinSyncFail", @"Fail message came in on message handler.");
Sezam/AGPinEnableViewController.m:343:            ((void (^)(NSError *error))block)([NSError errorWithDomain:@"PinSync" code:-1 userInfo:@{NSLocalizedDescriptionKey:@"We had a problem syncing your entry code to your lock."}]);
Sezam/AGPinEnableViewController.m:369:                self.pinUserID = [dict objectForKey:@"id"];
Sezam/AGPinEnableViewController.m:381:    AGDiaryVerbose(@"PerformChangeToPinState", @"Desired pin state %@ %@",[AGUserPinEntry pinStateStringFromEnum:desiredPinState.curState], pinCode);
Sezam/AGPinEnableViewController.m:389:        self.settingPinAlert = [[UIAlertView alloc] initWithTitle:@"Updating Entry Codes" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGPinEnableViewController.m:442:    AGDiaryDebug(@"PinStateStepSyncNonMatch1", @"");
Sezam/AGPinEnableViewController.m:445:            AGDiaryInfo(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:451:        AGDiaryDebug(@"PinStateStepSyncNonMatch2", @"");
Sezam/AGPinEnableViewController.m:454:                AGDiaryInfo(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:460:            AGDiaryDebug(@"PinStateStepUpdatePinsA", @"");
Sezam/AGPinEnableViewController.m:464:                    AGDiaryInfo(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:472:                AGDiaryDebug(@"PinStateStepDeletePinsCompleted", @"");
Sezam/AGPinEnableViewController.m:474:                        AGDiaryDebug(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:482:                AGDiaryDebug(@"PinStateStepSyncMatch", @"");
Sezam/AGPinEnableViewController.m:485:                    AGDiaryDebug(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:491:                AGDiaryDebug(@"PinStateStepSyncMatch", @"");
Sezam/AGPinEnableViewController.m:494:                        AGDiaryDebug(@"PinStateStepError", [error description]);
Sezam/AGPinEnableViewController.m:500:                    AGDiaryDebug(@"PinStateStepUpdatePinsB", @"");
Sezam/AGPinEnableViewController.m:502:                        AGDiaryDebug(@"PinStateStepUpdateAddPinsCompleted", @"");
Sezam/AGPinEnableViewController.m:582:    [self.view.enableDisableButton setType:@"Secondary"];
Sezam/AGPinEnableViewController.m:585:        [self.view.enableDisableButton setTitle:@"DEACTIVATE ENTRY CODE" forState:UIControlStateNormal];
Sezam/AGPinEnableViewController.m:592:        [self.view.enableDisableButton setTitle:@"REACTIVATE ENTRY CODE" forState:UIControlStateNormal];
Sezam/AGPinEnableViewController.m:593:        [self.view.enableDisableButton setType:@"Primary"];
Sezam/AGPinEnableViewController.m:601:                self.view.actionDescriptionLabel.text = NSLocalizedString(@"Do you want to change your entry code?", nil);
Sezam/AGPinEnableViewController.m:603:                self.view.actionDescriptionLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Do you want to change %@'s entry code?", nil), self.user.firstName];
Sezam/AGPinEnableViewController.m:609:                    self.view.actionDescriptionLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Do you want to change your personal entry code to %@?", nil), self.lock.name];
Sezam/AGPinEnableViewController.m:611:                    self.view.actionDescriptionLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Do you want to reactivate your personal entry code to %@?", nil), self.lock.name];
Sezam/AGPinEnableViewController.m:615:                    self.view.actionDescriptionLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Do you want to change %@'s personal entry code to %@?", nil), self.user.firstName, self.lock.name];
Sezam/AGPinEnableViewController.m:617:                    self.view.actionDescriptionLabel.text = [NSString stringWithFormat:NSLocalizedString(@"Do you want to reactivate %@'s personal entry code to %@?", nil), self.user.firstName, self.lock.name];
Sezam/AGPinEnableViewController.m:643:    AGDiaryDebug(@"userChangedPinInUI", @"new pin: %@, deleting oldPin: %@", reservedPIN, deleteOldPin);
Sezam/AGPinEnableViewController.m:649:                AGDiaryDebug(@"reservePinCodeForUnity", @"error: %@", error);
Sezam/AGPinEnableViewController.m:652:            AGDiaryDebug(@"reservePinCodeForUnity", @"response: %@", responseDict);
Sezam/AGPinEnableViewController.m:653:            self.reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:675:            AGDiaryDebug(@"createRandomPin", @"error is %@", error.description);
Sezam/AGPinEnableViewController.m:678:        NSString *pinCode = responseDict[@"pin"];
Sezam/AGPinEnableViewController.m:679:        self.reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:746:    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Bluetooth Error", nil) message:NSLocalizedString(@"Error communicating an entry code change to the lock.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles:nil];
Sezam/AGPinEnableViewController.m:751:    UIAlertView *schedAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Change Access Schedule?", nil) message:@"Entry codes can only have an \"always\" access schdule. Activating this PIN will mean this guest's app schedule and their PIN schedule will be different. What do you want this guest's app access schedule to be?" delegate:self cancelButtonTitle:nil otherButtonTitles:@"Change to Always", ([self.delegate getAppSchedule] == kAGScheduleRecurring) ? @"Keep Recurring" : @"Keep Temporary", nil];
Sezam/AGPinEnableViewController.m:761:    UIAlertView *notConnectedAlert = [[UIAlertView alloc] initWithTitle:@"Not Connected" message:@"Cannot update the entry codes because we are not connected to the lock. We will update them the next time you connect to the lock." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGPinEnableViewController.m:862:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle: [NSString stringWithFormat:@"Entry code must be between %d and %d digits.", REQUIRED_MIN_PIN_LENGTH, REQUIRED_MAX_PIN_LENGTH] message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
Sezam/AGPinEnableViewController.m:925:        alertMessage = [NSString stringWithFormat:NSLocalizedString(@"The entry code %@ is already assigned to %@ %@. Please select a different code.", nil), userPinText, pinEntry.firstName, pinEntry.lastName, nil];
Sezam/AGPinEnableViewController.m:927:        alertMessage = [NSString stringWithFormat:NSLocalizedString(@"The entry code %@ is already assigned. Please select a different code.", nil), userPinText, nil];
Sezam/AGPinEnableViewController.m:929:    UIAlertView *pinAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Entry Code Conflict",nil)
Sezam/AGPinEnableViewController.m:933:                                             otherButtonTitles:@"Ok", nil];
Sezam/AGContactPersonViewController.m:73:    static NSString *contactTableCellIdentifier = @"NumberCell";
Sezam/AGContactPersonViewController.m:76:    cell.textLabel.text = [NSString stringWithFormat:@"%@ (%@)", currentNumber, cleanedNumberTypeString];
Sezam/AGContactPersonViewController.m:98:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGPasswordInstructionsViewController.m:34:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGPasswordInstructionsViewController.m:36:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGPasswordInstructionsViewController.m:65:    if ([segue.identifier isEqualToString:@"PasswordInstructionsToResetPassword"]) {
Sezam/AGChooseUserController.m:48:    self.view.titleLabel.text = @"CHOOSE USER";
Sezam/AGChooseUserController.m:108:        displayItem.defaultImage = [UIImage imageNamed:@"activity_profile_blank_v2"];
Sezam/AGRegionExitEvent.m:27:    return @[@"location"];
Sezam/AGLockAndDoorCalibrationViewController.m:18:static NSString* kAGDiaryCategory = @"LockAndDoorCalibration";
Sezam/AGLockAndDoorCalibrationViewController.m:144:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockAndDoorCalibrationViewController.m:145:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:147:    installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/dev/installation/doorsense-asl4/"];
Sezam/AGLockAndDoorCalibrationViewController.m:191:            if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGTristepOnboardingChecklistViewController"]) {
Sezam/AGLockAndDoorCalibrationViewController.m:221:    AGDiaryDebug(@"lockOnlyBtnPressed", @"hasDoorSenseEnabled: %d", hasDoorSenseEnabled);
Sezam/AGLockAndDoorCalibrationViewController.m:223:        NSString *alertMsg = @"“Lock Only” calibration will disable DoorSense. \n\n Without DoorSense you will lose the ability to detect if your door is open, use Instant Auto-Lock, or receive Door Ajar notifications.";
Sezam/AGLockAndDoorCalibrationViewController.m:225:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Disable DoorSense?"
Sezam/AGLockAndDoorCalibrationViewController.m:228:        [alert addAction:[UIAlertAction actionWithTitle:@"Continue, Disable DoorSense"
Sezam/AGLockAndDoorCalibrationViewController.m:235:        [alert addAction:[UIAlertAction actionWithTitle:@"Go Back"
Sezam/AGLockAndDoorCalibrationViewController.m:315:            UIAlertController *instantLockWillNotWorkAlert = [UIAlertController alertControllerWithTitle:@"Warning" message:@"Instant Auto-Lock is enabled, but will not function, as you are not Calibrating DoorSense. We are updating your AutoLock settings to On a Timer with an auto relock at 2 minutes." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:316:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:509:// Some Errors are BLE erros that return as an NSError and some Errors are communicated by the lock in the response Dictionary with a key of @"error"
Sezam/AGLockAndDoorCalibrationViewController.m:513:        AGDiaryInfo(@"CalibrationError", @"BLECommunicationError");
Sezam/AGLockAndDoorCalibrationViewController.m:514:        [self showErrorAlertWithMessage:@"There was a lock communication error while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:517:    } else if ([responseDict objectForKey:@"error"]) {
Sezam/AGLockAndDoorCalibrationViewController.m:518:        NSNumber *errorResponse = [responseDict objectForKey:@"error"];
Sezam/AGLockAndDoorCalibrationViewController.m:522:            AGDiaryInfo(@"CalibrationError", @"ERRNO_MAG_CAL_BAD_DATA");
Sezam/AGLockAndDoorCalibrationViewController.m:523:            [self showErrorAlertWithMessage:@"There was an error determining Door State while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:527:            AGDiaryInfo(@"CalibrationError", @"ERRNO_MAG_READ");
Sezam/AGLockAndDoorCalibrationViewController.m:528:            [self showErrorAlertWithMessage:@"Make sure your DoorSense is placed close enough to the lock and restart calibration."];
Sezam/AGLockAndDoorCalibrationViewController.m:532:            AGDiaryInfo(@"CalibrationError", @"ErrorType:%@", errorResponse.stringValue);
Sezam/AGLockAndDoorCalibrationViewController.m:533:            [self showErrorAlertWithMessage:@"There was a lock calibration error while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:580:                    targetCCW.group =  @"CCW";
Sezam/AGLockAndDoorCalibrationViewController.m:581:                    stallCCW.group = @"CCW";
Sezam/AGLockAndDoorCalibrationViewController.m:590:            setTargetCW.group = @"CW";
Sezam/AGLockAndDoorCalibrationViewController.m:591:            setStall.group = @"CW";
Sezam/AGLockAndDoorCalibrationViewController.m:605:            [self showErrorAlertWithMessage:@"There was an error while calibrating. Try again."];
Sezam/AGLockAndDoorCalibrationViewController.m:651:            [self showErrorAlertWithMessage:@"There was an error while calibrating. Try again."];
Sezam/AGLockAndDoorCalibrationViewController.m:684:            message = @"Would you like to calibrate both the smart lock and DoorSense?";
Sezam/AGLockAndDoorCalibrationViewController.m:685:            primaryButtonLabelText = @"LOCK AND DOORSENSE";
Sezam/AGLockAndDoorCalibrationViewController.m:690:            message = @"First, close your door, and leave the door unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:691:            primaryButtonLabelText = @"OK, DOOR IS CLOSED AND UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:696:            message = @"Next, turn the August Smart Lock by hand until the door is fully locked.";
Sezam/AGLockAndDoorCalibrationViewController.m:697:            primaryButtonLabelText = @"OK, DOOR IS LOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:702:            message = @"Next, turn the August Smart Lock by hand until the door is fully unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:703:            primaryButtonLabelText = @"OK, DOOR IS UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:708:            message = @"Next, open the door until it is “wide open” (enough to walk through the door).";
Sezam/AGLockAndDoorCalibrationViewController.m:709:            primaryButtonLabelText = @"OK, DOOR IS WIDE OPEN";
Sezam/AGLockAndDoorCalibrationViewController.m:714:            message = @"Next, hold the door so that it is slightly ajar (just far enough for the deadbolt to clear the door frame).";
Sezam/AGLockAndDoorCalibrationViewController.m:715:            primaryButtonLabelText = @"OK, DOOR IS AJAR";
Sezam/AGLockAndDoorCalibrationViewController.m:720:            message = @"Finally, close the door one more time, leaving the door unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:721:            primaryButtonLabelText = @"OK, DOOR IS CLOSED AND UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:727:            message = @"Your lock has been successfully calibrated.";
Sezam/AGLockAndDoorCalibrationViewController.m:728:            primaryButtonLabelText = @"DONE";
Sezam/AGLockAndDoorCalibrationViewController.m:764:                UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:765:                AGHomeKitSetupNavController *hkSetup = [storyboard instantiateViewControllerWithIdentifier:@"HomeKitNav"];
Sezam/AGLockAndDoorCalibrationViewController.m:768:                ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:hkSetup];
Sezam/AGLockAndDoorCalibrationViewController.m:774:                    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:775:                    AGLockSetupSuccessViewController *lockSetupSuccessViewController = (AGLockSetupSuccessViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"LockSetupSuccessViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:790:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Calibration Failed" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:791:    UIAlertAction *restartCalibrationAction = [UIAlertAction actionWithTitle:@"Restart Calibration" style:UIAlertActionStyleCancel
Sezam/AGLockAndDoorCalibrationViewController.m:797:        UIAlertAction *viewGuideAction = [UIAlertAction actionWithTitle:@"View Installation Guide"
Sezam/AGLockAndDoorCalibrationViewController.m:800:                    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockAndDoorCalibrationViewController.m:801:                    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:802:                    if ((self.lock.lockCapability.doorSenseInstallationInstructionURL != nil) && ([self.lock.lockCapability.doorSenseInstallationInstructionURL isEqual:@""] == NO)) {
Sezam/AGLockAndDoorCalibrationViewController.m:806:                        AGDiaryDebug(@"ErrorCalibration", @"other lock should not be here, they don't have door sense ");
Sezam/AGLockAndDoorCalibrationViewController.m:840:                    AGDiaryDebug(@"", @"BLE door state response error!");
Sezam/AGLockAndDoorCalibrationViewController.m:844:                self.hasDoorSenseEnabled = ![doorStateStr isEqualToString:@"kAugDoorState_Init"];
Sezam/AGLockAndDoorCalibrationViewController.m:866:    [self showErrorAlertWithMessage:@"Lock Connection Error"];
Sezam/AGLockAndDoorCalibrationViewController.m:875:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning" message:@"AutoLock was disabled during Calibration and has not been re-enabled. You can re-enable this feature under Lock Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:876:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditSection.m:22:#define kAGDiaryCategory @"InviteEditSection"
Sezam/AGInviteEditSection.m:141:        if ([self.rule.user.type isEqualToString:@"superuser"]) {
Sezam/AGInviteEditSection.m:145:            if ([self.rule.user.type isEqualToString:@"pinonly"]) {
Sezam/AGInviteEditSection.m:271:    UIAlertView *deleteAlert = [[UIAlertView alloc] initWithTitle:@"Entry Code Deletion Pending" message:@"This guest no longer has app access. The entry code will be deleted the next time an owner connects to the lock." delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:276:    UIAlertView *deleteAlert = [[UIAlertView alloc] initWithTitle:@"Entry Code Deletion Pending" message:@"The entry code will be deleted the next time an owner connects to the lock." delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:281:    UIAlertView *deleteAlert = [[UIAlertView alloc] initWithTitle:@"Entry Code Add Pending" message:@"The entry code will be added the next time an Owner connects to the lock." delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:286:    UIAlertView *firmwareAlert = [[UIAlertView alloc] initWithTitle:@"Firmware Not Supported" message:@"In order to enable recurring schedule Entry Codes please update the firmware on your August Smart Lock first." delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:293:    AGDiaryDebug(@"handleDoorbellInviteDoSectionCallback", @"");
Sezam/AGInviteEditSection.m:331:    AGDiaryDebug(@"commitUserEditOrInvite", @"attemptToChangePINCodeViaBluetooth :%d", attemptToChangePINCodeViaBluetooth);
Sezam/AGInviteEditSection.m:357:                [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Connecting To Lock", nil)];
Sezam/AGInviteEditSection.m:367:                AGDiaryDebug(@"PinCodeChange", @"pinEnableController :%@", _pinEnableController);
Sezam/AGInviteEditSection.m:368:                AGDiaryDebug(@"PinCodeChange", @"isDeleting user with pin: %d, updated user schedule :%d", isDeletingAppUserWithPin, userDidUpdatePinSchedule);
Sezam/AGInviteEditSection.m:372:                    AGDiaryDebug(@"PinCodeChange", @"We are editing an exiting PIN code");
Sezam/AGInviteEditSection.m:435:            UIAlertView * alert = [[UIAlertView alloc] initWithTitle: @"Error" message:@"The start time is after the end time." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:444:                UIAlertView * alert = [[UIAlertView alloc] initWithTitle: @"Error" message:@"The selected time frame has already past." delegate:self cancelButtonTitle:@"OK"   otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:456:        [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Updating settings...",nil)];
Sezam/AGInviteEditSection.m:462:                UIAlertView * alert = [[UIAlertView alloc] initWithTitle: NSLocalizedString(@"Sorry, there was an error while updating access settings.",nil) message:@"" delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:471:        [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Updating settings...",nil)];
Sezam/AGInviteEditSection.m:477:                UIAlertView * alert = [[UIAlertView alloc] initWithTitle: NSLocalizedString(@"Sorry, there was an error while updating access settings.",nil) message:@"" delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:537:        self.timeFrameString = @"Always";
Sezam/AGInviteEditSection.m:539:        self.timeFrameString = [NSString stringWithFormat:@"Recurring"];
Sezam/AGInviteEditSection.m:541:        self.timeFrameString = [NSString stringWithFormat:@"Temporary"];
Sezam/AGInviteEditSection.m:554:                    [AGLock setNotificationForLock: self.lock.objectId user:self.invitedUser on:@"both" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGInviteEditSection.m:556:                    [AGLock setNotificationForLock: self.lock.objectId user:self.invitedUser on:@"neither" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGInviteEditSection.m:567:            AGDiaryDebug(@"InviteUserInternal", @"Invited PIN user via server. Now setting pin.");
Sezam/AGInviteEditSection.m:569:            [self.lock setPin:pin slot:nil accessType:[[AGKeypadPinAccessInfo alloc] init] forUser:[dict objectForKey:@"id"] toState:AGPinActionLoad withAction:AGPinActionIntent block:^(NSDictionary *dict, NSError *error) {
Sezam/AGInviteEditSection.m:588:        if (([self.delegate getInviteControllerMode] == inviteModeOwnerInvitingUser) && (self.invitedUserStatus != AGUserStatusPinOnly) && ([AGUtility checkForAppFeature:@"merc-pinappinvite"] == false)) {
Sezam/AGInviteEditSection.m:671:        return  (self.optimisticPinForUser)?self.optimisticPinForUser:@"Off";
Sezam/AGInviteEditSection.m:680:            return @"Off";
Sezam/AGInviteEditSection.m:685:                return @"Pending Off";
Sezam/AGInviteEditSection.m:689:                    return @"Pending On";
Sezam/AGInviteEditSection.m:696:                    return @"Disabled";
Sezam/AGInviteEditSection.m:703:    AGDiaryError(@"UnexpectedPinState", @"Unexpected state for composePinRowText");
Sezam/AGInviteEditSection.m:704:    return @"";
Sezam/AGInviteEditSection.m:749:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessLevel"];
Sezam/AGInviteEditSection.m:768:                cell.label2.text = NSLocalizedString(@"Owner", nil);
Sezam/AGInviteEditSection.m:771:                cell.label2.text = NSLocalizedString(@"None", nil);
Sezam/AGInviteEditSection.m:774:                cell.label2.text = NSLocalizedString(@"Guest", nil);
Sezam/AGInviteEditSection.m:777:                cell.label2.text = NSLocalizedString(@"Keypad Only", nil);
Sezam/AGInviteEditSection.m:780:                cell.label2.text = NSLocalizedString(@"None", nil);
Sezam/AGInviteEditSection.m:786:        cell.accessibilityLabel = [NSString stringWithFormat:@"Access Level, %@", cell.label2.text];
Sezam/AGInviteEditSection.m:794:            cell = [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessSchedule"];
Sezam/AGInviteEditSection.m:802:                cell.label2.text = NSLocalizedString(@"Recurring", nil);
Sezam/AGInviteEditSection.m:805:                cell.label2.text = NSLocalizedString(@"Temporary", nil);
Sezam/AGInviteEditSection.m:808:                cell.label2.text = NSLocalizedString(@"Always",nil);
Sezam/AGInviteEditSection.m:845:                AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleRecurring1"];
Sezam/AGInviteEditSection.m:855:                AGTemporaryAccessTableViewCell *tempCell = [tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleTemporary1"];
Sezam/AGInviteEditSection.m:863:                cell = [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessSchedule"];
Sezam/AGInviteEditSection.m:864:                cell.label2.text = NSLocalizedString(@"Always",nil);
Sezam/AGInviteEditSection.m:877:            accessLabel.text = @"PIN Access";
Sezam/AGInviteEditSection.m:880:                cell.label2.text = NSLocalizedString(@"Always",nil);
Sezam/AGInviteEditSection.m:893:        cell =  [tableView dequeueReusableCellWithIdentifier:@"ManageSiri"];
Sezam/AGInviteEditSection.m:898:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditPIN"];
Sezam/AGInviteEditSection.m:922:        AGGuestNotificationCell *cell = [tableView dequeueReusableCellWithIdentifier:@"AGGuestNotificationCell"];
Sezam/AGInviteEditSection.m:924:            NSArray *topLevelObjects = [[NSBundle mainBundle] loadNibNamed:@"AGGuestNotificationCell" owner:self options:nil];
Sezam/AGInviteEditSection.m:936:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditTextPin"];
Sezam/AGInviteEditSection.m:954:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbellStatic"];
Sezam/AGInviteEditSection.m:956:            cell.label2.text = @"On";
Sezam/AGInviteEditSection.m:968:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbellStatic"];
Sezam/AGInviteEditSection.m:970:            cell.label2.text = ((self.invitedUserStatus==AGUserStatusOwner)||(isOwnerViewingSelf))? @"On":@"Off";
Sezam/AGInviteEditSection.m:974:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbell"];
Sezam/AGInviteEditSection.m:1009:    AGDiaryDebug(@"PINBLEConnected", @"PINEnable controller has connected to lock");
Sezam/AGInviteEditSection.m:1034:        connectErrorAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Cannot Connect to Lock", nil) message:NSLocalizedString(@"To set an entry code for a guest you must be connected to the lock. Please stand near the lock and try again.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel", nil) otherButtonTitles:@"Try Again", nil];
Sezam/AGInviteEditSection.m:1036:        connectErrorAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Cannot Connect to Lock", nil) message:NSLocalizedString(@"To set an entry code for a guest you must be connected to the lock. Please stand near the lock and try again.", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Cancel", nil) otherButtonTitles:nil];
Sezam/AGInviteEditSection.m:1075:    AGDiaryDebug(@"PINBLEConnectFailed", @"PINEnable controller has failed to connect to the lock");
Sezam/AGInviteEditSection.m:1100:    AGDiaryDebug(@"PINOnlyUserDeleteOperation", @"Will try and delete PIN and App user regardless of whether we are connected to the lock");
Sezam/AGInviteEditSection.m:1104:        AGDiaryDebug(@"PinOnlyDeleteChangeCalledBack", @"We got the reponse block from deleting a pin with App user");
Sezam/AGInviteEditSection.m:1127:    AGDiaryDebug(@"PINOnlyUserDeleteOperation", @"Will try and delete PIN regardless of whether we are connected to the lock");
Sezam/AGInviteEditSection.m:1131:        AGDiaryDebug(@"PinOnlyDeleteChangeCalledBack", @"We got the reponse block from deleting a pin");
Sezam/AGInviteEditSection.m:1158:            [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Connecting To Lock", nil)];
Sezam/AGInviteEditSection.m:1225:        self.invitedUser.lastName = @"";
Sezam/AGInviteEditSection.m:1230:        NSRange spaceRange = [self.invitedUser.firstName rangeOfString:@" "];
Sezam/AGInviteEditSection.m:1241:    AGDiaryInfo(@"AddUnrestrictedUser", @"Adding unrestricted user");
Sezam/AGInviteEditSection.m:1247:        [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Sending invitation...",nil)];
Sezam/AGInviteEditSection.m:1264:    AGDiaryDebug(@"findOrCreateUserForPIN", @"");
Sezam/AGInviteEditSection.m:1279:            self.invitedUser.objectId = [dict objectForKey:@"id"];
Sezam/AGInviteEditSection.m:1280:            self.pinEnableController.pinUserID = [dict objectForKey:@"id"];
Sezam/AGInviteEditSection.m:1296:    AGDiaryDebug(@"InviteUserInternal", @"doPins: %d", doPins);
Sezam/AGInviteEditSection.m:1319:                AGDiaryInfo(@"InviteUserInternal", @"Invited PIN user via server. Now setting pin.");
Sezam/AGInviteEditSection.m:1342:                            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Cannot Connect to Lock", nil) message:NSLocalizedString(@"Failed to set Entry Code on the lock. The Entry Code will be updated the next time an owner connects to the lock.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:1353:                AGDiaryError(@"InviteUserInternal", @"Error connecting to server to add PIN user");
Sezam/AGInviteEditSection.m:1354:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"PIN not created", nil) message:NSLocalizedString(@"We had trouble connecting to the server set the PIN.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGInviteEditSection.m:1364:            [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Connecting To Lock", nil)];
Sezam/AGInviteEditSection.m:1400:            [self addUnrestrictedUser: self.lock.objectId userType:@"superuser"];
Sezam/AGInviteEditSection.m:1404:                [self addUnrestrictedUser: self.lock.objectId userType:@"user"];
Sezam/AGInviteEditSection.m:1425:    AGDiaryInfo(@"AddRule", @"Adding rule to user");
Sezam/AGInviteEditSection.m:1428:        [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Sending invitation...",nil)];
Sezam/AGInviteEditSection.m:1443:        self.pinEnableController =  [((UIViewController *)self.delegate).storyboard instantiateViewControllerWithIdentifier:@"PinEnableViewController"];
Sezam/AGInviteEditSection.m:1458:        [self.delegate destoryOrUpdateProgressView:NSLocalizedString(@"Connecting To Lock", nil)];
Sezam/AGInviteEditSection.m:1510:    UIAlertView *schedAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Change Access Schedule?", nil) message:@"Entry codes can only have an \"always\" access schdule. Activating this Entry Code will mean this guest's app schedule and their Entry Code schedule will be different. What do you want this guest's app access schedule to be?" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Change to Always", ([self getAppSchedule] == kAGScheduleRecurring) ? @"Keep Recurring" : @"Keep Temporary", nil];
Sezam/AGInviteEditSection.m:1556:    if ([identifier isEqualToString:@"ToSchedule"]) {
Sezam/AGInviteEditSection.m:1561:                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Change Access Schedule?"
Sezam/AGInviteEditSection.m:1562:                                                                                         message:@"Entry codes can only have an \"always\" schedule. Changing this guest's app access will mean the guest's app access will not match their entry code access."
Sezam/AGInviteEditSection.m:1564:                [alertController addAction:[UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditSection.m:1569:                [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGDataItemUploader.m:48:    NSString *httpBodyDataBase64 = dict[@"httpBodyDataBase64"];
Sezam/AGDataItemUploader.m:49:    NSString *url = dict[@"url"];
Sezam/AGDataItemUploader.m:50:    NSString *httpMethod = dict[@"httpMethod"];
Sezam/AGDataItemUploader.m:51:    NSNumber *uploadAttemptsRemaining = dict[@"uploadAttemptsRemaining"];
Sezam/AGDataItemUploader.m:68:    dict[@"httpBodyDataBase64"] = [self.httpBodyData base64EncodedStringWithOptions:kNilOptions];    
Sezam/AGDataItemUploader.m:69:    dict[@"url"] = self.url;
Sezam/AGDataItemUploader.m:70:    dict[@"httpMethod"] = self.httpMethod;
Sezam/AGDataItemUploader.m:71:    dict[@"uploadAttemptsRemaining"] = @(self.uploadAttemptsRemaining);
Sezam/AGHowLockWorksViewController.m:45:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"ShownHowItWorksScreen"];
Sezam/AGChooseTieredUserController.m:76:    self.view.titleLabel.text = @"CHOOSE A USER";
Sezam/AGChooseTieredUserController.m:141:                                                                                       defaultImage:[UIImage imageNamed:@"activity_profile_blank_v2"]
Sezam/AGChooseTieredUserController.m:145:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"OWNERS" diplayItems:displayItems]];
Sezam/AGChooseTieredUserController.m:154:                                                                                       defaultImage:[UIImage imageNamed:@"activity_profile_blank_v2"]
Sezam/AGChooseTieredUserController.m:158:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"GUESTS" diplayItems:displayItems]];
Sezam/AGChooseTieredUserController.m:167:                                                                                       defaultImage:[UIImage imageNamed:@"activity_profile_blank_v2"]
Sezam/AGChooseTieredUserController.m:171:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"ENTRY CODE ONLY" diplayItems:displayItems]];
Sezam/AGDoorbellSuccessSetupViewController.m:19:static NSString* kAGDiaryCategory = @"DoorbellSetupSuccess";
Sezam/AGDoorbellSuccessSetupViewController.m:35:    AGDiaryDebug(@"FinishDoorbellSetup", @"Setup is complete.");
Sezam/AGDoorbellSuccessSetupViewController.m:38:        [self.heroImageView setImage:[UIImage imageNamed:@"imgDoorbellcamHeader"]];
Sezam/AGDoorbellSuccessSetupViewController.m:39:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellSuccessSetupViewController.m:42:        NSString *numberOfLocksWithoutDoorbellBridgesAndUserIsOwner = [NSString stringWithFormat:@"Count=%lu", locksWithoutDoorbellBridgesAndUserIsOwner.count];
Sezam/AGDoorbellSuccessSetupViewController.m:43:        AGDiaryInfo(@"NumberOfLocksWithoutDoorbellBridgesAndUserIsOwner", numberOfLocksWithoutDoorbellBridgesAndUserIsOwner);
Sezam/AGDoorbellSuccessSetupViewController.m:45:        AGDiaryInfo(@"UserHasLocksWithoutDoorbellAndIsOwner",userHasLocksWithoutDoorbellAndIsOwner?@"YES":@"NO");
Sezam/AGDoorbellSuccessSetupViewController.m:53:        [self.heroImageView setImage:[UIImage imageNamed:@"dbc2"]];
Sezam/AGDoorbellSuccessSetupViewController.m:54:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellSuccessSetupViewController.m:55:        [self.closeButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGDoorbellSuccessSetupViewController.m:68:    [self performSegueWithIdentifier:@"DoorbellSetupSuccessToAssociateToLock" sender:nil];
Sezam/AGDoorbellSuccessSetupViewController.m:79:        if ([NSStringFromClass([vc class]) isEqualToString:@"AGTwoStepChecklistViewController"]) {
Sezam/AGDoorbellSuccessSetupViewController.m:107:    if ([segue.identifier isEqualToString:@"DoorbellSetupSuccessToAssociateToLock"]) {
Sezam/AGAutoUnlockAdvancedSettingsView.m:52:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockAdvancedSettingsView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockAdvancedSettingsView.m:60:    self.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockAdvancedSettingsView.m:67:    self.modeTitleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:74:    self.modeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:78:    self.homeModeSegmentedControl = [[UISegmentedControl alloc] initWithItems:@[@"Home", @"Away"]];
Sezam/AGAutoUnlockAdvancedSettingsView.m:87:    self.howModeChangesWorkLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:88:    self.howModeChangesWorkLabel.text = @"The mode will change automatically when you leave and return home. You can change it manually if you wish to override the current behavior.";
Sezam/AGAutoUnlockAdvancedSettingsView.m:150:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:154:        label.text = @"HOME LOCATION";
Sezam/AGAutoUnlockAdvancedSettingsView.m:181:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockAdvancedSettingsView.m:193:        cell.textLabel.text = @"Edit Your Home Location";
Sezam/AGAutoUnlockAdvancedSettingsView.m:194:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"menu_arrow_v2"]];
Sezam/AGAutoUnlockAdvancedSettingsView.m:198:        cell.textLabel.text = @"View History";
Sezam/AGAutoUnlockAdvancedSettingsView.m:199:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"menu_arrow_v2"]];
Sezam/AGAutoUnlockAdvancedSettingsView.m:228:        self.modeTitleLabel.text = @"HOME MODE";
Sezam/AGAutoUnlockAdvancedSettingsView.m:229:        self.modeDescriptionLabel.text = @"Nothing will happen until you leave home.";
Sezam/AGAutoUnlockAdvancedSettingsView.m:234:        self.modeTitleLabel.text = @"AWAY MODE";
Sezam/AGAutoUnlockAdvancedSettingsView.m:235:        self.modeDescriptionLabel.text = @"Your door will unlock when you return home.";
Sezam/TimeRangeView.m:72:    _sliderLayer.actions = @{@"strokeStart" : [NSNull null], @"strokeEnd" : [NSNull null]}; // Disable animation for position
Sezam/TimeRangeView.m:77:    _sliderPinLayer.actions = @{@"position" : [NSNull null]}; // Disable animation for position
Sezam/TimeRangeView.m:102:    CGSize maxTextSize = [@"MMM" sizeWithAttributes:
Sezam/TimeRangeView.m:272:        return @"12a";
Sezam/TimeRangeView.m:274:        return [NSString stringWithFormat:@"%lua", (unsigned long)time];
Sezam/TimeRangeView.m:276:        return [NSString stringWithFormat:@"%dp", (int)((time > 12 ) ? time - 12 : time) ];
Sezam/TimeRangeView.m:310:        _rangeTimeLabel.text = @"ALL DAY";
Sezam/TimeRangeView.m:314:        _rangeTimeLabel.text = [NSString stringWithFormat:@"%d HOUR%@", (int)time, (time > 1) ? @"S" : @""];
Sezam/AGSubscriptionListViewController.m:46:    NSString *baseURL = @"d3iulgjhbi47gi.cloudfront.net";
Sezam/AGSubscriptionListViewController.m:47:    if ([AGUtility getAppFeature:@"subscription-domain"]) {
Sezam/AGSubscriptionListViewController.m:48:        baseURL = [AGUtility getAppFeature:@"subscription-domain"];
Sezam/AGSubscriptionListViewController.m:53:        if ([apiRoot rangeOfString:@"staging.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:54:            baseURL = @"subscriptions-ui-staging.august.com";
Sezam/AGSubscriptionListViewController.m:55:        } else  if ([apiRoot rangeOfString:@"qa-pre.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:56:            baseURL = @"subscriptions-ui-qa-pre.august.com";
Sezam/AGSubscriptionListViewController.m:57:        } else  if ([apiRoot rangeOfString:@"qa.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:58:            baseURL = @"subscriptions-ui-qa.august.com";
Sezam/AGSubscriptionListViewController.m:61:            baseURL = @"subscriptions-ui.august.com";
Sezam/AGSubscriptionListViewController.m:65:    return  [NSString stringWithFormat:@"%@%@/#/",  isSecure?@"https://":@"http://" , baseURL];
Sezam/AGSubscriptionListViewController.m:71:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGSubscriptionListViewController.m:72:        AGWebSubscriptionViewController *webTest = (AGWebSubscriptionViewController *)[storyboard instantiateViewControllerWithIdentifier:@"WebSubscriptionViewController"];
Sezam/AGSubscriptionListViewController.m:76:                NSString *urlString = [NSString stringWithFormat: @"%@change-payment?manageToken=%@", [self buildBaseURL], theToken];
Sezam/AGSubscriptionListViewController.m:104:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize], [NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"Small Style", @"White"] forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style", @"Current Page Indicator Color"]];
Sezam/AGSubscriptionListViewController.m:107:    [self.fancyTutorialViewer setStringsAndImages:@[@"Get notified if your door is left open, or when someone unlocks your door. ", @"Know when your packages have been safely delivered.", @"Download and share recorded video of visitors at your door."] images:@[[UIImage imageNamed:@"video_carousel_1"], [UIImage imageNamed:@"video_carousel_2"], [UIImage imageNamed:@"video_carousel_3"]] withOptions:tutorialOptions];
Sezam/AGSubscriptionListViewController.m:132:                if ([subItem.type isEqualToString:@"doorbellDvr"]) {
Sezam/AGSubscriptionListViewController.m:154:                if ([subItem.type isEqualToString:@"lockAam"]) {
Sezam/AGSubscriptionListViewController.m:171:                    BOOL showAamLockSubscriptions = [AGUtility checkForAppFeature:@"showAamLockSubscriptions"];
Sezam/AGSubscriptionListViewController.m:210:    AGSubscriptionCellTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SubscriptionCell"];
Sezam/AGSubscriptionListViewController.m:220:        NSArray *lockSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"lock"]];
Sezam/AGSubscriptionListViewController.m:234:            cell.houseNameLabel.text = @"Unknown House";
Sezam/AGSubscriptionListViewController.m:235:            cell.doorNameLabel.text = @"Unknown Lock";
Sezam/AGSubscriptionListViewController.m:243:        NSArray *doorbellSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"doorbellDvr"]];
Sezam/AGSubscriptionListViewController.m:258:            cell.houseNameLabel.text = @"Unknown House";
Sezam/AGSubscriptionListViewController.m:259:            cell.doorNameLabel.text = @"Unknown Doorbell";
Sezam/AGSubscriptionListViewController.m:274:        subItem.userID = @"3sdfsdf";
Sezam/AGSubscriptionListViewController.m:305:            cell.daysLeftLabel.text = @"MANAGED BY YOU";
Sezam/AGSubscriptionListViewController.m:329:                cell.daysLeftLabel.text = [NSString stringWithFormat:@"MANAGED BY %@ %@", subscribedUser.firstName, subscribedUser.lastName];
Sezam/AGSubscriptionListViewController.m:331:                cell.daysLeftLabel.text = @"MANAGED BY ANOTHER USER";
Sezam/AGSubscriptionListViewController.m:343:        cell.daysLeftLabel.text = @"UPGRADE NOW";
Sezam/AGSubscriptionListViewController.m:349:        cell.statusLabelCenter.text = @"Beta\t";
Sezam/AGSubscriptionListViewController.m:351:        cell.statusTopLabel.text  = @"";
Sezam/AGSubscriptionListViewController.m:352:        cell.daysLeftLabel.text = @"";
Sezam/AGSubscriptionListViewController.m:370:        NSArray *lockSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"lock"]];
Sezam/AGSubscriptionListViewController.m:384:        NSArray *doorbellSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"doorbellDvr"]];
Sezam/AGSubscriptionListViewController.m:413:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGSubscriptionListViewController.m:414:        AGWebSubscriptionViewController *webTest = (AGWebSubscriptionViewController *)[storyboard instantiateViewControllerWithIdentifier:@"WebSubscriptionViewController"];
Sezam/AGSubscriptionListViewController.m:421:                    urlString = [NSString stringWithFormat: @"%@manage-subscription?manageToken=%@&subscriptionID=%@", [self buildBaseURL], theToken, subItem.objectId];
Sezam/AGSubscriptionListViewController.m:425:                    urlString = [NSString stringWithFormat: @"%@select-plan?manageToken=%@&subscriptionID=%@", [self buildBaseURL], theToken, subItem.objectId];
Sezam/AGSubscriptionListViewController.m:475:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSubscriptionListViewController.m:480:        label.text = @"YOUR LOCKS";
Sezam/AGSubscriptionListViewController.m:484:        label.text = @"YOUR DOORBELLS";
Sezam/AGSubscriptionListViewController.m:503:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Wi-Fi Bridge Recommended" message:@"This device does not have a Wi-Fi bridge. We recommend using an August Connect to get the full benefit of the Active Monitoring service." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSubscriptionListViewController.m:505:    [alertController addAction:[UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSubscriptionListViewController.m:506:        NSURL *url = [NSURL URLWithString:@"http://august.com/products/august-connect/"];
Sezam/AGSubscriptionListViewController.m:510:    [alertController addAction:[UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSubscriptionListViewController.m:514:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGPhoneVerifyViewController.m:54:        [self.titleLabel setText:NSLocalizedString(@"SIGN UP",nil)];
Sezam/AGPhoneVerifyViewController.m:56:        [self.titleLabel setText:NSLocalizedString(@"UPDATE PHONE",nil)];
Sezam/AGPhoneVerifyViewController.m:58:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGPhoneVerifyViewController.m:60:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGPhoneVerifyViewController.m:68:    if ([[formattedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGPhoneVerifyViewController.m:71:            formattedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formattedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(6, (formattedNumberNoCode.length-6))]];
Sezam/AGPhoneVerifyViewController.m:99:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Verifying Phone...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGPhoneVerifyViewController.m:106:            NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGPhoneVerifyViewController.m:107:            NSString *errorMsg = NSLocalizedString(@"Please check the phone number and verification code you have entered and try again.", nil);
Sezam/AGPhoneVerifyViewController.m:109:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:113:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"Incorrect verification code.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGPhoneVerifyViewController.m:120:                            [self performSegueWithIdentifier:@"PhoneVerifyToNewPassword" sender:nil];
Sezam/AGPhoneVerifyViewController.m:139:                                [self performSegueWithIdentifier:@"PhoneVerifyToEmailVerify" sender:nil];
Sezam/AGPhoneVerifyViewController.m:145:                                [self performSegueWithIdentifier:@"PhoneVerifyToEmailVerify" sender:nil];
Sezam/AGPhoneVerifyViewController.m:172:    self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Sending SMS...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGPhoneVerifyViewController.m:177:            NSString *errorTitle = NSLocalizedString(@"Code Re-Sent",nil);
Sezam/AGPhoneVerifyViewController.m:178:            NSString *errorMsg = NSLocalizedString(@"We just texted you another code.  Please check that you typed your mobile number correctly.  If you have a poor cellular connection, it might take a few moments to receive the code.",nil);
Sezam/AGPhoneVerifyViewController.m:180:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:184:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGPhoneVerifyViewController.m:186:            NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGPhoneVerifyViewController.m:189:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:212:    if (([segue.identifier isEqualToString:@"PhoneVerifyToAddEmail"]) || ([segue.identifier isEqualToString:@"PhoneVerifyToEmailVerify"])) {
Sezam/AGPhoneVerifyViewController.m:218:    }else if ([segue.identifier isEqualToString:@"PhoneVerifyToNewPassword"])
Sezam/AGPhoneVerifyViewController.m:235:            UIAlertController *addEmailErrorAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGPhoneVerifyViewController.m:236:            UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGFormField.m:34:    self.formTextFont = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGFormField.m:46:    if ([self.size isEqualToString:@"Standard"]) {
Sezam/AGFormField.m:48:    } else if ([self.size isEqualToString:@"Small"]) {
Sezam/AGFormField.m:50:    } else if ([self.size isEqualToString:@"CCC"]) {
Sezam/AGFormField.m:60:    if ([self.alignment isEqualToString:@"Left"]) {
Sezam/AGFormField.m:68:    if ([self.alignment isEqualToString:@"Left"]) {
Sezam/AGWelcomeViewController.m:64:    [self performSegueWithIdentifier:@"WelcomeToReceivedInvite" sender:nil];
Sezam/AGWelcomeViewController.m:68:    [self performSegueWithIdentifier:@"WelcomeVCtoCreateAccountVC" sender:nil];
Sezam/AGWelcomeViewController.m:72:    [self performSegueWithIdentifier:@"WelcomeToLogin" sender:nil];
Sezam/AGSliderTableCell.m:37:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSliderTableCell.m:43:    self.detailLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSliderTableCell.m:54:    self.sliderDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGWebViewController.m:12:NSString *const kAGNotificationFinishedInstallGuide = @"kAGNotificationFinishedInstallGuide";
Sezam/AGWebViewController.m:59:    if ([request.URL.absoluteString containsString:@"installation-complete"]) {
Sezam/AGWebViewController.m:78:    self.titleLabel.text = [self.webView stringByEvaluatingJavaScriptFromString:@"document.title"];
Sezam/AGAutoUnlockReportProblemCompletedView.m:47:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockReportProblemCompletedView.m:48:    self.titleLabel.text = @"THANK YOU";
Sezam/AGAutoUnlockReportProblemCompletedView.m:53:    [self.closeButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemCompletedView.m:61:    self.descriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockReportProblemCompletedView.m:62:    self.descriptionLabel.text = @"We value your feedback. Reporting issues helps us to improve Auto-Unlock over time.\n\nIf you’d like to learn more about Auto-Unlock, the link below contains additional information about how Auto-Unlock works, and may help in preventing certain problems from occurring.";
Sezam/AGAutoUnlockReportProblemCompletedView.m:70:    self.learnMoreAboutAutoUnlockButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemCompletedView.m:71:    [self.learnMoreAboutAutoUnlockButton setTitle:@"LEARN MORE ABOUT AUTO-UNLOCK" forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemCompletedView.m:81:    self.exitButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemCompletedView.m:82:    [self.exitButton setTitle:@"EXIT" forState:UIControlStateNormal];
Sezam/RangeTableView.m:45:    [[self visibleCells] setValue:@(0.0f) forKey:@"alpha"];
Sezam/RangeTableView.m:104:        [[self visibleCells] setValue:@(0.0f) forKey:@"alpha"];
Sezam/AGAddProfilePhotoViewController.m:60:    self.imageButton.accessibilityLabel = @"Add Profile Photo";
Sezam/AGAddProfilePhotoViewController.m:71:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Why do I have to upload a profile photo?", nil) message:NSLocalizedString(@"Giving other people access to your home is serious business!\n\nAugust requires users to upload profile photos so that they can identify each other more easily when sending and receiving invites.\n\nYou can always change your photo later from the Account Settings screen.", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGAddProfilePhotoViewController.m:145:    self.lookingGoodLabel.text = NSLocalizedString(@"Looking good!",nil);
Sezam/AGAddProfilePhotoViewController.m:147:    [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGAddProfilePhotoViewController.m:154:    self.imageButton.accessibilityLabel = @"Your Profile Photo"; // for accessibility/UI Testing
Sezam/AGAddProfilePhotoViewController.m:179:    if ([segue.identifier isEqualToString:@"AddProfilePhotoToVerifyPhone"]) {
Sezam/AGAddProfilePhotoViewController.m:194:            [self performSegueWithIdentifier:@"AddProfilePhotoToVerifyPhone" sender:nil];
Sezam/AGAddProfilePhotoViewController.m:197:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGHomeKitCompleteViewController.m:16:#define kAGDiaryCategory @"HomeKitComplete"
Sezam/AGHomeKitCompleteViewController.m:42:    self.instructionsLabel.text = @"";
Sezam/AGHomeKitCompleteViewController.m:97:    AGDiaryDebug(@"Fail", error);
Sezam/AGHomeKitCompleteViewController.m:99:    [self.closeSetupBigButton setTitle:@"OK" forState:UIControlStateNormal];
Sezam/AGHomeKitCompleteViewController.m:121:        self.instructionsLabel.text = [NSString stringWithFormat:@"\"%@\" has now been added to %@.\n\nYou can now use Siri and third party HomeKit apps to operate your lock.", [self navController].agLock.name, [self navController].selectedHome.name];
Sezam/AGHomeKitCompleteViewController.m:124:        [self.closeSetupBigButton setTitle:@"Create an Account" forState:UIControlStateNormal];
Sezam/AGHomeKitCompleteViewController.m:125:        self.instructionsLabel.text = [NSString stringWithFormat:@"HomeKit has now been enabled for this lock. To start using your August Smart Lock, create an August account and then set up your new lock."];
Sezam/AGHomeKitCompleteViewController.m:139:    AGDiaryDebug(@"GetHomeKitKey", @"Getting auth blob cached data");
Sezam/AGHomeKitCompleteViewController.m:148:                    NSString *homeKitKey = [result objectForKey:@"key"];
Sezam/AGHomeKitCompleteViewController.m:149:                    NSNumber *homeKitKeySlot = [result objectForKey:@"slot"];
Sezam/AGHomeKitCompleteViewController.m:151:                    combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitCompleteViewController.m:152:                    AGDiaryDebug(@"AuthBlobStringToPutOnLock", combinedString.loggingHash);
Sezam/AGHomeKitCompleteViewController.m:154:                    AGDiaryDebug(@"NoAuthBlobFoundFromServer", @"No auth blob");
Sezam/AGHomeKitCompleteViewController.m:160:                        AGDiaryDebug(@"UpdatingBLETimeout", @"setting timeout to 10 seconds");
Sezam/AGHomeKitCompleteViewController.m:163:                        inactivityTimeoutCommand.label = @"BLETimeoutChange";
Sezam/AGHomeKitCompleteViewController.m:168:                        setHomeKitAdvtState.label = @"HomeKitAdvtInterleaved";
Sezam/AGHomeKitCompleteViewController.m:190:                        [self failWithError:@"Error connecting to your to lock."];
Sezam/AGHomeKitCompleteViewController.m:211:            AGDiaryDebug(@"LockAddedFail", @"Added lock failure %@", [error description]);
Sezam/AGHomeKitCompleteViewController.m:212:            [self failWithError:[NSString stringWithFormat:@"An error occurred. Please try again.\n\n %@", [AGHomeKitManager homeKitErrorMessage:error], nil]];
Sezam/AGHomeKitCompleteViewController.m:214:            AGDiaryInfo(@"LockAddedSuccess", @"Added lock %@", [self navController].agLock.name);
Sezam/AGHomeKitCompleteViewController.m:219:                        AGDiaryDebug(@"LockAddedToRoomFail", @"Added lock to room failure %@", [error description]);
Sezam/AGHomeKitCompleteViewController.m:220:                        [self failWithError:[NSString stringWithFormat:@"An error occurred. Please try again.\n\n %@", [AGHomeKitManager homeKitErrorMessage:error], nil]];
Sezam/AGHomeKitCompleteViewController.m:223:                        AGDiaryInfo(@"LockAddedToRoomSuccess", @"Added lock to room %@", [self navController].selectedRoom.name);
Sezam/AGHomeKitCompleteViewController.m:247:    [[self navController].lockAccessory updateName:@"August Lock" completionHandler:^(NSError *error) {
Sezam/AGHomeKitCompleteViewController.m:249:            AGDiaryDebug(@"NameUpdated", @"Set lock name to August Lock");
Sezam/AGHomeKitCompleteViewController.m:251:            AGDiaryDebug(@"NameUpdateFailed",@"Set lock name to August Lock");
Sezam/AGHomeKitChangeRoomViewController.m:34:    self.changeRoomLabel.text = [NSString stringWithFormat:@"Choose which room in %@ you want to move this lock to.", self.theHome.name];
Sezam/AGHomeKitChangeRoomViewController.m:85:    AGTableViewCell *cell = (AGTableViewCell *)[self.roomsTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitChangeRoomViewController.m:87:        cell.label.text = @"Add a New Room";
Sezam/AGHomeKitChangeRoomViewController.m:96:        cell.label.text = @"None";
Sezam/AGHomeKitChangeRoomViewController.m:104:    cell.accessoryView = (indexPath.row != self.selectedRow)? nil : [[UIImageView alloc] initWithImage: [UIImage imageNamed:@"check_v2"]];
Sezam/AGHomeKitChangeRoomViewController.m:120:        AGHomeKitManagerCreateRoomViewController *addRoom = (AGHomeKitManagerCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateRoom"];
Sezam/AGStatusControl.m:43:    [self.collectionView registerClass:[AGCollectionViewCell class] forCellWithReuseIdentifier:@"StatusCell"];
Sezam/AGStatusControl.m:85:    AGCollectionViewCell *cell = (AGCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:@"StatusCell" forIndexPath:indexPath];
Sezam/AGStatusControl.m:86://    cell.label.nuiClass = @"none"; // Needed to prevent NUI for overriding our font choice below.
Sezam/AGStatusControl.m:91:    NSString * num = [NSString stringWithFormat:@"%d",((int)[indexPath row]+1)];
Sezam/AGStatusControl.m:96:    [[cell label] setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:16]];
Sezam/AGAirbnbListingSetupViewController.m:24:static NSString* kAGDiaryCategory = @"AirBnBListingSetup";
Sezam/AGAirbnbListingSetupViewController.m:94:    self.topMessage.text = [NSString stringWithFormat:@"Select the August locks you wish to associate with the Airbnb listing %@.", self.airbnbListing.name];
Sezam/AGAirbnbListingSetupViewController.m:152:                                                                                                andAccessType:@"appAccess"
Sezam/AGAirbnbListingSetupViewController.m:184:                                                                                                andAccessName:[NSString stringWithFormat:@"%@ - Keypad",lock.name]
Sezam/AGAirbnbListingSetupViewController.m:185:                                                                                                andAccessType:@"keypadAccess"
Sezam/AGAirbnbListingSetupViewController.m:216:        houseDictionary[@"houseName"] = house.name;
Sezam/AGAirbnbListingSetupViewController.m:225:        houseDictionary[@"listingAccessDisplayInfoArrayInHouse"] = listingAccessDisplayInfoInHouse;
Sezam/AGAirbnbListingSetupViewController.m:261:    NSString *sectionTitle = houseListingForSection[@"houseName"];
Sezam/AGAirbnbListingSetupViewController.m:271:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAirbnbListingSetupViewController.m:298:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:301:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"ListItemCell"];
Sezam/AGAirbnbListingSetupViewController.m:303:        cell.imageView0.image = [UIImage imageNamed:@"checkbox_checked_v2"];
Sezam/AGAirbnbListingSetupViewController.m:305:        cell.imageView0.image = [UIImage imageNamed:@"checkbox_unchecked_v2"];
Sezam/AGAirbnbListingSetupViewController.m:308:    if ([airbnbListingDisplayInfo.accessType isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:329:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:345:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:359:    UIAlertController *disableAccessAlert = [UIAlertController alertControllerWithTitle:@"Remove Access?" message:@"Future Airbnb guests will not be given access to this lock. Current Airbnb guests will keep the access they already have." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:360:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:362:    UIAlertAction *removeAction = [UIAlertAction actionWithTitle:@"Remove" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * action) {
Sezam/AGAirbnbListingSetupViewController.m:382:            if ([lock.objectId isEqual:listingAccessDisplayInfo.lockId] && [listingAccessDisplayInfo.accessType isEqual:@"appAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:387:            if ([lock.objectId isEqual:listingAccessDisplayInfo.lockId] && [listingAccessDisplayInfo.accessType isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:412:            AGDiaryInfo(@"UpdateAirBnBListing", @"Error: %@", lastError.localizedDescription);
Sezam/AGAirbnbListingSetupViewController.m:413:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was a problem updating your AirBnB information." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:414:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:418:            AGDiaryInfo(@"UpdateAirBnBListing", @"Success");
Sezam/AGAirbnbListingSetupViewController.m:427:    UIAlertController *keypadEntryCodeHelpAlert = [UIAlertController alertControllerWithTitle:@"Keypad Entry Codes" message:@"If checked, guests will receive automatically generated entry codes to unlock the door to your listing by using your August Keypad." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:428:    UIAlertAction *gotItAction = [UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:436:    UIAlertController *keypadRequirementsAlert = [UIAlertController alertControllerWithTitle:@"Keypad Requirements" message:@"To use your Keypad with Airbnb, it must be paired to a 2nd Gen Smart Lock or newer with a Wi-Fi bridge, like August Connect." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:438:    NSString *airbnbConnectPromoURL =  @"https://store.august.com/discount/fromanywhere20?redirect=%2Fproducts%2Faugust-connect&utm_source=august_app&utm_medium=iosairbnbconnect";
Sezam/AGAirbnbListingSetupViewController.m:440:    UIAlertAction *buyConnectAction = [UIAlertAction actionWithTitle:@"$20 off August Connect" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAirbnbListingSetupViewController.m:441:        AGAnalyticsDiaryData(AGDiaryLevel_Info, @"UserAction", @"AugustStore", @{@"AirBnBConnectPromotion":[NSNumber numberWithBool:YES]});
Sezam/AGAirbnbListingSetupViewController.m:446:    UIAlertAction *getHelpAction = [UIAlertAction actionWithTitle:@"Get More Help" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAirbnbListingSetupViewController.m:452:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Dismiss" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGWeeklyRecurrencePickerView.m:50:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGWeeklyRecurrencePickerView.m:52:    self.label.text = @"Within a time range";
Sezam/AGWeeklyRecurrencePickerView.m:56:    self.accessoryImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGWeeklyRecurrencePickerView.m:126:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGWeeklyRecurrencePickerView.m:133:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGWeeklyRecurrencePickerView.m:134:    self.titleLabel.text = @"CHOOSE A TIME";
Sezam/AGWeeklyRecurrencePickerView.m:150:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrencePickerView.m:156:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGWeeklyRecurrencePickerView.m:189:        leftImageAndRightLabelcell.rightLabel.text = @"Any time it occurs";
Sezam/AGBridgeSetupTuneViewController.m:19:static NSString* kAGDiaryCategory = @"BridgeTune";
Sezam/AGBridgeSetupTuneViewController.m:101:        AGDiaryDebug(nil, @"Waiting for the bridge to finish connecting to the server.  App will continue waiting for %.0f seconds", WAIT_DURATION_SECS);
Sezam/AGBridgeSetupTuneViewController.m:106:    AGDiaryInfo(nil, @"Pinging the server to see if the bridge is online");
Sezam/AGBridgeSetupTuneViewController.m:107:    self.statusLabel.text = NSLocalizedString(@"Waiting for setup to complete...", nil);
Sezam/AGBridgeSetupTuneViewController.m:108:    [self.setupNavController.agLock sendRemoteOperateCommandDetail:@"status" isDoingSetup:YES block:
Sezam/AGBridgeSetupTuneViewController.m:119:             AGDiaryInfo(nil, @"Could not get remote status from ACS Server.  This is expected if the bridge is not yet online. Status code %d.", _lastErrorCode);
Sezam/AGBridgeSetupTuneViewController.m:122:                 AGDiaryDebug(nil, @"Waiting %.0f seconds and then pinging the server again", WAIT_BETWEEN_PINGS_SECS);
Sezam/AGBridgeSetupTuneViewController.m:134:             NSDictionary *info = [dict objectForKey:@"info"];
Sezam/AGBridgeSetupTuneViewController.m:137:                 int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSetupTuneViewController.m:138:                 int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSetupTuneViewController.m:139:                 int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGBridgeSetupTuneViewController.m:154:    if ([strength isEqualToString:@"Great"]) {
Sezam/AGBridgeSetupTuneViewController.m:157:    if ([strength isEqualToString:@"Bad"]) {
Sezam/AGBridgeSetupTuneViewController.m:160:    if ([strength isEqualToString:@"Good"]) {
Sezam/AGBridgeSetupTuneViewController.m:163:    if ([strength isEqualToString:@"Poor"]) {
Sezam/AGBridgeSetupTuneViewController.m:173:    NSString *btVal = [NSString stringWithFormat:@"%@ (%d)",btQualString, btRSSI];
Sezam/AGBridgeSetupTuneViewController.m:174:    NSString *wlanVal = [NSString stringWithFormat:@"%@ (%d)",wifiQualString, wlanRSSI];
Sezam/AGBridgeSetupTuneViewController.m:178:        btVal = @"?";
Sezam/AGBridgeSetupTuneViewController.m:181:        wlanVal = @"?";
Sezam/AGBridgeSetupTuneViewController.m:195:            return NSLocalizedString(@"Bad", nil);
Sezam/AGBridgeSetupTuneViewController.m:198:            return NSLocalizedString(@"Poor", nil);
Sezam/AGBridgeSetupTuneViewController.m:201:            return NSLocalizedString(@"Good", nil);
Sezam/AGBridgeSetupTuneViewController.m:204:            return NSLocalizedString(@"Great", nil);
Sezam/AGBridgeSetupTuneViewController.m:214:    AGBridgeSetupCompleteViewController* setupComplete = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupComplete"];
Sezam/AGBridgeSetupTuneViewController.m:224:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupTuneViewController.m:235:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupTuneViewController.m:250:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGDoorbellHighPowerModeViewController.m:15:static NSString* kAGDiaryCategory = @"DoorbellHighPowerModeViewController";
Sezam/AGDoorbellHighPowerModeViewController.m:45:    self.topCancelButton.imageView.image = [UIImage imageNamed:@"Close_Button_v3"];
Sezam/AGDoorbellHighPowerModeViewController.m:46:    self.heroImage.image = [UIImage imageNamed:@"imgDoorbellcamHeader"];
Sezam/AGDoorbellHighPowerModeViewController.m:49:    self.messageLabel.text = @"Your Doorbell Cam is now running in high power mode! \n\nThe increased power draw can cause vibration in some doorbell chimes. If this occurs, tap the button below to learn what you can do to fix it.";
Sezam/AGDoorbellHighPowerModeViewController.m:56:            AGDiaryError(@"SetDoorbellHighPower", @"Error Setting High Power Mode");
Sezam/AGDoorbellHighPowerModeViewController.m:58:            AGDiaryInfo(@"SetDoorbellHighPower", @"Success Setting High Power Mode");
Sezam/AGDoorbellHighPowerModeViewController.m:60:                AGDiaryInfo(@"SetDoorbellHighPower", @"Doorbell Refreshed");
Sezam/AGGenericSetupFlowView.m:54:    [self.backButton setImage:[UIImage imageNamed:@"white_left_arrow_v3"] forState:UIControlStateNormal];
Sezam/AGGenericSetupFlowView.m:61:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGGenericSetupFlowView.m:66:    [self.cancelButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGGenericSetupFlowView.m:80:    self.actionButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGGenericSetupFlowView.m:88:    [self.textView setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGHomeKitSelectLockViewController.m:80:        cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockHeaderCell"];
Sezam/AGHomeKitSelectLockViewController.m:82:        cell.label.text = [[NSString stringWithFormat:@"August Lock %@", theLockSelected.name] uppercaseString];
Sezam/AGHomeKitSelectLockViewController.m:85:            cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockSelectCell"];
Sezam/AGHomeKitSelectLockViewController.m:89:        cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockIdentifyCell"];
Sezam/AGHouseSettingsTabViewController.m:52:    self.updatingLabel.text = @"Updating Devices...";
Sezam/AGHouseSettingsTabViewController.m:67:    self.updatingLabel.text = @"Error Updating House Details.";
Sezam/AGHouseSettingsTabViewController.m:110:            if ((bridge !=nil) && [bridge.model isEqual:@"august-connect"]) {
Sezam/AGHouseSettingsTabViewController.m:138:        titleLabel.text = @"HOUSE SETTINGS";
Sezam/AGHouseSettingsTabViewController.m:144:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGHouseSettingsTabViewController.m:196:        AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"NavigateToDetailCell"];
Sezam/AGHouseSettingsTabViewController.m:198:            cell.label2.text = @"House Name and Photo";
Sezam/AGHouseSettingsTabViewController.m:200:            cell.label2.text = @"Edit House Owners";
Sezam/AGHouseSettingsTabViewController.m:207:        AGTableViewDoorCell *cell = [tableView dequeueReusableCellWithIdentifier:@"DoorCell"];
Sezam/AGHouseSettingsTabViewController.m:224:                doorbellImageNamed = @"Doorbellv2SettingsIcon";
Sezam/AGHouseSettingsTabViewController.m:226:                doorbellImageNamed = @"DoorbellSettingsIcon";
Sezam/AGHouseSettingsTabViewController.m:292:            [self performSegueWithIdentifier:@"HouseSettingsTabToHouseNameAndPhoto" sender:self];
Sezam/AGHouseSettingsTabViewController.m:294:            [self performSegueWithIdentifier:@"HouseSettingsTabToEditHouseOwners" sender:self];
Sezam/AGHouseSettingsTabViewController.m:302:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:303:    UINavigationController *lockSettingsNavController = (UINavigationController*)[lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"LockSettingsNavController"];
Sezam/AGHouseSettingsTabViewController.m:313:    UIStoryboard *doorbellSettingsStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:314:    UINavigationController *doorbellNav = (UINavigationController *)[doorbellSettingsStoryboard instantiateViewControllerWithIdentifier:@"DoorbellSettingsNav"];
Sezam/AGHouseSettingsTabViewController.m:325:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:326:    AGBridgeSettingsViewController *bridgeSettingsViewController = (AGBridgeSettingsViewController*)[lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"BridgeSettings"];
Sezam/AGHouseSettingsTabViewController.m:336:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGHouseSettingsTabViewController.m:337:    UINavigationController *keypadSettingsNav = [storyboard instantiateViewControllerWithIdentifier:@"KeypadSettingsNavController"];
Sezam/AGHouseSettingsTabViewController.m:350:    if ([segue.identifier isEqualToString:@"HouseSettingsTabToHouseNameAndPhoto"]) {
Sezam/AGHouseSettingsTabViewController.m:353:    } else if ([segue.identifier isEqualToString:@"HouseSettingsTabToEditHouseOwners"]) {
Sezam/AGEventLogView.m:46:    self.leftLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGEventLogView.m:53:    self.rightLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGEventLogView.m:136:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGEventLogView.m:143:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGEventLogView.m:195:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGEventLogView.m:216:    NSString *cellID = @"LogEventCell";
Sezam/AGDoorbellWiFiSetupViewController.m:21:static NSString* kAGDiaryCategory = @"DoorbellSetupv2";
Sezam/AGDoorbellWiFiSetupViewController.m:44:    self.titleBarLabel.text = @"SET UP DOORBELL";
Sezam/AGDoorbellWiFiSetupViewController.m:45:    self.message.text = @"Follow the directions on the next screen to get Doorbell Cam onto your Wi-Fi network.";
Sezam/AGDoorbellWiFiSetupViewController.m:54:        self.heroImageView.image = [UIImage imageNamed:@"imgWACHeader"];
Sezam/AGDoorbellWiFiSetupViewController.m:55:        [self.titleBarLabel setNuiClass:@"Title"];
Sezam/AGDoorbellWiFiSetupViewController.m:57:        self.heroImageView.image = [UIImage imageNamed:@"imgWACHeader_d2"];
Sezam/AGDoorbellWiFiSetupViewController.m:58:        [self.titleBarLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellWiFiSetupViewController.m:59:        [self.closeButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGDoorbellWiFiSetupViewController.m:85:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:86:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellWiFiSetupViewController.m:90:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellWiFiSetupViewController.m:107:        UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn Wi-Fi On" message:@"Mobile Wi-Fi connectivity is required to setup Doorbell Wi-Fi." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:108:        [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDoorbellWiFiSetupViewController.m:117:        NSDictionary *putDoorbellIntoProvisioningMode = @{@"doorbellID":self.doorbell.objectId, @"status":@"doorbell_factory_reset", @"origin": @"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:120:        AGDiaryInfo(@"DoorbellWACBegin", @"Setup:NO");
Sezam/AGDoorbellWiFiSetupViewController.m:125:            AGDiaryInfo(@"DoorbellWACBegin", @"Setup:YES");
Sezam/AGDoorbellWiFiSetupViewController.m:129:            NSString *alertTitle = @"Press the “Reset” Button";
Sezam/AGDoorbellWiFiSetupViewController.m:130:            NSString *alertMessage = @"Please press the small “reset” button on the back of your Doorbell Cam for 10 seconds, then place it back on the wall.\n\nThis will allow us to connect to your Doorbell Cam.";
Sezam/AGDoorbellWiFiSetupViewController.m:131:            NSString *alertDismissButtonTitle = @"OK";
Sezam/AGDoorbellWiFiSetupViewController.m:135:                alertTitle = @"Prepare for Connection";
Sezam/AGDoorbellWiFiSetupViewController.m:136:                alertMessage = @"1. Press and release the “Reset” button on the back of your Doorbell Cam.\n\n2. Immediately after, hold down the large doorbell button until the green light blinks once.\n\n3. Reconnect to power, and wait until the white light begins to pulse.";
Sezam/AGDoorbellWiFiSetupViewController.m:137:                alertDismissButtonTitle = @"The Light is Pulsing";
Sezam/AGDoorbellWiFiSetupViewController.m:158:    self.spinnerMessageLabel.text = @"Scanning for Doorbell...";
Sezam/AGDoorbellWiFiSetupViewController.m:163:    NSString *match = [NSString stringWithFormat:@"*%@", self.doorbell.serialNumber];
Sezam/AGDoorbellWiFiSetupViewController.m:164:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellWiFiSetupViewController.m:187:        UIAlertController *multipleDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Multiple Doorbells Found" message:@"We found multiple unconfigured doorbells. Please power off any doorbells you are not trying to set up." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:188:        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellWiFiSetupViewController.m:192:        UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellWiFiSetupViewController.m:195:                                                                NSString *match = [NSString stringWithFormat:@"*%@", self.doorbell.serialNumber];
Sezam/AGDoorbellWiFiSetupViewController.m:196:                                                                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellWiFiSetupViewController.m:218:        AGDiaryWarn(nil, @"Ignoring configuration of accessory (%@, %@).  It's not the accessory that we started configuring", accessory.name, accessory.macAddress);
Sezam/AGDoorbellWiFiSetupViewController.m:224:        AGDiaryInfo(@"WACSuccess", @"WAC configuration was successful");
Sezam/AGDoorbellWiFiSetupViewController.m:225:        AGDiaryInfo(@"DoorbellWACEnd", @"WACSuccess, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:229:            NSString *wifiChangeAlertMessage = [NSString stringWithFormat:@"Please be aware that your August Device has joined a different Wi-Fi Network named \"%@\". This may be due to incompatibilities between your original network and your August Device.", [AGUtility getWiFiSSID]];
Sezam/AGDoorbellWiFiSetupViewController.m:230:            NSString *title = @"Warning: Wi-Fi Network has Changed";
Sezam/AGDoorbellWiFiSetupViewController.m:235:            [wiFiNetworkChangedAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:247:        AGDiaryInfo(@"WACCanceled", @"The user clicked 'Cancel' in the iOS WiFi setup dialog");
Sezam/AGDoorbellWiFiSetupViewController.m:248:        AGDiaryInfo(@"DoorbellWACEnd", @"WACCanceled, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:249:        UIAlertController *wacCancelledAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"August Connect Wi-Fi Setup Cancelled", nil)
Sezam/AGDoorbellWiFiSetupViewController.m:250:                                                                                           message:NSLocalizedString(@"We see that you cancelled setup of your August Device.  You can always re-run setup at a later time", nil)
Sezam/AGDoorbellWiFiSetupViewController.m:252:        [wacCancelledAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:262:        AGDiaryWarn(@"WACFailed", @"WAC setup failed");
Sezam/AGDoorbellWiFiSetupViewController.m:263:        AGDiaryInfo(@"DoorbellWACEnd", @"WACFailed, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:271:        return @"YES";
Sezam/AGDoorbellWiFiSetupViewController.m:273:        return @"NO";
Sezam/AGDoorbellWiFiSetupViewController.m:282:    if (messageData[@"status"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:283:        NSString *status = messageData[@"status"];
Sezam/AGDoorbellWiFiSetupViewController.m:284:        if ([status isEqual:@"doorbell_pong"] || [status isEqual:@"doorbell_call_status_online"] || [status isEqual:@"doorbell_back_online"] || [status isEqual:@"online"] || [status isEqual:@"awake"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:292:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:296:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToOTA" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:321:    self.message.text = @"Please wait while we finalize Wi-Fi setup.";
Sezam/AGDoorbellWiFiSetupViewController.m:324:    self.spinnerMessageLabel.text = @"Waiting for doorbell to come online…";
Sezam/AGDoorbellWiFiSetupViewController.m:364:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:382:        AGDiaryInfo(@"DoorbellOnlineFailed", @"WACSucceeded, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:385:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:387:        UIAlertController *wiFiNetworkChangedAlertController = [UIAlertController alertControllerWithTitle:@"Check Internet Connection"
Sezam/AGDoorbellWiFiSetupViewController.m:388:                                                                                                   message:@"The final Wi-Fi steps are taking a long time to complete.\n\n As a precaution, please check that your router and outside internet connection are working properly."
Sezam/AGDoorbellWiFiSetupViewController.m:390:        [wiFiNetworkChangedAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:395:                                                                                        AGDiaryInfo(@"DoorbellOnlineFailed", @"WACFailed, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:424:    UIAlertController *remountDoorbellAlertController = [UIAlertController alertControllerWithTitle:@"Re-Mount Doorbell"
Sezam/AGDoorbellWiFiSetupViewController.m:425:                                                                                               message:@"If you took your Doorbell Cam off the wall earlier, please re-mount it to power now."
Sezam/AGDoorbellWiFiSetupViewController.m:427:    [remountDoorbellAlertController addAction:[UIAlertAction actionWithTitle:@"Ok, Doorbell Cam is connected to power" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {}]];
Sezam/AGDoorbellWiFiSetupViewController.m:436:        AGDiaryInfo(@"DoorbellOnlineSucceeded", @"WACSucceeded, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:438:        AGDiaryInfo(@"DoorbellOnlineSucceeded", @"WACFailed, Setup:%@", [self doorbellSetupString]);
Sezam/AGDoorbellWiFiSetupViewController.m:456:    self.message.text = [NSString stringWithFormat:@"Doorbell Cam has been added to %@", [AGUtility getWiFiSSID]];
Sezam/AGDoorbellWiFiSetupViewController.m:468:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToRunDiagnostics" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:470:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToSetupSuccess" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:474:        [self performSegueWithIdentifier:@"unwindToDoorbellSettingsFromWiFiSetup" sender:self];
Sezam/AGDoorbellWiFiSetupViewController.m:484:    self.titleBarLabel.text = @"Wi-Fi HELP";
Sezam/AGDoorbellWiFiSetupViewController.m:493:        self.heroImageView.image = [UIImage imageNamed:@"DoorbellSetupError"];
Sezam/AGDoorbellWiFiSetupViewController.m:495:        self.heroImageView.image = [UIImage imageNamed:@"DoorbellSetupError_d2"];
Sezam/AGDoorbellWiFiSetupViewController.m:509:        [self performSegueWithIdentifier:@"DoorbellWiFiSetupToDoorbellSetupSimpleHelp" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:511:        [self performSegueWithIdentifier:@"DoorbellWiFiSetupToDoorbellSetupHelp" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:531:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToOTA"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:536:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToRunDiagnostics"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:541:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToSetupSuccess"]) {
Sezam/VideoLogging/AGVideoCallEvent.m:16:static NSString* kAGDiaryCategory = @"VideoCallEvent";
Sezam/VideoLogging/AGVideoCallEvent.m:47:    details[@"status"] = status;
Sezam/VideoLogging/AGVideoCallEvent.m:49:        details[@"urlPath"] = videoCallEvent.urlPath;
Sezam/VideoLogging/AGVideoCallEvent.m:62:    log[@"name"] = self.name;
Sezam/VideoLogging/AGVideoCallEvent.m:63:    log[@"doorbellID"] = self.doorbell.objectId;
Sezam/VideoLogging/AGVideoCallEvent.m:64:    log[@"source"] = self.source;
Sezam/VideoLogging/AGVideoCallEvent.m:65:    log[@"platform"] = self.platform;
Sezam/VideoLogging/AGVideoCallEvent.m:66:    [log setValue:self.my_timestamp forKey:@"my_timestamp"];
Sezam/VideoLogging/AGVideoCallEvent.m:67:    log[@"callID"] = self.call_id;
Sezam/VideoLogging/AGVideoCallEvent.m:68:    log[@"manufacturer"] = self.manufacturer;
Sezam/VideoLogging/AGVideoCallEvent.m:69:    log[@"client_version"] = self.client_version;
Sezam/VideoLogging/AGVideoCallEvent.m:70:    log[@"app_version"] = self.app_version;
Sezam/VideoLogging/AGVideoCallEvent.m:71:    log[@"installToken"] = self.installToken;
Sezam/VideoLogging/AGVideoCallEvent.m:72:    log[@"event"] = self.event;
Sezam/VideoLogging/AGVideoCallEvent.m:73:    log[@"error"] = self.error;
Sezam/VideoLogging/AGVideoCallEvent.m:74:    log[@"details"] = self.details;
Sezam/VideoLogging/AGVideoCallEvent.m:75:    log[@"device_uuid"] = self.device_uuid;
Sezam/VideoLogging/AGVideoCallEvent.m:77:    if ([AGUtility checkForAppFeature:@"marslogging"]) {
Sezam/VideoLogging/AGVideoCallEvent.m:80:                //AGDiaryInfo(@"CallEventPostSuccess", @"Posted a Video Call Log to the Backend API");
Sezam/VideoLogging/AGVideoCallEvent.m:82:                //AGDiaryError(@"CallEventPostFailure", @"Unable to Post Video Call Log to Backend API, %@", error.localizedDescription);
Sezam/VideoLogging/AGVideoCallEvent.m:105:    log[@"name"] = @"doorbell_call_event";
Sezam/VideoLogging/AGVideoCallEvent.m:106:    log[@"doorbellID"] = doorbell.objectId;
Sezam/VideoLogging/AGVideoCallEvent.m:107:    log[@"source"] = @"iOS";
Sezam/VideoLogging/AGVideoCallEvent.m:108:    log[@"platform"] = @"iOS";
Sezam/VideoLogging/AGVideoCallEvent.m:109:    [log setValue:my_timestamp forKey:@"my_timestamp"];
Sezam/VideoLogging/AGVideoCallEvent.m:110:    log[@"callID"] = @"None";
Sezam/VideoLogging/AGVideoCallEvent.m:111:    log[@"manufacturer"] = @"Apple";
Sezam/VideoLogging/AGVideoCallEvent.m:112:    log[@"event"] = event;
Sezam/VideoLogging/AGVideoCallEvent.m:113:    log[@"error"] = error;
Sezam/VideoLogging/AGVideoCallEvent.m:115:    log[@"client_version"] = [[NSProcessInfo processInfo] operatingSystemVersionString];
Sezam/VideoLogging/AGVideoCallEvent.m:116:    log[@"app_version"] = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/VideoLogging/AGVideoCallEvent.m:117:    log[@"installToken"] = [AGUser getInstallToken];
Sezam/VideoLogging/AGVideoCallEvent.m:118:    log[@"device_uuid"] = [AGUtility getIdentifierForVendor];
Sezam/VideoLogging/AGVideoCallEvent.m:121:    details[@"status"] = status;
Sezam/VideoLogging/AGVideoCallEvent.m:122:    log[@"details"] = details;
Sezam/VideoLogging/AGVideoCallEvent.m:124:    if ([AGUtility checkForAppFeature:@"marslogging"]) {
Sezam/VideoLogging/AGVideoCallEvent.m:127:                //AGDiaryInfo(@"CallEventPostSuccess", @"Posted an independent Video Call Log to the Backend API");
Sezam/VideoLogging/AGVideoCallEvent.m:129:                //AGDiaryError(@"CallEventPostFailure", @"Unable to Post an independent Video Call Log to Backend API, %@", error.localizedDescription);
Sezam/AGCallToActionBannerView.m:42:    self.label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGCallToActionBannerView.m:51:    self.button.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockEditHomeLocationView.m:40:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockEditHomeLocationView.m:47:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockEditHomeLocationView.m:48:    self.titleLabel.text = @"EDIT LOCATION";
Sezam/AGAutoUnlockEditHomeLocationView.m:68:    mapDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockEditHomeLocationView.m:69:    mapDescriptionLabel.text = @"Drag the map to position the house icon on your home.";
Sezam/AGAutoUnlockEditHomeLocationView.m:78:    self.saveLocationButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockEditHomeLocationView.m:79:    [self.saveLocationButton setTitle:@"SAVE LOCATION" forState:UIControlStateNormal];
Sezam/AGRecurringDaysTableViewCell.m:29:    self.daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGRecurringDaysTableViewCell.m:76:    AGDayOfWeekCell *cell = (AGDayOfWeekCell *)[collectionView dequeueReusableCellWithReuseIdentifier:@"DayCell" forIndexPath:indexPath];
Sezam/AGSimpleGeoRegionVerifier.m:29:        self.completion(NO, nil, [NSError errorWithDomain:@"AGGeofenceVerifier" code:-2201 userInfo:@{@"AGError":@"AGGeofenceVerifierFailedToVerify"}]);
Sezam/AGDoorAjarTimingView.m:43:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGDoorAjarTimingView.m:50:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGDoorAjarTimingView.m:51:    self.titleLabel.text = @"DOOR AJAR TIMING";
Sezam/AGDoorAjarTimingView.m:58:    self.doorAjarDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGDoorAjarTimingView.m:60:    self.doorAjarDescriptionLabel.text = @"You can receive notifications when your door is left open for the specified amount of time.";
Sezam/AGDoorAjarTimingView.m:92:    self.doorAjarTimingCell.sliderDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGDoorAjarTimingView.m:93:    self.doorAjarTimingCell.titleLabel.text = @"Door Ajar Timing";
Sezam/AGBLEViewController.m:20:#define kAGDiaryCategory @"AGBLEViewController"
Sezam/AGBLEViewController.m:46:    AGDiaryDebug(@"TemplateOperationItemCreated", @"set up for lock id %@", self.templateOperation.lockID);
Sezam/AGBLEViewController.m:112:    AGDiaryDebug(@"connectToLockAndPerform", @"isAttached: %d, isConnected: %d", self.isAttached, self.isConnected);
Sezam/AGBLEViewController.m:130:        AGDiaryDebug(@"AnotherEventInProgress", @"Cannot call connectToLockAndPerform in a re-entrant manner");
Sezam/AGBLEViewController.m:136:    AGDiaryDebug(@"timeout", @"");
Sezam/AGRTCRecordedMediaStream.m:12:#define kAGDiaryCategory @"RTCMediaStream"
Sezam/AGRTCRecordedMediaStream.m:97:        [self addObserver:self forKeyPath:@"state" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGRTCRecordedMediaStream.m:140:        AGDiaryDebug(@"Reconnect", @"Reconnecting after %d seconds", kVideoStreamBackoffSeconds);
Sezam/AGRTCRecordedMediaStream.m:164:    AGDiaryDebug(@"Close", @"Metrics -> %@\n\n%@", _metricSplits, _metricsCumulative);
Sezam/AGRTCRecordedMediaStream.m:184:    return [NSString stringWithFormat:@"%ul", [self.client sessionID]];
Sezam/AGRTCRecordedMediaStream.m:189:    return @"webrtc";
Sezam/AGRTCRecordedMediaStream.m:202:    return @"None Detected :)";
Sezam/AGRTCRecordedMediaStream.m:332:    if([keyPath isEqualToString:@"state"]){
Sezam/AGRTCRecordedMediaStream.m:336:        AGDiaryDebug(@"KVO", @"Internal state now %@", [NSString stringFromVideoState:new]);
Sezam/AGRTCRecordedMediaStream.m:339:                NSAssert(old == AGVideoStreamStateUnknown, @"Unknown state transition!");
Sezam/AGRTCRecordedMediaStream.m:343:                NSAssert(old == AGVideoStreamStateUnknown || old == AGVideoStreamStateRestarting, @"Initialized twice!");
Sezam/AGRTCRecordedMediaStream.m:350:                , @"Preparing after prepared!");
Sezam/AGRTCRecordedMediaStream.m:354:                NSAssert(old == AGVideoStreamStatePreparing, @"Prepared without preparing!");
Sezam/AGRTCRecordedMediaStream.m:360:                      || old == AGVideoStreamStateError, @"Stable, but not prepared?");
Sezam/AGRTCRecordedMediaStream.m:365:                NSAssert(old == AGVideoStreamStateClosing, @"Closed without notifying of closing!");
Sezam/AGRTCRecordedMediaStream.m:372:                        || old == AGVideoStreamStatePrepared, @"Buffering without prepared!");
Sezam/AGRTCRecordedMediaStream.m:379:                NSAssert(old == AGVideoStreamStateRestarting, @"We should try until we reach our limit.");
Sezam/AGRTCRecordedMediaStream.m:391:        NSString * step = [NSString stringWithFormat:@"(%d) %@ -> %@", _stepCount++, [NSString stringFromVideoState:old],[NSString stringFromVideoState:new]];
Sezam/AGAppStoreReviewController.m:20:    NSDate *appReviewDate = (NSDate *)[[NSUserDefaults standardUserDefaults] objectForKey:@"AppReviewDate"];
Sezam/AGAppStoreReviewController.m:30:        NSString *currentReviewString = [AGAmazonReviews returnStringForReviewType:reviewType andKey:@"reviewType"];
Sezam/AGAppStoreReviewController.m:31:        NSDate *mostRecentReviewPopupDate = [[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@", currentReviewString]];
Sezam/AGAppStoreReviewController.m:46:        NSInteger numberOfSuccessfulOperations = [[NSUserDefaults standardUserDefaults] integerForKey:@"NumberOfSuccessfulOperations"];
Sezam/AGAppStoreReviewController.m:47:        NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGAppStoreReviewController.m:60:    UIAlertController *howsEverythingGoingAlertController = [UIAlertController alertControllerWithTitle:@"How’s Everything Going?"
Sezam/AGAppStoreReviewController.m:61:                                                                                                message:@"How are things going with the August Home app?"
Sezam/AGAppStoreReviewController.m:64:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"It’s Great!"
Sezam/AGAppStoreReviewController.m:68:                                                                            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Positive", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:71:                                                                            if (NSClassFromString(@"SKStoreReviewController")) {
Sezam/AGAppStoreReviewController.m:77:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"Not So Great"
Sezam/AGAppStoreReviewController.m:81:                                                                             [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Negative", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:84:                                                                             UIAlertController *sendFeedbackAlertController = [UIAlertController alertControllerWithTitle:@"Send Feedback?"
Sezam/AGAppStoreReviewController.m:85:                                                                                                                                                                  message:@"We’re sorry you’re having problems with the August Home app. Would you like to send us feedback on what we could be doing better?"
Sezam/AGAppStoreReviewController.m:87:                                                                             [sendFeedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAppStoreReviewController.m:92:                                                                                                                                               [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"ProceededToProvideEmailFeedback", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:95:                                                                                                                                               NSString *toEmail = @"feedback@august.com";
Sezam/AGAppStoreReviewController.m:96:                                                                                                                                               NSString *subject = [NSString stringWithFormat:@"In-app Feedback - August iOS app"];
Sezam/AGAppStoreReviewController.m:99:                                                                             [sendFeedbackAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppStoreReviewController.m:102:                                                                                 [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"DeclinedToProvideEmailFeedback", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:109:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"Close" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppStoreReviewController.m:110:        [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Close", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:115:    [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:@"AppReviewDate"];
Sezam/AGInviteEditViewController.m:42:static NSString* kAGDiaryCategory = @"InviteGuest";
Sezam/AGInviteEditViewController.m:44:static NSString *const kGuestAccessTypeChangedAction = @"GuestAccessTypeChangedAction";
Sezam/AGInviteEditViewController.m:93:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Code Deactivation Pending" message:NSLocalizedString(@"You must be connected to the lock to deactivate an entry code. This entry code will be deactivated the next time an owner connects to the lock", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles:nil];
Sezam/AGInviteEditViewController.m:98:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Code Deletion Pending" message:NSLocalizedString(@"The entry code will be deleted the next time an owner connects to the lock.", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles:nil];
Sezam/AGInviteEditViewController.m:152:    titleLabel.nuiClass = @"StandardLabel";
Sezam/AGInviteEditViewController.m:218:            cell = [tableView dequeueReusableCellWithIdentifier:@"ProfileCellHK"];
Sezam/AGInviteEditViewController.m:220:            cell = [tableView dequeueReusableCellWithIdentifier:@"ProfileCell"];
Sezam/AGInviteEditViewController.m:224:        if ((![self.user.firstName isEqualToString:@""] && self.user.firstName)||(![self.user.lastName isEqualToString:@""] && self.user.lastName)) {
Sezam/AGInviteEditViewController.m:232:                [cell.imageView0 setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGInviteEditViewController.m:237:            [cell.imageView0 setImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGInviteEditViewController.m:246:            if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteEditViewController.m:248:                formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteEditViewController.m:258:       UITableViewCell *cell =  [self.tableView dequeueReusableCellWithIdentifier:@"GuestEditName"];
Sezam/AGInviteEditViewController.m:295:    [self performSegueWithIdentifier:@"ToEditName" sender:self];
Sezam/AGInviteEditViewController.m:374:    if ((![[[self user]  firstName] isEqualToString:@""] && [[self user]  firstName])||(![[[self user]  lastName] isEqualToString:@""] && [[self user]  lastName])) {
Sezam/AGInviteEditViewController.m:417:    [self.titleLabel setText:NSLocalizedString(@"INVITE",nil)];
Sezam/AGInviteEditViewController.m:420:        [self.titleLabel setText:NSLocalizedString(@"MY ACCESS",nil)];
Sezam/AGInviteEditViewController.m:424:            [self.titleLabel setText:NSLocalizedString(@"GUEST ACCESS", nil)];
Sezam/AGInviteEditViewController.m:426:            [self.titleLabel setText:NSLocalizedString(@"ENTRY CODE ACCESS", nil)];
Sezam/AGInviteEditViewController.m:429:                [self.titleLabel setText:NSLocalizedString(@"ENTRY CODE INVITE", nil)];
Sezam/AGInviteEditViewController.m:430:                [self.inviteButton setTitle:@"SAVE CODE" forState:UIControlStateNormal];
Sezam/AGInviteEditViewController.m:432:                [self.titleLabel setText:NSLocalizedString(@"INVITE", nil)];
Sezam/AGInviteEditViewController.m:451:    if (!([lockUser.type.lowercaseString isEqualToString:@"limited"] || [lockUser.type.lowercaseString isEqualToString:@"user"])) {
Sezam/AGInviteEditViewController.m:458:            if ([ruleID isEqualToString:@"always"]) {
Sezam/AGInviteEditViewController.m:486:        if (([lock.type isEqualToString:@"user"]) && ([invitedUser.objectId isEqualToString: AGUser.currentUser.objectId]==false)) {
Sezam/AGInviteEditViewController.m:498:            if (([lockUser.objectId isEqualToString:currentUser.objectId] == false) && ([lockUser.type.lowercaseString isEqualToString:@"superuser"])) {
Sezam/AGInviteEditViewController.m:509:                if ([lockUser.type.lowercaseString isEqualToString:@"superuser"]) {
Sezam/AGInviteEditViewController.m:511:                } else if (([lockUser.type.lowercaseString isEqualToString:@"user"]) || ([lockUser.type.lowercaseString isEqualToString:@"limited"])){
Sezam/AGInviteEditViewController.m:524:                    userDeviceMap.userHasDoorbellAccess = [invitation.type isEqualToString:@"user"]?AGUserStatusGuest:AGUserStatusOwner;
Sezam/AGInviteEditViewController.m:812:    AGDiaryDebug(kGuestAccessTypeChangedAction, @"nextCompletionAction");
Sezam/AGInviteEditViewController.m:828:                AGHomeKitSiriInviteQuestionViewController *siriVC = [self.storyboard instantiateViewControllerWithIdentifier:@"SiriInviteQuestion"];
Sezam/AGInviteEditViewController.m:861:        messageController.body =[NSString stringWithFormat: @"You are invited to use my August Smart Lock. Your personal entry code is %@", pinSection.pinToTextUser];
Sezam/AGInviteEditViewController.m:900:    self.discardChangesAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Discard Changes?", nil) message:NSLocalizedString(@"Any changes made will be discarded if you navigate away from this page. Cancel and press Update to save any changes.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel", nil) otherButtonTitles:@"Discard", nil];
Sezam/AGInviteEditViewController.m:941:    AGDiaryDebug(kGuestAccessTypeChangedAction, @"starDate: %@, endDate: %@, generalSchedule: :%d, pickedDays: %@", startD, endD, generalSchedule, days);
Sezam/AGInviteEditViewController.m:950:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:errorMsg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGInviteEditViewController.m:990:    if ([segue.identifier isEqualToString:@"ToEditName"]) {
Sezam/AGInviteEditViewController.m:996:    if ([segue.identifier isEqualToString:@"ToAccessLevel"]) {
Sezam/AGInviteEditViewController.m:1007:    if ([segue.identifier isEqualToString:@"InviteEditToAddNumber"]) {
Sezam/AGInviteEditViewController.m:1013:    if ([segue.identifier isEqualToString:@"ToSchedule"]) {
Sezam/AGInviteEditViewController.m:1037:    if ([segue.identifier isEqualToString:@"InviteEditViewToDatePicker"]) {
Sezam/AGInviteEditViewController.m:1039:    } else if ([segue.identifier isEqualToString:@"InviteEditToUpdateStatus"]){
Sezam/AGInviteEditViewController.m:1074:            UIAlertView * alert = [[UIAlertView alloc] initWithTitle: NSLocalizedString(@"Last Owner of Device" , nil) message:NSLocalizedString(@"Please factory reset the device from the settings page to remove yourself and your guests from it.",nil)  delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil, nil];
Sezam/AGInviteEditViewController.m:1079:        self.processingAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Delete Yourself?",nil) message:NSLocalizedString(@"If you delete yourself, you will have to be invited again before you can use this lock.",nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGInviteEditViewController.m:1080:        [self.processingAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1084:        [self.processingAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Delete",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1091:        self.processingAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Delete Guest?",nil) message:NSLocalizedString(@"If you delete this guest, they will have to be invited again before they can use this lock.",nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGInviteEditViewController.m:1093:        [self.processingAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1098:        [self.processingAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Delete",nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1112:                UIAlertController *dvrCancelAlert = [UIAlertController alertControllerWithTitle:@"August Video Recording Subscription Will Be Canceled"
Sezam/AGInviteEditViewController.m:1113:                                                                                        message:@"This person is the owner of the August Video Recording subscription for this doorbell. Removing this person's access will cancel the subscription and the paying user will receive a prorated refund."
Sezam/AGInviteEditViewController.m:1116:                [dvrCancelAlert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",nil) style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1120:                [dvrCancelAlert addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"OK", nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditViewController.m:1209:                BOOL allowEditSelf = [AGUtility checkForAppFeature:@"editself"];
Sezam/AGInviteEditViewController.m:1322:    [UITableView beginAnimations:@"reload" context:nil];
Sezam/AGDebugSelectLockViewController.m:34:    static NSString *CellIdentifier = @"NEW_LOCK_CELL";
Sezam/AGSetupConstants.h:12:static NSString *const AG_NOTIFICATION_LOCK_REGISTER_CANCELD = @"ag_notification_lock_register_canceld";
Sezam/AGSetupConstants.h:13:static NSString *const AG_NOTIFICATION_LOCK_REGISTER_FINISHED = @"ag_notification_lock_register_finished";
Sezam/AGSetupConstants.h:39:static NSString *const AG_NOTIFICATION_UNITY_LOST_KEY_EXCHANGE_CANCELLED = @"ag_notification_unity_lost_key_exchange_cancelled";
Sezam/AGSetupConstants.h:40:static NSString *const AG_NOTIFICATION_UNITY_LOST_KEY_EXCHANGE_NEXT = @"AG_NOTIFICATION_UNITY_LOST_KEY_EXCHANGE_NEXT";
Sezam/AGSetupConstants.h:42:static NSString *const AG_KEY_LOST_KEY_EXCHANGE_STEP = @"ag_key_lost_key_exchange_step";
Sezam/AGUnityLostKeyViewController.m:17:#define kAGDiaryCategory @"AGUnityLostKeyViewController"
Sezam/AGUnityLostKeyViewController.m:52:    AGDiaryDebug(@"LostKeyDealloc", @"");
Sezam/AGUnityLostKeyViewController.m:57:    self.titles = @[@"MODULE SYNC ERROR LOCK", @"NEW LOCK", @"SYNC ENTRY CODES", @"", @"NEW LOCK"];
Sezam/AGUnityLostKeyViewController.m:58:    self.heroImgNames = @[@"unity_header_lock_on_door", @"unity_header_module_in_lock", @"unity_doorsense_closeup", @"unity_doorsense_closeup", @"unity_doorsense_closeup"];
Sezam/AGUnityLostKeyViewController.m:61:            @"Is the module in the same lock as before, or a different lock?",
Sezam/AGUnityLostKeyViewController.m:62:            @"Would you like to factory reset the August module for use with this lock, or use it as it is and sync your entry codes with this lock?",
Sezam/AGUnityLostKeyViewController.m:63:            @"",
Sezam/AGUnityLostKeyViewController.m:64:            @"",
Sezam/AGUnityLostKeyViewController.m:65:            @"Your August module and lock are now communicating properly.",
Sezam/AGUnityLostKeyViewController.m:68:    self.primaryBtnTitles = @[@"SAME LOCK", @"RESET THE MODULE", @"", @"", @"DONE"];
Sezam/AGUnityLostKeyViewController.m:69:    self.secondBtnTitles = @[@"DIFFERENT LOCK", @"SYNC ENTRY CODES", @"", @"", @""];
Sezam/AGUnityLostKeyViewController.m:125:    __block UIAlertController *alertVC = [AGAlertHelper alertViewWithTitle:@"Restoring Factory Settings..."
Sezam/AGUnityLostKeyViewController.m:131:            AGDiaryDebug(@"factoryResetError", @"error is :%@", errorMsg);
Sezam/AGUnityLostKeyViewController.m:132:            NSString *errorTitle = @"Factory reset failed!";
Sezam/AGUnityLostKeyViewController.m:134:            UIAlertAction *alertAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUnityLostKeyViewController.m:143:        AGDiaryDebug(@"startFactoryReset", @"Success! return to the driver");
Sezam/AGAutoUnlockReportProblemCompletedController.m:13:#define kAGDiaryCategory @"AutoUnlockReportProblem"
Sezam/AGAutoUnlockReportProblemCompletedController.m:59:        AGDiaryInfo(@"CouldNotOpenAutoUnlockKBArticle", @"");
Sezam/AGAutoUnlockReportProblemCompletedController.m:61:        AGDiaryInfo(@"OpeningAutoUnlockKBArticle", @"");
Sezam/AGSmartAlertChooseEventController.m:63:        [curEventUserIDs addObject:@"manuallock"];
Sezam/AGSmartAlertChooseEventController.m:64:        [eventDisplayItems addObject:[[AGSmartAlertChooseEventDisplayItem alloc] initWithEventIcon:[UIImage imageNamed:@"iconManualOperations"] eventDescription:@"The door is locked or unlocked manually" shouldShowChevron:NO]];
Sezam/AGSmartAlertChooseEventController.m:67:    [curEventUserIDs addObject:@"select_user"];
Sezam/AGSmartAlertChooseEventController.m:68:    [eventDisplayItems addObject:[[AGSmartAlertChooseEventDisplayItem alloc] initWithEventIcon:[UIImage imageNamed:@"activity_profile_blank_v2"] eventDescription:@"The door is locked or unlocked by a specific user" shouldShowChevron:YES]];
Sezam/AGSmartAlertChooseEventController.m:71:        [curEventUserIDs addObject:@"door_open"];
Sezam/AGSmartAlertChooseEventController.m:72:        [eventDisplayItems addObject:[[AGSmartAlertChooseEventDisplayItem alloc] initWithEventIcon:[UIImage imageNamed:@"iconDoorAjar"] eventDescription:@"The door is left ajar" shouldShowChevron:NO]];
Sezam/AGSmartAlertChooseEventController.m:76:        [curEventUserIDs addObject:@"autorelock"];
Sezam/AGSmartAlertChooseEventController.m:77:        [eventDisplayItems addObject:[[AGSmartAlertChooseEventDisplayItem alloc] initWithEventIcon:[UIImage imageNamed:@"iconAutolock"] eventDescription:@"The door is Auto-Locked" shouldShowChevron:NO]];
Sezam/AGSmartAlertChooseEventController.m:81:        [curEventUserIDs addObject:@"onetouchlock"];
Sezam/AGSmartAlertChooseEventController.m:82:        [eventDisplayItems addObject:[[AGSmartAlertChooseEventDisplayItem alloc] initWithEventIcon:[UIImage imageNamed:@"activity_keypad_lock"] eventDescription:@"The door is One-Touch Keypad locked" shouldShowChevron:NO]];
Sezam/AGSmartAlertChooseEventController.m:98:        self.view.selectedIndex = [self.eventUserIDs indexOfObject:@"select_user"];
Sezam/AGSmartAlertChooseEventController.m:112:    if ([selectedUserID isEqualToString:@"select_user"]) {
Sezam/AGRootContainerViewController.m:18:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"preferences"];
Sezam/AGRootContainerViewController.m:21:        vc = [self.storyboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGViewController.m:29:		ZoomOutSegue * zoomOutSegue = [[ZoomOutSegue alloc] initWithIdentifier:@"" source:self destination:viewController];
Sezam/AGViewController.m:57:	UIFont *myFont = [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGChooseDoorbellViewController.m:24:        [self.backButton setBackgroundImage:[UIImage imageNamed:@"hamburger_button_new"] forState:UIControlStateNormal];
Sezam/AGChooseDoorbellViewController.m:26:        [self.backButton setBackgroundImage:[UIImage imageNamed:@"left_arrow_gray"] forState:UIControlStateNormal];
Sezam/AGChooseDoorbellViewController.m:39:       [self performSegueWithIdentifier:@"chooseDoorbellToMars2Checklist" sender:sender];
Sezam/AGChooseDoorbellViewController.m:43:       [self performSegueWithIdentifier:@"chooseDoorbellToDoorbellScanSetup" sender:sender];
Sezam/AGChooseDoorbellViewController.m:66:    if ([segue.identifier isEqualToString:@"chooseDoorbellToDoorbellScanSetup"]) {
Sezam/AGChooseDoorbellViewController.m:70:    if ([segue.identifier isEqualToString:@"chooseDoorbellToMars2Checklist"]) {
Sezam/August-Prefix.pch:12:#   define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
Sezam/August-Prefix.pch:30:#define kAutoUnlock @"auto_unlock"
Sezam/August-Prefix.pch:31:#define kLockSound @"lock_sound"
Sezam/August-Prefix.pch:32:#define kVibrate @"vibrate"
Sezam/August-Prefix.pch:33:#define kAutoConnect @"auto_connect"
Sezam/August-Prefix.pch:34:#define kAutoUnlockThreshold @"auto_unlock_threshold"
Sezam/August-Prefix.pch:38:#define kOuterRadius @"outerRadius"
Sezam/August-Prefix.pch:39:#define kInnerRadius @"innerRadius"
Sezam/August-Prefix.pch:41:#define kUnlockValue @"unlock_value"
Sezam/August-Prefix.pch:42:#define kRelockValue @"relockValue"
Sezam/August-Prefix.pch:45:#define kRubberBandDuration @"rubberBandDuration"
Sezam/AGRemoteLockManager.m:15:static NSString* kAGDiaryCategory = @"RemoteLockManager";
Sezam/AGBridgeSetupSelectViewController.m:29:    NSAssert(self.setupNavController.accessoryBrowser != nil, @"Accessory browser is not yet initialized");
Sezam/AGBridgeSetupSelectViewController.m:53:    AGDiaryInfo(@"SelectClickBack", @"User clicked the 'Back' button");
Sezam/AGBridgeSetupSelectViewController.m:76:    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"bridge_table_cell"];
Sezam/AGBridgeSetupSelectViewController.m:84:        NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"August Doorbell Cam ([0-9A-Z]+)"
Sezam/AGBridgeSetupSelectViewController.m:110:    AGDiaryInfo(@"SelectedBridge", @"The user selected accessory with address %@", accessory.macAddress);
Sezam/AGHouseEditNameAndPhoto.m:17:static NSString* kAGDiaryCategory = @"HouseSettings";
Sezam/AGHouseEditNameAndPhoto.m:64:        UIAlertView *nameIsEmpty = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"No House Name", nil) message:NSLocalizedString(@"The House Name cannot be empty.", nil) delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil, nil];
Sezam/AGHouseEditNameAndPhoto.m:68:        self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Updating name...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGHouseEditNameAndPhoto.m:74:                    AGDiaryError(@"FailedUpdateHouseName", @"Could not update name for house");
Sezam/AGHouseEditNameAndPhoto.m:85:    self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Updating image...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGHouseEditNameAndPhoto.m:90:            AGDiaryError(@"FailedUploadHouseImage", @"Could not upload image for house");
Sezam/AGHouseEditNameAndPhoto.m:116:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGHouseEditNameAndPhoto.m:119:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), nil];
Sezam/AGHouseEditNameAndPhoto.m:122:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGHouseEditNameAndPhoto.m:131:    if ([buttonTitle isEqualToString:NSLocalizedString(@"Cancel",nil)]) {
Sezam/AGHouseEditNameAndPhoto.m:134:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Take Photo",nil)]) {
Sezam/AGHouseEditNameAndPhoto.m:137:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Select From Gallery",nil)]) {
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:57:            UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Setup Error" message:@"Unable to update Lock and Doorbell. Please attempt association setup again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:58:            UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:113:    AGTableViewCell *cell = [self.ownersListTable dequeueReusableCellWithIdentifier: @"OwnerCell"];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:114:    cell.label.text = [NSString stringWithFormat:@"%@ %@", owner.firstName, owner.lastName];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:116:        cell.imageView0.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:119:        [cell.imageView0 setImageWithURL:[NSURL URLWithString:owner.thumbURL] placeholderImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:136:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Cancel Lock/Doorbell Sync?" message:@"If you cancel this sync, access to your lock and doorbell will be managed separately, and there will be no lock/unlock button on your live call screen." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:137:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Continue With Sync"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:141:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Cancel Sync"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:154:    if ([self.lock.bridge.model isEqualToString:@"august-connect"]) {
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:155:        [self performSegueWithIdentifier:@"DevicePermissionsToExistingConnect" sender:nil];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:157:        [self performSegueWithIdentifier:@"DevicePermissionsToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:174:    if ([segue.identifier isEqualToString:@"DevicePermissionsToExistingConnect"]) {
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:182:    } else if ([segue.identifier isEqualToString:@"DevicePermissionsToValidation"]) {
Sezam/AGLinkConstants.h:12:static NSString *const AG_URL_SUPPORT = @"http://support.august.com";
Sezam/AGLinkConstants.h:14:static NSString *const AG_URL_BLE_CONNECTION = @"http://august.com/kb-BLE-Connection";
Sezam/AGLinkConstants.h:16:static NSString *const AG_URL_WIFI = @"http://august.com/kb-Wi-Fi";
Sezam/AGLinkConstants.h:18:static NSString *const AG_URL_IFTT_MOBILE = @"http://august.com/kb-ifttt-mobile";
Sezam/AGLinkConstants.h:20:static NSString *const AG_URL_CHIME = @"http://august.com/kb-chime-compatibility";
Sezam/AGLinkConstants.h:22:static NSString *const AG_URL_KEYPAD_SETUP = @"http://august.com/kb-keypad-setup";
Sezam/AGLinkConstants.h:24:static NSString *const AG_URL_TROUBLE_SHOOTING_KEYPAD = @"http://august.com/kb-keypad-troubleshooting";
Sezam/AGLinkConstants.h:26:static NSString *const AG_URL_TROUBLE_SHOOTING_DOORBELL_CAM = @"http://august.com/kb-doorbell-cam-troubleshooting";
Sezam/AGLinkConstants.h:28:static NSString *const AG_URL_TROUBLE_SHOOTING_LOCK = @"http://august.com/kb-smart-lock-troubleshooting";
Sezam/AGLinkConstants.h:30:static NSString *const AG_URL_TROUBLE_SHOOTING_CONNECT = @"http://august.com/kb-connect-troubleshooting";
Sezam/AGLinkConstants.h:32:static NSString *const AG_URL_CONNECT_WIFI = @"http://august.com/kb-Connect-Wi-Fi-BLE";
Sezam/AGLinkConstants.h:34:static NSString *const AG_URL_DOORBELL_LOW_POWER_MODE = @"http://august.com/kb-2533818";
Sezam/AGLinkConstants.h:36:static NSString *const AG_URL_FAQ_AVR = @"http://august.com/kb-avr-faq";
Sezam/AGLinkConstants.h:38:static NSString *const AG_URL_DOORBELL_CAM_LIGHTS = @"http://august.com/kb-doorbell-cam-lights";
Sezam/AGLinkConstants.h:40:static NSString *const AG_URL_DOORBELL_CAM_PRO_LIGHTS = @"http://august.com/kb-doorbell-cam-pro-lights";
Sezam/AGLinkConstants.h:42:static NSString *const AG_URL_AUTO_UNLOCK_IOS = @"http://august.com/kb-auto-unlock-ios";
Sezam/AGLinkConstants.h:44:static NSString *const AG_URL_ZWAVE_SECURITY = @"http://august.com/kb-zwave-plus-security";
Sezam/AGLinkConstants.h:46:static NSString *const AG_URL_SMART_ALERT = @"http://august.com/kb-smart-alerts";
Sezam/AGLinkConstants.h:48:static NSString *const AG_URL_ACTIVE_MONITORING = @"http://august.com/kb-active-monitoring";
Sezam/AGLinkConstants.h:50:static NSString *const AG_URL_CONTACT_SUPPORT = @"http://august.com/kb-contact-support";
Sezam/AGLinkConstants.h:52:static NSString *const AG_URL_AIRBNB_FAQ = @"http://august.com/kb-airbnb-faq";
Sezam/AGLinkConstants.h:54:static NSString *const AG_URL_VIDEO_RECORDING_LEARN_MORE = @"http://august.com/august-video-recording/";
Sezam/AGLinkConstants.h:55:static NSString *const AG_URL_MODULE_REGISTER = @"http://august.com/kb-module-troubleshooting";
Sezam/AGLinkConstants.h:57:static NSString *const AG_URL_UNITY_INSTRUCTION_YALE_LOCK = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/yrd256/";
Sezam/AGLinkConstants.h:59:static NSString *const AG_URL_UNITY_INSTRUCTION_UNITY_MODULE = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/md01-yale/";
Sezam/AGLinkConstants.h:61:static NSString *const AG_URL_UNITY_INSTRUCTION_UNITY_DOORSENSE = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-md01-yale/";
Sezam/AGConnectedAppDetailViewController.m:44:        if ([self.connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:45:            self.titleImageView.image = [UIImage imageNamed:@"xfinity_title"];
Sezam/AGConnectedAppDetailViewController.m:46:            self.bannerImageView.image = [UIImage imageNamed:@"xfinity_preview"];
Sezam/AGConnectedAppDetailViewController.m:47:            self.subTitleLabel1.text = @"WHAT IS XFINITY HOME?";
Sezam/AGConnectedAppDetailViewController.m:48:            self.bodyLabel1.text = @"Get 24/7 professional monitoring and look after your home, family and valuables from anywhere on any device.";
Sezam/AGConnectedAppDetailViewController.m:49:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:50:            self.bodyLabel2.text = @"Syncing your August account with XFINITY lets you operate your lock using the XFINITY Home app.";
Sezam/AGConnectedAppDetailViewController.m:51:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:52:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:53:            self.titleImageView.image = [UIImage imageNamed:@"logitech_title"];
Sezam/AGConnectedAppDetailViewController.m:54:            self.bannerImageView.image = [UIImage imageNamed:@"logitech_preview"];
Sezam/AGConnectedAppDetailViewController.m:55:            self.subTitleLabel1.text = @"WHAT IS LOGITECH HARMONY?";
Sezam/AGConnectedAppDetailViewController.m:56:            self.bodyLabel1.text = @"Logitech Harmony lets you control your home from your iOS or Android smartphone.";
Sezam/AGConnectedAppDetailViewController.m:57:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:58:            self.bodyLabel2.text = @"Syncing your August account with Harmony lets you operate your lock using the Harmony Control app.";
Sezam/AGConnectedAppDetailViewController.m:59:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:60:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"honeywell"]) {
Sezam/AGConnectedAppDetailViewController.m:61:            self.titleImageView.image = [UIImage imageNamed:@"honeywell_title"];
Sezam/AGConnectedAppDetailViewController.m:62:            self.bannerImageView.image = [UIImage imageNamed:@"honeywell_preview"];
Sezam/AGConnectedAppDetailViewController.m:63:            self.subTitleLabel1.text = @"WHAT IS HONEYWELL?";
Sezam/AGConnectedAppDetailViewController.m:64:            self.bodyLabel1.text = @"The Honeywell Total Connect 2.0 Remote Services Platform allows homeowners to control their security systems, receive alerts, view live video, locate vehicles or assets, control thermostats and lighting on iOS and Android devices.";
Sezam/AGConnectedAppDetailViewController.m:65:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:66:            self.bodyLabel2.text = @"The August Smart Lock integration will allow customers to manage their front door and home security for a single mobile app.";
Sezam/AGConnectedAppDetailViewController.m:67:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:68:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"ifttt"]) {
Sezam/AGConnectedAppDetailViewController.m:69:            self.titleImageView.image = [UIImage imageNamed:@"ifttt_title"];
Sezam/AGConnectedAppDetailViewController.m:70:            self.bannerImageView.image = [UIImage imageNamed:@"ifttt_preview"];
Sezam/AGConnectedAppDetailViewController.m:71:            self.subTitleLabel1.text = @"WHAT IS IFTTT?";
Sezam/AGConnectedAppDetailViewController.m:72:            self.bodyLabel1.text = @"IFTTT (If This, Then That) gives you creative control over the products and apps you love.";
Sezam/AGConnectedAppDetailViewController.m:73:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:74:            self.bodyLabel2.text = @"IFTTT allows people to create \"recipes\" that connect the services, devices, and apps they love and use every day. When a user locks/unlocks their August Smart Lock, the action can trigger a recipe that automates the task.";
Sezam/AGConnectedAppDetailViewController.m:75:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:76:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"alexa"]) {
Sezam/AGConnectedAppDetailViewController.m:77:            self.titleImageView.image = [UIImage imageNamed:@"alexa_title"];
Sezam/AGConnectedAppDetailViewController.m:78:            self.bannerImageView.image = [UIImage imageNamed:@"alexa_preview"];
Sezam/AGConnectedAppDetailViewController.m:79:            self.subTitleLabel1.text = @"WHAT IS AMAZON ALEXA?";
Sezam/AGConnectedAppDetailViewController.m:80:            self.bodyLabel1.text = @"Alexa is Amazon's voice assistant for Amazon Echo speaker.";
Sezam/AGConnectedAppDetailViewController.m:81:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:82:            self.bodyLabel2.text = @"August users can use Alexa to lock and unlock your August Smart Lock(s) and check the status of your August Smart Lock(s).";
Sezam/AGConnectedAppDetailViewController.m:83:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:86:        [self.actionButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGConnectedAppDetailViewController.m:91:        NSString *connectedAppName = [self.connectedAppDictionary objectForKey:@"name"];
Sezam/AGConnectedAppDetailViewController.m:92:        if ([connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:93:            self.titleImageView.image = [UIImage imageNamed:@"xfinity_title"];
Sezam/AGConnectedAppDetailViewController.m:94:            self.bannerImageView.image = [UIImage imageNamed:@"xfinity_preview"];
Sezam/AGConnectedAppDetailViewController.m:95:            self.bodyLabel1.text = @"XFINITY is synced to your August account. Manage your settings in the XFINITY Home app, or tap the button below to disconnect.";
Sezam/AGConnectedAppDetailViewController.m:97:        else if ([connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:98:            self.bannerImageView.image = [UIImage imageNamed:@"harmony_preview.jpg"];
Sezam/AGConnectedAppDetailViewController.m:99:            self.bodyLabel1.text = @"Logitech Harmony is synced to your August account. You can manage your settings in the Harmony Connect app, or tap the button below to disconnect.";
Sezam/AGConnectedAppDetailViewController.m:106:        [self.actionButton setTitle:@"DISCONNECT" forState:UIControlStateNormal];
Sezam/AGConnectedAppDetailViewController.m:138:        if ([self.connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:139:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.august.com/2015/05/05/august-announces-partnership-with-comcast/"]];
Sezam/AGConnectedAppDetailViewController.m:140:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:141:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.august.com/2014/09/17/august-integrates-with-logitech-harmony/"]];
Sezam/AGConnectedAppDetailViewController.m:142:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"ifttt"]) {
Sezam/AGConnectedAppDetailViewController.m:144:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"honeywell"]) {
Sezam/AGConnectedAppDetailViewController.m:145:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms://itunes.apple.com/us/app/total-connect-2.0/id439763870?mt=8"]];
Sezam/AGConnectedAppDetailViewController.m:146:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"alexa"]) {
Sezam/AGConnectedAppDetailViewController.m:147:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms://itunes.apple.com/us/app/amazon-alexa/id944011620?mt=8"]];
Sezam/AGConnectedAppDetailViewController.m:152:        NSString *connectedAppID = [self.connectedAppDictionary objectForKey:@"id"];
Sezam/AGConnectedAppDetailViewController.m:154:            self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGConnectedAppDetailViewController.m:160:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to disconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGConnectedAppDetailViewController.m:169:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to disconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellActivityViewController.m:27:static NSString* kAGDiaryCategory = @"DoorbellActivityLogDetail";
Sezam/AGDoorbellActivityViewController.m:114:    if ([self.logEntry.doorbellUserId isEqualToString:@"self"]) {
Sezam/AGDoorbellActivityViewController.m:119:    self.activityDetailLabelWithCTA.text = @"";                    // clear placeholder text so it doesn't appear briefly before actual text loads
Sezam/AGDoorbellActivityViewController.m:120:    self.activityDetailLabelWithOutCTA.text = @"";                    // clear placeholder text so it doesn't appear briefly before actual text loads
Sezam/AGDoorbellActivityViewController.m:127:            self.actionTitleLabel.text = @"CALL MISSED";
Sezam/AGDoorbellActivityViewController.m:130:            self.actionTitleLabel.text = @"CALL DECLINED";
Sezam/AGDoorbellActivityViewController.m:133:            self.actionTitleLabel.text = @"CALL ANSWERED";
Sezam/AGDoorbellActivityViewController.m:136:            self.actionTitleLabel.text = @"LIVE STREAM";
Sezam/AGDoorbellActivityViewController.m:139:            self.actionTitleLabel.text = @"MOTION DETECTED";
Sezam/AGDoorbellActivityViewController.m:156:                                                 AGDiaryDebug(@"ActivityLogDoorbellImage", @"Image Download Success");
Sezam/AGDoorbellActivityViewController.m:160:                                                 AGDiaryError(@"ActivityLogDoorbellImage", @"Image Download Failure");
Sezam/AGDoorbellActivityViewController.m:236:        AGDiaryDebug(@"UpdateWaitStatus", waitStatus);
Sezam/AGDoorbellActivityViewController.m:247:            [self.cancelButton setTitle:NSLocalizedString(hasCompleted?@"OK":@"Cancel",nil) forState:UIControlStateNormal];
Sezam/AGDoorbellActivityViewController.m:278:            waitStatus = @"Processing Video";
Sezam/AGDoorbellActivityViewController.m:281:            waitStatus = @"Downloading File";
Sezam/AGDoorbellActivityViewController.m:284:            waitStatus = @"Downloading Video";
Sezam/AGDoorbellActivityViewController.m:287:            waitStatus = @"Storing Video";
Sezam/AGDoorbellActivityViewController.m:290:            waitStatus = NSLocalizedString(@"Video saved to your camera roll.", nil);
Sezam/AGDoorbellActivityViewController.m:293:            waitStatus = @"Video processing failed. Please try again later.";
Sezam/AGDoorbellActivityViewController.m:307:    NSString *errorString = [[notification userInfo] valueForKey:@"Error"];
Sezam/AGDoorbellActivityViewController.m:312:    AGDiaryDebug(@"AppResigned", @"App will be minimized");
Sezam/AGDoorbellActivityViewController.m:316:    AGDiaryDebug(@"AppActive", @"App will become active");
Sezam/AGDoorbellActivityViewController.m:327:                NSString *videoURL = [dict objectForKey:@"url"];
Sezam/AGDoorbellActivityViewController.m:339:                    [self.playerItem addObserver:self forKeyPath:@"status" options:0 context:&ItemStatusContext1];   // listen for when the video is ready to play
Sezam/AGDoorbellActivityViewController.m:340:                    [self.playerItem addObserver:self forKeyPath:@"rate" options:0 context:&ItemStatusContext2];   // listen for when the video is ready to play
Sezam/AGDoorbellActivityViewController.m:349:                        NSString *uploadStateString = [dict objectForKey:@"videoUploadProgress"];
Sezam/AGDoorbellActivityViewController.m:355:                                [self updateWaitStatus:@"Your video is currently being processed.\nIt should be available soon." hasCancelButton:false hasCompleted:false];
Sezam/AGDoorbellActivityViewController.m:368:                            [self updateWaitStatus:@"An error occured and your video is not available.\nWe’re sorry for the inconvenience." hasCancelButton:false hasCompleted:true];
Sezam/AGDoorbellActivityViewController.m:371:                            [self updateWaitStatus:@"" hasCancelButton:false hasCompleted:true];
Sezam/AGDoorbellActivityViewController.m:386:            self.upgradeToPremiumExpiredVideoLabel.text = @"This video has expired.";
Sezam/AGDoorbellActivityViewController.m:402:                self.upgradeToPremiumActiveVideoLabel.text = [NSString stringWithFormat:@"This video expires in %luh %lum! Upgrade to August Premium Video Recording for a 30 day history.", hours, minutes];
Sezam/AGDoorbellActivityViewController.m:422:    if ([videoUploadString isEqualToString:@"not_started"]) {
Sezam/AGDoorbellActivityViewController.m:424:    } else if ([videoUploadString isEqualToString:@"in_progress"]) {
Sezam/AGDoorbellActivityViewController.m:426:    } else if ([videoUploadString isEqualToString:@"deleted"]) {
Sezam/AGDoorbellActivityViewController.m:428:    } else if ([videoUploadString isEqualToString:@"error"]) {
Sezam/AGDoorbellActivityViewController.m:430:    } else if ([videoUploadString isEqualToString:@"completed"]) {
Sezam/AGDoorbellActivityViewController.m:466:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ missed call from %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:469:            self.activityDetailLabelWithOutCTA.text =  [NSString stringWithFormat:@"%@ declined call from %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:472:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ answered %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:475:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ viewed live stream at %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:478:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"Motion detected at %@ at %@", doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:498:        AGDiaryDebug(@"PlayButton", @"Enabled");
Sezam/AGDoorbellActivityViewController.m:502:        AGDiaryDebug(@"PlayButton", @"Disabled");
Sezam/AGDoorbellActivityViewController.m:543:    [self.playerItem removeObserver:self forKeyPath:@"status" context:&ItemStatusContext1];
Sezam/AGDoorbellActivityViewController.m:544:    [self.playerItem removeObserver:self forKeyPath:@"rate" context:&ItemStatusContext2];
Sezam/AGDoorbellActivityViewController.m:564:        [self updateWaitStatus: @"Contacting Server" hasCancelButton:true hasCompleted:false];
Sezam/AGDoorbellActivityViewController.m:579:    UIStoryboard *subsStoryboard = [UIStoryboard storyboardWithName:@"AGSubscriptions" bundle:nil];
Sezam/AGDoorbellActivityViewController.m:580:    UIViewController *subscriptionListVC = [subsStoryboard instantiateViewControllerWithIdentifier: @"SubscriptionList"];
Sezam/AGDoorbellActivityViewController.m:589:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:[NSString stringWithFormat:@"DoorbellPowerModeAlertDoNotShow%@", self.doorbell.objectId]];
Sezam/AGDoorbellActivityViewController.m:596:    [self performSegueWithIdentifier:@"DoorbellActivityToHighPowerMode" sender:nil];
Sezam/AGDoorbellActivityViewController.m:607:    if ([segue.identifier isEqualToString:@"DoorbellActivityToHighPowerMode"]) {
Sezam/AGVideoStreamImageCapturer.m:16:#define kAGDiaryCategory @"AGVideoStreamImageCapturer"
Sezam/AGVideoStreamImageCapturer.m:45:    NSDate *creationDate = self.doorbell.doorbellImageDictionary[@"date"];
Sezam/AGVideoStreamImageCapturer.m:46:    NSString *imageURL = self.doorbell.doorbellImageDictionary[@"url"];
Sezam/AGVideoStreamImageCapturer.m:56:        NSDate *creationDate = doorbell.doorbellImageDictionary[@"date"];
Sezam/AGVideoStreamImageCapturer.m:57:        NSString *imageURL = doorbell.doorbellImageDictionary[@"url"];
Sezam/AGVideoStreamImageCapturer.m:67:    [recentImageDateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z"];
Sezam/AGVideoStreamImageCapturer.m:78:        if ([imageURL isKindOfClass:[NSString class]] && ![imageURL isEqualToString:@""]) {
Sezam/AGVideoStreamImageCapturer.m:120:    if ([[messageData objectForKey:@"status"] isEqual:@"imagecapture"]) {
Sezam/AGVideoStreamImageCapturer.m:121:        NSDictionary *dataDict = [messageData objectForKey:@"data"];
Sezam/AGVideoStreamImageCapturer.m:122:        NSDictionary *imageDict = [dataDict objectForKey:@"cloudinaryResult"];
Sezam/AGVideoStreamImageCapturer.m:123:        NSString *imageURL = [imageDict objectForKey:@"secure_url"];
Sezam/AGVideoStreamImageCapturer.m:124:        NSString *creationDate = [imageDict objectForKey:@"created_at"];
Sezam/IV-SDK/include/IVSDK/IVEventManagementFacade.h:125: *  @param cameraEventsInfo cameraEventsInfo. Ex. {@"cameraID0",{EventType0,EventType1...},@"cameraID1",{EventType1,EventType2...}}
Sezam/IV-SDK/include/IVSDK/IVEventManagementFacade.h:150: *  @param cameraEventsInfo cameraEventsInfo. Ex. {@"cameraID0",{EventType0,EventType1...},@"cameraID1",{EventType1,EventType2...}}
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:23:extern NSString *const  IVEventTypeMotion;// @"Motion"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:24:extern NSString *const  IVEventTypeAlarmIn;// @"alarmin"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:25:extern NSString *const  IVEventTypeCameraTamper;// @"Camera Tampered"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:26:extern NSString *const  IVEventTypeIntrusion;// @"Intrusion"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:27:extern NSString *const  IVEventTypeAudioAlert;// @"Audio Alert"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:28:extern NSString *const  IVEventTypeManualRecord;// @"Manual Record"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:30:extern NSString *const  IVEventTypeOffline;// @"offline"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:31:extern NSString *const  IVEventTypeOfflineAlert;// @"Offline Alert"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:32:extern NSString *const  IVEventTypeOnline;// @"online"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:33:extern NSString *const  IVEventTypeFaceEntered;// @"Face Entered"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:34:extern NSString *const  IVEventTypePIRAlarm;// @"piralarm"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:35:extern NSString *const  IVEventTypeCRThumbnail;// @"CRThumbnail"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:36:extern NSString *const  IVEventTypeFirmwareDownloaded;// @"firmwareUpgrade"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:42:extern NSString *const IVCameraConfigKeyMotionDirection;// @"MotionDirection"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:43:extern NSString *const IVCameraConfigKeySensitivity;// @"Sensitivity"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:45:extern NSString *const IVCameraConfigKeyAPI;// @"APIKey"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:47:extern NSString *const IVCameraConfigKeyPeopleMinWidth;// @"PeopleMinWidth"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:48:extern NSString *const IVCameraConfigKeyPeopleMaxWidth;// @"PeopleMaxWidth"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:49:extern NSString *const IVCameraConfigKeyPeopleMinHeight;// @"PeopleMinHeight"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:50:extern NSString *const IVCameraConfigKeyPeopleMaxHeight;// @"PeopleMaxHeight"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:52:extern NSString *const IVCameraConfigKeyIntrusionArea;// @"IntrusionArea"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:53:extern NSString *const IVCameraConfigKeyDayNightMode;// @"IMGDayNightMode"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:54:extern NSString *const IVCameraConfigKeyNoiseFilter;// @"IMGNoiseFilter"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:55:extern NSString *const IVCameraConfigKeySaturation;// @"IMGSaturation"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:56:extern NSString *const IVCameraConfigKeyBrightness;// @"IMGBrightness"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:57:extern NSString *const IVCameraConfigKeyContrast;// @"IMGContrast"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:58:extern NSString *const IVCameraConfigKeySharpness;// @"IMGSharpness"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:60:extern NSString *const IVCameraConfigKeyEnableAdaptiveBitRate;// @"EnableABR"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:61:extern NSString *const IVCameraConfigKeyPWLED;// @"PWLED"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:62:extern NSString *const IVCameraConfigKeyStream0BitrateValue;// @"Stream0BitrateValue"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:63:extern NSString *const IVCameraConfigKeyStream0Framerate;// @"Stream0Framerate"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:64:extern NSString *const IVCameraConfigKeyStream0Resolution;// @"Stream0Resolution"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:65:extern NSString *const IVCameraConfigKeyStream0Flip;// @"Stream0Flip"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:66:extern NSString *const IVCameraConfigKeyStream1BitrateValue;// @"Stream1BitrateValue"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:67:extern NSString *const IVCameraConfigKeyStream1Framerate;// @"Stream1Framerate"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:68:extern NSString *const IVCameraConfigKeyStream1Resolution;// @"Stream1Resolution"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:69:extern NSString *const IVCameraConfigKeyStream1Flip;// @"Stream1Flip"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:71:extern NSString *const IVCameraConfigKeyAudioSenstivity;// @"AudioAlertSensitivity"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:72:extern NSString *const IVCameraConfigKeyAudioAlertEnable;// @"AudioAlertEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:73:extern NSString *const IVCameraConfigKeyCameraTamperEnable;// @"CameraTamperEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:74:extern NSString *const IVCameraConfigKeyIntrusionEnable;// @"IntrusionEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:75:extern NSString *const IVCameraConfigKeyAlertOffline;// @"alertOffline"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:78:extern NSString *const IVCameraConfigKeyDMSURL;// @"DMSURL"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:79:extern NSString *const IVCameraConfigKeyVCSURL;// @"VCSURL"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:80:extern NSString *const IVCameraConfigKeyNTPURL;// @"NTPURL"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:82:extern NSString *const IVCameraConfigKeyP2PURL;// @"P2PURL"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:83:extern NSString *const IVCameraConfigKeyP2PPORT;// @"P2PPort"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:84:extern NSString *const IVCameraConfigKeyP2PUSERNAME;// @"P2PUsername"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:85:extern NSString *const IVCameraConfigKeyP2PPASSWORD;// @"P2PPassword"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:87:extern NSString *const IVCameraConfigKeyMotionDetectorEnable;// @"MotionDetectorEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:88:extern NSString *const IVCameraConfigKeyAlarmInEnable;// @"AlarmInEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:89:extern NSString *const IVCameraConfigKeyFaceDetectorEnable;// @"FaceDetectorEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:90:extern NSString *const IVCameraConfigKeyPIREnable;// @"PIREnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:91:extern NSString *const IVCameraConfigKeyEventDelay;// @"EventDelay"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:94:extern NSString *const IVCameraConfigKeyMICEnable;// @"MICEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:95:extern NSString *const IVCameraConfigKeySPKREnable;// @"SPKREnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:96:extern NSString *const IVCameraConfigKeyMICVolume;// @"MICvolume"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:97:extern NSString *const IVCameraConfigKeySPKRVolume;// @"SPKRvolume"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:98:extern NSString *const IVCameraConfigKeyType;// @"cameraType"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:99:extern NSString *const IVCameraConfigKeyARMEnable;// @"MARMEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:100:extern NSString *const IVCameraConfigKeyTimezone;// @"Timezone"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:101:extern NSString *const IVCameraConfigKeyDSTEnable;// @"DSTEnable"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:102:extern NSString *const IVCameraConfigKeyDSTStartTime;// @"DSTStartTime"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:103:extern NSString *const IVCameraConfigKeyDSTEndTime;// @"DSTEndTime"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:107:extern NSString *const IVCameraConfigKeyMetaDataCameraName;// @"cameraName"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:108:extern NSString *const IVCameraConfigKeyMetaDataCameraType;// @"cameraType"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:109:extern NSString *const IVCameraConfigKeyMetaDataFirmwareVersion;// @"firmwareVersion"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:110:extern NSString *const IVCameraConfigKeyMetaManufacturer;// @"manufacturer"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:111:extern NSString *const IVCameraConfigKeyMetaModel;// @"model"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:112:extern NSString *const IVCameraConfigKeyMetaIPAddr;// @"ipAddr"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:113:extern NSString *const IVCameraConfigKeyMetaMacAddr;// @"macAddr"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:114:extern NSString *const IVCameraConfigKeyMetaSSID;// @"ssid"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:115:extern NSString *const IVCameraConfigKeyMetaConnectionType;// @"connectionType"
Sezam/IV-SDK/include/IVSDK/IVConfigKeys.h:116:extern NSString *const IVCameraConfigKeyMetaEmail;// @"customerEmail"
Sezam/AGKeypadOTAManager.m:18:#define kAGDiaryCategory @"KeypadOTA"
Sezam/AGKeypadOTAManager.m:47:#define kOTAServiceString        @"363e879a-0580-f799-2e44-4cd42dbc6aa8"
Sezam/AGKeypadOTAManager.m:55:#define kAGKeypadOTAInfoService        @"180A"
Sezam/AGKeypadOTAManager.m:56:#define kAGKeypadOTAInfoCharacteristic  @"2A26"
Sezam/AGKeypadOTAManager.m:154:        AGDiaryInfo(@"SearchingOTA", @"Scanning for keypad for OTA");
Sezam/AGKeypadOTAManager.m:157:            AGDiaryInfo(@"SearchingOTA", @"Scanning for keypad for OTA");
Sezam/AGKeypadOTAManager.m:171:    NSAssert(self.desiredKeypadUUID!=nil, @"Keypad UUID not defined");
Sezam/AGKeypadOTAManager.m:208:    AGDiaryInfo(@"Shutdown", @"Shutting down keypad communication");
Sezam/AGKeypadOTAManager.m:250:    AGDiaryInfo(@"ConnectedPeripheral", @"CONNECTED:  peripheral: %@", peripheral);
Sezam/AGKeypadOTAManager.m:251:    AGDiaryInfo(@"DiscoveringServices", @"Discovering services");
Sezam/AGKeypadOTAManager.m:270:    AGDiaryInfo(@"DisconnectedPeripheral", @"DISCONNECTED: %@, peripheral: %@", error.description, peripheral);
Sezam/AGKeypadOTAManager.m:275:        AGDiaryInfo(@"DisconnectedWhileIdle", @"Disconnected in non relevant status %d", [self getStatus]);
Sezam/AGKeypadOTAManager.m:279:        AGDiaryInfo(@"DisconnectedDuringReboot", @"Disconnected while waiting for device to reboot.");
Sezam/AGKeypadOTAManager.m:284:        AGDiaryInfo(@"DisconnectedDuringOTA", @"Disconnected while a OTA verify step is happening");
Sezam/AGKeypadOTAManager.m:292:             AGDiaryInfo(@"FailButRetry", @"We got a disconnect. Retry the whole OTA");
Sezam/AGKeypadOTAManager.m:297:             AGDiaryInfo(@"FailNoRetry", @"Too many disconnections. Give up.");
Sezam/AGKeypadOTAManager.m:304:    AGDiaryInfo(@"FailedToConnect", @"didFailToConnectPeripheral %@", error.description);
Sezam/AGKeypadOTAManager.m:310:    AGDiaryInfo(@"RetrieveConnectedPeripherals", @"didRetrieveConnectedPeripherals");
Sezam/AGKeypadOTAManager.m:324:            AGDiaryInfo(@"CentralManagerStateUnknown", @"centralManagerDidUpdateState:  CBCentralManagerStateUnknown. Disconnecting connection of discovered locks.");
Sezam/AGKeypadOTAManager.m:328:            AGDiaryInfo(@"CentralManagerStateResetting", @"centralManagerDidUpdateState:  CBCentralManagerStateResetting");
Sezam/AGKeypadOTAManager.m:333:            AGDiaryInfo(@"CentralManagerStateUnsupported", @"centralManagerDidUpdateState:  CBCentralManagerStateUnsupported");
Sezam/AGKeypadOTAManager.m:337:            AGDiaryInfo(@"CentralManagerStateUnauthorized", @"centralManagerDidUpdateState:  CBCentralManagerStateUnauthorized");
Sezam/AGKeypadOTAManager.m:341:            AGDiaryInfo(@"CentralManagerStatePoweredOff", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOff");
Sezam/AGKeypadOTAManager.m:346:            AGDiaryInfo(@"CentralManagerStatePoweredOn", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOn");
Sezam/AGKeypadOTAManager.m:366:        AGDiaryError(@"MissingLockNameError", @"Missing peripheral name or UUID");
Sezam/AGKeypadOTAManager.m:374:    AGDiaryInfo(@"FoundPeripheral",@"%@ %@", peripheral.name, advertisedName, [peripheral description]);
Sezam/AGKeypadOTAManager.m:378:    NSArray *nameTokens = [advertisedName componentsSeparatedByString:@" "];
Sezam/AGKeypadOTAManager.m:379:    if (([nameTokens count] > 1) &&  [[nameTokens objectAtIndex:0] isEqualToString:@"August"]) {
Sezam/AGKeypadOTAManager.m:388:        AGDiaryInfo(@"FoundPeripheral", self.keypadSerial);
Sezam/AGKeypadOTAManager.m:389:        AGDiaryInfo(@"FoundPeripheral",@"%@", peripheral);
Sezam/AGKeypadOTAManager.m:409:        AGDiaryDebug(@"UpdateValueForCharacteristic", @"peripheral:%@ didUpdateValueForCharacteristic:%@ error:%@", peripheral, characteristic, error);
Sezam/AGKeypadOTAManager.m:412:            AGDiaryError(@"UpdateValueForCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
Sezam/AGKeypadOTAManager.m:421:            AGDiaryInfo(@"GotNewVersion", @"Got keypad version %@. Was updating to %@", self.agLock.associatedKeypad.currentFirmwareVersion, self.agLock.associatedKeypad.futureFirmwareVersion);
Sezam/AGKeypadOTAManager.m:424:                AGDiaryError(@"MismatchedVersions", @"The verified firmware version is not what we expected to OTA to.");
Sezam/AGKeypadOTAManager.m:436:            AGDiaryDebug(@"DataChar", @"Data characteristic");
Sezam/AGKeypadOTAManager.m:440:                AGDiaryDebug(@"DataChar", @"Command characteristic");
Sezam/AGKeypadOTAManager.m:443:            AGDiaryDebug(@"BadChar", @"Unexpected characteristic");
Sezam/AGKeypadOTAManager.m:447:            AGDiaryDebug(@"DataToData", @"Getting data response from data write");
Sezam/AGKeypadOTAManager.m:451:                AGDiaryDebug(@"CommandToCommand", @"Getting command response command data write");
Sezam/AGKeypadOTAManager.m:454:                AGDiaryWarn(@"UnexpectedCharUpdate", @"Unexpected characteristic update");
Sezam/AGKeypadOTAManager.m:473:            AGDiaryInfo(@"UpdateFinished",@"Finished with OTA. Now we will verify OTA information in ten seconds");
Sezam/AGKeypadOTAManager.m:477:                AGDiaryInfo(@"WokeUp", @"Will initiate checking of service version");
Sezam/AGKeypadOTAManager.m:500:    AGDiaryInfo(@"DidDiscoverServices", @"DidDiscoverServices");
Sezam/AGKeypadOTAManager.m:504:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
Sezam/AGKeypadOTAManager.m:505:        AGDiaryError(@"ErrorDiscoveringKeypadServices", errorMsg);
Sezam/AGKeypadOTAManager.m:512:        AGDiaryInfo(@"AugustLockServiceFound", @"August Keypad service found, UUID: %@", aService.UUID);
Sezam/AGKeypadOTAManager.m:519:                AGDiaryInfo(@"StartDiscoverCharacteristicsVerifyOTA", @"Starting to discover Bluetooth LE Characteristics for the Keypad Firmware info service");
Sezam/AGKeypadOTAManager.m:529:            AGDiaryInfo(@"StartDiscoverCharacteristicsOTA", @"Starting to discover Bluetooth Characteristics for the Keypad OTA Service");
Sezam/AGKeypadOTAManager.m:539:    AGDiaryInfo(@"DicoveredCharacteristic", @"Found characteristic %@", service);
Sezam/AGKeypadOTAManager.m:543:        AGDiaryInfo(@"DicoveredOTAInfoCharacteristic1", @"Found OTA Info characteristic");
Sezam/AGKeypadOTAManager.m:549:                AGDiaryInfo(@"DiscoveredOTAInfoCharacteristic2", @"Found OTA Info characteristic %@", aChar);
Sezam/AGKeypadOTAManager.m:560:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
Sezam/AGKeypadOTAManager.m:561:            AGDiaryError(@"ErrorDiscoveringCharacteristics", errorMsg);
Sezam/AGKeypadOTAManager.m:571:                AGDiaryInfo(@"FoundCharacteristic", @"Found data characteristic");
Sezam/AGKeypadOTAManager.m:578:                AGDiaryInfo(@"FoundCharacteristic", @"Found command characteristic");
Sezam/AGKeypadOTAManager.m:584:            AGDiaryInfo(@"FinishedDiscoverCharacteristics", @"Finished discovering characteristics");
Sezam/AGKeypadOTAManager.m:604:    AGDiaryInfo(@"ChangedOTASTatus", @"OTA status changed to %d", (int) status);
Sezam/AGKeypadOTAManager.m:611:    AGDiaryDebug(@"DidUpdateNotificationStateForCharacteristic", @"peripheral:%@ didUpdateNotificationStateForCharacteristic:%@ error:%@ (%d)", peripheral, characteristic, error.description);
Sezam/AGKeypadOTAManager.m:624:    AGDiaryDebug(@"WriteData", @"Writing data %@ to data characteristic", [data description]);
Sezam/AGKeypadOTAManager.m:630:    AGDiaryDebug(@"WriteData", @"Writing data %@ to command charactaristic", [data description]);
Sezam/AGKeypadOTAManager.m:641:        AGDiaryError(@"OTAENotData", @"No data for keypad ota");
Sezam/AGKeypadOTAManager.m:647:    AGDiaryInfo(@"StartOTA", @"Starting OTA");
Sezam/AGAutoUnlockDetector.m:51:        NSString *varName = [rule objectForKey:@"val"];
Sezam/AGAutoUnlockDetector.m:60:        NSNumber *min = [rule objectForKey:@"min"];
Sezam/AGAutoUnlockDetector.m:61:        NSNumber *max = [rule objectForKey:@"max"];
Sezam/AGAutoUnlockDetector.m:93:        NSNumber *p  = (NSNumber *)[entry objectForKey:@"p"];
Sezam/AGAutoUnlockDetector.m:94:        NSArray *orArray = [entry objectForKey:@"or"];
Sezam/AGAutoUnlockDetector.m:95:        NSArray *andArray = [entry objectForKey:@"and"];
Sezam/AGAutoUnlockDetector.m:142:                        @{@"isspam":@TRUE,@"label":@"no-motion-data", @"time":@1440412959.616937, @"wifionexit":@0, @"hour24exit":@6.05, @"hour24enter":@5.7,  @"outsideseconds": @1238.627
Sezam/AGAutoUnlockDetector.m:144:                        @{@"isspam":@TRUE,@"label":@"no-motion-data-2", @"time":@1440417460.184488 , @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:145:                        @{@"isspam":@TRUE,@"label":@"min-motion-data", @"time":@1440417460.184488 , @"walkseconds":@0, @"othertransseconds":@0, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:146:                        @{@"isspam":@TRUE,@"label":@"min-motion-data", @"time":@1440417460.184488 , @"walkseconds":@45.0, @"othertransseconds":@10.2, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:147:                        @{@"isspam":@FALSE,@"label":@"mucho-motion", @"time":@1440417460.184488 , @"walkseconds":@0.0, @"othertransseconds":@2497.2, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:148:                        @{@"isspam":@TRUE,@"label":@"tiny-motion", @"time":@1440417460.184488 , @"walkseconds":@261.0, @"othertransseconds":@2.5, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:156:                        @{@"isspam":@TRUE, @"label":@"HELIOS-3760", @"exitdiff":@300.0, @"hour24exit":@11.5, @"outsideseconds": @900.0, @"wifionexit":@1},
Sezam/AGAutoUnlockDetector.m:158:                           @{@"isspam":@TRUE,@"label":@"HELIOS-3760", @"exitdiff":@0.3, @"hour24exit":@0.1,  @"outsideseconds": @900.0, @"wifionexit":@1
Sezam/AGAutoUnlockDetector.m:160:                           @{@"isspam":@TRUE,@"label":@"HELIOS-3505", @"exitdiff":@0.3, @"hour24exit":@16.0,  @"outsideseconds": @900.0
Sezam/AGAutoUnlockDetector.m:162:                           @{@"isspam":@FALSE,@"label":@"DowHome", @"exitdiff":@300.0, @"hour24exit":@16.0,  @"outsideseconds": @9000.0
Sezam/AGAutoUnlockDetector.m:164:                           @{@"isspam":@FALSE,@"label":@"ShortExit", @"exitdiff":@1.0, @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:166:                           @{@"isspam":@FALSE,@"label":@"ShortExitFail", @"exitdiff":@0.1, @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:168:                           @{@"isspam":@TRUE,@"label":@"ShortFailMidnight", @"exitdiff":@0.1, @"hour24exit":@1.0, @"hour24enter":@1.1, @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:170:                          @{@"isspam":@FALSE,@"label":@"AMWalk", @"hour24exit":@5.9, @"hour24enter":@6.1, @"outsideseconds": @(18*60)
Sezam/AGAutoUnlockDetector.m:172:                          @{@"isspam":@FALSE,@"label":@"AMRun", @"exitdiff":@0.1, @"hour24exit":@5.5, @"hour24enter":@5.9, @"outsideseconds": @2000, @"othertransseconds":@300.0
Sezam/AGAutoUnlockDetector.m:174:                            @{@"isspam":@FALSE,@"label":@"ShortWalk", @"exitdiff":@0.1, @"hour24exit":@1.0,  @"outsideseconds": @300.0, @"walkseconds":@300
Sezam/AGAutoUnlockDetector.m:176:                           @{@"isspam":@FALSE, @"label":@"MissingOrBigFence", @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:178:                        @{@"isspam":@FALSE,@"label":@"SidLunchApril17", @"hour24exit":@11.0,  @"outsideseconds": @3487.0  // Sid going to lunch. Crossed only 100m geofence.
Sezam/AGAutoUnlockDetector.m:180:                        @{@"isspam":@TRUE,@"label":@"JasonAM",  @"hour24exit":@6.5,  @"outsideseconds": @80 // one fence
Sezam/AGAutoUnlockDetector.m:182:                        @{@"isspam":@TRUE,@"label":@"JasonPM", @"exitdiff":@0.25, @"hour24exit":@17.21,  @"outsideseconds": @10 // one fence
Sezam/AGAutoUnlockDetector.m:184:                        @{@"isspam":@FALSE,@"label":@"5AMToWorkDude_HELIOS-5378", @"wifionexit":@0, @"exitdiff":@26.00498, @"hour24exit":@4.55, @"hour24enter":@13.85,  @"outsideseconds": @33516.08
Sezam/AGAutoUnlockDetector.m:186:                        @{@"isspam":@FALSE,@"label":@"wifi_on_exit_but_gone_for_atleast_four_hours", @"wifionexit":@1, @"exitdiff":@30.0, @"hour24exit":@8.0, @"hour24enter":@16.0,  @"outsideseconds": @28800
Sezam/AGAutoUnlockDetector.m:203:        if (spamResult == [[test objectForKey:@"isspam"] boolValue]) {
Sezam/AGAutoUnlockDetector.m:204:            AGDiaryInfo(@"PassedTest", @"Passed test [%@] %@", [test objectForKey:@"label"], spamResult?@"SPAM":@"NOTSPAM");
Sezam/AGAutoUnlockDetector.m:209:            AGDiaryInfo(@"FailedTest", @"Failed test [%@] returned %@", [test objectForKey:@"label"], spamResult?@"SPAM":@"NOTSPAM");
Sezam/AGAutoUnlockDetector.m:214:    AGDiaryInfo(@"TestSummary", @"************Final results %d successes and %d failures*********", [successes count], [failures count]);
Sezam/AGAutoUnlockDetector.m:216:        AGDiaryInfo(@"FailedTest", @"Failed test [%@]", [test objectForKey:@"label"]);
Sezam/AGAutoUnlockDetector.m:229:    AGDiaryInfo(@"TestResults", @"testProbablilityComparison %f %f %f %f %f %f %f", shouldTriggerSkipAutounlock, always, never,  halfSimple, noneAndMuch, manyUnlikely, manyUnlikelyAndOneNever);
Sezam/AGAutoUnlockDetector.m:234:    NSArray *probabilities = [self.storedLockPrefs objectForKey:@"probabilities"];
Sezam/AGAutoUnlockDetector.m:235:    NSDictionary *thresholds = [self.storedLockPrefs objectForKey:@"thresholds"];
Sezam/AGAutoUnlockDetector.m:238:        AGDiaryWarn(@"MissingProbabilities", @"No data for probability calculation");
Sezam/AGAutoUnlockDetector.m:246:    AGDiaryInfo(@"Detecting",@"Dectecting %d thresholds and %d probabilities", [thresholds count], [probabilities count]);
Sezam/AGAutoUnlockDetector.m:249:    AGDiaryInfo(@"DetectResultParams", [params description]);
Sezam/AGAutoUnlockDetector.m:252:    AGDiaryInfo(@"DetectResult", @"%f", totalProbability);
Sezam/AGComprehensiveGeoRegionExitDetector.m:21:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGComprehensiveGeoRegionExitDetector.m:115:    AGDiaryInfo(@"GeofenceExit", @"region: %@", region.identifier);
Sezam/AGComprehensiveGeoRegionExitDetector.m:142:                AGDiaryInfo(@"GeofenceExitVerified", @"region: %@", region.identifier);
Sezam/AGComprehensiveGeoRegionExitDetector.m:150:                AGDiaryInfo(@"GeofenceExitFailedToVerify", @"region: %@", region.identifier);
Sezam/AGComprehensiveGeoRegionExitDetector.m:217:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-inner", self.region.identifier];
Sezam/AGComprehensiveGeoRegionExitDetector.m:221:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-middle", self.region.identifier];
Sezam/AGComprehensiveGeoRegionExitDetector.m:225:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-outer", self.region.identifier];
Sezam/AGConnectToZWaveViewController.m:14:static NSString* kAGDiaryCategory = @"ZWaveConnect";
Sezam/AGConnectToZWaveViewController.m:83:            AGDiaryDebug(@"SetInactivity", @"Set inactivity timeout to %@", inactivityTimeoutValue);
Sezam/AGConnectToZWaveViewController.m:85:            AGDiaryDebug(@"SetInactivity", @"Error setting inactivity timeout to %@", inactivityTimeoutValue);
Sezam/AGConnectToZWaveViewController.m:120:    AGDiaryDebug(@"AppResigned", @"App will be minimized");
Sezam/AGConnectToZWaveViewController.m:130:    AGDiaryDebug(@"AppActive", @"App reactivated");
Sezam/AGConnectToZWaveViewController.m:158:            [self.primaryButton setTitle:@"ADD TO A Z-WAVE NETWORK" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:164:            [self.primaryButton setTitle:@"UPDATE FIRMWARE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:173:            [self.primaryButton setTitle:@"MY HUB IS IN INCLUSION MODE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:183:            [self.primaryButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:208:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:209:                AGDiaryWarn(@"DisablingZWave", @"Error Disabling ZWave");
Sezam/AGConnectToZWaveViewController.m:264:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:265:                AGDiaryWarn(@"EnablingZWave", @"Error enabling ZWave");
Sezam/AGConnectToZWaveViewController.m:289:                        if ([zWaveVersion isEqualToString:@"0.30.0"]) {
Sezam/AGConnectToZWaveViewController.m:292:                        NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@", armGitHash, zWaveVersion,bleLock.bleFirmwareVersion];
Sezam/AGConnectToZWaveViewController.m:311:            NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGConnectToZWaveViewController.m:314:                    NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGConnectToZWaveViewController.m:315:                    if ([newChip isEqualToString:@"sd"]) {
Sezam/AGConnectToZWaveViewController.m:317:                        self.otaVersionRequired = [updateInfoDict objectForKey:@"version"];
Sezam/AGConnectToZWaveViewController.m:336:    [self.lock getFirmwareVersion:self.otaVersionRequired chip:@"sd" block:^(BOOL succeeded, NSError *error) {
Sezam/AGConnectToZWaveViewController.m:339:            [bleLock doOTAUpdate:self.lock.firmwareData chip:@"sd"];
Sezam/AGConnectToZWaveViewController.m:394:    NSString *progressValueString = [NSString stringWithFormat:@"%i", progressInt];
Sezam/AGConnectToZWaveViewController.m:396:        self.otaProgressLabel.text = [NSString stringWithFormat:@"Firmware Download Progress %@%%", progressValueString];
Sezam/AGConnectToZWaveViewController.m:405:        self.otaProgressLabel.text = @"Firmware Installation In Progress";
Sezam/AGConnectToZWaveViewController.m:429:        if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:430:            AGDiaryWarn(@"EnablingZWave", @"Error Resetting ZWave for Required Reset");
Sezam/AGConnectToZWaveViewController.m:449:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:450:                AGDiaryWarn(@"EnablingZWave", @"Error putting ZWave into Learn Mode for Inclusion");
Sezam/AGConnectToZWaveViewController.m:467:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"ZWave Error" message:@"Unable to Enable ZWave. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGConnectToZWaveViewController.m:468:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGConnectToZWaveViewController.m:482:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:484:                    AGDiaryWarn(@"ZWaveStatusTimerError", @"OTAinProgressError");
Sezam/AGConnectToZWaveViewController.m:486:                    AGDiaryWarn(@"ZWaveStatusTimerError", @"AttemptingZWaveInclusionError");
Sezam/AGConnectToZWaveViewController.m:492:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGConnectToZWaveViewController.m:493:                    self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGConnectToZWaveViewController.m:498:                            AGDiaryWarn(@"ZWaveStatusTimerError", @"OTAinProgressTimeOut");
Sezam/AGConnectToZWaveViewController.m:505:                            AGDiaryWarn(@"ZWaveStatusTimerError", @"AttemptingZWaveInclusionErrorTimeOut");
Sezam/AGConnectToZWaveViewController.m:530:        UIAlertController *zwaveSecurityAlert = [UIAlertController alertControllerWithTitle:@"Security Alert" message:@"You are connected to a Z-Wave hub that is using the S0 security protocol. August Smart Lock Pro supports the newer S2 protocol, which we recommend for the highest security." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGConnectToZWaveViewController.m:531:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGConnectToZWaveViewController.m:533:        UIAlertAction *learnMoreAction = [UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
Sezam/AGLockNameViewController.m:40:        self.lockNameTextField.text = @"";
Sezam/AGHomeKitBaseViewController.m:21:static NSString* kAGDiaryCategory = @"AGHomeKit";
Sezam/AGHomeKitBaseViewController.m:33:                item1.label = @"DisableHomeKit";
Sezam/AGHomeKitBaseViewController.m:36:                item2.label = @"BLEInactivityTimeout";
Sezam/AGHomeKitBaseViewController.m:80:        UIViewController *createHouse = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateHouse"];
Sezam/AGHomeKitBaseViewController.m:83:        UIViewController *pick = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickHouse"];
Sezam/AGHomeKitBaseViewController.m:102:        UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHomeKitBaseViewController.m:103:        AGLockSetupSuccessViewController *lockSetupSuccessViewController = (AGLockSetupSuccessViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"LockSetupSuccessViewController"];
Sezam/AGHomeKitBaseViewController.m:127:        block(nil, [NSError errorWithDomain:@"HomeKitKey" code:-1 userInfo:nil]);
Sezam/AGHomeKitBaseViewController.m:147:                AGDiaryDebug(@"UpdatedServiceName", @"updated service name %@ %@", nameToSet, [error localizedDescription]);
Sezam/AGHomeKitBaseViewController.m:179:    AGDiaryDebug(@"AuthBlobStartSearch", @"Will find services and chars. Reachable:%@", [self navController].lockAccessory.isReachable?@"YES":@"NO");
Sezam/AGHomeKitBaseViewController.m:189:            block(false, @"HomeKit lock service not found.");
Sezam/AGHomeKitBaseViewController.m:197:        AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGHomeKitBaseViewController.m:200:            AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeTargetLockMechanismState);
Sezam/AGHomeKitBaseViewController.m:202:                AGDiaryDebug(@"FoundDoorStateChar", @"setting auth blob");
Sezam/AGHomeKitBaseViewController.m:210:                        AGDiaryInfo(@"SetAuthBlob", @"Auth blob set");
Sezam/AGHomeKitBaseViewController.m:212:                        AGDiaryInfo(@"SetAuthBlob", @"Error setting auth blob. %@", [error description]);
Sezam/AGHomeKitBaseViewController.m:213:                        block(false, @"Failed to set HomeKit Authorization.");
Sezam/AGHomeKitBaseViewController.m:223:        block(false, @"HomeKit lock service not found.");
Sezam/AGBridgeSetupNavController.h:94:#define AG_DIARY_CATEGORY_BRIDGE_SETUP    @"VenusSetup"
Sezam/AGVideoStreamAudio.m:17:NSString *const kAGVideoStreamMicrophoneAccessDenied = @"AGVideoStreamMicrophoneAccessDenied";
Sezam/AGVideoStreamAudio.m:44:        [self.eventLogger logCallEvent:@"User" status:@"mute_inbound_audio" error:nil];
Sezam/AGVideoStreamAudio.m:47:        [self.eventLogger logCallEvent:@"User" status:@"unmute_inbound_audio" error:nil];
Sezam/AGVideoStreamAudio.m:74:                [self.eventLogger logCallEvent:@"User" status:@"unmute_outbound_audio" error:nil];
Sezam/AGVideoStreamAudio.m:79:                    block([NSError errorWithDomain:@"AGVideoStream" code:-1313 userInfo:@{@"AGError":kAGVideoStreamMicrophoneAccessDenied}]);
Sezam/AGVideoStreamAudio.m:92:        [self.eventLogger logCallEvent:@"User" status:@"mute_outbound_audio" error:nil];
Sezam/AGBluetoothLockController.m:23:static NSString* kAGDiaryCategory = @"Bluetooth";
Sezam/AGBluetoothLockController.m:117:            AGDiaryDebug(@"SkippLockPullOnManualOperation", @"Not pulling logs while internet is unreachable");
Sezam/AGBluetoothLockController.m:120:        NSDictionary *lockStatusDictionary = @{@"status":@"locked"};
Sezam/AGBluetoothLockController.m:131:              AGDiaryDebug(@"SkippLockPullOnManualOperation", @"Not pulling logs while internet is unreachable");
Sezam/AGBluetoothLockController.m:134:          NSDictionary *lockStatusDictionary = @{@"status":@"unlocked"};
Sezam/AGBluetoothLockController.m:142:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Locked"};
Sezam/AGBluetoothLockController.m:148:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Unlocked"};
Sezam/AGBluetoothLockController.m:155:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Unknown"};
Sezam/AGBluetoothLockController.m:185:                    AGDiaryDebug(@"DoorStateUpdateToServer", @"Succeeded");
Sezam/AGBluetoothLockController.m:187:                    AGDiaryDebug(@"DoorStateUpdateToServer", @"Failed");
Sezam/AGBluetoothLockController.m:195:    if ([message isEqualToString:@"LOCK IN USE"]) {
Sezam/AGBluetoothLockController.m:217:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:224:        NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:235:        NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:247:            AGDiaryDebug(@"SkippLockPullOnManualOperation", @"Not pulling logs while internet is unreachable");
Sezam/AGBluetoothLockController.m:264:    NSDictionary *errorDictionary = @{@"lockId":self.agLock.objectId,@"errorDetails":error};
Sezam/AGBluetoothLockController.m:275:    if ([error.domain isEqualToString:@"AGCoreBluetooth"]) {
Sezam/AGBluetoothLockController.m:291:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGBluetoothLockController.m:293:        NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
Sezam/AGBluetoothLockController.m:294:        if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
Sezam/AGBluetoothLockController.m:297:            errorStr = [NSString stringWithFormat:NSLocalizedString(@"Not authorized to use this lock.\ncode: %ld",nil), (long)error.code];
Sezam/AGBluetoothLockController.m:299:        AGDiaryInfo(@"LockSecurityError", @"Lock Security error '%@'", errorStr);
Sezam/AGBluetoothLockController.m:314:        AGDiaryError(@"NoLock", @"Entering bluetooth mode with no lock set");
Sezam/AGBluetoothLockController.m:318:    AGDiaryInfo(@"EnterBluetoothMode", @"BluetoothLockController - Entering Bluetooth Mode");
Sezam/AGBluetoothLockController.m:383:        AGDiaryWarn(@"InvalidState", @"Dial tapped while we don't know lock state");
Sezam/AGBluetoothLockController.m:398:            AGDiaryWarn(@"OpInProgress", @"Can't tap dial with lock operation in progress.");
Sezam/AGBluetoothLockController.m:445:                         AGDiaryInfo(@"sendEmergencyUnlock", @"sent");
Sezam/AGBluetoothLockController.m:448:                            AGDiaryInfo(@"sendEmergencyUnlock", @"finish");
Sezam/AGBluetoothLockController.m:450:                                [AGLock putLockUsage:self.agLock.objectId action:@"unlock" mechanical:@"success" crypto:@"success" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGBluetoothLockController.m:467:    AGDiaryInfo(@"ManualOpen", @"BluetoothLockControler will send 'Unlock' command to lock");
Sezam/AGBluetoothLockController.m:472:        AGAnalyticsDiary(AGDiaryLevel_Info, AG_DIARY_CATEGORY_AUTO_UNLOCK, @"ManualOpenWhileAutoUnlockOn", @"LockID %@ %@", (autoUnlockState == AGAutoUnlockOnOutsideFence)?@"OutsideFence":@"NotOutsideFence", self.agLock.objectId);
Sezam/AGBluetoothLockController.m:479:        AGDiary(AGDiaryLevel_Info, AG_DIARY_CATEGORY_AUTO_UNLOCK, @"ManualOpenWhileAutoUnlockOff",@"%@", self.agLock.objectId);
Sezam/AGBluetoothLockController.m:482:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockAction":@"Unlock"};
Sezam/AGBluetoothLockController.m:487:                         AGDiaryInfo(@"sendLockUnlockCommandSent", @"sent");
Sezam/AGBluetoothLockController.m:490:                      AGDiaryInfo(@"sendLockUnlockFINISH", @"finish");
Sezam/AGBluetoothLockController.m:494:                          [AGLock putLockUsage:self.agLock.objectId action:@"unlock" mechanical:@"success" crypto:@"success" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGBluetoothLockController.m:513:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockResponse":@"Success"};
Sezam/AGBluetoothLockController.m:540:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockAction":@"Lock"};
Sezam/AGBluetoothLockController.m:543:    AGDiaryInfo(@"ManualClose", @"BluetoothLockControler will send 'Lock' command to lock");
Sezam/AGBluetoothLockController.m:546:                         AGDiaryInfo(@"sendLockUnlockCommandSent", @"sent");
Sezam/AGBluetoothLockController.m:549:                            AGDiaryInfo(@"sendLockUnlockFINISH", @"finish");
Sezam/AGBluetoothLockController.m:552:                                [AGLock putLockUsage:self.agLock.objectId action:@"lock" mechanical:@"success" crypto:@"success" block:^(BOOL succeeded, NSError *error) {}];
Sezam/AGBluetoothLockController.m:555:                                AGDiaryInfo(@"EndCommandResponseProcessing", @"Finished processing response to command");
Sezam/AGBluetoothLockController.m:602:    AGDiaryDebug(@"GettingFirmwareInfo", @"Stopping any active OTA and getting firmware info.");
Sezam/AGBluetoothLockController.m:605:    [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:618:    if ([self.agLock.lockCapability.onboardCPUs containsObject:@"arm"] || [self.agLock.lockCapability.onboardCPUs containsObject:@"st"]) {
Sezam/AGBluetoothLockController.m:626:    } else if ([self.agLock.lockCapability.onboardCPUs containsObject:@"sd"]) {
Sezam/AGBluetoothLockController.m:630:            self.zWaveVersion = @"undefined";
Sezam/AGBluetoothLockController.m:641:                        if (([self.zWaveVersion isEqualToString:@"0"]) || ([self.zWaveVersion isEqualToString:@"0.0.0"])) {
Sezam/AGBluetoothLockController.m:642:                            self.zWaveVersion = @"undefined";
Sezam/AGBluetoothLockController.m:654:        NSString *firmwareVersionSecondTriplet = @"undefined";
Sezam/AGBluetoothLockController.m:661:            NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@",self.armGitHash, firmwareVersionSecondTriplet, self.bleFirmwareVersion];
Sezam/AGBluetoothLockController.m:678:                    BOOL lockLocked = [returnedValue isEqual:@"kAugLockState_Locked"];
Sezam/AGBluetoothLockController.m:679:                    BOOL lockUnlocked = [returnedValue isEqual:@"kAugLockState_Unlocked"];
Sezam/AGBluetoothLockController.m:762:                        AGDiaryDebug(@"SetInactivity", @"Set inactivity timeout to %@", correctInactivityTimeOutValueForLock);
Sezam/AGBluetoothLockController.m:764:                        AGDiaryDebug(@"SetInactivity", @"Error setting inactivity timeout %@", correctInactivityTimeOutValueForLock);
Sezam/AGBluetoothLockController.m:789:            AGDiaryError(@"ParamsFailed", @"Eror updating server params to lock");
Sezam/AGBluetoothLockController.m:806:        errorCode = @"UnknownError";
Sezam/AGBluetoothLockController.m:808:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"There was a problem locking your door. To fix this: \n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGBluetoothLockController.m:812:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"There was a problem unlocking your door. To fix this: \n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGBluetoothLockController.m:820:                errorTitle = @"Lock Overheated";
Sezam/AGBluetoothLockController.m:821:                errorMessage = @"Your lock has overheated.";
Sezam/AGBluetoothLockController.m:825:                errorTitle = @"Lock Batteries Low";
Sezam/AGBluetoothLockController.m:826:                errorMessage = @"Your lock batteries are low. Please replace the batteries.";
Sezam/AGBluetoothLockController.m:830:                errorTitle = @"Lock Jammed";
Sezam/AGBluetoothLockController.m:831:                errorMessage = @"Your lock is jammed. It may be obstructed or need to be recalibrated.";
Sezam/AGBluetoothLockController.m:835:                errorTitle = @"Lock Operation Error";
Sezam/AGBluetoothLockController.m:836:                errorMessage = NSLocalizedString(@"To fix this: \n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.",nil);
Sezam/AGBluetoothLockController.m:840:                errorTitle = @"Lock Operation Error";
Sezam/AGBluetoothLockController.m:841:                errorMessage = NSLocalizedString(@"To fix this: \n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.",nil);
Sezam/AGBluetoothLockController.m:847:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:errorTitle message:[NSString stringWithFormat:@"There was a problem operating your lock. %@",errorMessage] delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGBluetoothLockController.m:854:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockResponse":errorCode};
Sezam/AGBluetoothLockController.m:863:    AGDiaryDebug(@"FirmwareUpdateFailed", @"Failed to reconnect after firmware update. Showing error dialog");
Sezam/AGBluetoothLockController.m:866:    [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:871:    NSString *onlineOrOfflineKey = @"OFF";
Sezam/AGBluetoothLockController.m:875:            onlineOrOfflineKey = @"ON";
Sezam/AGBluetoothLockController.m:879:    [self.delegate updateOTADebugLabel:[NSString stringWithFormat:@"[%@] %@", onlineOrOfflineKey, text]];
Sezam/AGBluetoothLockController.m:885:    if ([self.currentUpdatingChip isEqualToString:@"arm"]) {
Sezam/AGBluetoothLockController.m:886:        AGDiaryDebug(@"OTAFileTransferComplete", @"OTA file transfer complete for arm, program starting");
Sezam/AGBluetoothLockController.m:891:        AGDiaryDebug(@"OTAProgramInitiate", @"Initiate OTA program of the TI chip per user input");
Sezam/AGBluetoothLockController.m:899:    AGDiaryDebug(@"OTAProgramStart", @"OTA program start");
Sezam/AGBluetoothLockController.m:900:    if (([self.currentUpdatingChip isEqualToString:@"ti"]) || ([self.currentUpdatingChip isEqualToString:@"bcm"]) || ([self.currentUpdatingChip isEqualToString:@"st"]) || ([self.currentUpdatingChip isEqualToString:@"arm"])) {
Sezam/AGBluetoothLockController.m:911:    if ([self.currentUpdatingChip isEqualToString:@"ti"]) {
Sezam/AGBluetoothLockController.m:913:        AGDiaryDebug(@"OTAUpdateComplete", @"OTA program complete, TI chip");
Sezam/AGBluetoothLockController.m:916:        NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@", self.armGitHash, self.armFWVersion, self.tiVersionToUpdateTo];
Sezam/AGBluetoothLockController.m:925:    else if ([self.currentUpdatingChip isEqualToString:@"arm"]) {
Sezam/AGBluetoothLockController.m:926:        AGDiaryDebug(@"OTAUpdateComplete", @"OTA program complete, arm chip. Will set 10 sec timer for post update steps.");
Sezam/AGBluetoothLockController.m:929:                AGDiaryDebug(@"OTAUpdateComplete", @"Timer fired after ARM OTA program complete");
Sezam/AGBluetoothLockController.m:933:    } else if ([self.currentUpdatingChip isEqualToString:@"dlg"] || [self.currentUpdatingChip isEqualToString:@"sd"]) { // Europa Chips
Sezam/AGBluetoothLockController.m:934:        if ([self.currentUpdatingChip isEqualToString:@"dlg"]) {
Sezam/AGBluetoothLockController.m:938:        if ([self.currentUpdatingChip isEqualToString:@"sd"]) {
Sezam/AGBluetoothLockController.m:954:                AGDiaryWarn(@"ZWaveStatusTimerError", @"OTAinProgressTimeOut");
Sezam/AGBluetoothLockController.m:957:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGBluetoothLockController.m:958:                AGDiaryWarn(@"ZWaveStatusTimerError", @"OTAinProgressError");
Sezam/AGBluetoothLockController.m:960:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGBluetoothLockController.m:961:                    AGZWaveState zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGBluetoothLockController.m:984:    NSString *otaLabelText = [NSString stringWithFormat:@"OTA cluster: %lu of %lu", (unsigned long)currentCluster, (unsigned long)totalClusters];
Sezam/AGBluetoothLockController.m:1013:        [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:1016:        AGDiaryDebug(@"OTADone", @"Finished OTA for '%@', chip: %@, checking again", lock, self.currentUpdatingChip);
Sezam/AGBluetoothLockController.m:1020:        if([[NSUserDefaults standardUserDefaults] boolForKey:@"DisableOTA"])
Sezam/AGBluetoothLockController.m:1022:            [self updateOTALabelText:@"OTA disabled"];
Sezam/AGBluetoothLockController.m:1029:                NSString *fwUpdateFilePath = [[NSBundle mainBundle] pathForResource:@"europa_fw_patch_1.0.13_to_1.0.9" ofType:@"bin"];
Sezam/AGBluetoothLockController.m:1031:                self.currentUpdatingChip = @"dlg";
Sezam/AGBluetoothLockController.m:1034:                NSString *otaDetailsText = [NSString stringWithFormat:@"INSTALLING UPDATE %ld OF %ld", (unsigned long)self.currentOTAUpdate, (unsigned long)self.totalNumberOfOTAUpdates];
Sezam/AGBluetoothLockController.m:1041:                AGDiaryDebug(@"OTAStart", @"Starting OTA for '%@', chip: %@", lock, self.currentUpdatingChip);
Sezam/AGBluetoothLockController.m:1045:                [self updateOTALabelText:[NSString stringWithFormat:@"Updating from: %@", fwVersionString]];
Sezam/AGBluetoothLockController.m:1049:                    NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGBluetoothLockController.m:1056:                        NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGBluetoothLockController.m:1063:                        if ([self.currentUpdatingChip isEqualToString:@"sd"] && self.isZWaveEnabled == NO) {
Sezam/AGBluetoothLockController.m:1065:                        } else if ([self.currentUpdatingChip isEqualToString:@"yale"]) {
Sezam/AGBluetoothLockController.m:1068:                            NSString *version = [updateInfoDict objectForKey:@"version"];
Sezam/AGBluetoothLockController.m:1079:                                    NSString *otaDetailsText = [NSString stringWithFormat:@"INSTALLING UPDATE %ld OF %ld", (unsigned long)self.currentOTAUpdate, (unsigned long)self.totalNumberOfOTAUpdates];
Sezam/AGBluetoothLockController.m:1086:                                    if ([self.currentUpdatingChip isEqualToString:@"ti"]) {
Sezam/AGBluetoothLockController.m:1089:                                    AGDiaryDebug(@"OTAStart", @"Starting OTA for '%@', chip: %@", lock, self.currentUpdatingChip);
Sezam/AGBluetoothLockController.m:1110:    [self updateOTALabelText:@"No new firmware"];
Sezam/AGBluetoothLockController.m:1121:                if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DisableOTA"] == false) {
Sezam/AGBluetoothLockController.m:1128:                                AGDiaryDebug(@"keypadNoNeedOTA", @"");
Sezam/AGBluetoothLockController.m:1131:                            AGDiaryDebug(@"refreshKeypadError", @"error: %@", error.localizedDescription);
Sezam/AGNestCameraToLockViewController.m:88:    self.nestStructure1Label.text = self.nestStructureLabel.text = [[self.structure1 objectForKey:@"structureName"] uppercaseString];
Sezam/AGNestCameraToLockViewController.m:104:        self.nestStructure2Label.text = [[self.structure2 objectForKey:@"structureName"] uppercaseString];
Sezam/AGNestCameraToLockViewController.m:122:    self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Loading Nest Structures and Objects..." message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:131:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading user's Locks: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:153:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGNestCameraToLockViewController.m:154:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"You have been logged out of Nest. Please reconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:159:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest structures:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:171:                    [structureDict setObject:[structureDetails objectForKey:@"name"] forKey:@"structureName"];
Sezam/AGNestCameraToLockViewController.m:172:                    [structureDict setObject:[structureDetails objectForKey:@"structure_id"] forKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:184:            NSString *structure1ID = [self.structure1 objectForKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:185:            NSString *structure2ID = [self.structure2 objectForKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:190:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:197:                        NSString *structureIDForHouse = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestCameraToLockViewController.m:249:                        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"You don't have any devices in %@.", self.house1.name] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:253:                        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"You don't have any devices in %@.", self.house2.name] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:259:                            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:280:                                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:291:                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:300:                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:311:                                                    if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:324:                                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:403:        cell = [tableView dequeueReusableCellWithIdentifier:@"PairedWithCell"];
Sezam/AGNestCameraToLockViewController.m:405:            cell.label2.text = @"None";
Sezam/AGNestCameraToLockViewController.m:413:        cell = [tableView dequeueReusableCellWithIdentifier:@"HeaderCell"];
Sezam/AGNestCameraToLockViewController.m:414:        cell.label.text = @"SHOW RELATED MOTION EVENTS";
Sezam/AGNestCameraToLockViewController.m:418:        cell = [tableView dequeueReusableCellWithIdentifier:@"ButtonCell"];
Sezam/AGNestCameraToLockViewController.m:440:            cell = [tableView dequeueReusableCellWithIdentifier:@"CameraWithLockHeaderCell"];
Sezam/AGNestCameraToLockViewController.m:442:                cell.label2.text = [NSString stringWithFormat:@"%@ - Lock", lock.name];
Sezam/AGNestCameraToLockViewController.m:444:                cell.label2.text = [NSString stringWithFormat:@"%@ - Doorbell",doorbell.name];
Sezam/AGNestCameraToLockViewController.m:449:            cell = [tableView dequeueReusableCellWithIdentifier:@"CameraCell"];
Sezam/AGNestCameraToLockViewController.m:458:            cellSwitch.userInfo = @{@"lock":lock, @"nestCamera":nestCamera};
Sezam/AGNestCameraToLockViewController.m:460:            cellSwitch.userInfo = @{@"doorbell":doorbell, @"nestCamera":nestCamera};
Sezam/AGNestCameraToLockViewController.m:565:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"This item cannot be paired" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGNestCameraToLockViewController.m:566:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGNestCameraToLockViewController.m:572:        [self performSegueWithIdentifier:@"nestCameraToLockToNestStructureMap" sender:nil];
Sezam/AGNestCameraToLockViewController.m:624:    AGNestCamera *nestCamera = [switchUserInfo objectForKey:@"nestCamera"];
Sezam/AGNestCameraToLockViewController.m:625:    AGLock *lock = [switchUserInfo objectForKey:@"lock"];
Sezam/AGNestCameraToLockViewController.m:626:    AGDoorbell *doorbell = [switchUserInfo objectForKey:@"doorbell"];
Sezam/AGNestCameraToLockViewController.m:646:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to add new camera to August: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:651:                            [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:662:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:674:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to remove camera from lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:693:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to add new camera to August: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:698:                            [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:709:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:721:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to remove camera from Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:734:    self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting from Nest..." message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:739:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error disconnecting from Nest:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:765:    if ([segue.identifier isEqualToString:@"nestCameraToLockToNestStructureMap"]) {
Sezam/AGWebSubscriptionViewController.m:12:#define kAGDiaryCategory @"SubscriptionWeb"
Sezam/AGWebSubscriptionViewController.m:88:    AGDiaryDebug(@"OpeningWebURL",[url absoluteString]);
Sezam/AGWebSubscriptionViewController.m:91:    AGDiaryDebug(@"OpeningURL",pathString);
Sezam/AGWebSubscriptionViewController.m:93:    if ([pathString rangeOfString:@"exit-web-view"].length != 0) { /// This causes a direct exit of the view
Sezam/AGWebSubscriptionViewController.m:100:    if ([pathString rangeOfString:@"order-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:103:    if ([pathString rangeOfString:@"cancel-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:106:    if ([pathString rangeOfString:@"change-plan-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:109:    if ([pathString rangeOfString:@"change-payment-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:132:    self.titleLabel.text = @"SUBSCRIPTION";
Sezam/AGWebSubscriptionViewController.m:136:    [self.webView evaluateJavaScript:@"document.title" completionHandler:^(id result, NSError * _Nullable error) {
Sezam/AGWebSubscriptionViewController.m:138:            self.titleLabel.text = @"SUBSCRIPTION";
Sezam/AGIntellivisionVideoStream.h:19: * If the stream fails to start because it never delivers the first frames this will be the value for the key @"AGError"
Sezam/AGVideoRecordingUpsellView.m:45:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGVideoRecordingUpsellView.m:46:    self.titleLabel.text = @"AUGUST VIDEO RECORDING";
Sezam/AGVideoRecordingUpsellView.m:51:    [self.closeButton setImage:[UIImage imageNamed:@"white_close_button_v3"] forState:UIControlStateNormal];
Sezam/AGVideoRecordingUpsellView.m:54:    self.topImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"avr_upsell_modal"]];
Sezam/AGVideoRecordingUpsellView.m:65:    self.centerDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGVideoRecordingUpsellView.m:72:    self.learnMoreButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGVideoRecordingUpsellView.m:76:    [self.learnMoreButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGVideoRecordingUpsellView.m:84:    self.notNowButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGVideoRecordingUpsellView.m:85:    [self.notNowButton setTitle:@"NOT NOW" forState:UIControlStateNormal];
Sezam/AGVideoRecordingUpsellView.m:122:    NSString *centerDescriptionText = @"Your Doorbell Cam comes with 24 hours of video recording.\n\nMake the most of your Doorbell Cam and upgrade to Premium to get 30 days of video history.";
Sezam/AGVideoRecordingUpsellView.m:131:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGFancySuccessAnimationView.m:34:        self.checkMark.image = [UIImage imageNamed:@"exclamation_point"];
Sezam/AGFancySuccessAnimationView.m:65:    self.checkMark = [[UIImageView alloc] initWithImage: [UIImage imageNamed:@"green_check_large"]];
Sezam/AGFancySuccessAnimationView.m:76:    CABasicAnimation *scaleAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
Sezam/AGFancySuccessAnimationView.m:83:    [self.greenCircle.layer addAnimation:scaleAnimation forKey:@"scaleAnimation"];
Sezam/AGFancySuccessAnimationView.m:84:    [self.clearCircle.layer addAnimation:[scaleAnimation copy] forKey:@"scaleAnimation"];
Sezam/AGFancySuccessAnimationView.m:93:    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"opacity"];
Sezam/AGFancySuccessAnimationView.m:104:    translationAnimation = [CABasicAnimation animationWithKeyPath:@"transform.translation.y"];
Sezam/AGFancySuccessAnimationView.m:113:    [self.checkMark.layer addAnimation:translationAnimation forKey:@"moveUp"];
Sezam/AGFancySuccessAnimationView.m:115:    [self.checkMark.layer addAnimation:animation forKey:@"opacityIN"];
Sezam/AGAddEmailViewController.m:54:        [self.titleLabel setText:NSLocalizedString(@"SIGN UP",nil)];
Sezam/AGAddEmailViewController.m:56:        [self.titleLabel setText:NSLocalizedString(@"UPDATE EMAIL",nil)];
Sezam/AGAddEmailViewController.m:58:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGAddEmailViewController.m:60:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGAddEmailViewController.m:77:        [self.emailButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGAddEmailViewController.m:80:        [self.emailButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGAddEmailViewController.m:93:        errorMsg = NSLocalizedString(@"Please enter your email address.",nil);
Sezam/AGAddEmailViewController.m:97:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddEmailViewController.m:98:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAddEmailViewController.m:102:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Sending Email...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddEmailViewController.m:104:        [AGUser checkEmailOrPhoneForDuplicate:@"email" value:self.emailTextField.text block:^(BOOL exists, NSError *error) {
Sezam/AGAddEmailViewController.m:107:                    NSString *duplicateEmailMesssage = [NSString stringWithFormat:NSLocalizedString(@"The email address %@ currently belongs to another account. Did you mean to sign in?", @"The email address {email} currently belongs to another account. Did you mean to sign in?"), self.emailTextField.text];
Sezam/AGAddEmailViewController.m:108:                    self.duplicateEmailAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Did You Mean to Sign In?", nil) message:duplicateEmailMesssage delegate:self cancelButtonTitle:NSLocalizedString(@"No, Continue With Signup",nil) otherButtonTitles:NSLocalizedString(@"Yes, Sign In",nil), nil];
Sezam/AGAddEmailViewController.m:130:            [self performSegueWithIdentifier:@"AddEmailToEmailVerify" sender:nil];
Sezam/AGAddEmailViewController.m:132:             UIAlertController *alertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:@"Please enter a valid email address." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddEmailViewController.m:133:             [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAddEmailViewController.m:146:            self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Sending Email...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddEmailViewController.m:158:    if ([segue.identifier isEqualToString:@"AddEmailToEmailVerify"]) {
Sezam/AGUnityModuleSettingsViewController.m:18:static NSString* kAGDiaryCategory = @"AGUnityModuleSettingsViewController";
Sezam/AGUnityModuleSettingsViewController.m:59:       AGDiaryDebug(@"pickModel", @"can't find the firmware value: %d", currSelectFWValue);
Sezam/AGUnityModuleSettingsViewController.m:80:        AGDiaryDebug(@"AGListPickerModelError", @"doesn't contains this option: %@", currSelectOption);
Sezam/AGUnityModuleSettingsViewController.m:144:    NSArray *languages = @[@"English",@"French",@"Spanish"];
Sezam/AGUnityModuleSettingsViewController.m:146:    NSString *languageTitle = @"DEVICE AUDIO LANGUAGE";
Sezam/AGUnityModuleSettingsViewController.m:148:    NSArray *volumes = @[@"Silent",@"Low Volume",@"High Volume"];
Sezam/AGUnityModuleSettingsViewController.m:149:    NSString *volumeTitle = @"DEVICE SOUND VOLUME";
Sezam/AGUnityModuleSettingsViewController.m:152:    NSArray * operatings = @[@"Normal",@"Privacy",@"Vacation"];
Sezam/AGUnityModuleSettingsViewController.m:153:    NSString *operatingTitle = @"OPERATING MODE";
Sezam/AGUnityModuleSettingsViewController.m:179:    AGDiaryDebug(@"switchChangeAction", @"value changed: %d", isOn);
Sezam/AGUnityModuleSettingsViewController.m:190:                AGDiaryDebug(@"switchChangeAction", @"error: %@", errorMsg);
Sezam/AGUnityModuleSettingsViewController.m:197:            AGDiaryDebug(@"switchChangeAction", @"You made changes success!");
Sezam/AGUnityModuleSettingsViewController.m:209:                AGDiaryDebug(@"switchChangeAction", @"error: %@", errorMsg);
Sezam/AGUnityModuleSettingsViewController.m:249:    [self performSegueWithIdentifier:@"UnityModuleSettingsToKeypadSecurity" sender:nil];
Sezam/AGUnityModuleSettingsViewController.m:269:    AGDiaryDebug(@"selection", @"value:%@", updatedValue);
Sezam/AGUnityModuleSettingsViewController.m:292:    AGDiaryDebug(@"updatedValue", @"index: %d, type: %d", index, pickModel.type);
Sezam/AGUnityModuleSettingsViewController.m:309:        AGDiaryDebug(@"pickModelSelection", @"You made changes success!");
Sezam/AGUnityModuleSettingsViewController.m:317:                                                          btnTitle:@"OK" btnPressedBlock:nil];
Sezam/AGUnityModuleSettingsViewController.m:327:    NSString *operationModeNormalString = @"Can lock and unlock door with August app \n\nMaster code will work \n\nUser codes will work";
Sezam/AGUnityModuleSettingsViewController.m:328:    NSString *operationModePrivacyString = @"Can lock and unlock door with August app \n\nMaster code will work \n\nUser codes will not work";
Sezam/AGUnityModuleSettingsViewController.m:329:    NSString *operationModeVacationString = @"Can lock and unlock door with August app \n\nMaster code will not work \n\nUser codes will not work \n\nAll Keypad codes disabled";
Sezam/AGUnityModuleSettingsViewController.m:334:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGUnityModuleSettingsViewController.m:374:            AGDiaryDebug(@"getUnitySettings", @"error: %@", errorMsg);
Sezam/AGUnityModuleSettingsViewController.m:377:                                                                  btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGUnityModuleSettingsViewController.m:400:    if ([segue.identifier isEqualToString:@"UnityModuleSettingsToKeypadSecurity"]) {
Sezam/AGHomeKitManager.m:18:#define kAGDiaryCategory @"AGHKManager"
Sezam/AGHomeKitManager.m:19:#define kHomeKitLockList @"HomeKitLocks"
Sezam/AGHomeKitManager.m:20:#define kHomeKitAuthBlobs @"AuthBlobLocks"
Sezam/AGHomeKitManager.m:22:#define kAGHomeKitError @"AGHomeKitError"
Sezam/AGHomeKitManager.m:53:        NSString *possibleA = [NSString stringWithFormat:@"Aug%@%@%@%@%@",
Sezam/AGHomeKitManager.m:60:        NSString *possibleB =  [NSString stringWithFormat:@"Aug%@%@%@%@",
Sezam/AGHomeKitManager.m:67:        NSString *possibleC =  [NSString stringWithFormat:@"%@%@",
Sezam/AGHomeKitManager.m:93:    [[AGHomeKitManager lockNamesDict] setObject:@{@"lock":lockName, @"house":houseName, @"date":[NSDate date]} forKey:shortSerial];
Sezam/AGHomeKitManager.m:158:    AGDiaryDebug(@"AuthBlobStartSearch", @"Will find services and chars. Reachable:%@", accessory.isReachable?@"YES":@"NO");
Sezam/AGHomeKitManager.m:173:    NSString *homeKitKey = [homeKitKeyDict objectForKey:@"key"];
Sezam/AGHomeKitManager.m:174:    NSNumber *homeKitKeySlot = [homeKitKeyDict objectForKey:@"slot"];
Sezam/AGHomeKitManager.m:175:    NSString *combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitManager.m:178:        AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGHomeKitManager.m:180:            AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeTargetLockMechanismState);
Sezam/AGHomeKitManager.m:182:                AGDiaryDebug(@"FoundDoorStateChar", @"setting auth blob");
Sezam/AGHomeKitManager.m:196:                        AGDiaryInfo(@"SetAuthBlob", @"Auth blob set");
Sezam/AGHomeKitManager.m:198:                        AGDiaryInfo(@"SetAuthBlob", @"Error setting auth blob. %@", [error description]);
Sezam/AGHomeKitManager.m:199:                        block(false, @"Failed to set HomeKit Authorization.");
Sezam/AGHomeKitManager.m:208:        block(false, @"HomeKit lock service not found.");
Sezam/AGHomeKitManager.m:249:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitManager.m:257:        AGDiaryInfo(@"SharedDataLockNotFound",@"getAssociatedHomeKitAccessoryForLock");
Sezam/AGHomeKitManager.m:278:                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitManager.m:299:                        if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitManager.m:314:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitManager.m:322:        AGDiaryInfo(@"SharedDataLockNotFound",@"getAssociatedHomeKitHomeForLock");
Sezam/AGHomeKitManager.m:343:                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitManager.m:364:                        if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitManager.m:386:            NSDate *timeAddedToHomeKit = (NSDate *)[loopItem objectForKey:@"date"];
Sezam/AGHomeKitManager.m:399:                if (((NSDate *)[curLock objectForKey:@"date"]).timeIntervalSince1970 < timeAddedToHomeKit.timeIntervalSince1970) {
Sezam/AGHomeKitManager.m:443:    AGDiaryDebug(@"GotHomeKitHomes", @"HomeKitHomes came in with %d homes.", [manager.homes count]);
Sezam/AGHomeKitManager.m:447:            AGDiaryDebug(@"FoundLock", @"Found lock to remove from homekit");
Sezam/AGHomeKitManager.m:450:                AGDiaryDebug(@"RemovedLock", @"Removed %@ with error %@", self.locksToLookFor, error);
Sezam/AGHomeKitManager.m:482:        errorMsg = NSLocalizedString(@"You need to be signed into iCloud.", nil);
Sezam/AGHomeKitManager.m:485:        errorMsg = NSLocalizedString(@"Please sign into iCloud.", nil);
Sezam/AGHomeKitManager.m:488:        errorMsg = NSLocalizedString(@"iCloud Keychain Syncing is not enabled.", nil);
Sezam/AGHomeKitManager.m:491:        errorMsg = NSLocalizedString(@"iCloud Data sync in progress.", nil);
Sezam/AGHomeKitManager.m:494:        errorMsg = NSLocalizedString(@"Network is unavailable.", nil);
Sezam/AGHomeKitManager.m:497:        errorMsg = NSLocalizedString(@"The lock is not reachable.", nil);
Sezam/AGDoorbellDiagnosticsResultsViewController.m:88:        self.wifiSignalStrength = [self.telemetry[@"signal_level"] floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:99:        self.acLevel = [self.telemetry[@"ac_in"] floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:139:        self.headerTitleLabel.text = @"SETUP DOORBELL";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:185:        self.topOfTableLabel.text = @"Congratulations! Your Doorbell Cam is set up and ready to go.";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:187:        self.topOfTableLabel.text = @"Doorbell Cam is set up, but we’re seeing some issues.";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:220:        cell = [tableView dequeueReusableCellWithIdentifier:@"WiFiSignalGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:222:        cell.label2.text = [NSString stringWithFormat:@"(%.0f) Good", self.wifiSignalStrength];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:224:        cell = [tableView dequeueReusableCellWithIdentifier:@"WiFiSignalBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:227:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:229:            cell.label2.text = [NSString stringWithFormat:@"(%.0f) Poor", self.wifiSignalStrength];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:233:        cell = [tableView dequeueReusableCellWithIdentifier:@"UploadSpeedGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:235:        cell.label2.text = [NSString stringWithFormat:@"%.1f Mbs - Good", self.uploadSpeed.floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:237:        cell = [tableView dequeueReusableCellWithIdentifier:@"UploadSpeedBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:240:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:242:            cell.label2.text = [NSString stringWithFormat:@"%.1f Mbs - Bad", self.uploadSpeed.floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:246:        cell = [tableView dequeueReusableCellWithIdentifier:@"ACVoltageGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:248:        cell.label2.text = [NSString stringWithFormat:@"%.1fv - Good", self.acLevel];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:250:        cell = [tableView dequeueReusableCellWithIdentifier:@"ACVoltageBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:253:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:255:            cell.label2.text = [NSString stringWithFormat:@"%.1fv - Too Low", self.acLevel];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:259:        cell = [tableView dequeueReusableCellWithIdentifier:@"LockConnectionGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:261:        cell.label2.text = @"Good";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:263:        cell = [tableView dequeueReusableCellWithIdentifier:@"LockConnectionBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:265:        cell.label2.text = @"Not Found";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:294:        [self performSegueWithIdentifier:@"DiagnosticsToSuccess" sender:nil];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:297:        [self performSegueWithIdentifier:@"unwindToDoorbellSettingsFromDiagnostics" sender:self];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:323:    if ([segue.identifier isEqualToString:@"DiagnosticsToSuccess"]) {
Sezam/AGMotionActivityViewController.m:32:        self.logEntry.user.lastName = @"";
Sezam/AGMotionActivityViewController.m:42:                activityZonesList = [NSString stringWithFormat:@"%@, %@", activityZonesList, activityZone];
Sezam/AGMotionActivityViewController.m:46:        self.cameraLocationLabel.text = [NSString stringWithFormat:@"%@ %@ - %@", self.logEntry.user.firstName.uppercaseString, self.logEntry.user.lastName.uppercaseString, activityZonesList.uppercaseString];
Sezam/AGMotionActivityViewController.m:48:        self.cameraLocationLabel.text = [NSString stringWithFormat:@"%@ %@", self.logEntry.user.firstName.uppercaseString, self.logEntry.user.lastName.uppercaseString];
Sezam/AGMotionActivityViewController.m:50:    self.timeLabel.text = [NSString stringWithFormat:@"%@", [AGUtility displayLogEntryDateFromDate:self.logEntry.date]];
Sezam/AGMessagePool.h:13:#define AG_NOTIFICATION_RESET_MESSAGEHANDLER_SUBSCRIBERS               @"AG_NOTIFICATION_RESET_MESSAGEHANDLER_SUBSCRIBERS"
Sezam/AGLockSettingsListController.m:57:                    e.g. if (cellType == AGLockSettingsCellType_MyNewFeature) { cell.textLabel.text = @"My New Feature"; }
Sezam/AGLockSettingsListController.m:89:                            cell.textLabel.text = @"Lock Name";
Sezam/AGLockSettingsListController.m:96:                    if ([self.doorbell.type isEqualToString:@"mars2"])
Sezam/AGLockSettingsListController.m:107:static NSString* kAGDiaryCategory = @"LockSettings";
Sezam/AGLockSettingsListController.m:109:static NSString* minimumLockVersionForManualNotification = @"1.1.4";      // This is the minimum Lock firmware Version for Manual Notification Operation
Sezam/AGLockSettingsListController.m:110:static NSString* minimumBridgeVersionForManualNotification = @"2.1.0";    // This is the minimum Bridge firmware Version for Manual Notification Operation
Sezam/AGLockSettingsListController.m:111:static NSString* kmanualNotification = @"manuallock";
Sezam/AGLockSettingsListController.m:112:static NSString* kautorelockNotification = @"autorelock";
Sezam/AGLockSettingsListController.m:114:static NSString* const kSegueBridgeSettings = @"LockSettingsToBridgeSettings";
Sezam/AGLockSettingsListController.m:243:    self.view.smartAlertsCTAText = [AGUtility activeMonitoringSubscriptionRequiredForLock:self.lock] ? @"Smart Alerts are part of Active Monitoring, currently in beta." : nil;
Sezam/AGLockSettingsListController.m:282:    BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
Sezam/AGLockSettingsListController.m:324:    oper.label = @"Get Sound State";
Sezam/AGLockSettingsListController.m:336:                            self.zWaveVersion = [responseDict objectForKey:@"version"];
Sezam/AGLockSettingsListController.m:337:                            if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGLockSettingsListController.m:338:                                self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGLockSettingsListController.m:361:        zWaveOper.label = @"Get ZWave State";
Sezam/AGLockSettingsListController.m:397:        AGDiaryWarn(@"CallbackFromWrongLock", @"Received didUpdateLock: callback for lock %@, but AGLockViewController.agLock = %@", lock.objectId, self.lock.objectId);
Sezam/AGLockSettingsListController.m:439:    [self performSegueWithIdentifier:@"lockSettingsToLockName" sender:nil];
Sezam/AGLockSettingsListController.m:481:        [self performSegueWithIdentifier:@"LockSettingsToDoorSense" sender:nil];
Sezam/AGLockSettingsListController.m:497:    [self performSegueWithIdentifier:@"ShowHomeKitSetup" sender:self];
Sezam/AGLockSettingsListController.m:512:    [self performSegueWithIdentifier:@"LockSettingsToAssociateDoorbell" sender:nil];
Sezam/AGLockSettingsListController.m:521:    AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGLockSettingsListController.m:531:        NSString *errorTitle = NSLocalizedString(@"Disconnect Keypad",nil);
Sezam/AGLockSettingsListController.m:532:        NSString *errorMsg = NSLocalizedString(@"You must disconnect the keypad before resetting the lock.", nil);
Sezam/AGLockSettingsListController.m:536:        [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGLockSettingsListController.m:544:    [self performSegueWithIdentifier:@"lockSettingsToFactoryReset" sender:self];
Sezam/AGLockSettingsListController.m:549:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockSettingsListController.m:550:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockSettingsListController.m:557:    [self performSegueWithIdentifier:@"LockSettingsToDeviceInfo" sender:self];
Sezam/AGLockSettingsListController.m:567:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:@"Bluetooth chip reboot time in minutes. 0 for never reboot" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:568:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:578:                UIAlertController *alertControllerInner = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:@"An error occured" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:579:                    [alertControllerInner addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:583:                UIAlertController *alertControllerInner = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:[NSString stringWithFormat: @"Successfully set reboot period to %@ seconds", [NSNumber numberWithInt:seconds]] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:584:                [alertControllerInner addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:599:    AGHomeKitTestController *testController = (AGHomeKitTestController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitTestController"];
Sezam/AGLockSettingsListController.m:609:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Lock Connection Required" message:@"Changing this setting requires a Bluetooth connection to your lock. Make sure you are near your lock and try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:610:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGLockSettingsListController.m:626:            AGDiaryError(@"SetSoundFailed", @"Got error setting sound on or off");
Sezam/AGLockSettingsListController.m:648:        BOOL shouldAllowMultipleAutoUnlockersInSameHouse = [AGFeatureManager enabled:@"MultipleAutoUnlockersInSameHouse"];
Sezam/AGLockSettingsListController.m:670:        BOOL shouldAllowMultipleAutoUnlockersInSameHouse = [AGFeatureManager enabled:@"MultipleAutoUnlockersInSameHouse"];
Sezam/AGLockSettingsListController.m:684:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Unable to Set Up Auto-Unlock" message:@"Auto-Unlock can only be enabled on one lock per house. Please turn off Auto-Unlock for other locks before setting it up on this one." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:685:    [alertController addAction:[UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGLockSettingsListController.m:702:            AGDiaryDebug(@"ManualNotificationViaBridge", @"Manual Notification Setting Displayed");
Sezam/AGLockSettingsListController.m:705:            AGDiaryDebug(@"ManualNotificationViaBridge", @"Manual Notification Setting Hidden");
Sezam/AGLockSettingsListController.m:715:            AGDiaryError(@"LockManualNotificationRefreshError", [NSString stringWithFormat:@"LockManualNotificationErrorDetails: %@", error.localizedDescription]);
Sezam/AGLockSettingsListController.m:717:            NSLog(@"Lock Notifications Refreshed");
Sezam/AGLockSettingsListController.m:737:    if ((lockFirmwareVersion_ThreeParts != nil) || ([lockFirmwareVersion_ThreeParts rangeOfString:@"-"].location != NSNotFound)) {
Sezam/AGLockSettingsListController.m:738:        NSArray *lockFirmwareVersionComponentArray = [lockFirmwareVersion_ThreeParts componentsSeparatedByString:@"-"];
Sezam/AGLockSettingsListController.m:754:    if (([lock.bridge.model isEqualToString:@"august-connect"]) || ([lock.bridge.model isEqualToString:@"august-doorbell"])) {
Sezam/AGLockSettingsListController.m:765:    if (lockIsManualNotificationCapable) {AGDiaryDebug(@"ManualNotificationViaBridge", @"Lock is Manual Notification Capable");} else {AGDiaryDebug(@"ManualNotificationViaBridge", @"Lock is NOT Manual Notification Capable");}
Sezam/AGLockSettingsListController.m:766:    if (bridgeIsManualNotificationCapable) {AGDiaryDebug(@"ManualNotificationViaBridge", @"Bridge is Manual Notification Capable");} else {AGDiaryDebug(@"ManualNotificationViaBridge", @"Bridge is NOT Manual Notification Capable");}
Sezam/AGLockSettingsListController.m:772:    if (userhasManualNotificationFirmware) {AGDiaryDebug(@"ManualNotificationViaBridge", @"User has Firmware Capable of Manual Notification Operation");} else {AGDiaryDebug(@"ManualNotificationViaBridge", @"User does NOT have Firmware Capable of Manual Notification Operation");}
Sezam/AGLockSettingsListController.m:783:                [self.lock checkForBridgeAndUpdateManualNotifications:@"both" withType:kmanualNotification usingBlock:^(BOOL succeeded, NSError *error) {
Sezam/AGLockSettingsListController.m:785:                        AGDiaryInfo(@"UpdateManualNotificationViaBridge", @"Update to ON Succeeded");
Sezam/AGLockSettingsListController.m:787:                        AGDiaryError(@"UpdateManualNotificationViaBridge", @"Update to ON Failed");
Sezam/AGLockSettingsListController.m:790:                [self.lock checkForBridgeAndUpdateManualNotifications:@"both" withType:kautorelockNotification usingBlock:^(BOOL succeeded, NSError *error) {
Sezam/AGLockSettingsListController.m:792:                        AGDiaryInfo(@"UpdateAutoRelockNotificationViaBridge", @"Update to ON Succeeded");
Sezam/AGLockSettingsListController.m:794:                        AGDiaryError(@"UpdateAutoRelockNotificationViaBridge", @"Update to ON Failed");
Sezam/AGLockSettingsListController.m:798:                [self.lock checkForBridgeAndUpdateManualNotifications:@"neither" withType:kmanualNotification usingBlock:^(BOOL succeeded, NSError *error) {
Sezam/AGLockSettingsListController.m:800:                        AGDiaryInfo(@"UpdateManualNotificationViaBridge", @"Update to OFF Succeeded");
Sezam/AGLockSettingsListController.m:802:                        AGDiaryError(@"UpdateManualNotificationViaBridge", @"Update to OFF Failed");
Sezam/AGLockSettingsListController.m:805:                [self.lock checkForBridgeAndUpdateManualNotifications:@"neither" withType:kautorelockNotification usingBlock:^(BOOL succeeded, NSError *error) {
Sezam/AGLockSettingsListController.m:807:                        AGDiaryInfo(@"UpdateAutoRelockNotificationViaBridge", @"Update to OFF Succeeded");
Sezam/AGLockSettingsListController.m:809:                        AGDiaryError(@"UpdateAutoRelockNotificationViaBridge", @"Update to OFF Failed");
Sezam/AGLockSettingsListController.m:830:        [self performSegueWithIdentifier:@"LockSettingsToDisconnectFromZWave" sender:self];
Sezam/AGLockSettingsListController.m:832:        [self performSegueWithIdentifier:@"LockSettingsToConnectToZWave" sender:self];
Sezam/AGLockSettingsListController.m:841:            if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGLockSettingsListController.m:842:                self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGLockSettingsListController.m:845:                    [self performSegueWithIdentifier:@"LockSettingsToDisconnectFromZWave" sender:self];
Sezam/AGLockSettingsListController.m:850:                    [self performSegueWithIdentifier:@"LockSettingsToConnectToZWave" sender:self];
Sezam/AGLockSettingsListController.m:861:    UIAlertController *zWaveOTAAlertController = [UIAlertController alertControllerWithTitle:@"Firmware Update In Progress" message:@"A ZWave Firmware Update is in progress. Please wait roughly 2 minutes for this to complete and then try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:862:    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockSettingsListController.m:872:    UIStoryboard *unitySettingsStoryboard = [UIStoryboard storyboardWithName:@"UnityModule" bundle:[NSBundle mainBundle]];
Sezam/AGLockSettingsListController.m:873:    AGUnityModuleSettingsViewController *unitySettingsViewController = (AGUnityModuleSettingsViewController *)[unitySettingsStoryboard instantiateViewControllerWithIdentifier: @"UnitySettingsViewController"];
Sezam/AGLockSettingsListController.m:882:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGLockSettingsListController.m:884:    return lockSerial ? lockSerial : @"";
Sezam/AGLockSettingsListController.m:899:    if ([segue.identifier isEqualToString:@"ShowHomeKitSetup"]) {
Sezam/AGLockSettingsListController.m:907:    else if ([segue.identifier isEqualToString:@"lockSettingsToLockName"]) {
Sezam/AGLockSettingsListController.m:911:    else if ([segue.identifier isEqualToString:@"lockSettingsToFactoryReset"]) {
Sezam/AGLockSettingsListController.m:916:    else if ([segue.identifier isEqualToString:@"LockSettingsToAssociateDoorbell"]) {
Sezam/AGLockSettingsListController.m:919:    }else if ([segue.identifier isEqualToString:@"LockSettingsToDisconnectFromZWave"]) {
Sezam/AGLockSettingsListController.m:923:    else if ([segue.identifier isEqualToString:@"LockSettingsToConnectToZWave"]) {
Sezam/AGLockSettingsListController.m:927:    else if ([segue.identifier isEqualToString:@"LockSettingsToDoorSense"]) {
Sezam/AGLockSettingsListController.m:930:    } else if ([segue.identifier isEqualToString:@"LockSettingsToDeviceInfo"]) {
Sezam/AGLockSettingsListController.m:940:    return [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGVideoStreamUtility.m:34:            connectionTypeStr = @"IV_UNKNOWN";
Sezam/AGVideoStreamUtility.m:37:            connectionTypeStr = @"IV_LOCAL_TRAVERSAL";
Sezam/AGVideoStreamUtility.m:40:            connectionTypeStr = @"IV_NAT_TRAVERSAL";
Sezam/AGVideoStreamUtility.m:43:            connectionTypeStr = @"IV_RELAY_TRAVERSAL";
Sezam/AGVideoStreamUtility.m:46:            connectionTypeStr = @"IV_PROXY_TRAVERSAL";
Sezam/AGVideoStreamUtility.m:49:            connectionTypeStr = @"UNKNOWN";
Sezam/AGAutoUnlockReportProblemView.m:58:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockReportProblemView.m:59:    self.titleLabel.text = @"WHAT HAPPENED?";
Sezam/AGAutoUnlockReportProblemView.m:64:    [self.cancelButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemView.m:71:    self.selectAnIssueLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockReportProblemView.m:72:    self.selectAnIssueLabel.text = @"Please select an issue below:";
Sezam/AGAutoUnlockReportProblemView.m:96:    self.additionalInfoDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemView.m:99:    self.additionalInfoDescriptionLabel.text = @"ADDITIONAL INFORMATION";
Sezam/AGAutoUnlockReportProblemView.m:108:    self.additionalInfoTextView.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockReportProblemView.m:118:    self.sendReportButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemView.m:119:    [self.sendReportButton setTitle:@"SEND REPORT" forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemView.m:248:        textView.text = @"";
Sezam/AGAutoUnlockReportProblemView.m:272:    if([text isEqualToString:@"\n"]) {
Sezam/AGHomeKitSetupNavController.m:15:#define kAGDiaryCategory @"HKSetupNav"
Sezam/AGHomeKitSetupNavController.m:36:    AGDiaryDebug(@"StartGettingHomeKitData", @"HKData");
Sezam/AGHomeKitSetupNavController.m:60:    if([accessory.name rangeOfString:@"Aug"].location == 0) {
Sezam/AGHomeKitSetupNavController.m:62:    } else if([accessory.name rangeOfString:@"L3"].location == 0 || [accessory.name hasPrefix:@"M1"]) {
Sezam/AGHomeKitSetupNavController.m:69:    AGDiaryDebug(@"GotHomeKitData", @"HKData");
Sezam/AGKeypadInviteUserCellTableViewCell.m:44:    self.checkMark.image = [UIImage imageNamed:@"check_v2"];
Sezam/AGKeypadInviteUserCellTableViewCell.m:66:            self.pinCode.text = @"";
Sezam/AGKeypadInviteUserCellTableViewCell.m:68:            self.pinCode.text = [NSString stringWithFormat:@"#%@", pinEntry.pinCode];
Sezam/AGDoorbellBrightnessUtility.m:38:                                                @(AGDoorbellBrightnessUserValue_Off):@"Off",
Sezam/AGDoorbellBrightnessUtility.m:39:                                                @(AGDoorbellBrightnessUserValue_Low):@"Low",
Sezam/AGDoorbellBrightnessUtility.m:40:                                                @(AGDoorbellBrightnessUserValue_Medium):@"Medium",
Sezam/AGDoorbellBrightnessUtility.m:41:                                                @(AGDoorbellBrightnessUserValue_High):@"High",
Sezam/AGDoorbellVideoDownloadManager.m:20:static NSString *kAGDiaryCategory = @"DoorbellVideoDownloadManager";
Sezam/AGDoorbellVideoDownloadManager.m:105:            UIAlertController *downloadInProgressAlert = [UIAlertController alertControllerWithTitle:@"Download in Progress"
Sezam/AGDoorbellVideoDownloadManager.m:106:                                                                                            message:@"You already have a video download in progress. Please wait until your other download completes, then try again."
Sezam/AGDoorbellVideoDownloadManager.m:108:            [downloadInProgressAlert addAction:[UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellVideoDownloadManager.m:115:            [downloadInProgressAlert addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellVideoDownloadManager.m:175:        AGDiaryDebug(@"DownloadedData", @"read: %u, total: %lld, expected: %lld", bytesRead, totalBytesRead, totalBytesExpectedToRead);
Sezam/AGDoorbellVideoDownloadManager.m:187:            [[NSNotificationCenter defaultCenter] postNotificationName:AG_DOWNLOAD_MANAGER_ERROR object:nil userInfo:@{  @"Error" : @"There was an error downloading the video."}];
Sezam/AGDoorbellVideoDownloadManager.m:188:            AGDiaryDebug(@"MissingFile", @"Missing file");
Sezam/AGDoorbellVideoDownloadManager.m:194:        NSLog(@"ERR: %@", [error description]);
Sezam/AGDoorbellVideoDownloadManager.m:197:        [[NSNotificationCenter defaultCenter] postNotificationName:AG_DOWNLOAD_MANAGER_ERROR object:nil userInfo:@{  @"Error" : @"There was an error downloading the video."}];
Sezam/AGDoorbellVideoDownloadManager.m:223:                AGDiaryInfo(@"ShareSheetActivity", @"The ShareSheetActivity: %@ was completed", activityType);
Sezam/AGDoorbellVideoDownloadManager.m:225:                AGDiaryError(@"ShareSheetActivity", @"The Activity: %@ was NOT completed", activityType);
Sezam/AGDoorbellVideoDownloadManager.m:243:        AGDiaryDebug(@"VideoDownloadCompleted", @"Completed Video Download");
Sezam/AGDoorbellVideoDownloadManager.m:245:        AGDiaryDebug(@"VideoDownloadCancelled", @"Cancelled Video Download");
Sezam/AGDoorbellVideoDownloadManager.m:255:    if ((self.doorbell.pubsubChannel != nil) && (![self.doorbell.pubsubChannel isEqualToString:@""])) {
Sezam/AGDoorbellVideoDownloadManager.m:270:        dict = dict[@"data"];
Sezam/AGDoorbellVideoDownloadManager.m:272:            NSString *transactionID = [dict objectForKey:@"transactionID"];
Sezam/AGDoorbellVideoDownloadManager.m:274:                AGDiaryDebug(@"VideoEvent", @"got event %@", dict);
Sezam/AGDoorbellVideoDownloadManager.m:282:    NSString *state = dict[@"state"];
Sezam/AGDoorbellVideoDownloadManager.m:283:    if ([state isEqualToString:@"doorbell_video_ready"]) {
Sezam/AGDoorbellVideoDownloadManager.m:286:        NSString *videoURL = dict[@"mp4URL"];
Sezam/AGDoorbellVideoDownloadManager.m:295:        if ([state isEqualToString:@"doorbell_video_encoding_failed"]) {
Sezam/AGColors.h:11:#define kAGCellSelectedBackgroundGray  @"cellSelectedBackgroundGray"
Sezam/AGColors.h:12:#define kAGColorLightishGray  @"lightishGray"
Sezam/AGColors.h:13:#define kAGColorLightGray  @"lightGray"
Sezam/AGColors.h:14:#define kAGColorInactiveLightGray @"inactiveLightGray"
Sezam/AGColors.h:15:#define kAGColorDarkGray  @"darkGray"
Sezam/AGColors.h:16:#define kAGColorDarkishGray  @"darkishGray"
Sezam/AGColors.h:17:#define kAGColorOrangeYellow  @"orangeYellow"
Sezam/AGColors.h:18:#define kAGColorNavigationBG  @"navigationBG"
Sezam/AGColors.h:19:#define kAGColorFormField  @"formField"
Sezam/AGColors.h:20:#define kAGColorTeal  @"teal"
Sezam/AGColors.h:21:#define kAGColorGreen  @"green"
Sezam/AGColors.h:22:#define kAGColorRed  @"red"
Sezam/AGColors.h:23:#define kAGColorLightGreen  @"lightGreen"
Sezam/AGColors.h:24:#define kAGColorLightOrange  @"lightOrange"
Sezam/AGColors.h:25:#define kAGColorLightBlue  @"lightBlue"
Sezam/AGColors.h:26:#define kAGColorLightPink  @"lightPink"
Sezam/AGColors.h:27:#define kAGColorLightYellow  @"lightYellow"
Sezam/AGColors.h:28:#define kAGColorLightPurple  @"lightPurple"
Sezam/AGColors.h:29:#define kAGColorQAGreen  @"qaGreen"
Sezam/AGColors.h:30:#define kAGColorDestructiveRed @"destructiveRed"
Sezam/AGColors.h:31:#define kAGColorPendingTeal  @"pendingTeal"
Sezam/AGColors.h:32:#define kAGColorMidnightPurple  @"midnightPurple"
Sezam/AGDoorbellVideoStreamController.m:38:#define kAGDiaryCategory @"Doorbell"
Sezam/AGDoorbellVideoStreamController.m:92:        self.isDebugging = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellVideoStreamController.m:127:    NSAssert([self.videoStream conformsToProtocol:@protocol(AGVideoStream)], @"VideoStream must conform to AGVideoStream Protocol");
Sezam/AGDoorbellVideoStreamController.m:128:    NSAssert([self.audioStream conformsToProtocol:@protocol(AGAudioStream)], @"AudioStream must conform to AGAudioStream Protocol");
Sezam/AGDoorbellVideoStreamController.m:166:    self.view.closeButtonDescriptionLabel.text = @"END";
Sezam/AGDoorbellVideoStreamController.m:187:                UIAlertController *doorbellOfflineAlert = [UIAlertController alertControllerWithTitle:@"Doorbell Offline" message:@"Your doorbell is offline and unavailable. Please check your doorbell WiFi or restart your doorbell" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellVideoStreamController.m:188:                [doorbellOfflineAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellVideoStreamController.m:375:    updatedDoorbellSettings[@"flashBrightness"] = updatedDoorbellBrightnessNum;
Sezam/AGDoorbellVideoStreamController.m:377:    updatedDoorbellSettings[@"date"] = [AGDateUtils ISO8601UTCDateTimeStringFromDate:[NSDate date]];
Sezam/AGDoorbellVideoStreamController.m:378:    updatedDoorbellSettings[@"origin"] = @"iOS";
Sezam/AGDoorbellVideoStreamController.m:379:    [updatedDoorbellSettings nilSafeSetObject:self.doorbell.objectId forKey:@"doorbellID"];
Sezam/AGDoorbellVideoStreamController.m:380:    updatedDoorbellSettings[@"event"] = @"doorbell_settings_changed";
Sezam/AGDoorbellVideoStreamController.m:386:                                                                                                                @"status":@"doorbell_settings_changed",
Sezam/AGDoorbellVideoStreamController.m:387:                                                                                                                @"callID": [NSNull null],
Sezam/AGDoorbellVideoStreamController.m:388:                                                                                                                @"origin":@"iOS",
Sezam/AGDoorbellVideoStreamController.m:389:                                                                                                                @"data":updatedDoorbellSettings
Sezam/AGDoorbellVideoStreamController.m:391:    [doorbellSettingsChangedPubNubMessage nilSafeSetObject:self.doorbell.objectId forKey:@"doorbellID"];
Sezam/AGDoorbellVideoStreamController.m:421:        AGDiaryDebug(@"stateChange", @"stream:%@ didChangeState:%@", stream, [NSString stringFromVideoState:state]);
Sezam/AGDoorbellVideoStreamController.m:558:    if  ([AGUtility checkTriggerTooltipForKey:@"UnlockButton" initialDefaultTriggerOn:true]) {
Sezam/AGDoorbellVideoStreamController.m:639:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGDoorbellVideoStreamController.m:642:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGDoorbellVideoStreamController.m:644:        NSDictionary *doorbellSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"DoorbellSuccessMetics"];
Sezam/AGDoorbellVideoStreamController.m:646:            NSNumber *successCount = (NSNumber *)doorbellSuccessMetrics[@"successCount"];
Sezam/AGDoorbellVideoStreamController.m:647:            NSNumber *failureCount = (NSNumber *)doorbellSuccessMetrics[@"failureCount"];
Sezam/AGDoorbellVideoStreamController.m:656:                AGAnalyticsDiaryInfo(@"DoorbellEvaluateSuccessRate", [NSString stringWithFormat:@"%f", doorbellSuccessRate]);
Sezam/AGDoorbellVideoStreamController.m:664:                    AGAnalyticsDiaryInfo(@"DoorbellShowAlertMessage", @"No");
Sezam/AGDoorbellVideoStreamController.m:679:    BOOL doNotShowSlowCellularAlertAgain =  [[NSUserDefaults standardUserDefaults] boolForKey:@"DoNotShowSlowCellularAlert"];
Sezam/AGDoorbellVideoStreamController.m:681:        UIAlertController *slowCellularConnectionAlertController = [UIAlertController alertControllerWithTitle:@"Slow Cellular Connection"
Sezam/AGDoorbellVideoStreamController.m:682:                                                                                                       message:@"It appears you are using a lower-bandwidth 3G or Edge cellular connection. Please be advised that this can affect video streaming performance."
Sezam/AGDoorbellVideoStreamController.m:684:        [slowCellularConnectionAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellVideoStreamController.m:687:        [slowCellularConnectionAlertController addAction:[UIAlertAction actionWithTitle:@"Don't Show Again"
Sezam/AGDoorbellVideoStreamController.m:690:                                                                                    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"DoNotShowSlowCellularAlert"];
Sezam/AGDoorbellVideoStreamController.m:699:    UIAlertController * failed = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"doorbell_call_failed_title", nil)
Sezam/AGDoorbellVideoStreamController.m:700:                                                                     message:NSLocalizedString(@"doorbell_call_failed_message", nil)
Sezam/AGDoorbellVideoStreamController.m:702:    [failed addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"doorbell_call_failed_okay", nil) style:UIAlertActionStyleCancel handler:^(UIAlertAction *action)
Sezam/AGDoorbellVideoStreamController.m:743:    metrics[@"oldState"] = [NSString stringFromVideoState:oldState];
Sezam/AGDoorbellVideoStreamController.m:744:    metrics[@"newState"] = [NSString stringFromVideoState:newState];
Sezam/AGDoorbellVideoStreamController.m:745:    metrics[@"split"] = @([[NSDate date] timeIntervalSinceDate:self.split]);
Sezam/AGDoorbellVideoStreamController.m:746:    metrics[@"cumulative"] = @([[NSDate date] timeIntervalSinceDate:self.startTime]);
Sezam/AGDoorbellVideoStreamController.m:747:    metrics[@"protocol"] = [self.videoStream protocolName];
Sezam/AGDoorbellVideoStreamController.m:748:    metrics[@"library"] = usingIntellivision ? @"inteliivisionSDK" : @"GoogleWebRTC";
Sezam/AGDoorbellVideoStreamController.m:749:    metrics[@"sessionID"] = [self.videoStream sessionID];
Sezam/AGDoorbellVideoStreamController.m:750:    metrics[@"doorbellID"] = [self.doorbell serialNumber];
Sezam/AGDoorbellVideoStreamController.m:751:    metrics[@"clientVersion"] = [[NSBundle mainBundle] infoDictionary][@"CFBundleVersion"];
Sezam/AGDoorbellVideoStreamController.m:752:    metrics[@"firmwareVersion"] = self.doorbell.firmwareVersion;
Sezam/AGDoorbellVideoStreamController.m:753:    metrics[@"connectivity"] = @"p2p";
Sezam/AGDoorbellVideoStreamController.m:754:    metrics[@"platform"]  = @"ios";
Sezam/AGDoorbellVideoStreamController.m:755:    metrics[@"attempt_number"] = @(self.connectionAttempt);
Sezam/AGDoorbellVideoStreamController.m:761:        network = @"wifi";
Sezam/AGDoorbellVideoStreamController.m:763:        network = @"lte";
Sezam/AGDoorbellVideoStreamController.m:765:    metrics[@"network"] = network;
Sezam/AGDoorbellVideoStreamController.m:771:    AGAnalyticsDiaryDebugData(@"VulcanCall", metrics);
Sezam/AGDoorbellVideoStreamController.m:779:        self.kibanaVideoCallLog.videoCallVersion = @"v2";
Sezam/AGInviteUserStatusViewController.m:79:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestCell"];
Sezam/AGInviteUserStatusViewController.m:87:        cell = [tableView dequeueReusableCellWithIdentifier:@"OwnerCell"];
Sezam/AGInviteUserStatusViewController.m:96:        cell = [tableView dequeueReusableCellWithIdentifier:@"PinCell"];
Sezam/AGInviteUserStatusViewController.m:105:        cell = [tableView dequeueReusableCellWithIdentifier:@"NoneCell"];
Sezam/AGInviteUserStatusViewController.m:113:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGInviteUserStatusViewController.m:126:    cell.accessibilityLabel = [cell.textLabel.text stringByReplacingOccurrencesOfString:@" " withString:@""];
Sezam/AGInviteUserStatusViewController.m:183:        guestCell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGInviteUserStatusViewController.m:189:        ownerCell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGInviteUserStatusViewController.m:195:        pinCell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGInviteUserStatusViewController.m:205:        noneCell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGInviteUserStatusViewController.m:248:    _accessLevelQuestionLabel.text = [NSString stringWithFormat: NSLocalizedString(@"What level of access do you want to give %@?",nil), self.userName];
Sezam/AGNewDeviceSetupViewController.m:42:    if ([segue.identifier isEqualToString:@"newDeviceSetupToOnboardingChecklist"]) {
Sezam/AGNewDeviceSetupViewController.m:52:    [self performSegueWithIdentifier:@"newDeviceSetupToOnboardingChecklist" sender:sender];
Sezam/AGNewDeviceSetupViewController.m:57:    [self performSegueWithIdentifier:@"newDeviceSetupToOnboardingChecklist" sender:sender];
Sezam/AGBridgeSetupCompleteViewController.m:36:    //NSAssert(self.setupNavController.wifiSSID != nil, @"wifiSSID cannot be nil.  Fix this in the previous step");
Sezam/AGBridgeSetupCompleteViewController.m:38:    NSAssert(self.setupNavController.agLock != nil, @"Lock cannot be nil.  Fix this in the previous step");
Sezam/AGBridgeSetupCompleteViewController.m:44:    self.lockLabel.text = [NSString stringWithFormat:@"\"%@\"", self.setupNavController.agLock.name];
Sezam/AGBridgeSetupCompleteViewController.m:47:        wifiSSIDDisplayText = @"";
Sezam/AGBridgeSetupCompleteViewController.m:49:    self.wifiLabel.text = [NSString stringWithFormat:@"\"%@\".", wifiSSIDDisplayText];
Sezam/AGBridgeSetupCompleteViewController.m:69:    AGDiaryInfo(@"SuccessClickDone", @"The user clicked the 'Done' button");
Sezam/AGLockSettingsView.m:120:                                            @(AGLockSettingsSectionType_Sounds):@"SOUNDS",
Sezam/AGLockSettingsView.m:121:                                            @(AGLockSettingsSectionType_Notifications):@"NOTIFICATIONS",
Sezam/AGLockSettingsView.m:122:                                            @(AGLockSettingsSectionType_Automation):@"AUTOMATION",
Sezam/AGLockSettingsView.m:123:                                            @(AGLockSettingsSectionType_Doorsense):@"DOORSENSE",
Sezam/AGLockSettingsView.m:124:                                            @(AGLockSettingsSectionType_Platforms):@"PLATFORMS",
Sezam/AGLockSettingsView.m:125:                                            @(AGLockSettingsSectionType_Utilities):@"UTILITIES",
Sezam/AGLockSettingsView.m:126:                                            @(AGLockSettingsSectionType_Information):@"INFORMATION",
Sezam/AGLockSettingsView.m:127:                                            @(AGLockSettingsSectionType_Debug):@"DEBUG"
Sezam/AGLockSettingsView.m:133:    self.lockSoundsCell.textLabel.text = @"Lock Sounds";
Sezam/AGLockSettingsView.m:137:    self.manualLockNotificationsCell.textLabel.text = @"Manual Lock Notifications";
Sezam/AGLockSettingsView.m:142:    if (![curGlobalExclusions containsObject:@"AGLockSettingsViewCell"]) {
Sezam/AGLockSettingsView.m:144:        [updatedGlobalExclusions addObject:@"AGLockSettingsViewCell"];
Sezam/AGLockSettingsView.m:213:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGLockSettingsView.m:247:        cell.textLabel.text = @"Lock Name";
Sezam/AGLockSettingsView.m:258:        cell.textLabel.text = @"Manage Lock Sounds";
Sezam/AGLockSettingsView.m:268:        cell.textLabel.text = @"Smart Alerts";
Sezam/AGLockSettingsView.m:272:        cell = [self.tableView dequeueReusableCellWithIdentifier:@"SmartAlertsCTACell"];
Sezam/AGLockSettingsView.m:278:        cell.textLabel.text = @"Auto-Lock";
Sezam/AGLockSettingsView.m:285:        cell.textLabel.text = @"Auto-Unlock";
Sezam/AGLockSettingsView.m:286:        cell.detailTextLabel.text = self.autoUnlockEnabled ? @"On" : @"Off";
Sezam/AGLockSettingsView.m:294:        cell.textLabel.text = @"DoorSense";
Sezam/AGLockSettingsView.m:300:        cell.textLabel.text = @"Door Ajar Timing";
Sezam/AGLockSettingsView.m:304:        cell.textLabel.text = @"HomeKit Settings";
Sezam/AGLockSettingsView.m:310:        cell.textLabel.text = @"Z-Wave Settings";
Sezam/AGLockSettingsView.m:316:        cell.textLabel.text = @"Keypad Settings (Unity)";   // TODO: Update Label
Sezam/AGLockSettingsView.m:322:        cell.textLabel.text = @"Sync Lock to Doorbell";
Sezam/AGLockSettingsView.m:326:        cell.textLabel.text = @"Calibrate Lock";
Sezam/AGLockSettingsView.m:332:        cell.textLabel.text = @"Factory Reset";
Sezam/AGLockSettingsView.m:336:        cell.textLabel.text = @"Installation Instructions";
Sezam/AGLockSettingsView.m:340:        cell.textLabel.text = @"Troubleshooting Help";
Sezam/AGLockSettingsView.m:341:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"external_link"]];
Sezam/AGLockSettingsView.m:345:        cell.textLabel.text = @"Device Information";
Sezam/AGLockSettingsView.m:349:        cell.textLabel.text = @"BT Reboot Period";
Sezam/AGLockSettingsView.m:353:        cell.textLabel.text = @"HomeKit Test Tool";
Sezam/AGLockSettingsView.m:373:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGLockSettingsView.m:376:    cell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGLockSettingsView.m:379:    cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"menu_arrow_v2"]];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:40:        self.inviteQuestionLabel.text = [NSString stringWithFormat:@"Your invitation has been sent to %@.\n\n Siri access for %@ can be enabled by the administrator of the HomeKit home." , [self.user displayName], [self.user firstName]];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:46:        self.inviteQuestionLabel.text = [NSString stringWithFormat:@"Your invitation has been sent to %@.\n\n Would you like give %@ the ability to use Siri to lock and unlock the door?" , [self.user displayName], [self.user firstName]];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:77:        AGHomeKitSiriActivationViewController *activationVC = (AGHomeKitSiriActivationViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"SiriActivation"];
Sezam/AGRadioTableCell.m:33:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGRadioTableCell.m:38:    self.radioSelectedImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGSmartAlertEditorController.m:66:    self.view.titleLabel.text = self.mode == AGSmartAlertEditorControllerMode_Edit ? @"EDIT SMART ALERT" : @"NEW SMART ALERT";
Sezam/AGSmartAlertEditorController.m:68:    [self.view.eventTimeIconImageView setImage:[UIImage imageNamed:@"iconClock"]];
Sezam/AGSmartAlertEditorController.m:73:    [self.view.destructiveActionButton setTitle:(self.mode == AGSmartAlertEditorControllerMode_Edit ? @"DELETE" : @"CANCEL") forState:UIControlStateNormal];
Sezam/AGSmartAlertEditorController.m:96:        [self.view.eventActionIconImageView setImage:[UIImage imageNamed:@"activity_profile_blank_v2"]];
Sezam/AGSmartAlertEditorController.m:99:    self.view.eventActionDescriptionLabel.text = actionDescription ? actionDescription : @"Choose an event";
Sezam/AGSmartAlertEditorController.m:108:    self.view.eventTimeDescriptionLabel.text = timeNeedsToBeSelected ? @"Choose a time": timeDescription;
Sezam/AGSmartAlertEditorController.m:127:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Discard SmartAlert?" message:@"This alert will not saved." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:128:        [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Editing" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:129:        [alertController addAction:[UIAlertAction actionWithTitle:@"Discard" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:138:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Discard Changes?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:139:        [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Editing" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:140:        [alertController addAction:[UIAlertAction actionWithTitle:@"Discard" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:189:        self.updatedNotificationRule.deviceType = @"lock";
Sezam/AGSmartAlertEditorController.m:192:                [self showErrorAlertWithMessage:@"SmartAlert could not be created. Please try again later."];
Sezam/AGSmartAlertEditorController.m:205:                [self showErrorAlertWithMessage:@"SmartAlert could not be updated. Please try again later."];
Sezam/AGSmartAlertEditorController.m:225:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Delete Smart Alert?" message:@"You will stop receiving notifications about this Smart Alert. This action cannot be undone." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:226:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:227:    [alertController addAction:[UIAlertAction actionWithTitle:@"Delete" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:238:            [self showErrorAlertWithMessage:@"SmartAlert could not be deleted. Please try again later."];
Sezam/AGSmartAlertEditorController.m:260:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:261:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGShareWithAugustComposeViewController.m:52:        self.userMessageTextArea.text = @"";
Sezam/AGShareWithAugustComposeViewController.m:65:    if([text isEqualToString:@"\n"]) {
Sezam/AGShareWithAugustComposeViewController.m:76:    NSURL *augustTermsAndConditionsURL = [NSURL URLWithString:@"http://august.com/legal/terms-of-service/"];
Sezam/AGShareWithAugustComposeViewController.m:89:                                                       alertControllerWithTitle:@"Upload Error"
Sezam/AGShareWithAugustComposeViewController.m:90:                                                       message:@"Unable to upload your story. Please try again."
Sezam/AGShareWithAugustComposeViewController.m:92:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"OK", @"OK action") style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){NSLog(@"OK action");}];
Sezam/AGShareWithAugustComposeViewController.m:101:    [self performSegueWithIdentifier:@"ComposeToConfirm" sender:nil];
Sezam/AGUpdateNameViewController.m:45:        [self.updateNameButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGUpdateNameViewController.m:49:    [self.updateNameButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGUpdateNameViewController.m:62:        errorMsg = NSLocalizedString(@"Please enter your first name.",nil);
Sezam/AGUpdateNameViewController.m:65:        errorMsg = NSLocalizedString(@"Please enter your last name.",nil);
Sezam/AGUpdateNameViewController.m:70:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGUpdateNameViewController.m:79:        [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:[AGUser currentUser]];
Sezam/AGAddHouseViewController.m:15:static NSString* kAGDiaryCategory = @"AddHouse";
Sezam/AGAddHouseViewController.m:28:    AGDiaryInfo(@"ShowAddNewHouse", @"Showing the 'Add New House' page");
Sezam/AGAddHouseViewController.m:34:        self.houseNameTextField.text = [NSString stringWithFormat:@"%@'s House", currentUser.firstName];
Sezam/AGAddHouseViewController.m:36:    self.houseImageView.image = [UIImage imageNamed:@"DefaultHouse"];
Sezam/AGAddHouseViewController.m:54:        UIAlertController *noHouseNameAlert = [UIAlertController alertControllerWithTitle:@"No House Name" message:@"Please enter a House Name before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:55:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:62:    if ([[[self houseImageView] image] isEqual: [UIImage imageNamed:@""]] || ![[self houseImageView] image]) {
Sezam/AGAddHouseViewController.m:63:        UIAlertController *noHouseImageAlert = [UIAlertController alertControllerWithTitle:@"No House Image" message:@"Please upload a House Image before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:64:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:85:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGAddHouseViewController.m:88:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), nil];
Sezam/AGAddHouseViewController.m:91:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGAddHouseViewController.m:100:    if ([buttonTitle isEqualToString:NSLocalizedString(@"Cancel",nil)]) {
Sezam/AGAddHouseViewController.m:103:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Take Photo",nil)]) {
Sezam/AGAddHouseViewController.m:106:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Select From Gallery",nil)]) {
Sezam/AGAddHouseViewController.m:139:    AGDiaryInfo(@"CreateHouse", @"Creating new House");
Sezam/AGAddHouseViewController.m:141:    UIAlertController *addingHouseAlert = [UIAlertController alertControllerWithTitle:@"Creating New House..." message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:143:    [AGHouse createHouseForUser:[AGUser currentUser] name:self.houseNameTextField.text city:@"" state:@""  postalCode:@""  street:@""  apartment:@""  usingBlock:^(AGHouse *house, NSError *error) {
Sezam/AGAddHouseViewController.m:148:                    AGDiaryError(@"ImageUploadFailed", @"Could not upload image for house");
Sezam/AGAddHouseViewController.m:149:                    [self showErrorMessage:@"Unable to upload image for House"];
Sezam/AGAddHouseViewController.m:156:            AGDiaryError(@"NetworkError", @"add house error: %@", error.localizedDescription);
Sezam/AGAddHouseViewController.m:157:            [self showErrorMessage:@"Unable to add House"];
Sezam/AGAddHouseViewController.m:164:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:165:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:179:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:180:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGAddHouseViewController.m:184:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGBridgeSettingsViewController.m:17:static NSString* kAGDiaryCategory = @"BridgeSettings";
Sezam/AGBridgeSettingsViewController.m:55:static NSString* kOfflineNotificationUsername = @"offline";
Sezam/AGBridgeSettingsViewController.m:62:    NSAssert(self.lock != nil, @"You forgot to set the lock before launching the AGBridgeSettingsViewController");
Sezam/AGBridgeSettingsViewController.m:63:    NSAssert(self.lock.bridge != nil, @"You're trying to show the AGBridgeSettingsViewController for a lock that has no bridge");
Sezam/AGBridgeSettingsViewController.m:65:    self.settingsTableViewDescriptions = [@[@"Notify When Offline", @"Firmware Version", @"Serial Number", @"Wi-Fi SNR", @"Wi-Fi Signal", @"BLE Signal", @"Troubleshooting Help", @"Disconnect Lock"] mutableCopy];
Sezam/AGBridgeSettingsViewController.m:82:    if ([self.lock.bridge.model isEqualToString:kAGBridgeModelVenus] || [self.lock.bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGBridgeSettingsViewController.m:86:        self.statusImage.image = [UIImage imageNamed:@"wifi_status_Logitech"];
Sezam/AGBridgeSettingsViewController.m:87:        self.statusLabel.text = NSLocalizedString(@"This lock is connected using a Logitech Harmony Hub.  Please consult the Harmony app for details.", nil);
Sezam/AGBridgeSettingsViewController.m:92:        self.statusImage.image = [UIImage imageNamed:@"WiFiIndicator_v2"];
Sezam/AGBridgeSettingsViewController.m:93:        self.statusLabel.text = NSLocalizedString(@"This lock is synced to an unknown Wi-Fi Bridge.", nil);
Sezam/AGBridgeSettingsViewController.m:124:        cell = [tableView dequeueReusableCellWithIdentifier:@"SwitchCell"];
Sezam/AGBridgeSettingsViewController.m:137:        cell = [tableView dequeueReusableCellWithIdentifier:@"DefaultCell"];
Sezam/AGBridgeSettingsViewController.m:144:                    cell.label2.text = @"N/A";
Sezam/AGBridgeSettingsViewController.m:151:                    cell.label2.text = @"N/A";
Sezam/AGBridgeSettingsViewController.m:155:                cell.label2.text = signalStrengthDictionary[@"WiFiSNR"];
Sezam/AGBridgeSettingsViewController.m:163:                cell.label2.text = signalStrengthDictionary[@"WiFiRSSI"];
Sezam/AGBridgeSettingsViewController.m:171:                cell.label2.text = signalStrengthDictionary[@"BLERSSI"];
Sezam/AGBridgeSettingsViewController.m:181:        cell = [tableView dequeueReusableCellWithIdentifier:@"SelectableCell"];
Sezam/AGBridgeSettingsViewController.m:201:        AGDiaryInfo(@"ClickShowHelp", @"User clicked the 'Help' button");
Sezam/AGBridgeSettingsViewController.m:206:        [self performSegueWithIdentifier:@"BridgeSettingsToDisconnect" sender:self];
Sezam/AGBridgeSettingsViewController.m:211:    if ([segue.identifier isEqualToString:@"BridgeSettingsToDisconnect"]) {
Sezam/AGBridgeSettingsViewController.m:225:        return NSLocalizedString(@"Bad", nil);
Sezam/AGBridgeSettingsViewController.m:228:        return NSLocalizedString(@"Poor", nil);
Sezam/AGBridgeSettingsViewController.m:231:        return NSLocalizedString(@"Good", nil);
Sezam/AGBridgeSettingsViewController.m:234:        return NSLocalizedString(@"Great", nil);
Sezam/AGBridgeSettingsViewController.m:245:        return NSLocalizedString(@"Bad", nil);
Sezam/AGBridgeSettingsViewController.m:248:        return NSLocalizedString(@"Poor", nil);
Sezam/AGBridgeSettingsViewController.m:251:        return NSLocalizedString(@"Good", nil);
Sezam/AGBridgeSettingsViewController.m:254:        return NSLocalizedString(@"Great", nil);
Sezam/AGBridgeSettingsViewController.m:266:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, wifiRSSI];
Sezam/AGBridgeSettingsViewController.m:269:        labelText = NSLocalizedString(@"Not Available", nil);
Sezam/AGBridgeSettingsViewController.m:271:    signalStrengthDictionary[@"WiFiRSSI"] = labelText;
Sezam/AGBridgeSettingsViewController.m:275:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, btRSSI];
Sezam/AGBridgeSettingsViewController.m:278:        labelText = NSLocalizedString(@"Not Available", nil);
Sezam/AGBridgeSettingsViewController.m:280:    signalStrengthDictionary[@"BLERSSI"] = labelText;
Sezam/AGBridgeSettingsViewController.m:284:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, wifiSNR];
Sezam/AGBridgeSettingsViewController.m:287:        labelText = NSLocalizedString(@"Not Available", nil);
Sezam/AGBridgeSettingsViewController.m:289:    signalStrengthDictionary[@"WiFiSNR"] = labelText;
Sezam/AGBridgeSettingsViewController.m:297:    signalStrengthDictionary[@"WiFiSNR"] = @"";
Sezam/AGBridgeSettingsViewController.m:298:    signalStrengthDictionary[@"BLERSSI"] = @"";
Sezam/AGBridgeSettingsViewController.m:299:    signalStrengthDictionary[@"WiFiRSSI"] = @"";
Sezam/AGBridgeSettingsViewController.m:306:    signalStrengthDictionary[@"WiFiSNR"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:307:    signalStrengthDictionary[@"BLERSSI"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:308:    signalStrengthDictionary[@"WiFiRSSI"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:360:                 NSDictionary *info = [response objectForKey:@"info"];
Sezam/AGBridgeSettingsViewController.m:364:                     int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSettingsViewController.m:365:                     int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSettingsViewController.m:366:                     int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGBridgeSettingsViewController.m:409:            AGDiaryError(@"BridgeNotificationRefreshError", [NSString stringWithFormat:@"BridgeNotificationErrorDetails: %@", error.localizedDescription]);
Sezam/AGBridgeSettingsViewController.m:434:                    AGDiaryInfo(@"UpdateBridgeOfflineNotification", @"Update to ON Succeeded");
Sezam/AGBridgeSettingsViewController.m:436:                    AGDiaryError(@"UpdateBridgeOfflineNotification", @"Update to ON Failed");
Sezam/AGBridgeSettingsViewController.m:442:                    AGDiaryInfo(@"UpdateBridgeOfflineNotification", @"Update to OFF Succeeded");
Sezam/AGBridgeSettingsViewController.m:444:                    AGDiaryError(@"UpdateBridgeOfflineNotification", @"Update to OFF Failed");
Sezam/AGBridgeSettingsViewController.m:454:    AGDiaryInfo(nil, @"User clicked the 'Back' button");
Sezam/AGDoorbellViewController.m:30:static NSString* kAGDiaryCategory = @"DoorbellViewController";
Sezam/AGDoorbellViewController.m:57:    self.debugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellViewController.m:65:        self.singleDoorbellDate.text = @"";
Sezam/AGDoorbellViewController.m:73:        NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:121:                NSDate *creationDate = doorbell.doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:122:                NSString *imageURL = doorbell.doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:163:        NSDate *existingDate = (NSDate *)existingDoorbellImage[@"date"];
Sezam/AGDoorbellViewController.m:164:        NSDate *newDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:174:    [[NSUserDefaults standardUserDefaults] setObject:doorbellImageDictionary forKey:[NSString stringWithFormat:@"doorbellImageDictionary_%@", doorbellID]];
Sezam/AGDoorbellViewController.m:185:        NSDictionary *doorbellImageDictionaryFromDisc = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"doorbellImageDictionary_%@", doorbellID]];
Sezam/AGDoorbellViewController.m:201:        NSDictionary *wakeupMessage = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:301:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" is disconnected from power. Please attach it to the mounting plate or turn the power back on.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:302:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:307:        NSString *doorbellLowBatteryKey = [NSString stringWithFormat:@"%@-lowbatterymessage", doorbell.objectId];
Sezam/AGDoorbellViewController.m:314:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" transformer has insufficient power to operate video.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:315:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:321:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" has a low battery and can not operate video.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:322:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:332:        NSDictionary *sendPing = @{@"status":@"doorbell_ping", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:367:    NSDictionary *simulateButtonPress = @{@"status":@"simulate_button_press", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:375:    NSDictionary *simulatePIR = @{@"status":@"simulate_pir", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:414:        recentDateString = @"Recent Image Not Available";
Sezam/AGDoorbellViewController.m:417:        NSString *recentImageUrl = (NSString *)doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:423:                                                       AGDiaryDebug(@"NotificationImage", @"Image Download Success");
Sezam/AGDoorbellViewController.m:430:                                                       AGDiaryError(@"NotificationImage", @"Image Download Failure");
Sezam/AGDoorbellViewController.m:434:        NSDate *recentImageDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:442:            [formatter setDateFormat:@"EEEE M/d/yy"];
Sezam/AGDoorbellViewController.m:444:            recentDateString = [NSString stringWithFormat:@"%@ %@", dateString, timeString];
Sezam/AGDoorbellViewController.m:446:            recentDateString = @"";
Sezam/AGDoorbellViewController.m:461:    [self.initiateDoorbellCallButton.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:20]];
Sezam/AGDoorbellViewController.m:464:    [self.initiateDoorbellCallButton setTitle:@"WATCH LIVE" forState:UIControlStateNormal];
Sezam/AGDoorbellViewController.m:465:    self.singleDoorbellStatusImageView.image = isDoorbellOnline ? [UIImage imageNamed:@"WiFiAvailable"] : [UIImage imageNamed:@"WiFiError"];
Sezam/AGDoorbellViewController.m:476:        self.otaProgressLabel.text = [NSString stringWithFormat:@"UPDATING %@%%", otaProgress.stringValue];
Sezam/AGDoorbellViewController.m:490:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGDoorbellViewController.m:491:    AGDoorbellWiFiSetupViewController *doorbellWiFiSetupViewController = [doorbellStoryboard instantiateViewControllerWithIdentifier:@"DoorbellWiFiSetup"];
Sezam/AGDoorbellViewController.m:506:    NSString *doorbellId = [messageData objectForKey:@"doorbellID"];
Sezam/AGDoorbellViewController.m:507:    NSString *status = messageData[@"status"];
Sezam/AGDoorbellViewController.m:509:        if ([status isEqual:@"imagecapture"]) {
Sezam/AGDoorbellViewController.m:512:        if ([status isEqual:@"doorbell_pong"] || [status isEqual:@"doorbell_call_status_online"] || [status isEqual:@"doorbell_back_online"] || [status isEqual:@"online"] || [status isEqual:@"awake"] || [status isEqual:@"offline"]) {
Sezam/AGDoorbellViewController.m:515:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellViewController.m:517:            if ([status isEqualToString:@"ota_update_initiate"]) {
Sezam/AGDoorbellViewController.m:519:            } else if ([status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellViewController.m:520:                NSDictionary *data = (NSDictionary *)messageData[@"data"];
Sezam/AGDoorbellViewController.m:521:                NSString *progressString = (NSString *)data[@"progress"];
Sezam/AGDoorbellViewController.m:528:    if ([messageData objectForKey:@"telemetry"] && doorbellId) {
Sezam/AGDoorbellViewController.m:529:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellViewController.m:548:    NSDictionary *data = imageDictionary[@"data"];
Sezam/AGDoorbellViewController.m:550:        NSDictionary *cloudinaryResult = data[@"cloudinaryResult"];
Sezam/AGDoorbellViewController.m:563:    NSString *url = [cloudinaryResult objectForKey:@"secure_url"];
Sezam/AGDoorbellViewController.m:564:    NSNumber *height = [NSNumber numberWithInt:[[cloudinaryResult objectForKey:@"height"] intValue]];
Sezam/AGDoorbellViewController.m:565:    NSNumber *width = [NSNumber numberWithInt:[[cloudinaryResult objectForKey:@"width"] intValue]];
Sezam/AGDoorbellViewController.m:566:    NSString *dateString = [cloudinaryResult objectForKey:@"created_at"];
Sezam/AGDoorbellViewController.m:568:    if ((dateString != nil) && (![dateString isEqualToString:@""])) {
Sezam/AGDoorbellViewController.m:575:        if (url) {doorbellImageDictionary[@"url"] = url;}
Sezam/AGDoorbellViewController.m:576:        if (height) {doorbellImageDictionary[@"height"] = height;}
Sezam/AGDoorbellViewController.m:577:        if (width) {doorbellImageDictionary[@"width"] = width;}
Sezam/AGDoorbellViewController.m:578:        if (date) {doorbellImageDictionary[@"date"] = date;}
Sezam/AGDoorbellViewController.m:596:                if ([status isEqualToString:@"online"]) {
Sezam/AGDoorbellViewController.m:651:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"DoorbellCell"];
Sezam/AGDoorbellViewController.m:654:    [formatter setDateFormat:@"EEEE MM-dd' 'HH:mm"];
Sezam/AGDoorbellViewController.m:660:        recentDateString = @"No Image Available";
Sezam/AGDoorbellViewController.m:662:        NSString *recentImageUrl = (NSString *)doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:673:                            AGDiaryError(@"DoorbellRecentImage", @"ImageDownloadFailure");
Sezam/AGDoorbellViewController.m:676:        NSDate *recentImageDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:680:            recentDateString = @"";
Sezam/AGDoorbellViewController.m:698:    cell.imageView2.image = [UIImage imageNamed:@"WiFiAvailable"];
Sezam/AGDoorbellViewController.m:700:        cell.imageView2.image = [UIImage imageNamed:@"WiFiError"];
Sezam/AGDoorbellViewController.m:704:    cell.label3.font = [UIFont fontWithName:@"ProximaNova-Regular" size:20];
Sezam/AGDoorbellViewController.m:708:        [cell.imageView3 setImage:[UIImage imageNamed:@"CompleteSetupButton"]];
Sezam/AGDoorbellViewController.m:712:        [cell.imageView3 setImage:[UIImage imageNamed:@"DoorbellActionButton"]];
Sezam/AGDoorbellViewController.m:713:        cell.label3.text = [NSString stringWithFormat:@"UPDATING %@%%", otaProgress.stringValue];
Sezam/AGDoorbellViewController.m:717:        [cell.imageView3 setImage:[UIImage imageNamed:@"DoorbellActionButton"]];
Sezam/AGDoorbellViewController.m:718:        cell.label3.text = @"WATCH LIVE";
Sezam/AGPubSubMessageBrokerClient.m:27:        } else if ([messageProtocol isEqual:@"pubnub"]) {
Sezam/AGPubSubMessageBrokerClient.m:29:        } else if ([messageProtocol isEqual:@"mqtt"]) {
Sezam/AGPubSubMessageBrokerClient.m:32:                self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Sezam/AGPubSubMessageBrokerClient.m:33:                self.host = @"dev-mqtt.august.com";
Sezam/AGPubSubMessageBrokerClient.m:36:                NSArray* urlComponentsArray = [messagingURL componentsSeparatedByString: @":"];
Sezam/AGPubSubMessageBrokerClient.m:38:                    self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Sezam/AGPubSubMessageBrokerClient.m:39:                    self.host = @"dev-mqtt.august.com";
Sezam/AGPubSubMessageBrokerClient.m:44:                    self.host = [hostURLString stringByReplacingOccurrencesOfString:@"/" withString:@""];
Sezam/AGFactoryResetViewController.m:19:#define kAGDiaryCategory @"FactoryResetVC"
Sezam/AGFactoryResetViewController.m:65:    NSString *resetDescription = @"Factory reset will restore your lock to its original settings. All current users will lose access to this lock.";
Sezam/AGFactoryResetViewController.m:66:    NSString *activeMonitoringResetDescription = @"If this lock is enrolled in an August Active Monitoring subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGFactoryResetViewController.m:70://        self.resetDescriptionLabel.text = [NSString stringWithFormat:@"%@\n\n%@", resetDescription, activeMonitoringResetDescription];
Sezam/AGFactoryResetViewController.m:91:        AGDiaryDebug(@"RemoveHomeKit", @"Removing lock from homekit if possible");
Sezam/AGFactoryResetViewController.m:100:                AGDiaryDebug(@"RemoveHomeKit4", @"Completed HomeKit reset successfully");
Sezam/AGFactoryResetViewController.m:102:                AGDiaryDebug(@"RemoveHomeKit4", @"Completed HomeKit reset with error %@", [error description]);
Sezam/AGFactoryResetViewController.m:104:            AGDiaryDebug(@"WaitingHK", @"Doing 15 sec delay");
Sezam/AGFactoryResetViewController.m:109:                AGDiaryDebug(@"WaitingHK2", @"Done waiting");
Sezam/AGFactoryResetViewController.m:119:    AGDiaryDebug(@"ConnectAndBLEFactoryReset", @"Connect and BLE factory reset");
Sezam/AGFactoryResetViewController.m:135:    AGDiaryDebug(@"ServerFactoryReset", @"Calling server to factory reset lock");
Sezam/AGFactoryResetViewController.m:139:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGFactoryResetViewController.m:155:    AGDiaryDebug(@"CompletedFactoryReset", @"Removing Last User Lock and Sync'ing to Watch SharedDefaults.");
Sezam/AGFactoryResetViewController.m:163:        AGDiaryDebug(@"HomeKitPermissionsAlert", @"Permissions problem removing from HomeKit");
Sezam/AGFactoryResetViewController.m:164:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"HomeKit Not Reset" message:@"Your lock has been factory reset and can be set up again, but you may not be able to set up HomeKit until the home's administrator removes the lock from HomeKit." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGFactoryResetViewController.m:183:                AGDiaryError(@"ErrrorDeletingHouse", [AGUtility userFacingDescriptionFromError:error]);
Sezam/AGFactoryResetViewController.m:187:            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedLock"];
Sezam/AGFactoryResetViewController.m:191:            NSUserDefaults *wkSharedDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.watchkitextension"];
Sezam/AGFactoryResetViewController.m:193:            [wkSharedDefaults removeObjectForKey:@"LastUsedLock"];
Sezam/AGFactoryResetViewController.m:206:            self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Restoring factory settings...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGFactoryResetViewController.m:216:    AGDiaryDebug(@"delayBLEFactoryReset", @"wait 15 seconds before trying factory reset again. Retries left %d", self.numTimesToCheckPairingState);
Sezam/AGFactoryResetViewController.m:228:    AGDiaryDebug(@"BleReset", @"Sending BLE reset command");
Sezam/AGFactoryResetViewController.m:230:    self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Restoring Factory Settings...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGFactoryResetViewController.m:236:            AGDiaryDebug(@"GotHKPairState", @"pairing state is %@. Num tries left %d", returnedValue, self.numTimesToCheckPairingState);
Sezam/AGFactoryResetViewController.m:245:                resetOperation.label = @"FactoryReset";
Sezam/AGFactoryResetViewController.m:246:                AGDiaryDebug(@"QueueingFactoryReset", @"Sending the BLE factory reset command");
Sezam/AGFactoryResetViewController.m:261:                AGDiaryDebug(@"GotHKPairState", @"State is %@", returnedValue);
Sezam/AGFactoryResetViewController.m:273:        resetOperation.label = @"FactoryReset";
Sezam/AGFactoryResetViewController.m:280:    AGDiaryDebug(@"NoConnection", @"Showing no connection alert");
Sezam/AGFactoryResetViewController.m:283:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Trouble Connecting", nil) message:NSLocalizedString(@"We're having trouble connecting to the lock to perform a factory reset. ", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"Don't Connect", nil) otherButtonTitles:NSLocalizedString(@"Try Again", nil), nil];
Sezam/AGFactoryResetViewController.m:293:        UIAlertController *zWaveEnabledAlertController = [UIAlertController alertControllerWithTitle:@"Factory Reset" message:@"You must disconnect your lock from Z-Wave before you can factory reset it. Please tap Z-Wave Settings and select Remove Z-Wave Device." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGFactoryResetViewController.m:294:        UIAlertAction *continueAction = [UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGFactoryResetViewController.m:298:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGFactoryResetViewController.m:309:    AGDiaryDebug(@"ResetHomeKitStart", @"User has tapped factory reset");
Sezam/AGFactoryResetViewController.m:310:    self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Connecting to Lock...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGFactoryResetViewController.m:324:            AGDiaryDebug(@"FirstConnection", @"User has connected to lock");
Sezam/AGHomeKitEditHomeViewController.m:65:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Unable To Delete Home" message: @"Your August Lock is already associated with this home. Disconnect your lock from HomeKit first." delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", "") otherButtonTitles: nil];
Sezam/AGHomeKitEditHomeViewController.m:70:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Are you sure you want to delete this home?" message:@"Deleting a home will remove any devices set up in it, as well as delete its rooms, zones, and scenes." delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel", "") otherButtonTitles:NSLocalizedString(@"Delete", nil), nil];
Sezam/AGHomeKitEditHomeViewController.m:105:        AGTableViewCell *cell = (AGTableViewCell *)[self.roomTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitEditHomeViewController.m:107:            cell.label.text = @"Add New Room...";
Sezam/AGHomeKitEditHomeViewController.m:119:        AGTableViewCell *cell = (AGTableViewCell *)[self.roomTableView dequeueReusableCellWithIdentifier:@"HKPrimaryHomeCell"];
Sezam/AGHomeKitEditHomeViewController.m:121:        cell.imageView0.image = self.desiredIsPrimaryHome ? [UIImage imageNamed:@"checkbox_checked_v2"] :  [UIImage imageNamed:@"checkbox_unchecked_v2"];
Sezam/AGHomeKitEditHomeViewController.m:139:        AGHomeKitManagerCreateRoomViewController *vc = (AGHomeKitManagerCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateRoom"];
Sezam/AGHomeKitEditHomeViewController.m:152:        AGHomeKitEditRoomViewController *vc = (AGHomeKitEditRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HKEditRoom"];
Sezam/AGKeypadSetupFailedViewController.m:34:        self.failTitleLabel.text = @"Setup Incomplete";
Sezam/AGKeypadSetupFailedViewController.m:35:        [self.retrySetupButton setTitle:NSLocalizedString(@"Ok", nil) forState:UIControlStateNormal];
Sezam/AGKeypadSetupFailedViewController.m:38:        [self.retrySetupButton setTitle:NSLocalizedString(@"RETRY SETUP", nil) forState:UIControlStateNormal];
Sezam/AGDataItemUploaderTests.m:16://NSString *const kTestKibanaLoggingEndpoint = @"https://logger.august.com/";
Sezam/AGDataItemUploaderTests.m:41://        [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Sezam/AGDataItemUploaderTests.m:43://        NSString *authStr = [NSString stringWithFormat:@"%@:%@", @"august_logger", @"TOqpr'jGl;9|ZVM"];
Sezam/AGDataItemUploaderTests.m:45://        NSString *authValue = [NSString stringWithFormat:@"Basic %@", [authData base64EncodedStringWithOptions:0]];
Sezam/AGDataItemUploaderTests.m:46://        [self.requestSerializer setValue:authValue forHTTPHeaderField:@"Authorization"];
Sezam/AGDataItemUploaderTests.m:49://        responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"text/plain"]];
Sezam/AGDataItemUploaderTests.m:129://            completionHandler(nil, response, [NSError errorWithDomain:@"TestError" code:-1 userInfo:nil]);
Sezam/AGDataItemUploaderTests.m:155:    AGDataUploadItem * uploadItem = [self testItem:@"test"];
Sezam/AGDataItemUploaderTests.m:171:        NSHTTPURLResponse * positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:172:                                                                   statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:186:    AGDataUploadItem *uploadItem = [self testItem:@"failed"];
Sezam/AGDataItemUploaderTests.m:204:        NSHTTPURLResponse *neg = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:205:                                                                  statusCode:0 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:206:        block(nil, neg, [NSError errorWithDomain:@"TestError" code:-1 userInfo:nil]);
Sezam/AGDataItemUploaderTests.m:217:    XCTestExpectation * backoffExpiration = [[XCTestExpectation alloc] initWithDescription:@"Waiting for the backoff to expire"];
Sezam/AGDataItemUploaderTests.m:223:    AGDataUploadItem *item2 = [self testItem:@"succeeded"];
Sezam/AGDataItemUploaderTests.m:238:        NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:239:                                                                  statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:249:        NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:250:                                                                  statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:265:    AGDataUploadItem *uploadItem = [self testItem:@"squatter" maxAttempts:attempts];
Sezam/AGDataItemUploaderTests.m:283:            NSHTTPURLResponse *neg = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:284:                                                                 statusCode:0 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:285:            block(nil, neg, [NSError errorWithDomain:@"TestError" code:-1 userInfo:nil]);
Sezam/AGDataItemUploaderTests.m:296:        XCTestExpectation * backoffExpiration = [[XCTestExpectation alloc] initWithDescription:@"Waiting for the backoff to expire"];
Sezam/AGDataItemUploaderTests.m:319:        AGDataUploadItem * item = [self testItem:[NSString stringWithFormat:@"%i", x]];
Sezam/AGDataItemUploaderTests.m:346:            NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:347:                                                                      statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:367:            @"type":@"app-ios",
Sezam/AGDataItemUploaderTests.m:368:            @"unique" : uniqueString,
Sezam/AGDataItemUploaderTests.m:369:            @"mdata1":@{
Sezam/AGDataItemUploaderTests.m:370:                    @"AGDataItemUploaderTestKey":@"abc123"
Sezam/AGDataItemUploaderTests.m:374:    AGDataUploadItem *uploadItem = [[AGDataUploadItem alloc] initWithData:data url:@"test" httpMethod:@"POST" maxUploadAttempts:attempts];
Sezam/AGAutoLockViewController.m:72:        self.view.autoLockDescriptionLabel.text = @"";
Sezam/AGAutoLockViewController.m:81:    self.view.autoLockModeLabel.text = self.autoLockMode == AGAutoLockMode_Instant ? @"Instant" : @"On a timer";
Sezam/AGAutoLockViewController.m:83:    self.view.autoLockTimeTitleLabel.text = self.autoLockMode == AGAutoLockMode_Instant ? @"Re-Lock Timing" : @"Auto-Lock Timing";
Sezam/AGAutoLockViewController.m:107:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Auto-Lock Settings" message:@"Instant Auto-Lock is not available after removing DoorSense. How would you like Auto-Lock to operate?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoLockViewController.m:108:    [alertController addAction:[UIAlertAction actionWithTitle:@"On a Timer" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoLockViewController.m:114:    [alertController addAction:[UIAlertAction actionWithTitle:@"Disable Auto-Lock" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoLockViewController.m:126:        return @"Your door will not lock automatically.\n";
Sezam/AGAutoLockViewController.m:130:            return @"Your door will automatically lock shortly after it’s unlocked.\n";
Sezam/AGAutoLockViewController.m:134:            return @"Your door will lock as soon as it is closed. If it hasn’t been opened, it will re-lock shortly after it’s unlocked.";
Sezam/AGAutoLockViewController.m:138:            return @"Your door will automatically lock once it has been closed for the duration specified below.";
Sezam/AGAutoLockViewController.m:141:    return @"";
Sezam/AGAutoLockViewController.m:178:                self.lockIsDoorStateCalibrated = [doorStateStr isKindOfClass:[NSString class]] && doorStateStr.length > 0 && ![doorStateStr isEqualToString:@"kAugDoorState_Init"];
Sezam/AGAutoLockViewController.m:203:    oper.label = @"Get AutoLock State";
Sezam/AGAutoLockViewController.m:210:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error updating Auto-Lock settings. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoLockViewController.m:211:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAutoLockViewController.m:266:    listPickerController.title = @"AUTO-LOCK WHEN";
Sezam/AGAutoLockViewController.m:267:    listPickerController.listItemTitles = @[@"Instant", @"On a timer"];
Sezam/AGAutoLockViewController.m:305:    NSString *minutesStr = shouldShowMinutes ? [NSString stringWithFormat:@"%lim", (long)minutes] : @"";
Sezam/AGAutoLockViewController.m:306:    NSString *secondsStr = shouldShowSeconds ? [NSString stringWithFormat:@"%lis", (long)remainingSeconds] : @"";
Sezam/AGAutoLockViewController.m:307:    NSString *separatorStr = shouldShowSeparator ? @" : " : @"";
Sezam/AGAutoLockViewController.m:309:    NSString *timeDescription = [NSString stringWithFormat:@"%@%@%@", minutesStr, separatorStr, secondsStr];
Sezam/AGWhatsNewViewController.m:38:    if ([segue.identifier isEqualToString:@"whatsNewToConnectedAppsNav"]) {
Sezam/AGWhatsNewViewController.m:51:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGWhatsNewViewController.m:52:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGDoorbellPubSubPoll.m:17:#define kAGDiaryCategory @"AGDoorbellPubSubVideoStream"
Sezam/AGDoorbellPubSubPoll.m:78:    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleMessagingHandlerReconnection) name:@"PubSubServiceReconnection" object:nil];
Sezam/AGDoorbellPubSubPoll.m:86:    AGDiaryInfo(@"PubSubPollWillBecomeInactive", @"");
Sezam/AGDoorbellPubSubPoll.m:97:        AGDiaryInfo(@"PubSubPollDidBecomeActive", @"Stored proxy info cleared");
Sezam/AGDoorbellPubSubPoll.m:163:    NSDictionary *wakeupMessage = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:165:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"send_wakeup" error:nil];
Sezam/AGDoorbellPubSubPoll.m:166:    AGDiaryInfo(@"WakeupSent", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:177:    AGDiaryInfo(@"AwakeReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:182:    NSDictionary *proxyDict = messageData[@"proxy"];
Sezam/AGDoorbellPubSubPoll.m:185:    proxyInfo.sessionID = proxyDict[@"session"];
Sezam/AGDoorbellPubSubPoll.m:186:    proxyInfo.proxyIP = proxyDict[@"proxyIP"];
Sezam/AGDoorbellPubSubPoll.m:187:    proxyInfo.deviceIP = proxyDict[@"deviceIP"];
Sezam/AGDoorbellPubSubPoll.m:194:        [self.eventLogger logIndependentEvent:@"PubNub" status:@"awake" error:nil];
Sezam/AGDoorbellPubSubPoll.m:196:        [self.eventLogger logIndependentEvent:@"PubNub" status:@"awake" error:@"proxy-awake-incomplete-data"];
Sezam/AGDoorbellPubSubPoll.m:212:    AGDiaryInfo(@"AwakeNoProxyReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:216:    NSDictionary *proxyDict = messageData[@"proxy"];
Sezam/AGDoorbellPubSubPoll.m:219:    proxyInfo.sessionID = proxyDict[@"session"];
Sezam/AGDoorbellPubSubPoll.m:220:    proxyInfo.proxyIP = proxyDict[@"proxyIP"];
Sezam/AGDoorbellPubSubPoll.m:221:    proxyInfo.deviceIP = proxyDict[@"deviceIP"];
Sezam/AGDoorbellPubSubPoll.m:228:        [self.eventLogger logIndependentEvent:@"PubNub" status:@"awake-no-proxy" error:nil];
Sezam/AGDoorbellPubSubPoll.m:230:        [self.eventLogger logIndependentEvent:@"PubNub" status:@"awake-no-proxy" error:@"incomplete-data"];
Sezam/AGDoorbellPubSubPoll.m:245:    AGDiaryInfo(@"SleepReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:253:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"asleep" error:nil];
Sezam/AGDoorbellPubSubPoll.m:276:    AGDiaryInfo(@"LowBatteryReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:285:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"doorbell_low_battery" error:nil];
Sezam/AGDoorbellPubSubPoll.m:347:    NSDictionary *reconnectMessage = @{@"status":@"reconnect", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:349:    [self.eventLogger logIndependentEvent:@"PubNub" status:@"reconnect" error:nil];
Sezam/AGDoorbellPubSubPoll.m:350:    AGDiaryInfo(@"ReconnectSent", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:385:    NSDictionary *telemetryRequestMessage = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:387:    AGDiaryInfo(@"GetTelemetrySent", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:392:    AGDiaryInfo(@"TelemetryReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:395:    self.telemetryInfo = [[AGDoorbellTelemetryInfo alloc] initWithDictionary:messageData[@"telemetry"]];
Sezam/AGDoorbellPubSubPoll.m:438:    NSDictionary *pingDoorbellMessage = @{@"status":@"doorbell_ping", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:440:    AGDiaryInfo(@"PingSent", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:469:    AGDiaryInfo(@"PongReceived", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:512:    NSDictionary *hiFiveMessage = @{@"hiFive":@"hiFive", @"origin":@"iOS", @"doorbellID":self.doorbell.objectId, @"hiFiveID":hiFiveID};
Sezam/AGDoorbellPubSubPoll.m:514:    AGDiaryInfo(@"SendHiFive", @"did:%@ hiFiveID:%@", self.doorbell.objectId, hiFiveID);
Sezam/AGDoorbellPubSubPoll.m:522:        AGDiaryInfo(@"HiFiveFailed", @"%@", self.doorbell.objectId);
Sezam/AGDoorbellPubSubPoll.m:536:    NSString *messageHiFiveID = messageData[@"hiFiveID"];
Sezam/AGDoorbellPubSubPoll.m:538:    AGDiaryInfo(@"HiFiveReceived", @"did:%@ hiFiveID:%@", self.doorbell.objectId, messageHiFiveID);
Sezam/AGDoorbellPubSubPoll.m:574:    NSString *status = messageData[@"status"];
Sezam/AGDoorbellPubSubPoll.m:576:    if ([status isEqual:@"awake"]) {
Sezam/AGDoorbellPubSubPoll.m:578:    }else if ([status isEqual:@"awake_no_proxy"]){
Sezam/AGDoorbellPubSubPoll.m:580:    }else if ([status isEqual:@"doorbell_low_battery"]){
Sezam/AGDoorbellPubSubPoll.m:582:    }else if ([status isEqual:@"sleep"]){
Sezam/AGDoorbellPubSubPoll.m:584:    }else if ([status isEqual:@"telemetry"]){
Sezam/AGDoorbellPubSubPoll.m:586:    }else if ([status isEqual:@"doorbell_pong"]){
Sezam/AGDoorbellPubSubPoll.m:588:    }else if ([messageData[@"hiFive"] isEqual:@"hiFive"]){
Sezam/AGDoorbellPubSubPoll.m:590:    }else if ([messageData[@"pubnub"] isEqual:@"reconnection"]) {
Sezam/AGDoorbellPubSubPoll.m:592:    }else if ([messageData[@"mqtt"] isEqual:@"reconnection"]) {
Sezam/AGAddContactViewController.m:21:static NSString* kAGDiaryCategory = @"GuestList";
Sezam/AGAddContactViewController.m:51:    [self performSegueWithIdentifier:@"AddContactToAddPhoneNumber" sender:self];
Sezam/AGAddContactViewController.m:55:    [self performSegueWithIdentifier:@"AddContacttoInviteEdit" sender:self];
Sezam/AGAddContactViewController.m:59:    [self performSegueWithIdentifier:@"AddContacttoUserExists" sender:self];
Sezam/AGAddContactViewController.m:71:    if ([segue.identifier isEqualToString:@"AddContacttoInviteEdit"]) {
Sezam/AGAddContactViewController.m:76:    if ([segue.identifier isEqualToString:@"AddContactToAddPhoneNumber"]) {
Sezam/AGNestConnectViewController.m:63:    self.descriptionLabel.text = @"Set Nest to Home or Away, see your home's temperature, and view relevant Nest Cam video, even events captured in your Activity Zones - all from the August Home app.";
Sezam/AGNestConnectViewController.m:94:    if ([[[UIDevice currentDevice] systemVersion] compare:@"8.0" options:NSNumericSearch] == NSOrderedAscending) {
Sezam/AGNestConnectViewController.m:96:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"iOS 8 or Later Required" message:@"In order to sync with Nest, you'll need iOS 8.0 or later." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:121:    [self performSegueWithIdentifier:@"nestConnectToLearnMore" sender:nil];
Sezam/AGNestConnectViewController.m:127:    self.connectingToNestAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting from Nest..." message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:132:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error disconnecting from Nest:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:151:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest structure data:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:160:                    NSString *structureName = [structureDetails objectForKey:@"name"];
Sezam/AGNestConnectViewController.m:162:                        structureName = @"Unknown";
Sezam/AGNestConnectViewController.m:164:                    NSString *structureId = [structureDetails objectForKey:@"structure_id"];
Sezam/AGNestConnectViewController.m:166:                        [structureDict setObject:structureName forKey:@"structureName"];
Sezam/AGNestConnectViewController.m:167:                        [structureDict setObject: structureId forKey:@"structureID"];
Sezam/AGNestConnectViewController.m:176:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:182:                        if ([house.houseType isEqualToString: @"superuser"]) {
Sezam/AGNestConnectViewController.m:190:                            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:212:        [self performSegueWithIdentifier:@"nestConnectToNestConfirm" sender:nil];
Sezam/AGNestConnectViewController.m:217:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestConnectViewController.m:218:        NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestConnectViewController.m:224:            [self performSegueWithIdentifier:@"nestConnectToNestStructureMap" sender:nil];
Sezam/AGNestConnectViewController.m:230:    self.linkingHouseToNestStructureAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Linking %@ to Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:234:        [self performSegueWithIdentifier:@"nestConnectToNestConfirm" sender:nil];
Sezam/AGNestConnectViewController.m:240:    if ([segue.identifier isEqualToString:@"nestConnectToNestStructureMap"]) {
Sezam/AGNestConnectViewController.m:245:    else if ([segue.identifier isEqualToString:@"nestConnectToLearnMore"]) {
Sezam/AGNestConnectViewController.m:246:        [segue.destinationViewController setUrlToLoad:[NSURL URLWithString:@"http://www.nest.com/"]];
Sezam/AGUtility.m.orig:54:static NSString *const kAugustAssociatedAuthDomain = @"auth.august.com";
Sezam/AGUtility.m.orig:59:static NSString * const kDVRBetaOnPassword = @"eKDXj9H059hmbQGHvHvfuIoujng=";
Sezam/AGUtility.m.orig:60:static NSString * const kDVRBetaOffPassword = @"IRfqJ2M317//zaXT4gK8veBY7kc=";
Sezam/AGUtility.m.orig:61:static NSString * const kSezamDebugPassword = @"M6Xonnuz+nWf51u0Ken9RQ6aUU8=";
Sezam/AGUtility.m.orig:62:static NSString * const kSezamLogPassword = @"mUV++nx0+w63S/T+U0eGY5dgcOA=";
Sezam/AGUtility.m.orig:63:static NSString * const kSHASecret = @"agiohb891nx9c;a";
Sezam/AGUtility.m.orig:64:static NSString * const kSHABetaSecret = @"mx9aOzB6*zJu!=.";
Sezam/AGUtility.m.orig:67:static NSString* minimumLockVersionForSeamless = @"1.1.4";      // This is the minimum Lock firmware Version for Seamless BLE WiFi Operation
Sezam/AGUtility.m.orig:68:static NSString* minimumBridgeVersionForSeamless = @"2.1.0";    // This is the minimum Bridge firmware Version for Seamless BLE WiFi Operation
Sezam/AGUtility.m.orig:71:#define kAGDiaryCategory @"Utility"
Sezam/AGUtility.m.orig:92:    NSString *fwName = [NSString stringWithFormat:@"LockFirmwareVersion_%@", lockID];
Sezam/AGUtility.m.orig:99:    NSString *fwName = [NSString stringWithFormat:@"LockFirmwareVersion_%@", lockID];
Sezam/AGUtility.m.orig:105:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"tooltip"];
Sezam/AGUtility.m.orig:127:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"tooltip"];
Sezam/AGUtility.m.orig:130:    [[NSUserDefaults standardUserDefaults] setObject:mutableDict forKey:@"tooltip"];
Sezam/AGUtility.m.orig:140:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"batterySnoozed"];
Sezam/AGUtility.m.orig:146:    [[NSUserDefaults standardUserDefaults] setObject:mutableSnoozes forKey:@"batterySnoozed"];
Sezam/AGUtility.m.orig:154:    NSDictionary *dict = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"batterySnoozed"];
Sezam/AGUtility.m.orig:168:	UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:[NSBundle mainBundle]];
Sezam/AGUtility.m.orig:169:    AGSignupNavController *signupNC = [storyboard instantiateViewControllerWithIdentifier:@"signupEntry"];
Sezam/AGUtility.m.orig:193:                if ([lock.type isEqualToString:@"superuser"])
Sezam/AGUtility.m.orig:196:                        house.highestDeviceType = @"superuser";
Sezam/AGUtility.m.orig:197:                    } else if (![house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGUtility.m.orig:198:                        house.highestDeviceType = @"manager";
Sezam/AGUtility.m.orig:218:                    house.highestDeviceType = @"superuser";
Sezam/AGUtility.m.orig:219:                } else if (![house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGUtility.m.orig:220:                    house.highestDeviceType = @"manager";
Sezam/AGUtility.m.orig:231:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name=%@", key];
Sezam/AGUtility.m.orig:245:    NSUInteger commaPos = [platformName rangeOfString:@","].location;
Sezam/AGUtility.m.orig:270:    NSString *stringWithComma = [[platformName substringWithRange:NSMakeRange(firstDigitStart, secondDigitEnd-firstDigitStart)] stringByReplacingOccurrencesOfString:@"," withString:@"."];
Sezam/AGUtility.m.orig:320:            return [cset countForObject:@"awdl0"] > 1 ? AGWifiStateEnabled : AGWifiStateDisabled;
Sezam/AGUtility.m.orig:336:    NSString *logsDirectory = [[shareURL path] stringByAppendingPathComponent:@"Logs"];
Sezam/AGUtility.m.orig:352:        NSDictionary *fileInfo = @{@"fileName": [prefix stringByAppendingString:logFileInfo.fileName], @"fileData" : fileData};
Sezam/AGUtility.m.orig:365:    NSMutableArray *appLogs = [AGUtility retrieveLogDataForLogger:appDelegate.fileLogger withNamePrefix:@""];
Sezam/AGUtility.m.orig:368:    DDFileLogger *watchLogger = [AGUtility loggerForApplicationGroupID:@"group.com.august.watchkitextension"];
Sezam/AGUtility.m.orig:369:    NSMutableArray *watchLogs = [AGUtility retrieveLogDataForLogger:watchLogger withNamePrefix:@"AppleWatch-"];
Sezam/AGUtility.m.orig:375:    NSString *logsFilePath = [NSString stringWithFormat:@"%@logs.zip", tmpDirPath];
Sezam/AGUtility.m.orig:379:        NSString *logFilePath = [NSString stringWithFormat:@"%@%@", tmpDirPath, curLogFile[@"fileName"]];
Sezam/AGUtility.m.orig:380:        NSData *logData = curLogFile[@"fileData"];
Sezam/AGUtility.m.orig:386:    BOOL zipSucceeded = [SSZipArchive createZipFileAtPath:logsFilePath withFilesAtPaths:logFilePaths withPassword:@"BlackBeard5"];
Sezam/AGUtility.m.orig:396:    return zipSucceeded ? logsFilePath : @"";
Sezam/AGUtility.m.orig:410:            NSString *logsTitle = [NSString stringWithFormat:@"AugustLogs_%li_%li_%li.zip", components.month, (long)components.day, (long)components.year];
Sezam/AGUtility.m.orig:412:            [mailViewController addAttachmentData:logData mimeType:@"text/plain" fileName:logsTitle];
Sezam/AGUtility.m.orig:420:        [mailViewController setSubject:NSLocalizedString(@"August Logs", @"")];
Sezam/AGUtility.m.orig:428:        NSString *message = NSLocalizedString(@"Sorry, your logs can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m.orig:429:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m.orig:445:        NSString *message = NSLocalizedString(@"Sorry, your Feedback can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m.orig:446:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m.orig:463:            NSString *logsTitle = [NSString stringWithFormat:@"AugustLogs_%li_%li_%li.zip", components.month, (long)components.day, (long)components.year];
Sezam/AGUtility.m.orig:465:            [mailViewController addAttachmentData:logData mimeType:@"text/plain" fileName:logsTitle];
Sezam/AGUtility.m.orig:477:        NSString *message = NSLocalizedString(@"Sorry, your Feedback can't be sent right now. This is most likely because no mail accounts are set up on your mobile device.", @"");
Sezam/AGUtility.m.orig:478:        [[[UIAlertView alloc] initWithTitle:nil message:message delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", @"") otherButtonTitles: nil] show];
Sezam/AGUtility.m.orig:527:	NSString * errorCode = @"";
Sezam/AGUtility.m.orig:534:			errorCode = jsonDict[@"code"];
Sezam/AGUtility.m.orig:551:	NSString * userFacingDescription = @"";
Sezam/AGUtility.m.orig:558:			userFacingDescription = jsonDict[@"message"];
Sezam/AGUtility.m.orig:594:    NSArray* components = [macAddress componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@":,. "]];
Sezam/AGUtility.m.orig:610:            [result appendFormat:@"%02X:", intValue];
Sezam/AGUtility.m.orig:701:        return @"User";
Sezam/AGUtility.m.orig:743:    if (NSClassFromString(@"NCWidgetController")){
Sezam/AGUtility.m.orig:745:        [widgetController setHasContent:TRUE forWidgetWithBundleIdentifier:@"group.com.august.today"];
Sezam/AGUtility.m.orig:788:        if ([errorString isEqualToString:@"An SSL error has occurred and a secure connection to the server cannot be made."]) {
Sezam/AGUtility.m.orig:789:            errorString = @"Connection to the server cannot be made.";
Sezam/AGUtility.m.orig:791:        [AGUtility sharedInstance].errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:errorString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGUtility.m.orig:809:        [AGUtility sharedInstance].infoAlertView = [[UIAlertView alloc] initWithTitle:@"August" message:infoString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGUtility.m.orig:874:    if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGUtility.m.orig:912:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m.orig:921:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m.orig:931:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m.orig:945:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, theFileName];
Sezam/AGUtility.m.orig:956:                           componentsJoinedByString:@""];
Sezam/AGUtility.m.orig:965:    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"countries" ofType:@"json"];
Sezam/AGUtility.m.orig:975:        NSString *shortCode = [entry objectForKey:@"code"];
Sezam/AGUtility.m.orig:977:            countryCode = [entry objectForKey:@"dial_code"];
Sezam/AGUtility.m.orig:985:        countryCode = @"+1";
Sezam/AGUtility.m.orig:994:    NBPhoneNumber *parsedPhoneNumber = [[NBPhoneNumberUtil sharedInstance] parse:phoneNumber defaultRegion:@"US" error:&error];
Sezam/AGUtility.m.orig:1006:    NSString *matchedUSDomesticNumber = [NSString stringWithFormat:@"%@%@%@",
Sezam/AGUtility.m.orig:1007:                                         (usDomesticAreaCode ? : @""),
Sezam/AGUtility.m.orig:1008:                                         (usDomesticGroupOne ? : @""),
Sezam/AGUtility.m.orig:1009:                                         (usDomesticGroupTwo ? : @"")];
Sezam/AGUtility.m.orig:1012:    NSString *formattedPhoneNumber = @"";
Sezam/AGUtility.m.orig:1013:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticAreaCode ? [NSString stringWithFormat:@"(%@) ", usDomesticAreaCode] : @"")];
Sezam/AGUtility.m.orig:1014:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticGroupOne ? [NSString stringWithFormat:@"%@-", usDomesticGroupOne] : @"")];
Sezam/AGUtility.m.orig:1015:    formattedPhoneNumber = [formattedPhoneNumber stringByAppendingString:(usDomesticGroupTwo ? : @"")];
Sezam/AGUtility.m.orig:1030:    return [NSString stringWithFormat:@"+%@", parsedPhoneNumber.countryCode.description];
Sezam/AGUtility.m.orig:1035:    [phoneNumberCharacterSet addCharactersInString:@"+"];
Sezam/AGUtility.m.orig:1037:    return [[phoneNumber componentsSeparatedByCharactersInSet:nonPhoneNumberCharacterSet] componentsJoinedByString:@""];
Sezam/AGUtility.m.orig:1054:    BOOL containsPlus = [dirtyPhone rangeOfString:@"+"].location != NSNotFound;
Sezam/AGUtility.m.orig:1060:        cleanedPhone = [NSString stringWithFormat:@"+%@", cleanedPhone];
Sezam/AGUtility.m.orig:1064:        if ([countryCode isEqualToString:@"+1"]) {
Sezam/AGUtility.m.orig:1065:            if ((cleanedPhone.length == 11) && ([[cleanedPhone substringToIndex:1] isEqualToString:@"1"])) {
Sezam/AGUtility.m.orig:1066:                cleanedPhone = [NSString stringWithFormat:@"+%@", cleanedPhone];
Sezam/AGUtility.m.orig:1069:                cleanedPhone = [NSString stringWithFormat:@"+1%@", cleanedPhone];
Sezam/AGUtility.m.orig:1076:            cleanedPhone = [NSString stringWithFormat:@"%@%@", countryCode, cleanedPhone];
Sezam/AGUtility.m.orig:1081:        cleanedPhone = [NSString stringWithFormat:@"phone:%@", cleanedPhone];
Sezam/AGUtility.m.orig:1089:    for (NSString *knownTypeLabelString in @[@"home", @"work", @"mobile", @"main", @"home fax", @"work fax", @"pager", @"other"]) {
Sezam/AGUtility.m.orig:1102:        cleanedEmail = [NSString stringWithFormat:@"email:%@", cleanedEmail];
Sezam/AGUtility.m.orig:1155:    if(firstName == nil) { firstName = @""; }
Sezam/AGUtility.m.orig:1156:    if(lastName == nil) { lastName = @""; }
Sezam/AGUtility.m.orig:1158:    NSString *name = [[NSString stringWithFormat:@"%@%@", firstName, lastName] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
Sezam/AGUtility.m.orig:1177:    if ([user.type.lowercaseString isEqualToString:@"superuser"]) {
Sezam/AGUtility.m.orig:1178:        return @"Owner";
Sezam/AGUtility.m.orig:1180:    else if ([user.type.lowercaseString isEqualToString:@"manager"]) {
Sezam/AGUtility.m.orig:1181:        return @"Host";
Sezam/AGUtility.m.orig:1183:    else if ([user.type.lowercaseString isEqualToString:@"limited"] || [user.type.lowercaseString isEqualToString:@"user"]) {
Sezam/AGUtility.m.orig:1184:        return @"Guest";
Sezam/AGUtility.m.orig:1187:    return @"";
Sezam/AGUtility.m.orig:1193:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtility.m.orig:1202:        return @"today";
Sezam/AGUtility.m.orig:1205:        return @"tomorrow";
Sezam/AGUtility.m.orig:1208:        return @"yesterday";
Sezam/AGUtility.m.orig:1211:        return @"upcoming";
Sezam/AGUtility.m.orig:1214:        return @"the past week";
Sezam/AGUtility.m.orig:1217:        return @"earlier";
Sezam/AGUtility.m.orig:1226:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtility.m.orig:1234:        return @"today";
Sezam/AGUtility.m.orig:1237:        return @"yesterday";
Sezam/AGUtility.m.orig:1289:    [dateKeyFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGUtility.m.orig:1290:    [dateKeyFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGUtility.m.orig:1458:        [dateKeyFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGUtility.m.orig:1459:        [dateKeyFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGUtility.m.orig:1528:    NSArray *orderArray = @[@"earlier", @"the past week", @"yesterday", @"today", @"tomorrow", @"upcoming"];
Sezam/AGUtility.m.orig:1553:    if ([sectionArray containsObject:@"today"]) {
Sezam/AGUtility.m.orig:1554:        [datesOnlyArray removeObject:@"today"];
Sezam/AGUtility.m.orig:1555:        [sortedSectionArray addObject:@"today"];
Sezam/AGUtility.m.orig:1557:    if ([sectionArray containsObject:@"yesterday"]) {
Sezam/AGUtility.m.orig:1558:        [datesOnlyArray removeObject:@"yesterday"];
Sezam/AGUtility.m.orig:1559:        [sortedSectionArray addObject:@"yesterday"];
Sezam/AGUtility.m.orig:1588:    return ([identifier rangeOfString:@"@"].location != NSNotFound);
Sezam/AGUtility.m.orig:1607:        NSString* SSID = [networkInfo objectForKey:@"SSID"];
Sezam/AGUtility.m.orig:1643:        if ([[partnerToken objectForKey:@"type"] isEqualToString:@"nest"]) {
Sezam/AGUtility.m.orig:1644:            if (![[partnerToken objectForKey:@"token"] isEqualToString:@"deleted"]) {
Sezam/AGUtility.m.orig:1655:        if ([[partnerToken objectForKey:@"type"] isEqualToString:@"airbnb"]) {
Sezam/AGUtility.m.orig:1656:            if (![[partnerToken objectForKey:@"token"] isEqualToString:@"deleted"]) {
Sezam/AGUtility.m.orig:1669:    if (([deviceType isEqualToString:@""]) || ([deviceType isEqual:[NSNull null]]) || (deviceType == nil)) {
Sezam/AGUtility.m.orig:1670:        deviceType = @"Unknown";
Sezam/AGUtility.m.orig:1759:        NSArray* recurrencesSplit = [rule.recurrence componentsSeparatedByString: @";"];
Sezam/AGUtility.m.orig:1767:        NSString* days = [bydayString stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGUtility.m.orig:1768:        NSArray* daysSplit = [days componentsSeparatedByString: @","];
Sezam/AGUtility.m.orig:1771:        return [NSString stringWithFormat:@"%@ %@ - %@",
Sezam/AGUtility.m.orig:1777:        return [NSString stringWithFormat:@"%@ - %@",
Sezam/AGUtility.m.orig:1785:    if ([doorbell.status isEqualToString:@"doorbell_offline"] || (doorbell.status == nil)) {
Sezam/AGUtility.m.orig:1821:            if ([bridge.model isEqualToString:@"august-connect"]) {
Sezam/AGUtility.m.orig:1826:            } else if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGUtility.m.orig:1859:    if ((lockFirmwareVersion_ThreeParts != nil) || ([lockFirmwareVersion_ThreeParts rangeOfString:@"-"].location != NSNotFound)) {
Sezam/AGUtility.m.orig:1860:        NSArray *lockFirmwareVersionComponentArray = [lockFirmwareVersion_ThreeParts componentsSeparatedByString:@"-"];
Sezam/AGUtility.m.orig:1880:    if (([lock.bridge.model isEqualToString:@"august-connect"]) || ([lock.bridge.model isEqualToString:@"august-doorbell"])) {
Sezam/AGUtility.m.orig:1891:    if (lockIsSeamlessCapable) {AGDiaryDebug(@"SeamlessBLEWifi", @"Lock is Seamless Capable");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"Lock is NOT Seamless Capable");}
Sezam/AGUtility.m.orig:1892:    if (bridgeIsSeamlessCapable) {AGDiaryDebug(@"SeamlessBLEWifi", @"Bridge is Seamless Capable");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"Bridge is NOT Seamless Capable");}
Sezam/AGUtility.m.orig:1898:    if (userhasSeamlessVenusWorkflowFirmware) {AGDiaryDebug(@"SeamlessBLEWifi", @"User has Firmware Capable of Seamless BLE WiFi Operation");} else {AGDiaryDebug(@"SeamlessBLEWifi", @"User does NOT have Firmware Capable of Seamless BLE WiFi Operation");}
Sezam/AGUtility.m.orig:1986:            NSString *timeZoneAbbreviation = [NSString stringWithFormat:@" %@",theTimezone.abbreviation];
Sezam/AGUtility.m.orig:1998:    [formatter setDateFormat:@"h:mm a"];
Sezam/AGUtility.m.orig:2006:        [timeLabel appendString:[NSString stringWithFormat:@" %@", timeZone.abbreviation]];
Sezam/AGUtility.m.orig:2016:    NSArray* recurrencesSplit = [recurrenceString componentsSeparatedByString: @";"];
Sezam/AGUtility.m.orig:2026:    NSString* days = [bydayString stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGUtility.m.orig:2027:    return [NSMutableSet setWithArray:[days componentsSeparatedByString: @","]];
Sezam/AGUtility.m.orig:2035:    NSArray *daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGUtility.m.orig:2043:    NSString * byDay = [[[setToOrder array] valueForKey:@"description"] componentsJoinedByString:@","];
Sezam/AGUtility.m.orig:2045:    byDay = [[reversedArray valueForKey:@"description"] componentsJoinedByString:@","];
Sezam/AGUtility.m.orig:2049:    NSString *rruleString = [NSString stringWithFormat:@"FREQ=WEEKLY;INTERVAL=1;BYDAY=%@", byDay];
Sezam/AGUtility.m.orig:2057:        AGDiaryInfo(@"UnableToCreateiCalString", @"Missing one of needed values: startDate or endDate or lock or picked Days");
Sezam/AGUtility.m.orig:2072:    [iCalString appendString:@"BEGIN:VCALENDAR"];
Sezam/AGUtility.m.orig:2073:    [iCalString appendString:@"\r\nVERSION:2.0"];
Sezam/AGUtility.m.orig:2074:    [iCalString appendString:@"\r\nPRODID:August Home App"];
Sezam/AGUtility.m.orig:2077:    [iCalString appendString:@"\r\nBEGIN:VEVENT"];
Sezam/AGUtility.m.orig:2081:    [iCalString appendFormat:@"\r\nUID:%@",uuid];
Sezam/AGUtility.m.orig:2086:    [dateFormatterTZ setDateFormat:@"yyyyMMdd'T'HHmmss"];
Sezam/AGUtility.m.orig:2090:    [dateFormatterNoTZ setDateFormat:@"yyyyMMdd'T'HHmmss'Z'"];
Sezam/AGUtility.m.orig:2091:    dateFormatterNoTZ.timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
Sezam/AGUtility.m.orig:2094:    [iCalString appendString:@"\r\nDTSTAMP:"];    //date the event was created, ie. now
Sezam/AGUtility.m.orig:2099:    [iCalString appendString:[NSString stringWithFormat:@"\r\nDTSTART;TZID=%@:", timeZone]];
Sezam/AGUtility.m.orig:2104:    [iCalString appendString:[NSString stringWithFormat:@"\r\nDTEND;TZID=%@:", timeZone]];
Sezam/AGUtility.m.orig:2109:    [iCalString appendString:@"\r\nLAST-MODIFIED:"];
Sezam/AGUtility.m.orig:2114:    NSString *rrule = [NSString stringWithFormat:@"\r\nRRULE:%@", recurrenceString];
Sezam/AGUtility.m.orig:2118:    [iCalString appendString:@"\r\nEND:VEVENT"];
Sezam/AGUtility.m.orig:2121:    [iCalString appendString:@"\r\nEND:VCALENDAR"];
Sezam/AGUtility.m.orig:2134:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m.orig:2199:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m.orig:2216:    NSDictionary *houseLocksDictionaryFromNSUserDefaults = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:@"lockOrder"];
Sezam/AGUtility.m.orig:2224:    [[NSUserDefaults standardUserDefaults] setObject:houseLocksMutableDictionaryFromNSUserDefaults.copy forKey:@"lockOrder"];
Sezam/AGUtility.m.orig:2262:    NSString *deviceID = [SSKeychain passwordForService:@"DeviceID" account:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m.orig:2264:        deviceID = [[NSUserDefaults standardUserDefaults] objectForKey:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m.orig:2296:    [SSKeychain setPassword:deviceID forService:@"DeviceID" account:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m.orig:2297:    [[NSUserDefaults standardUserDefaults] setObject:deviceID forKey:@"com.august.persistentDeviceID"];
Sezam/AGUtility.m.orig:2336:        case ERRNO_COMM_SUCCESS: return @"COMM_SUCCESS";
Sezam/AGUtility.m.orig:2337:        case ERRNO_PARAM_NOT_PAIRED: return @"PARAM_NOT_PAIRED";
Sezam/AGUtility.m.orig:2338:        case ERRNO_PARAM_NOT_READABLE: return @"PARAM_NOT_READABLE";
Sezam/AGUtility.m.orig:2339:        case ERRNO_WRONG_KEY: return @"WRONG_KEY";
Sezam/AGUtility.m.orig:2340:        case ERRNO_KEYCODE_INVALID_ACCESS: return @"KEYCODE_INVALID_ACCESS";
Sezam/AGUtility.m.orig:2341:        case ERRNO_KEYCODE_EXISTING_KEY: return @"KEYCODE_EXISTING_KEY";
Sezam/AGUtility.m.orig:2342:        case ERRNO_KEYCODE_NOSPACE: return @"KEYCODE_NOSPACE";
Sezam/AGUtility.m.orig:2343:        case ERRNO_KEYCODE_DISABLE: return @"KEYCODE_DISABLE";
Sezam/AGUtility.m.orig:2344:        case ERRNO_KEYCODE_TIMEOUT: return @"KEYCODE_TIMEOUT";
Sezam/AGUtility.m.orig:2345:        case ERRNO_KEYCODE_DIS_ONETOUCH: return @"KEYCODE_DIS_ONETOUCH";
Sezam/AGUtility.m.orig:2346:        case ERRNO_MECH_TIMEOUT: return @"MECH_TIMEOUT";
Sezam/AGUtility.m.orig:2347:        case ERRNO_MECH_POSITION: return @"MECH_POSITION";
Sezam/AGUtility.m.orig:2348:        case ERRNO_MECH_MOTPOL: return @"MECH_MOTPOL";
Sezam/AGUtility.m.orig:2349:        case ERRNO_MECH_TIMEOUT_CAL: return @"MECH_TIMEOUT_CAL";
Sezam/AGUtility.m.orig:2350:        case ERRNO_MECH_BACKOFF: return @"MECH_BACKOFF";
Sezam/AGUtility.m.orig:2351:        case ERRNO_EMPTY_LOG: return @"EMPTY_LOG";
Sezam/AGUtility.m.orig:2352:        case ERRNO_READING_LOG: return @"READING_LOG";
Sezam/AGUtility.m.orig:2353:        case ERRNO_VBAT_LOW: return @"VBAT_LOW";
Sezam/AGUtility.m.orig:2354:        case ERRNO_OVERTEMP: return @"OVERTEMP";
Sezam/AGUtility.m.orig:2356:            return [NSString stringWithFormat:@"UNKNOWN_%ld", (long)errorCode];
Sezam/AGUtility.m.orig:2406:    NSNumber *acInVoltageNum = [telemetry treatNSNullAsNilObjectForKey:@"ac_in"];
Sezam/AGUtility.m.orig:2407:    NSNumber *dcInVoltageNum = telemetry[@"mcu_dc_in"];
Sezam/AGUtility.m.orig:2408:    NSNumber *batteryIsLowNum = [telemetry treatNSNullAsNilObjectForKey:@"doorbell_low_battery"];
Sezam/AGUtility.m.orig:2440:        return @"imgDoorbellcamHeader";
Sezam/AGUtility.m.orig:2442:        return @"dbc2";
Sezam/AGUtility.m.orig:2444:        return @"imgDoorbellcamHeader";
Sezam/AGUtility.m.orig:2505:    NSInteger numberOfSuccessfulOperations = [[NSUserDefaults standardUserDefaults] integerForKey:@"NumberOfSuccessfulOperations"];
Sezam/AGUtility.m.orig:2507:    [[NSUserDefaults standardUserDefaults] setInteger:numberOfSuccessfulOperations forKey:@"NumberOfSuccessfulOperations"];
Sezam/AGUtility.m.orig:2509:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGUtility.m.orig:2510:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGUtility.m.orig:2574:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGUtility.m.orig:2582:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGUtility.m.orig:2584:    return lockSerial ? lockSerial : @"";
Sezam/AGUtility.m.orig:2596:        if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGUtility.m.orig:2613:                if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGUtility.m.orig:2657:    user.objectId = @"me";
Sezam/AGUtility.m.orig:2677:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Save Password?" message:@"Would you like to save this password to the iCloud Keychain?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUtility.m.orig:2679:        [alertController addAction:[UIAlertAction actionWithTitle:@"Save Password" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUtility.m.orig:2683:        [alertController addAction:[UIAlertAction actionWithTitle:@"Don't Save Password" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGUtility.m.orig:2706:                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"iCloud Keychain Error" message:@"There was an error saving your password to iCloud Keychain." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUtility.m.orig:2707:                [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:21:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockNotificationHandler.m:23:NSString *const kAGAutoUnlockNotificationGenericCategory = @"kAGAutoUnlockNotificationGenericCategory";
Sezam/AGAutoUnlockNotificationHandler.m:24:NSString *const kAGAutoUnlockNotificationReportProblemCategory = @"kAGAutoUnlockNotificationReportProblemCategory";
Sezam/AGAutoUnlockNotificationHandler.m:25:NSString *const kAGAutoUnlockNotificationAwayModeActivatedCategory = @"AGAutoUnlockNotificationAwayModeActivatedCategory";
Sezam/AGAutoUnlockNotificationHandler.m:26:NSString *const kAGAutoUnlockNotificationAwayModeCancelledCategory = @"kAGAutoUnlockNotificationAwayModeCancelledCategory";
Sezam/AGAutoUnlockNotificationHandler.m:28:NSString *const kAGAutoUnlockNotificationReportProblemAction = @"kAGAutoUnlockNotificationReportProblemAction";
Sezam/AGAutoUnlockNotificationHandler.m:29:NSString *const kAGAutoUnlockNotificationSetToHomeModeAction = @"kAGAutoUnlockNotificationSetToHomeModeAction";
Sezam/AGAutoUnlockNotificationHandler.m:30:NSString *const kAGAutoUnlockNotificationSetToAwayModeAction = @"kAGAutoUnlockNotificationSetToAwayModeAction";
Sezam/AGAutoUnlockNotificationHandler.m:32:NSString *const kAGAutoUnlockSetToHomeModeForRestartNotificationID = @"AGAutoUnlockSetToHomeModeForRestartNotificationID";
Sezam/AGAutoUnlockNotificationHandler.m:33:NSString *const kAGAutoUnlockSetToHomeModeForForceQuitNotificationID = @"AGAutoUnlockSetToHomeModeForForceQuitNotificationID";
Sezam/AGAutoUnlockNotificationHandler.m:34:NSString *const kAGAutoUnlockSetToHomeModeForAwayModeInHomeRegionTooLongID = @"AGAutoUnlockSetToHomeModeForAwayModeInHomeRegionTooLongID";
Sezam/AGAutoUnlockNotificationHandler.m:59:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:82:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:103:            AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockNotificationHandler.m:104:                                                                            @"au_source":@"AutoUnlockNotification",
Sezam/AGAutoUnlockNotificationHandler.m:105:                                                                            @"au_initiation_type":@"InNotificationResponse",
Sezam/AGAutoUnlockNotificationHandler.m:106:                                                                            @"au_info":@{@"notification_id":notificationBaseID}
Sezam/AGAutoUnlockNotificationHandler.m:109:            AGDiaryInfo(@"AutoUnlockNotificationSetToAwayModeButtonTapped",@"lockid:%@", lockID);
Sezam/AGAutoUnlockNotificationHandler.m:110:            [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock was manually set to Away mode"} identifier:@"AutoUnlockNotificationSetToAwayModeButtonTapped"]];
Sezam/AGAutoUnlockNotificationHandler.m:114:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Away Mode Set" message:[NSString stringWithFormat:@"Away mode has been set for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:115:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:125:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:143:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockNotificationHandler.m:144:                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlockNotificationHandler.m:145:                                                                             @"au_cancel_type":@"UserManuallySwitchedToHomeMode",
Sezam/AGAutoUnlockNotificationHandler.m:146:                                                                             @"au_source":@"AutoUnlockInNotificationResponse",
Sezam/AGAutoUnlockNotificationHandler.m:147:                                                                             @"au_info": @{
Sezam/AGAutoUnlockNotificationHandler.m:148:                                                                                     @"lock_version":[AGUtility modelVersionForLockID:lockID]
Sezam/AGAutoUnlockNotificationHandler.m:152:            AGDiaryInfo(@"AutoUnlockNotificationSetToHomeModeButtonTapped",@"lockid:%@", lockID);
Sezam/AGAutoUnlockNotificationHandler.m:153:            [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock was manually set to Home mode"} identifier:@"AutoUnlockNotificationSetToHomeModeButtonTapped"]];
Sezam/AGAutoUnlockNotificationHandler.m:158:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Home Mode Set" message:[NSString stringWithFormat:@"Home mode has been set for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:159:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:168:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:186:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Set To Away Mode?" message:response.notification.request.content.body preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:187:        [alertController addAction:[UIAlertAction actionWithTitle:@"Set To Away Mode" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockNotificationHandler.m:193:                AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockNotificationHandler.m:194:                                                                                @"au_source":@"AutoUnlockNotification",
Sezam/AGAutoUnlockNotificationHandler.m:195:                                                                                @"au_initiation_type":@"InAppAlertResponse",
Sezam/AGAutoUnlockNotificationHandler.m:196:                                                                                @"au_info":@{@"notification_id":notificationBaseID}
Sezam/AGAutoUnlockNotificationHandler.m:199:                AGDiaryInfo(@"AutoUnlockNotificationSetToAwayModeAlertButtonTapped",@"lockid:%@", lockID);
Sezam/AGAutoUnlockNotificationHandler.m:200:                [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock was manually set to Away mode"} identifier:@"AutoUnlockNotificationSetToAwayModeAlertButtonTapped"]];
Sezam/AGAutoUnlockNotificationHandler.m:205:        [alertController addAction:[UIAlertAction actionWithTitle:@"Ignore" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:215:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Enable Auto-Unlock" message:[NSString stringWithFormat:@"Auto-Unlock needs to be enabled for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:216:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:224:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock has been activated for %@ at %@, and is now in Home mode. We’ll switch to Away mode the next time you leave your neighborhood.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:226:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:230:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockOnBoardingNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:241:    NSString *body = [NSString stringWithFormat:@"You’re now in Away mode for %@. We’ll unlock %@ when you return.", lock.house.name, lock.name];
Sezam/AGAutoUnlockNotificationHandler.m:243:    NSString *notificationID = [AGAutoUnlockNotificationHandler notificationIDWithBaseID:@"AutoUnlockExitNotification" uniqueID:lock.objectId];
Sezam/AGAutoUnlockNotificationHandler.m:245:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:252:        UIImage *image = [UIImage imageNamed:@"autounlock_away_icon"];
Sezam/AGAutoUnlockNotificationHandler.m:255:        NSString *tmpFilePath = [NSString stringWithFormat:@"%@%@", tmpDir, @"autounlock_away_icon.png"];
Sezam/AGAutoUnlockNotificationHandler.m:261:        UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"auto_unlock_icon" URL:[NSURL URLWithString:[NSString stringWithFormat:@"file://%@", tmpFilePath]] options:nil error:&attachmentError];
Sezam/AGAutoUnlockNotificationHandler.m:266:                                   @"lockID":lock.objectId,
Sezam/AGAutoUnlockNotificationHandler.m:267:                                   @"exit_description":body,
Sezam/AGAutoUnlockNotificationHandler.m:268:                                   @"should_show_map":(exitLocation ? @(YES) : @(NO)),
Sezam/AGAutoUnlockNotificationHandler.m:269:                                   @"user_exit_lat":@(exitLocation.coordinate.latitude),
Sezam/AGAutoUnlockNotificationHandler.m:270:                                   @"user_exit_lon":@(exitLocation.coordinate.longitude),
Sezam/AGAutoUnlockNotificationHandler.m:271:                                   @"user_home_lat":@(homeGeoRegion.center.latitude),
Sezam/AGAutoUnlockNotificationHandler.m:272:                                   @"user_home_lon":@(homeGeoRegion.center.longitude),
Sezam/AGAutoUnlockNotificationHandler.m:273:                                   @"user_home_geofence_radius":@(homeGeoRegion.radius),
Sezam/AGAutoUnlockNotificationHandler.m:274:                                   @"lockName":lock.name,
Sezam/AGAutoUnlockNotificationHandler.m:275:                                   @"houseName":lock.house.name
Sezam/AGAutoUnlockNotificationHandler.m:291:    NSString *body = [NSString stringWithFormat:@"Auto-Unlocking %@. Welcome back to %@.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:293:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:298:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:299:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:[AGAutoUnlockNotificationHandler notificationIDWithBaseID:@"AutoUnlockSuccessNotification" uniqueID:lock.objectId] content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:310:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:324:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock experienced an error for %@ at %@, and will not work this time. To fix it, please use the August app to unlock the door next time you arrive home.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:326:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:330:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockLockNotInBLECacheNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:338:    NSString *body = @"Please turn on Bluetooth to re-enable Auto-Unlock.";
Sezam/AGAutoUnlockNotificationHandler.m:340:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:344:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockBLEDisabledNotification" content:notificationContent trigger:[UNTimeIntervalNotificationTrigger triggerWithTimeInterval:0.5 repeats:NO]];
Sezam/AGAutoUnlockNotificationHandler.m:353:    NSString *body = [NSString stringWithFormat:@"Something seems wrong with your location reading. It looks like you may not have left home. Auto-Unlock was set back to Home mode for %@ at %@", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:355:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:359:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockCancelledForImmediateReentryNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:367:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock failed for %@ at %@ due to a communication error with the lock. Auto-Unlock is now in Home mode. We will not try to unlock your door again until you’ve left your neighborhood.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:369:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:373:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockOperationFailureNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:383:    NSString *body = [NSString stringWithFormat:@"Looks like your phone was restarted. Since we’re not sure if you arrived home while the phone was off, we won’t try to Auto-Unlock %@ at %@ this time. Auto-Unlock is now reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:385:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:389:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:399:    NSString *body = [NSString stringWithFormat:@"Looks like you force quit the August Home app. Since we’re not sure if you arrived home while the app was closed, we won’t try to Auto-Unlock %@ at %@ this time. Auto-Unlock is now reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:401:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:405:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:414:    NSString *body = [NSString stringWithFormat:@"Looks like you've been home for awhile. Auto-Unlock for %@ at %@ has been reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:416:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:420:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:430:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Turn on Wi-Fi" message:@"For best location accuracy, we strongly recommend leaving Wi-Fi turned on while using Auto-Unlock." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:431:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:437:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Auto-Unlock Disabled" message:@"Auto-Unlock is disabled when signing out of the August app. It can be re-enabled in Lock Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:438:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:451:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:460:    return [NSString stringWithFormat:@"%@-%@", baseID, uniqueID];
Sezam/AGAutoUnlockNotificationHandler.m:464:    return [notificaitonID componentsSeparatedByString:@"-"][0];
Sezam/AGAutoUnlockNotificationHandler.m:473:    UNNotificationAction *setToHomeModeAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationSetToHomeModeAction title:@"Set to Home Mode" options:(UNNotificationActionOptionForeground)];
Sezam/AGAutoUnlockNotificationHandler.m:475:    UNNotificationAction *setToAwayModeAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationSetToAwayModeAction title:@"Set to Away Mode" options:(UNNotificationActionOptionForeground)];
Sezam/AGAutoUnlockNotificationHandler.m:477:    UNNotificationAction *reportProblemAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationReportProblemAction title:@"Report a Problem" options:(UNNotificationActionOptionDestructive | UNNotificationActionOptionForeground)];
Sezam/AGVideoStreamCallRecord.h:16:#define kCallRecordEndpoint @"doorbells/%@/avsession/%@"
Sezam/AGVideoStreamCallRecord.h:17:#define kCallRecordActionInitiate @"initiate"
Sezam/AGVideoStreamCallRecord.h:18:#define kCallRecordActionRespond @"respond"
Sezam/AGVideoStreamCallRecord.h:19:#define kCallRecordActionHangup @"hangup"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:59:#define PLAYER_STATISTICS_PACKET_LOSS_COUNT @"Packet Loss"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:60:#define PLAYER_STATISTICS_BUFFERED_DURATION @"Buffered Packets"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:62:#define PLAYER_STATISTICS_VIDEO_RESOLUTION @"Resolution"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:63:#define PLAYER_STATISTICS_AVG_VIDEO_DECODE_TIME @"Avg Video Decode Time"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:64:#define PLAYER_STATISTICS_RECEIVE_VIDEO_FPS @"Avg Video FPS"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:65:#define PLAYER_STATISTICS_VIDEO_DURATION @"Duration"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:67:#define PLAYER_STATISTICS_AVG_AUDIO_DECODE_TIME @"Avg Audio Decode Time"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:68:#define PLAYER_STATISTICS_RECEIVE_AUDIO_FPS @"Avg Audio FPS"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:69:#define PLAYER_STATISTICS_AUDIO_SAMPLINE_RATE @"Audio Sampling Rate"
Sezam/PlayerLibrary/include/IVVideoPlayer/IVVideoPlayerConstants.h:71:#define PLAYER_STATISTICS_AUDIO_VIDEO_DIFFERENCE @"Audio-Video Time Diff"
Sezam/AGWebRTCClient.m:21:#define kAGDiaryCategory @"webrtc"
Sezam/AGWebRTCClient.m:136:        [self addObserver:self forKeyPath:@"state" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGWebRTCClient.m:137:        [self addObserver:self forKeyPath:@"streamState" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGWebRTCClient.m:153:    NSAssert(_signalBroker != nil, @"Must provide a signal broker!");
Sezam/AGWebRTCClient.m:154:    NSAssert(_peerConnectionFactory != nil, @"Must provide an RTC Factory!");
Sezam/AGWebRTCClient.m:161:    if([keyPath isEqualToString:@"state"]){
Sezam/AGWebRTCClient.m:163:        AGDiaryDebug(@"Client",@"Internal State is now %@", [AGWebRTCClient webRTCStateString:self.state]);
Sezam/AGWebRTCClient.m:191:    } else if ([keyPath isEqualToString:@"streamState"]){
Sezam/AGWebRTCClient.m:208:    NSAssert(_signalBroker, @"Signal broker required to establish peer to peer connection!");
Sezam/AGWebRTCClient.m:213:    NSAssert(_peerConnection, @"Failed to create peer connection!"); /// This is usually caused by an invalid config
Sezam/AGWebRTCClient.m:214:    AGDiaryDebug(@"Client",@"Peer Connection Opened. State = %@", [AGWebRTCClient signalingStateString:[_peerConnection signalState]]);
Sezam/AGWebRTCClient.m:265:    NSAssert(self.state == AGWebRTCState_ReadyForOffer, @"configureSession called in wrong state %d", self.state);
Sezam/AGWebRTCClient.m:275:                AGDiaryDebug(@"Client",@"Error settings local session description: %@", error.localizedDescription);
Sezam/AGWebRTCClient.m:292:    NSAssert(self.state == AGWebRTCState_ReceivedOffer, @"Sending an answer, but we have not received an offer!");
Sezam/AGWebRTCClient.m:298:        NSString * activeSetupSDP = [[sdp sdp] stringByReplacingOccurrencesOfString:@"setup:actpass" withString:@"setup:active"];
Sezam/AGWebRTCClient.m:304:                AGDiaryDebug(@"Client",@"Error setting provisional answer, %@", error.localizedDescription);
Sezam/AGWebRTCClient.m:348:    NSAssert(self.localStream, @"Need to create the local stream before transmitting audio!");
Sezam/AGWebRTCClient.m:384:    NSString * event = @"CheckStatus"; /// Logging event
Sezam/AGWebRTCClient.m:386:        AGDiaryDebug(event, @"Not Connected yet, not checking for rendering status");
Sezam/AGWebRTCClient.m:393:    AGDiaryDebug(event, @"Decoder clock time is -> %d", _decoderClockTimeMs);
Sezam/AGWebRTCClient.m:402:        AGDiaryDebug(event, @"Analyzing latest rendered frame...");
Sezam/AGWebRTCClient.m:411:        AGDiaryDebug(event, @"Frame Analysis Results:\n"
Sezam/AGWebRTCClient.m:422:            AGDiaryDebug(event, @"First frame, assuming rendering");
Sezam/AGWebRTCClient.m:427:            AGDiaryDebug(event, @"No frame update since the last check we are buffering.");
Sezam/AGWebRTCClient.m:432:                AGDiaryDebug(event, @"Over threshold, moving to buffering state");
Sezam/AGWebRTCClient.m:436:                AGDiaryDebug(event, @"Within acceptable limits, moving to rendering state");
Sezam/AGWebRTCClient.m:447:        AGDiaryDebug(event, @"No frame received yet. Buffering...");
Sezam/AGWebRTCClient.m:452:            AGDiaryDebug(event, @"Buffer timeout");
Sezam/AGWebRTCClient.m:462:    AGDiaryDebug(@"Client",@"Video Resolution Changed to %fx%f", size.width, size.height);
Sezam/AGWebRTCClient.m:470:    AGDiaryDebug(@"Client", @"WebRTC Signaling state changed: %@", [AGWebRTCClient rtcSignalingString:stateChanged]);
Sezam/AGWebRTCClient.m:508:    AGDiaryDebug(@"AddStream", @"Stream %@ was added to peer connection %@", stream, peerConnection);
Sezam/AGWebRTCClient.m:535:        if (!success)  NSLog(@"AVAudioSession error setting category:%@",error);
Sezam/AGWebRTCClient.m:538:        if (!success)  NSLog(@"AVAudioSession error setting mode:%@",error);
Sezam/AGWebRTCClient.m:543:        if (!success)  NSLog(@"AVAudioSession error overrideOutputAudioPort:%@",error);
Sezam/AGWebRTCClient.m:546:        if (!success) NSLog(@"AVAudioSession error activating: %@",error);
Sezam/AGWebRTCClient.m:547:        else NSLog(@"audioSession active");
Sezam/AGWebRTCClient.m:553:    AGDiaryDebug(@"Client",@"Stream dropped!");
Sezam/AGWebRTCClient.m:558:    AGDiaryDebug(@"Client",@"WebRTC: Negotiation Request by %@", peerConnection);
Sezam/AGWebRTCClient.m:564:    AGDiaryDebug(@"Client",@"ICE Connection state: %@", [AGWebRTCClient connectionStateString:newState]);
Sezam/AGWebRTCClient.m:566:        AGDiaryDebug(@"Client",@"Warning, ICE Connection Failed for %@", peerConnection);
Sezam/AGWebRTCClient.m:570:        AGDiaryDebug(@"Client",@"Time interval between connect: and \"connected\" -> %lf", renderLag);
Sezam/AGWebRTCClient.m:578:    AGDiaryDebug(@"Client",@"ICE Gathering state: %d", newState);
Sezam/AGWebRTCClient.m:600:    NSDictionary *candidateDictionary = @{@"candidate":candidate.sdp, @"sdpMid": candidate.sdpMid, @"sdpMLineIndex": @(candidate.sdpMLineIndex)};
Sezam/AGWebRTCClient.m:606:    AGDiaryDebug(@"Client",@"%d ICE Candidates lost", candidates.count);
Sezam/AGWebRTCClient.m:611:    AGDiaryDebug(@"Client",@"Direct data channel available!");
Sezam/AGWebRTCClient.m:621:    NSAssert(self.state == AGWebRTCState_ReadyForOffer, @"Received offer, but not ready to process it");
Sezam/AGWebRTCClient.m:625:    NSString * cleanOffer = [offer stringByReplacingOccurrencesOfString:@"profile-level-id=4D401E" withString:@"profile-level-id=4DE01E"];
Sezam/AGWebRTCClient.m:631:            AGDiaryDebug(@"Client",@"Error setting remote description: %@", error.localizedDescription);
Sezam/AGWebRTCClient.m:642:    NSAssert(self.state == AGWebRTCState_SentOffer, @"Received answer, but we are not in AGWebRTCState_SentOffer!");
Sezam/AGWebRTCClient.m:647:                AGDiaryDebug(@"Client",@"WEBRTC Remote Answer Processed");
Sezam/AGWebRTCClient.m:649:                AGDiaryDebug(@"Client",@"WEBRTC Remote Answer Failed");
Sezam/AGWebRTCClient.m:658:    NSString * sdp = candidate[@"candidate"];
Sezam/AGWebRTCClient.m:659:    NSNumber * sdpMLineIndex = candidate[@"sdpMLineIndex"];
Sezam/AGWebRTCClient.m:660:    NSString * sdpMid = candidate[@"sdpMid"];
Sezam/AGWebRTCClient.m:702:    id<AGRTCMediaStream> localStream = [_peerConnectionFactory mediaStream:@"ios_stream"];
Sezam/AGWebRTCClient.m:703:    self.audioTrack = [_peerConnectionFactory audioTrack:@"ios_audio_track"];
Sezam/AGWebRTCClient.m:721:    return @"None Detected :)";
Sezam/AGWebRTCClient.m:727:            @"latency_ms" : @(_latency),
Sezam/AGWebRTCClient.m:728:            @"avg_latency_ms" : @(_averageLatency),
Sezam/AGWebRTCClient.m:729:            @"inspected_frame_count" : @(_frameCount),
Sezam/AGWebRTCClient.m:730:            @"decoder_clock_ms" : @(_decoderClockTimeMs)
Sezam/AGWebRTCClient.m:742:        case RTCIceConnectionStateNew: return @"New";
Sezam/AGWebRTCClient.m:743:        case RTCIceConnectionStateChecking: return @"Checking";
Sezam/AGWebRTCClient.m:744:        case RTCIceConnectionStateConnected: return @"Connected";
Sezam/AGWebRTCClient.m:745:        case RTCIceConnectionStateCompleted: return @"Completed";
Sezam/AGWebRTCClient.m:746:        case RTCIceConnectionStateFailed: return @"Failed";
Sezam/AGWebRTCClient.m:747:        case RTCIceConnectionStateDisconnected: return @"Disconnected";
Sezam/AGWebRTCClient.m:748:        case RTCIceConnectionStateClosed: return @"Closed";
Sezam/AGWebRTCClient.m:762:        case AGRTCSignalingStateStable: return @"Stable";
Sezam/AGWebRTCClient.m:763:        case AGRTCSignalingStateHaveLocalOffer:return @"HaveLocalOffer";
Sezam/AGWebRTCClient.m:764:        case AGRTCSignalingStateHaveLocalPrAnswer:return @"HaveLocalPrAnswer";
Sezam/AGWebRTCClient.m:765:        case AGRTCSignalingStateHaveRemoteOffer:return @"HaveRemoteOffer";
Sezam/AGWebRTCClient.m:766:        case AGRTCSignalingStateHaveRemotePrAnswer:return @"HaveRemotePrAnswer";
Sezam/AGWebRTCClient.m:767:        case AGRTCSignalingStateClosed:return @"Closed";
Sezam/AGWebRTCClient.m:780:        case AGWebRTCState_Uninitialized:return @"Uninitialized";
Sezam/AGWebRTCClient.m:781:        case AGWebRTCState_Initialized:return @"Initialized";
Sezam/AGWebRTCClient.m:782:        case AGWebRTCState_ReadyForOffer:return @"ReadyForOffer";
Sezam/AGWebRTCClient.m:783:        case AGWebRTCState_ReceivedOffer:return @"ReceivedOffer";
Sezam/AGWebRTCClient.m:784:        case AGWebRTCState_SentAnswer:return @"SentAnswer";
Sezam/AGWebRTCClient.m:785:        case AGWebRTCState_SentOffer:return @"SentOffer";
Sezam/AGWebRTCClient.m:786:        case AGWebRTCState_ReceivedAnswer:return @"ReceivedAnswer";
Sezam/AGWebRTCClient.m:787:        case AGWebRTCState_Connected:return @"Connected";
Sezam/AGWebRTCClient.m:788:        case AGWebRTCState_Error:return @"Error";
Sezam/AGWebRTCClient.m:789:        case AGWebRTCState_Closed:return @"Closed";
Sezam/AGWebRTCClient.m:790:        case AGWebRTCState_Closing:return @"Closing";
Sezam/AGWebRTCClient.m:799:        case RTCSignalingStateStable:return @"Stable";
Sezam/AGWebRTCClient.m:800:        case RTCSignalingStateHaveLocalOffer:return @"Have Local Offer";
Sezam/AGWebRTCClient.m:801:        case RTCSignalingStateHaveLocalPrAnswer:return @"Have Local Answer";
Sezam/AGWebRTCClient.m:802:        case RTCSignalingStateHaveRemoteOffer:return @"Have Remote Offer";
Sezam/AGWebRTCClient.m:803:        case RTCSignalingStateHaveRemotePrAnswer:return @"Have Remote Answer";
Sezam/AGWebRTCClient.m:804:        case RTCSignalingStateClosed:return @"Closed";
Sezam/AGDoorbellRegisterSetupViewController.m:45:                if ([house.houseType isEqualToString:@"superuser"]) {
Sezam/AGDoorbellRegisterSetupViewController.m:53:                UIAlertController *noHousesAlert = [UIAlertController alertControllerWithTitle:@"No Houses"
Sezam/AGDoorbellRegisterSetupViewController.m:54:                                                                                                 message:@"You don't have any houses. Please add a house and then continue Doorbell setup."
Sezam/AGDoorbellRegisterSetupViewController.m:56:                [noHousesAlert addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellRegisterSetupViewController.m:60:                [self performSegueWithIdentifier:@"DoorbellRegisterToAddHouse" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:88:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"HouseCell"];
Sezam/AGDoorbellRegisterSetupViewController.m:90:        cell.label2.text = @"Create a New House";
Sezam/AGDoorbellRegisterSetupViewController.m:128:        [self performSegueWithIdentifier:@"DoorbellRegisterToAddHouse" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:147:        doorbellModel = @"Doorbell v2.0";
Sezam/AGDoorbellRegisterSetupViewController.m:148:        doorbellType = @"mars2";
Sezam/AGDoorbellRegisterSetupViewController.m:150:        doorbellModel = @"Doorbell v1.0";
Sezam/AGDoorbellRegisterSetupViewController.m:151:        doorbellType = @"mars";
Sezam/AGDoorbellRegisterSetupViewController.m:161:            if ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound) {
Sezam/AGDoorbellRegisterSetupViewController.m:162:                errorMessage = @"Doorbell Serial Number is not Valid";
Sezam/AGDoorbellRegisterSetupViewController.m:165:            if ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound) {
Sezam/AGDoorbellRegisterSetupViewController.m:166:                errorMessage = @"Doorbell is already Registered. Please contact August support.";
Sezam/AGDoorbellRegisterSetupViewController.m:168:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:169:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:185:                    [self performSegueWithIdentifier:@"DoorbellRegisterToWiFiSetup" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:197:        UIAlertController *noHouseAlert = [UIAlertController alertControllerWithTitle:@"No House Selected" message:@"Please selected a House before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:198:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:205:    if (self.doorbellName.text == nil || [self.doorbellName.text isEqualToString:@""]) {
Sezam/AGDoorbellRegisterSetupViewController.m:206:        UIAlertController *noDoorNameAlert = [UIAlertController alertControllerWithTitle:@"No Door Name" message:@"Please enter a Door Name before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:207:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:223:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:224:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellRegisterSetupViewController.m:228:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellRegisterSetupViewController.m:247:    if ([segue.identifier isEqualToString:@"DoorbellRegisterToWiFiSetup"]) {
Sezam/AGHomeKitSiriActivationViewController.m:19:    self.completeLabel.text = [NSString stringWithFormat: @"If you completed a HomeKit invite, %@ should receive an iOS notification in the next several minutes.\n\nOnce the invite is complete, Siri access will be activated the first time %@ connects to the lock from within the August app.", self.user.firstName, self.user.firstName];
Sezam/AGLockPaginationViewController.m:35:    self.PageViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageViewController"];
Sezam/AGLockPaginationViewController.m:156:    AGLockViewController *lockViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"LockViewController"];
Sezam/AGRemoteLockOperationLog.m:14:static NSString* kAGDiaryCategory = @"RemoteLockLog";
Sezam/AGRemoteLockOperationLog.m:33:        [remoteLockMetricsDictionary setObject:self.lockId forKey:@"lockId"];
Sezam/AGRemoteLockOperationLog.m:36:        [remoteLockMetricsDictionary setObject:self.bridgeType forKey:@"BridgeType"];
Sezam/AGRemoteLockOperationLog.m:39:        [remoteLockMetricsDictionary setObject:self.requestType forKey:@"RequestType"];
Sezam/AGRemoteLockOperationLog.m:45:        [remoteLockMetricsDictionary setObject:requestTimeNumber forKey:@"RequestTimeInterval"];
Sezam/AGRemoteLockOperationLog.m:46:        if ([remoteOperationDetails objectForKey:@"TotalTimeByACS"]) {
Sezam/AGRemoteLockOperationLog.m:47:            double totalTimeByACS = [[remoteOperationDetails objectForKey:@"TotalTimeByACS"] doubleValue];
Sezam/AGRemoteLockOperationLog.m:50:            [remoteLockMetricsDictionary setObject:requestVsACSTimeDeltaNumber forKey:@"RequestVsACSTimeDelta"];
Sezam/AGRemoteLockOperationLog.m:55:    [remoteLockMetricsDictionary setObject:[NSNumber numberWithBool:isSuccessful] forKey:@"Success"];
Sezam/AGRemoteLockOperationLog.m:61:    NSDictionary *completedRequest = @{@"CompletedRequest":remoteLockMetricsDictionary};
Sezam/AGRemoteLockOperationLog.m:63:    AGAnalyticsDiaryData(AGDiaryLevel_Info, @"RemoteLockMetrics", @"RemoteLockRequest", completedRequest);
Sezam/AGBLERegionDetector.m:143:            monitoringStarted([NSError errorWithDomain:@"AGBLERegionDetector" code:-8001 userInfo:@{@"description":[NSString stringWithFormat:@"The peripheral %@ cannot be found. It may not have been connected to recently.", uuid]}]);//There is a chance that we won't find the peripheral if it hasn't been connected to recently. We could try scanning instead but the app would be woken up everytime an august lock is detected which might cause unacceptable battery drain. This is a drawback of not using iBeacons. In practice for something like auto unlock this should rarely happen.
Sezam/AGBLERegionDetector.m:157:                    monitoringStarted([NSError errorWithDomain:@"AGBLERegionDetector" code:-8002 userInfo:@{@"description":@"The bluetooth hardware cannot be started. The user may have disabled bluetooth."}]);
Sezam/AGBLERegionDetector.m:216:                    completion([NSError errorWithDomain:@"AGBLERegionDetector" code:-8003 userInfo:@{@"description":@"The bluetooth hardware cannot be started. The user may have disabled bluetooth."}]);
Sezam/AGSelectHouseViewController.m:24:static NSString* kAGDiaryCategory = @"AddLock";
Sezam/AGSelectHouseViewController.m:36:        UIAlertView *quitAlert = [[UIAlertView alloc] initWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" delegate:self cancelButtonTitle:@"Never Mind" otherButtonTitles:@"Quit", nil];
Sezam/AGSelectHouseViewController.m:73:                if ([house.houseType isEqualToString:@"superuser"]) {
Sezam/AGSelectHouseViewController.m:116:	AGCollectionViewCell * cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGSelectHouseViewController.m:120:        cell.labelText = NSLocalizedString(@"Add a House",nil);
Sezam/AGSelectHouseViewController.m:135:            [self performSegueWithIdentifier:@"PickaHouseToCreateaHouse" sender:nil];
Sezam/AGSelectHouseViewController.m:137:            [self performSegueWithIdentifier:@"SelectHouseToAddHouse" sender:nil];
Sezam/AGSelectHouseViewController.m:152:                [self performSegueWithIdentifier:@"PickHouseToDoorbellName" sender:nil];
Sezam/AGSelectHouseViewController.m:156:            AGDiaryInfo(@"ClickHouse", @"User selected a house from the list");
Sezam/AGSelectHouseViewController.m:162:    if ([segue.identifier isEqualToString:@"SelectHouseToAddHouse"]) {
Sezam/AGSelectHouseViewController.m:163:        NSLog(@"Add House");
Sezam/AGSelectHouseViewController.m:169:    else if ([segue.identifier isEqualToString:@"selectHouseToSetupOTA"]) {
Sezam/AGSelectHouseViewController.m:170:        NSLog(@"Select House");
Sezam/AGSelectHouseViewController.m:173:    } else if ([segue.identifier isEqualToString:@"PickaHouseToCreateaHouse"]) {
Sezam/AGSelectHouseViewController.m:176:    } else if ([segue.identifier isEqualToString:@"AGUnityModuleRegisterViewController"]) {
Sezam/AGSelectHouseViewController.m:186:        [AGUtility showError:NSLocalizedString(@"Something went wrong. Please try adding the lock again.",nil) inViewController:self];
Sezam/AGSelectHouseViewController.m:189:        AGDiaryInfo(@"AddLockToHouse", @"Add Lock To House");
Sezam/AGSelectHouseViewController.m:191:        self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Adding lock...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGSelectHouseViewController.m:210:                    [self performSegueWithIdentifier:@"AGUnityModuleRegisterViewController" sender:nil];
Sezam/AGSelectHouseViewController.m:214:                [self performSegueWithIdentifier:@"selectHouseToSetupOTA" sender:nil];
Sezam/AGOnboardingChecklistViewController.m:69:    self.topIcon.image = [UIImage imageNamed:@"onboard_one_icon"];
Sezam/AGOnboardingChecklistViewController.m:70:    self.topTitleLabel.text = @"Create your August account";
Sezam/AGOnboardingChecklistViewController.m:71:    self.topDetailLabel.text = @"Your August account is the hub where you can access and control all of your August devices.";
Sezam/AGOnboardingChecklistViewController.m:75:    self.bottomIcon.image = [UIImage imageNamed:@"onboard_lock_icon"];
Sezam/AGOnboardingChecklistViewController.m:94:                self.bottomTitleLabel.text = @"Sign in to Airbnb";
Sezam/AGOnboardingChecklistViewController.m:95:                self.bottomDetailLabel.text = @"Connect your August and Airbnb accounts so you can get access to your Airbnb rental.";
Sezam/AGOnboardingChecklistViewController.m:96:                self.completedLabel.text = @"You’re all set to go! You now have access to your Airbnb rental.";
Sezam/AGOnboardingChecklistViewController.m:97:                self.completedButton.titleLabel.text = @"GO TO MY RENTAL";
Sezam/AGOnboardingChecklistViewController.m:106:                self.bottomTitleLabel.text = @"Connect your Smart Lock";
Sezam/AGOnboardingChecklistViewController.m:107:                self.bottomDetailLabel.text = @"Let’s connect your August Smart Lock to your August account so you can start using it!";
Sezam/AGOnboardingChecklistViewController.m:108:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGOnboardingChecklistViewController.m:109:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGOnboardingChecklistViewController.m:114:                self.bottomTitleLabel.text = @"Connect your Doorbell Cam";
Sezam/AGOnboardingChecklistViewController.m:115:                self.bottomDetailLabel.text = @"Let’s connect your August Doorbell Cam to your home Wi-Fi network so you can start using it!";
Sezam/AGOnboardingChecklistViewController.m:116:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Doorbell Cam.";
Sezam/AGOnboardingChecklistViewController.m:117:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGOnboardingChecklistViewController.m:175:        self.topIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGOnboardingChecklistViewController.m:176:        self.topTitleLabel.text = @"Account created";
Sezam/AGOnboardingChecklistViewController.m:181:        self.bottomIcon.image = [UIImage imageNamed:@"onboard_two_icon"];
Sezam/AGOnboardingChecklistViewController.m:191:    self.bottomIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGOnboardingChecklistViewController.m:198:            self.bottomTitleLabel.text = @"Signed in to AirBnB";
Sezam/AGOnboardingChecklistViewController.m:202:            self.bottomTitleLabel.text = @"Smart Lock connected";
Sezam/AGOnboardingChecklistViewController.m:206:            self.bottomTitleLabel.text = @"Doorbell Cam connected";
Sezam/AGOnboardingChecklistViewController.m:259:    self.signUpNavController.currentOnboardingClassString = @"";
Sezam/AGOnboardingChecklistViewController.m:266:    [self performSegueWithIdentifier:@"onboardChecklistToLicenseAgree" sender:self];
Sezam/AGOnboardingChecklistViewController.m:306:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGOnboardingChecklistViewController.m:307:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGOnboardingChecklistViewController.m:315:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGOnboardingChecklistViewController.m:316:    UINavigationController *addLock = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGOnboardingChecklistViewController.m:317:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLock];
Sezam/AGOnboardingChecklistViewController.m:325:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGOnboardingChecklistViewController.m:327:        AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGOnboardingChecklistViewController.m:330:        UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGOnboardingChecklistViewController.m:331:        [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGTristepOnboardingChecklistViewController.m:138:    self.firstIcon.image = [UIImage imageNamed:@"onboard_one_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:143:    self.secondIcon.image = [UIImage imageNamed:@"onboard_lock_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:150:    self.thirdIcon.image = [UIImage imageNamed:@"onboard_lock_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:171:            self.firstTitleLabel.text = @"Install Smart Lock";
Sezam/AGTristepOnboardingChecklistViewController.m:172:            self.firstDetailLabel.text = @"First, let’s get your lock installed on your door.";
Sezam/AGTristepOnboardingChecklistViewController.m:173:            self.secondTitleLabel.text = @"Create August account";
Sezam/AGTristepOnboardingChecklistViewController.m:174:            self.thirdTitleLabel.text = @"Connect Smart Lock";
Sezam/AGTristepOnboardingChecklistViewController.m:175:            self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGTristepOnboardingChecklistViewController.m:176:            self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTristepOnboardingChecklistViewController.m:188:    self.firstIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:195:    self.secondIcon.image = [UIImage imageNamed:@"onboard_two_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:206:            self.firstTitleLabel.text = @"Smart Lock installed";
Sezam/AGTristepOnboardingChecklistViewController.m:218:    self.secondIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:224:    self.thirdIcon.image = [UIImage imageNamed:@"onboard_three_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:235:            self.secondTitleLabel.text = @"Account created";
Sezam/AGTristepOnboardingChecklistViewController.m:239:            self.secondTitleLabel.text = @"Account created";
Sezam/AGTristepOnboardingChecklistViewController.m:245:    self.thirdIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGTristepOnboardingChecklistViewController.m:254:            self.thirdTitleLabel.text = @"Smart Lock connected";
Sezam/AGTristepOnboardingChecklistViewController.m:258:            self.thirdTitleLabel.text = @"";
Sezam/AGTristepOnboardingChecklistViewController.m:281:    if ([segue.identifier isEqualToString:@"tristepOnboardingChecklistToInstallGuide"]) {
Sezam/AGTristepOnboardingChecklistViewController.m:289:                deviceInstallGuideUrl = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/"];
Sezam/AGTristepOnboardingChecklistViewController.m:293:                deviceInstallGuideUrl = [NSURL URLWithString:@""];
Sezam/AGTristepOnboardingChecklistViewController.m:316:    self.signUpNavController.currentOnboardingClassString = @"";
Sezam/AGTristepOnboardingChecklistViewController.m:323:    [self performSegueWithIdentifier:@"tristepOnboardingChecklistToInstallGuide" sender:nil];
Sezam/AGTristepOnboardingChecklistViewController.m:347:    [self performSegueWithIdentifier:@"tristepOnboardingChecklistToLicenseAgree" sender:self];
Sezam/AGTristepOnboardingChecklistViewController.m:369:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGTristepOnboardingChecklistViewController.m:370:    UINavigationController *addLockNav = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGTristepOnboardingChecklistViewController.m:373:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLockNav];
Sezam/AGAddPhoneViewController.m:54:        [self.titleLabel setText:NSLocalizedString(@"SIGN UP",nil)];
Sezam/AGAddPhoneViewController.m:56:        [self.titleLabel setText:NSLocalizedString(@"UPDATE PHONE",nil)];
Sezam/AGAddPhoneViewController.m:58:        [self.titleLabel setText:NSLocalizedString(@"RESET PASSWORD",nil)];
Sezam/AGAddPhoneViewController.m:60:        [self.titleLabel setText:NSLocalizedString(@"CHANGE PASSWORD",nil)];
Sezam/AGAddPhoneViewController.m:86:        errorMsg = NSLocalizedString(@"Please enter your phone number.",nil);
Sezam/AGAddPhoneViewController.m:90:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGAddPhoneViewController.m:95:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Sending SMS...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddPhoneViewController.m:103:            [AGUser checkEmailOrPhoneForDuplicate:@"phone" value:phone block:^(BOOL exists, NSError *error) {
Sezam/AGAddPhoneViewController.m:106:                        NSString *duplicatePhoneMesssage= [NSString stringWithFormat:NSLocalizedString(@"The phone number %@ currently belongs to another account. Did you mean to sign in?", @"The phone number {phone} currently belongs to another account. Did you mean to sign in?"), phone];
Sezam/AGAddPhoneViewController.m:107:                        self.duplicatePhoneAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Did You Mean to Sign In?", nil) message:duplicatePhoneMesssage delegate:self cancelButtonTitle:NSLocalizedString(@"No, Continue With Signup",nil) otherButtonTitles:NSLocalizedString(@"Yes, Sign In",nil), nil];
Sezam/AGAddPhoneViewController.m:130:            [self performSegueWithIdentifier:@"AddPhoneToPhoneVerify" sender:nil];
Sezam/AGAddPhoneViewController.m:133:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGAddPhoneViewController.m:148:            self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Sending SMS...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddPhoneViewController.m:156:    if ([segue.identifier isEqualToString:@"AddPhoneToPhoneVerify"]) {
Sezam/AGAddPhoneViewController.m:174:        [self.addPhoneButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v3"]];
Sezam/AGAddPhoneViewController.m:177:        [self.addPhoneButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v3"]];
Sezam/AGTwoStepChecklistViewController.m:18:static NSString* kAGDiaryCategory = @"AGTwoStepChecklistViewController";
Sezam/AGTwoStepChecklistViewController.m:91:    self.topIcon.image = [UIImage imageNamed:@"onboard_one_icon"];
Sezam/AGTwoStepChecklistViewController.m:96:    self.bottomIcon.image = [UIImage imageNamed:@"onboard_lock_icon"];
Sezam/AGTwoStepChecklistViewController.m:119:                self.topTitleLabel.text = @"Install Smart Lock";
Sezam/AGTwoStepChecklistViewController.m:120:                self.topDetailLabel.text = @"First, let’s get your lock installed on your door.";
Sezam/AGTwoStepChecklistViewController.m:121:                self.bottomTitleLabel.text = @"Connect your Smart Lock";
Sezam/AGTwoStepChecklistViewController.m:122:                self.bottomDetailLabel.text = @"Let’s connect your August Smart Lock to your August account so you can start using it!";
Sezam/AGTwoStepChecklistViewController.m:123:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGTwoStepChecklistViewController.m:124:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTwoStepChecklistViewController.m:134:                self.topTitleLabel.text = @"Connect Doorbell Cam";
Sezam/AGTwoStepChecklistViewController.m:135:                self.topDetailLabel.text = @"Let’s connect your August Doorbell Cam to your August account so you can start using it!";
Sezam/AGTwoStepChecklistViewController.m:136:                self.bottomTitleLabel.text = @"Install Doorbell Cam";
Sezam/AGTwoStepChecklistViewController.m:137:                self.bottomDetailLabel.text = @"Let’s install your Doorbell Cam and get it connected to your wired doorbell system.";
Sezam/AGTwoStepChecklistViewController.m:138:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Doorbell Cam Pro.";
Sezam/AGTwoStepChecklistViewController.m:139:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTwoStepChecklistViewController.m:193:    self.topIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGTwoStepChecklistViewController.m:199:    self.bottomIcon.image = [UIImage imageNamed:@"onboard_two_icon"];
Sezam/AGTwoStepChecklistViewController.m:209:            self.topTitleLabel.text = @"Smart Lock installed";
Sezam/AGTwoStepChecklistViewController.m:213:            self.topTitleLabel.text = @"Doorbell Cam connected";
Sezam/AGTwoStepChecklistViewController.m:228:                        self.bottomIcon.image = [UIImage imageNamed:@"onboard_checkmark_icon"];
Sezam/AGTwoStepChecklistViewController.m:236:                                self.bottomTitleLabel.text = @"Smart Lock connected";
Sezam/AGTwoStepChecklistViewController.m:240:                                self.bottomTitleLabel.text = @"Doorbell Cam installed";
Sezam/AGTwoStepChecklistViewController.m:293:            [self performSegueWithIdentifier:@"twoStepEuropaSetupToInstallGuide" sender:self];
Sezam/AGTwoStepChecklistViewController.m:297:            [self performSegueWithIdentifier:@"mars2ChecklistToDoorbellDockSetup" sender:sender];
Sezam/AGTwoStepChecklistViewController.m:300:            AGDiaryDebug(@"pressTopStartButton", @"Unity installation");
Sezam/AGTwoStepChecklistViewController.m:301:            [self performSegueWithIdentifier:@"AGUnityModuleInstallationViewController" sender:sender];
Sezam/AGTwoStepChecklistViewController.m:336:            [self performSegueWithIdentifier:@"twoStepMars2SetupToInstallGuide" sender:self];
Sezam/AGTwoStepChecklistViewController.m:365:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGTwoStepChecklistViewController.m:366:    UINavigationController *addLockNavVC = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGTwoStepChecklistViewController.m:378:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLockNavVC];
Sezam/AGTwoStepChecklistViewController.m:397:    if ([segue.identifier isEqualToString:@"twoStepEuropaSetupToInstallGuide"]) {
Sezam/AGTwoStepChecklistViewController.m:401:            installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl4/"];
Sezam/AGTwoStepChecklistViewController.m:403:            installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/"];
Sezam/AGTwoStepChecklistViewController.m:406:    if ([segue.identifier isEqualToString:@"twoStepMars2SetupToInstallGuide"]) {
Sezam/AGTwoStepChecklistViewController.m:409:        installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/dbc2/"];
Sezam/AGTwoStepChecklistViewController.m:411:    if ([segue.identifier isEqualToString:@"mars2ChecklistToDoorbellDockSetup"]) {
Sezam/AGTwoStepChecklistViewController.m:415:    if ([segue.identifier isEqualToString:@"AGUnityModuleInstallationViewController"]) {
Sezam/AGActiveMonitoringUtility.m:16:NSString *const AGSmartAlertNotificationsUpdatedNotificationKey = @"AGSmartAlertNotificationsUpdatedNotification";
Sezam/AGActiveMonitoringUtility.m:23:    //return [AGFeatureManager enabled:@"AugustActiveMonitoring"];
Sezam/AGActiveMonitoringUtility.m:28:    return ![AGFeatureManager enabled:@"ActiveMonitoringSchedulingDisabled"];
Sezam/AGActiveMonitoringUtility.m:35:    NSString *alertMeStr = notificationRule.schedule.length > 0 ? @"Alert me when" : @"Alert me any time";
Sezam/AGActiveMonitoringUtility.m:45:    NSString *fullAlertDescription = [NSString stringWithFormat:@"%@ %@ %@", alertMeStr, actorName, action];
Sezam/AGActiveMonitoringUtility.m:52:        fullAlertDescription = [NSString stringWithFormat:@"%@ between %@", fullAlertDescription, timeDescriptionString];
Sezam/AGActiveMonitoringUtility.m:66:    NSString *actionDescription = [NSString stringWithFormat:@"The door %@ by %@", action, actorName];
Sezam/AGActiveMonitoringUtility.m:68:        actionDescription = [NSString stringWithFormat:@"The door %@", action];
Sezam/AGActiveMonitoringUtility.m:75:        return @"Any time it occurs";
Sezam/AGActiveMonitoringUtility.m:78:    return [NSString stringWithFormat:@"Between %@", recurrenceScheduleDescription];
Sezam/AGActiveMonitoringUtility.m:91:                                                    @"onetouchlock":@"The door",
Sezam/AGActiveMonitoringUtility.m:92:                                                    @"manuallock":@"The door",
Sezam/AGActiveMonitoringUtility.m:93:                                                    @"autorelock":@"The door",
Sezam/AGActiveMonitoringUtility.m:94:                                                    @"door_open":@"The door"
Sezam/AGActiveMonitoringUtility.m:111:                                                     @"onetouchlock":@"is One-Touch Keypad locked",
Sezam/AGActiveMonitoringUtility.m:112:                                                     @"manuallock":@"is locked or unlocked manually",
Sezam/AGActiveMonitoringUtility.m:113:                                                     @"autorelock":@"is Auto-Locked",
Sezam/AGActiveMonitoringUtility.m:114:                                                     @"door_open":@"is left ajar"
Sezam/AGActiveMonitoringUtility.m:118:        [ruleUserIDToActionName setObject:(doorIsDescriptionSubject ? @"is locked or unlocked" : @"locks or unlocks the door") forKey:curUser.objectId];
Sezam/AGActiveMonitoringUtility.m:126:    NSArray *doorUserIDs = @[@"onetouchlock", @"manuallock", @"autorelock", @"door_open"];
Sezam/AGActiveMonitoringUtility.m:139:    [dateFormatter setDateFormat:@"h:mm a"];
Sezam/AGActiveMonitoringUtility.m:145:    NSString *startTimeStr = [[dateFormatter stringFromDate:startTimeDate] stringByReplacingOccurrencesOfString:@" " withString:@""];
Sezam/AGActiveMonitoringUtility.m:146:    NSString *endTimeStr = [[dateFormatter stringFromDate:endTimeDate] stringByReplacingOccurrencesOfString:@" " withString:@""];
Sezam/AGActiveMonitoringUtility.m:150:                                             @(AGDay_Sunday):@"SU",
Sezam/AGActiveMonitoringUtility.m:151:                                             @(AGDay_Monday):@"MO",
Sezam/AGActiveMonitoringUtility.m:152:                                             @(AGDay_Tuesday):@"TU",
Sezam/AGActiveMonitoringUtility.m:153:                                             @(AGDay_Wednesday):@"WE",
Sezam/AGActiveMonitoringUtility.m:154:                                             @(AGDay_Thursday):@"TH",
Sezam/AGActiveMonitoringUtility.m:155:                                             @(AGDay_Friday):@"FR",
Sezam/AGActiveMonitoringUtility.m:156:                                             @(AGDay_Saturday):@"SA",
Sezam/AGActiveMonitoringUtility.m:165:    orderedAndAbbreviatedDays = [orderedAndAbbreviatedDays stringByReplacingOccurrencesOfString:@"/" withString:@"\u00A0"];// "\u00A0" is a non breaking whitespace
Sezam/AGActiveMonitoringUtility.m:173:    NSString *recurrenceScheduleDescription = [NSString stringWithFormat:@"%@-%@ on %@", startTimeStr, endTimeStr, orderedAndAbbreviatedDays];
Sezam/AGActiveMonitoringUtility.m:175:        recurrenceScheduleDescription = [NSString stringWithFormat:@"%@-%@ %@ on %@", startTimeStr, endTimeStr, timeZoneAbbrevToAdd, orderedAndAbbreviatedDays];
Sezam/AGActiveMonitoringUtility.m:185:    NSURL *oneTouchLockIconURL = [NSURL URLWithString:[NSString stringWithFormat:@"file://%@", [[NSBundle mainBundle] pathForResource:@"iconKeypadLock" ofType:@"png"]]];
Sezam/AGActiveMonitoringUtility.m:186:    NSURL *manualLockIconURL = [NSURL URLWithString:[NSString stringWithFormat:@"file://%@", [[NSBundle mainBundle] pathForResource:@"iconManualOperations" ofType:@"png"]]];
Sezam/AGActiveMonitoringUtility.m:187:    NSURL *autoRelockIconURL = [NSURL URLWithString:[NSString stringWithFormat:@"file://%@", [[NSBundle mainBundle] pathForResource:@"iconAutolock" ofType:@"png"]]];
Sezam/AGActiveMonitoringUtility.m:188:    NSURL *doorOpenIconURL = [NSURL URLWithString:[NSString stringWithFormat:@"file://%@", [[NSBundle mainBundle] pathForResource:@"iconDoorAjar" ofType:@"png"]]];
Sezam/AGActiveMonitoringUtility.m:193:                                                   @"onetouchlock":oneTouchLockIconURL,
Sezam/AGActiveMonitoringUtility.m:194:                                                   @"manuallock":manualLockIconURL,
Sezam/AGActiveMonitoringUtility.m:195:                                                   @"autorelock":autoRelockIconURL,
Sezam/AGActiveMonitoringUtility.m:196:                                                   @"door_open":doorOpenIconURL
Sezam/AGAutoUnlockSetupIntroController.m:39:    self.view.topView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_1_intro.jpg"]];
Sezam/AGAutoUnlockSetupIntroController.m:43:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupIntroController.m:45:    NSString *title = @"Let’s Set Up Auto-Unlock";
Sezam/AGAutoUnlockSetupIntroController.m:46:    NSString *paragraph1 = @"Auto-Unlock is a feature that unlocks your door when you return home.";
Sezam/AGAutoUnlockSetupIntroController.m:48:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupIntroController.m:56:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupIntroController.m:72:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupIntroController.m:82:    [self.view.actionButton setTitle:@"SEE HOW IT WORKS" forState:UIControlStateNormal];
Sezam/AGDoorbellPowerAndBatteryViewController.m:51:        self.powerImageView.image = [UIImage imageNamed:@"power_icon_blue"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:52:        self.powerTitleLabel.text = @"Checking Power Levels";
Sezam/AGDoorbellPowerAndBatteryViewController.m:53:        self.powerMessageLabel.text = @"";
Sezam/AGDoorbellPowerAndBatteryViewController.m:54:        self.acVoltageMessage = @"Updating";
Sezam/AGDoorbellPowerAndBatteryViewController.m:55:        self.batteryMessage = @"Updating";
Sezam/AGDoorbellPowerAndBatteryViewController.m:58:        float acLevel = [self.doorbellTelemetry[@"ac_in"] floatValue];
Sezam/AGDoorbellPowerAndBatteryViewController.m:61:            self.powerImageView.image = [UIImage imageNamed:@"power_icon_red"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:62:            self.powerTitleLabel.text = @"LOW BATTERY";
Sezam/AGDoorbellPowerAndBatteryViewController.m:63:            self.powerMessageLabel.text = @"Your Doorbell Cam battery is critically low. Please allow a few hours for the battery to recharge before viewing the camera.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:64:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:65:            self.batteryMessage = @"Very Low";
Sezam/AGDoorbellPowerAndBatteryViewController.m:67:            self.powerImageView.image = [UIImage imageNamed:@"power_icon_red"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:68:            self.powerTitleLabel.text = @"INCOMPATIBLE DOORBELL";
Sezam/AGDoorbellPowerAndBatteryViewController.m:69:            self.powerMessageLabel.text = @"Your Doorbell Cam appears to be connected to an incompatible doorbell system and will stop working once the battery is drained.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:70:            self.acVoltageMessage = [NSString stringWithFormat:@"Too Low (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:71:            self.batteryMessage = @"Not Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:73:            self.powerImageView.image = [UIImage imageNamed:@"power_icon_blue"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:74:            self.powerTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellPowerAndBatteryViewController.m:75:            self.powerMessageLabel.text = @"Your Doorbell Cam is connected to AC power.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:76:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:77:            self.batteryMessage = @"Charged";
Sezam/AGDoorbellPowerAndBatteryViewController.m:79:            self.powerImageView.image = [UIImage imageNamed:@"power_icon_red"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:80:            self.powerTitleLabel.text = @"POWER DISCONNECTED";
Sezam/AGDoorbellPowerAndBatteryViewController.m:81:            self.powerMessageLabel.text = @"Please re-mount your Doorbell Cam and check that the power is turned on. Your Doorbell Cam  will stop working once the battery is drained.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:82:            self.acVoltageMessage = @"No Power (0.00 V)";
Sezam/AGDoorbellPowerAndBatteryViewController.m:83:            self.batteryMessage = @"Not Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:85:            self.powerImageView.image = [UIImage imageNamed:@"power_icon_blue"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:86:            self.powerTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellPowerAndBatteryViewController.m:87:            self.powerMessageLabel.text = @"Your Doorbell Cam is connected to the USB dock.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:88:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:89:            self.batteryMessage = @"Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:101:    if ([self.doorbell.status isEqualToString:@"doorbell_low_battery"]) {
Sezam/AGDoorbellPowerAndBatteryViewController.m:137:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellPowerAndBatteryViewController.m:165:    self.powerImageView.image = [UIImage imageNamed:@"wifi_icon_red"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:166:    self.powerTitleLabel.text = @"DOORBELL OFFLINE";
Sezam/AGDoorbellPowerAndBatteryViewController.m:167:    self.powerMessageLabel.text = @"Your Doorbell Cam is offline. Power Levels refers to the last known levels.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:175:    if ([messageData objectForKey:@"telemetry"]) {
Sezam/AGDoorbellPowerAndBatteryViewController.m:176:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:179:            self.doorbellLowBattery = [telemetry[@"doorbell_low_battery"] boolValue];
Sezam/AGDoorbellPowerAndBatteryViewController.m:218:         cell =  [tableView dequeueReusableCellWithIdentifier:@"ACVoltageRow"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:219:         NSString *acIn = [self.doorbellTelemetry objectForKey:@"ac_in"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:220:         cell.label2.text = [NSString stringWithFormat:@"%.2f V", [acIn floatValue]];
Sezam/AGDoorbellPowerAndBatteryViewController.m:222:         cell =  [tableView dequeueReusableCellWithIdentifier:@"BatteryRow"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:223:         NSString *battery = [self.doorbellTelemetry objectForKey:@"battery"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:224:         cell.label2.text = [NSString stringWithFormat:@"%.2f V", [battery floatValue]];
Sezam/AGDoorbellPowerAndBatteryViewController.m:226:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGAutoUnlockAdvancedSettingsController.m:15:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockAdvancedSettingsController.m:101:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockAdvancedSettingsController.m:102:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockAdvancedSettingsController.m:103:                                                                         @"au_cancel_type":@"UserManuallySwitchedToHomeMode",
Sezam/AGAutoUnlockAdvancedSettingsController.m:104:                                                                         @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockAdvancedSettingsController.m:105:                                                                         @"au_info": @{
Sezam/AGAutoUnlockAdvancedSettingsController.m:106:                                                                                 @"lock_version":[AGUtility modelVersionForLockID:self.autoUnlocker.lock.objectId]
Sezam/AGAutoUnlockAdvancedSettingsController.m:109:        [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Manually set to Home mode"} identifier:@"AutoUnlockStateManuallySetToHomeMode"]];
Sezam/AGAutoUnlockAdvancedSettingsController.m:113:        AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockAdvancedSettingsController.m:114:                                                                         @"au_initiation_type":@"UserManaullySwitchedToAwayMode",
Sezam/AGAutoUnlockAdvancedSettingsController.m:115:                                                                         @"au_source":@"AutoUnlockSettings"
Sezam/AGAutoUnlockAdvancedSettingsController.m:118:        [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Manually set to Away mode"} identifier:@"AutoUnlockStateManuallySetToAwayMode"]];
Sezam/AGUtility.h:21:#define AG_NOTIFICATION_REFRESH_KEYCHAINS               @"AG_NOTIFICATION_REFRESH_KEYCHAINS"
Sezam/AGUtility.h:22:#define AG_NOTIFICATION_LOGOUT                          @"AG_NOTIFICATION_LOGOUT"
Sezam/AGUtility.h:23:#define AG_NOTIFICATION_RESIGN_ACTIVE                   @"AG_NOTIFICATION_RESIGN_ACTIVE"
Sezam/AGUtility.h:24:#define AG_NOTIFICATION_BECOME_ACTIVE                   @"AG_NOTIFICATION_BECOME_ACTIVE"
Sezam/AGUtility.h:25:#define AG_ACTIVE_FEATURES_UPDATED                      @"AG_ACTIVE_FEATURES_UPDATED"
Sezam/AGUtility.h:26:#define AG_LOCK_SWIPE_BEGIN                             @"AG_LOCK_SWIPE_BEGIN"
Sezam/AGUtility.h:27:#define AG_LOCK_SWIPE_END                               @"AG_LOCK_SWIPE_END"
Sezam/AGUtility.h:28:#define AG_REMOTE_LOCK_MANAGER_INITIALIZED              @"AG_REMOTE_LOCK_MANAGER_INITIALIZED"
Sezam/AGUtility.h:29:#define AG_REMOTE_LOCK_MANAGER_INITIALIZED_FOR_HOMEKIT  @"AG_REMOTE_LOCK_MANAGER_INITIALIZED_FOR_HOMEKIT"
Sezam/AGUtility.h:30:#define AG_LOCAL_NOTIFICATION_DOORBELL_SETUP            @"Your Doorbell Cam has been charging for 30 minutes and is ready to set up."
Sezam/AGUtility.h:33:static NSString* kDisableHyperBridgeKey = @"disablehyperbridge";
Sezam/AGUtility.h:34:static NSString* kDisableFastBridgeKey = @"disablefastbridge";
Sezam/AGUtility.h:35:static NSString* kHyperBridgeKey = @"hyperbridge";
Sezam/AGUtility.h:36:static NSString* kFastBridgeKey = @"fastbridge";
Sezam/AGUtility.h:37:static NSString* kFastBridge_Helios = @"fastbridge-helios";
Sezam/AGUtility.h:38:static NSString* kFastBridge_Jupiter = @"fastbridge-jupiter";
Sezam/AGUtility.h:39:static NSString* kFastBridge_Europa = @"fastbridge-europa";
Sezam/AGUtility.h:40:static NSString* kFastBridge_Callisto = @"fastbridge-callisto";
Sezam/AGUtility.h:41:static NSString* kSeamlessKey = @"seamless";
Sezam/AGUtility.h:42:static NSString* kHouseStatusKey = @"housestatus";
Sezam/AGBLERegionMonitor.m:13:NSString * const AGBLERegionMonitorErrorRegionNotInBLECache = @"AGBLERegionMonitorErrorRegionNotInBLECache";
Sezam/AGBLERegionMonitor.m:122:            [curObserver regionMonitorDidFailToStart:self error:[NSError errorWithDomain:@"AGBLERegionMonitor" code:-5561 userInfo:@{@"AGError":AGBLERegionMonitorErrorRegionNotInBLECache}]];
Sezam/AGBLERegionMonitor.m:148:    return ![AGFeatureManager enabled:@"AutoUnlockDisableRegionMonitorDisconnectAfterDealloc"];
Sezam/AGDoorbellSetupHelpViewController.m:13:static NSString* kAGDiaryCategory = @"DoorbellSetupv2";
Sezam/AGDoorbellSetupHelpViewController.m:25:    AGDiaryInfo(@"DoorbellSetupHelpWorkflow", @"User Entered Doorbell Setup Help Workflow");
Sezam/AGDoorbellSetupHelpViewController.m:42:            self.heroImageView.image = [UIImage imageNamed:@"imgDoorbellcamHeader"];
Sezam/AGDoorbellSetupHelpViewController.m:43:            self.messageLabel.text = @"First, make sure your Doorbell Cam has been connected to power for at least 15 minutes so that the internal battery is charged.";
Sezam/AGDoorbellSetupHelpViewController.m:49:            self.heroImageView.image = [UIImage imageNamed:@"imgDoorbellcamHeader"];
Sezam/AGDoorbellSetupHelpViewController.m:50:            self.messageLabel.text = @"Next, press the button on the front of the doorbell again; wait a few seconds for the green blinking light to reappear.";
Sezam/AGDoorbellSetupHelpViewController.m:56:            self.heroImageView.image = [UIImage imageNamed:@"DoorbellWithRouter_v2"];
Sezam/AGDoorbellSetupHelpViewController.m:57:            self.messageLabel.text = @"Finally, remove Doorbell Cam from the mounting plate and place it directly next to your router. \n\nThis should dramatically improve Doorbell Cam’s Wi-Fi connection during setup.";
Sezam/AGDoorbellSetupHelpViewController.m:98:    UIAlertController *reminderAlertController = [UIAlertController alertControllerWithTitle:@"15 Minute Reminder"
Sezam/AGDoorbellSetupHelpViewController.m:99:                                                                                         message:@"August will send you a reminder in 15 minutes when your doorbell’s battery has charged."
Sezam/AGDoorbellSetupHelpViewController.m:101:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me In 15 Minutes"
Sezam/AGDoorbellSetupHelpViewController.m:106:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellSetupHelpViewController.m:116:    if (NSClassFromString(@"UNNotificationRequest")) {
Sezam/AGDoorbellSetupHelpViewController.m:118:        reminderNotificationContent.title = @"Continue Doorbell Setup";
Sezam/AGDoorbellSetupHelpViewController.m:119:        reminderNotificationContent.body = @"Your Doorbell Cam has been charging for 15 minutes and is ready to set up.";
Sezam/AGDoorbellSetupHelpViewController.m:120:        reminderNotificationContent.categoryIdentifier = @"doorbellSetupReminder";
Sezam/AGDoorbellSetupHelpViewController.m:122:        UNNotificationRequest *reminderNotification = [UNNotificationRequest requestWithIdentifier:@"doorbellSetupReminderNotification" content:reminderNotificationContent trigger:reminderNotificationTrigger];
Sezam/AGDoorbellSetupHelpViewController.m:126:    UIAlertController *reminderAlertController = [UIAlertController alertControllerWithTitle:@"Timer Set"
Sezam/AGDoorbellSetupHelpViewController.m:127:                                                                                     message:@"We’ll send a reminder to your phone in 15 minutes."
Sezam/AGDoorbellSetupHelpViewController.m:129:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Ok"
Sezam/AGKeypadCommManager.m:20:#define kAGDiaryCategory @"Keypad"
Sezam/AGKeypadCommManager.m:57:#define kKeypadServiceString         @"36f680f6-cedd-0089-5c42-960fbec6e452"
Sezam/AGKeypadCommManager.m:58:#define kAGKeypadOTAInfoService        @"180A"
Sezam/AGKeypadCommManager.m:59:#define kAGKeypadOTAInfoCharacteristic  @"2A26"
Sezam/AGKeypadCommManager.m:61:#define kKeypadFirmwareSupportsParams @"1.83.0"
Sezam/AGKeypadCommManager.m:81:        AGDiaryDebug(@"CreatingNewCentral", @"central had been removed");
Sezam/AGKeypadCommManager.m:102:            AGDiaryDebug(@"StartingScan", @"central active");
Sezam/AGKeypadCommManager.m:106:        AGDiaryDebug(@"WaitBeforeStartingScan", @"central not active");
Sezam/AGKeypadCommManager.m:118:    NSAssert(self.desiredKeypadUUID!=nil, @"Keypad UUID not defined");
Sezam/AGKeypadCommManager.m:125:        [self selectDevice:@{@"peripheral": peripheral, @"serial": self.keypadSerial} ];
Sezam/AGKeypadCommManager.m:140:        AGDiary(AGDiaryLevel_Info, @"KeypadSetup", @"KeypadSetupBadKey", @"KeypadSetupBadKey");
Sezam/AGKeypadCommManager.m:155:    CBPeripheral *peripheral = [deviceInfo objectForKey:@"peripheral"];
Sezam/AGKeypadCommManager.m:156:    NSString *serialNumber = [deviceInfo objectForKey:@"serial"];
Sezam/AGKeypadCommManager.m:161:        NSString *handshakeKey = [dict objectForKey:@"handshakeKey"];
Sezam/AGKeypadCommManager.m:163:        NSString *currentSetupKey =  [dict objectForKey:@"currentHandshakeKey"];
Sezam/AGKeypadCommManager.m:165:            currentSetupKey = [dict objectForKey:@"currentHanshakeKey"]; // Fix for misspelling in some endpoints
Sezam/AGKeypadCommManager.m:168:        self.paramsToSet = [dict objectForKey:@"keypadParams"];
Sezam/AGKeypadCommManager.m:174:        NSString *nextSetupKey = [dict objectForKey:@"nextHandshakeKey"];
Sezam/AGKeypadCommManager.m:177:            AGDiaryDebug(@"GotLockHandshake", @"Got keypad offline key.");
Sezam/AGKeypadCommManager.m:181:                AGDiaryError(@"GetHandshakeFailed", @"%@", error);
Sezam/AGKeypadCommManager.m:201:            AGDiaryDebug(@"setupLockUUID", @"SENDING TO KEYPAD Lock ID %@ Handshake key %@", self.agLock.objectId, handshakeKey);
Sezam/AGKeypadCommManager.m:224:    AGDiaryDebug(@"ScanTimeout", @"Found %d keypads during scan", [self.foundDevicesWithScan count]);
Sezam/AGKeypadCommManager.m:261:    AGDiaryInfo(@"Shutdown", @"Shutting down keypad communication");
Sezam/AGKeypadCommManager.m:311:        AGDiary(AGDiaryLevel_Info, @"KeypadSetup", @"Connected", @"Connected to keypad");
Sezam/AGKeypadCommManager.m:315:    AGDiaryDebug(@"ConnectedPeripheral", @"CONNECTED:  peripheral: %@", peripheral);
Sezam/AGKeypadCommManager.m:316:    AGDiaryInfo(@"DiscoveringServices", @"Discovering services");
Sezam/AGKeypadCommManager.m:323:    AGDiaryInfo(@"DisconnectedPeripheral", @"DISCONNECTED: %@, peripheral: %@", error.description, peripheral);
Sezam/AGKeypadCommManager.m:325:        AGDiaryDebug(@"Done", @"We should be finished on this disconnect.");
Sezam/AGKeypadCommManager.m:340:    AGDiaryInfo(@"FailedToConnect", @"didFailToConnectPeripheral %@", error.description);
Sezam/AGKeypadCommManager.m:346:    AGDiaryInfo(@"RetrieveConnectedPeripherals", @"didRetrieveConnectedPeripherals");
Sezam/AGKeypadCommManager.m:360:            AGDiaryInfo(@"CentralManagerStateUnknown", @"centralManagerDidUpdateState:  CBCentralManagerStateUnknown. Disconnecting connection of discovered locks.");
Sezam/AGKeypadCommManager.m:364:            AGDiaryInfo(@"CentralManagerStateResetting", @"centralManagerDidUpdateState:  CBCentralManagerStateResetting");
Sezam/AGKeypadCommManager.m:369:            AGDiaryInfo(@"CentralManagerStateUnsupported", @"centralManagerDidUpdateState:  CBCentralManagerStateUnsupported");
Sezam/AGKeypadCommManager.m:373:            AGDiaryInfo(@"CentralManagerStateUnauthorized", @"centralManagerDidUpdateState:  CBCentralManagerStateUnauthorized");
Sezam/AGKeypadCommManager.m:377:            AGDiaryInfo(@"CentralManagerStatePoweredOff", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOff");
Sezam/AGKeypadCommManager.m:382:            AGDiaryInfo(@"CentralManagerStatePoweredOn", @"centralManagerDidUpdateState:  CBCentralManagerStatePoweredOn");
Sezam/AGKeypadCommManager.m:402:        AGDiaryDebug(@"MissingLockNameError", @"Missing peripheral name or UUID");
Sezam/AGKeypadCommManager.m:413:    AGDiaryInfo(@"FoundPeripheral",@"%@ %@", peripheral.name, advertisedName);
Sezam/AGKeypadCommManager.m:417:    NSArray *nameTokens = [advertisedName componentsSeparatedByString:@" "];
Sezam/AGKeypadCommManager.m:418:    if (([nameTokens count] > 1) &&  [[nameTokens objectAtIndex:0] isEqualToString:@"August"]) {
Sezam/AGKeypadCommManager.m:422:    if (([keypadSerialNumber rangeOfString:@"K1"].location==0) || ([keypadSerialNumber rangeOfString:@"K2"].location==0)) {
Sezam/AGKeypadCommManager.m:433:        [self.foundDevicesWithScan addObject:@{@"peripheral":peripheral, @"serial":keypadSerialNumber}];
Sezam/AGKeypadCommManager.m:438:    NSAssert(self.internalStatus == AGKeypadGotOTAVersion, @"Approved before OTA version received");
Sezam/AGKeypadCommManager.m:439:    NSAssert(self.peripheral!=nil, @"Bad peripheral");
Sezam/AGKeypadCommManager.m:440:    AGDiaryDebug(@"VersionApproved",@"starting communication if we can");
Sezam/AGKeypadCommManager.m:443:        AGDiaryDebug(@"WaitForChars",@"We are still waiting for communication");
Sezam/AGKeypadCommManager.m:457:            AGDiaryDebug(@"IgnoringVersion", @"Ignoring already processed version from keypad");
Sezam/AGKeypadCommManager.m:463:            AGDiaryInfo(@"GotNewVersion", @"Got keypad version %@.", versionNumber);
Sezam/AGKeypadCommManager.m:474:        AGDiaryDebug(@"UpdateValueForCharacteristic", @"peripheral:%@ didUpdateValueForCharacteristic:%@ error:%@", peripheral, characteristic, error);
Sezam/AGKeypadCommManager.m:477:            AGDiaryError(@"UpdateValueForCharacteristicError", @"Error updating value for characteristic %@ error: %@", characteristic.UUID, error.localizedDescription);
Sezam/AGKeypadCommManager.m:490:    AGDiaryDebug(@"DidWriteValueForCharacteristic", @"peripheral:%@ didWriteValueForCharacteristic:%@ error:%@", peripheral, characteristic, error.description);
Sezam/AGKeypadCommManager.m:492:    AGDiaryDebug(@"DataProcessed", @"Data processed");
Sezam/AGKeypadCommManager.m:503:    AGDiaryInfo(@"DidDiscoverServices", @"DidDiscoverServices");
Sezam/AGKeypadCommManager.m:507:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
Sezam/AGKeypadCommManager.m:508:        AGDiaryError(@"ErrorDiscoveringKeypadServices", errorMsg);
Sezam/AGKeypadCommManager.m:513:        AGDiaryInfo(@"AugustLockServiceFound", @"August Keypad service found, UUID: %@", aService.UUID);
Sezam/AGKeypadCommManager.m:523:            AGDiaryInfo(@"StartDiscoverCharacteristics", @"Starting to discover Bluetooth LE Characteristics for the Keypad Service");
Sezam/AGKeypadCommManager.m:533:    AGDiaryInfo(@"DicoveredCharacteristic", @"Found characteristic %@", service);
Sezam/AGKeypadCommManager.m:546:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
Sezam/AGKeypadCommManager.m:547:            AGDiaryError(@"ErrorDiscoveringCharacteristics", errorMsg);
Sezam/AGKeypadCommManager.m:557:                AGDiaryInfo(@"FoundCharacteristic", @"Found read/notify characteristic keypadReadID");
Sezam/AGKeypadCommManager.m:563:                AGDiaryInfo(@"FoundCharacteristic", @"Found write characteristic keypadWriteID");
Sezam/AGKeypadCommManager.m:569:            AGDiaryInfo(@"FinishedDiscoverCharacteristics", @"Finished discovering characteristics");
Sezam/AGKeypadCommManager.m:585:    AGDiaryDebug(@"DidUpdateNotificationStateForCharacteristic", @"peripheral:%@ didUpdateNotificationStateForCharacteristic:%@ error:%@ (%d)", peripheral, characteristic, error.description);
Sezam/AGKeypadCommManager.m:604:    AGDiaryDebug(@"ProcessingDataFromKeypad", @"Got Data: %@", [incomingCommand description]);
Sezam/AGKeypadCommManager.m:610:                AGDiaryDebug(@"Done", @"We should be finsihed");
Sezam/AGKeypadCommManager.m:614:            AGDiaryDebug(@"DataProcessed", @"Data processed");
Sezam/AGKeypadCommManager.m:623:        AGDiaryInfo(@"FAILED", @"Data did not match");
Sezam/AGKeypadCommManager.m:628:    AGDiaryDebug(@"WriteData", @"Writing data %@ to write characteristic", [data description]);
Sezam/AGKeypadCommManager.m:633:    NSAssert(self.offlineKeyForLockAndKeypad != nil, @"No Offline Key Set");
Sezam/AGCreateAccountViewController.m:17:static NSString *const kTermsOfServiceString = @"By creating an account you agree to August’s Terms of Service, End User Licence Agreement and Privacy Policy";
Sezam/AGCreateAccountViewController.m:18:static NSString *const kTermsOfServiceBoldString = @"August’s Terms of Service, End User Licence Agreement and Privacy Policy";
Sezam/AGCreateAccountViewController.m:93:                           [[UIBarButtonItem alloc]initWithTitle:@"Cancel" style:UIBarButtonItemStylePlain target:self action:@selector(cancelNumberPad)],
Sezam/AGCreateAccountViewController.m:95:                           [[UIBarButtonItem alloc]initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)],
Sezam/AGCreateAccountViewController.m:120:    [disclaimerText addAttribute:NSFontAttributeName value:[UIFont fontWithName:@"ProximaNova-Bold" size:12] range:boldRange];
Sezam/AGCreateAccountViewController.m:121:    [disclaimerText addAttribute:NSFontAttributeName value:[UIFont fontWithName:@"ProximaNova-Regular" size:12] range:NSMakeRange(0, boldRange.location)];
Sezam/AGCreateAccountViewController.m:130:    NSURL *eulaLink = [NSURL URLWithString:@"http://august.com/legal/eula/"];
Sezam/AGCreateAccountViewController.m:151:    if ([segue.identifier isEqualToString:@"CreateAccountToAddProfilePhoto"]) {
Sezam/AGCreateAccountViewController.m:158:    NSString *emailRegExPattern = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
Sezam/AGCreateAccountViewController.m:159:    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegExPattern];
Sezam/AGCreateAccountViewController.m:164:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Invalid Email"
Sezam/AGCreateAccountViewController.m:165:                                                                       message:@"Please enter a valid email address."
Sezam/AGCreateAccountViewController.m:167:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:243:    [AGUser checkEmailOrPhoneForDuplicate:@"email" value:self.emailTextField.text block:^(BOOL exists, NSError *error) {
Sezam/AGCreateAccountViewController.m:246:                NSString *duplicateEmailMesssage = [NSString stringWithFormat:NSLocalizedString(@"The email address %@ currently belongs to another account. Did you mean to sign in?", @"The email address {email} currently belongs to another account. Did you mean to sign in?"), self.emailTextField.text];
Sezam/AGCreateAccountViewController.m:247:                UIAlertController *duplicateEmailAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Did You Mean to Sign In?", nil)
Sezam/AGCreateAccountViewController.m:250:                UIAlertAction *continueSignUpAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"No, Continue With Signup",nil)
Sezam/AGCreateAccountViewController.m:257:                UIAlertAction *switchToSignInAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Yes, Sign In",nil)
Sezam/AGCreateAccountViewController.m:289:    self.countryCodeControl.inputTextField.text = @"";
Sezam/AGCreateAccountViewController.m:303:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"Please enter a valid phone number.",nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGCreateAccountViewController.m:304:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:312:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"Please enter your phone number.",nil) preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGCreateAccountViewController.m:313:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:322:        [AGUser checkEmailOrPhoneForDuplicate:@"phone" value:phoneNumber block:^(BOOL exists, NSError *error) {
Sezam/AGCreateAccountViewController.m:325:                    NSString *duplicatePhoneMesssage= [NSString stringWithFormat:NSLocalizedString(@"The phone number %@ currently belongs to another account. Did you mean to sign in?", @"The phone number {phone} currently belongs to another account. Did you mean to sign in?"), phoneNumber];
Sezam/AGCreateAccountViewController.m:326:                    UIAlertController *duplicatePhoneAlert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Did You Mean to Sign In?", nil)
Sezam/AGCreateAccountViewController.m:329:                    UIAlertAction *continueSignUpAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"No, Continue With Signup",nil)
Sezam/AGCreateAccountViewController.m:336:                    UIAlertAction *switchToSignInAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Yes, Sign In",nil)
Sezam/AGCreateAccountViewController.m:366:    NSString *phoneRegex = @"^((\\+)|(00))[0-9]{11,16}$";
Sezam/AGCreateAccountViewController.m:367:    NSPredicate *phoneTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", phoneRegex];
Sezam/AGCreateAccountViewController.m:387:    NSString *showHidePasswordButtonText = self.showPasswordCharacters ? NSLocalizedString(@"HIDE", nil) : NSLocalizedString(@"SHOW", nil);
Sezam/AGCreateAccountViewController.m:405:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:406:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:407:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:408:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:429:            passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MINIMUM 8 CHARACTERS", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreateAccountViewController.m:438:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"WEAK", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreateAccountViewController.m:445:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"MEDIUM", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreateAccountViewController.m:452:                    passwordStrengthInformationString = [[NSAttributedString alloc] initWithString:NSLocalizedString(@"STRONG", nil) attributes:@{ NSForegroundColorAttributeName: passwordStrengthColor }];
Sezam/AGCreateAccountViewController.m:458:            NSMutableAttributedString *temporaryString = [[NSMutableAttributedString alloc] initWithString:NSLocalizedString(@"PASSWORD STRENGTH: ", nil) attributes:@{ NSForegroundColorAttributeName: mediumLabelColor }];
Sezam/AGCreateAccountViewController.m:487:        errorMsg = NSLocalizedString(@"Please enter your first name.",nil);
Sezam/AGCreateAccountViewController.m:489:        errorMsg = NSLocalizedString(@"Please enter your last name.",nil);
Sezam/AGCreateAccountViewController.m:491:        errorMsg = NSLocalizedString(@"Please enter your email address.",nil);
Sezam/AGCreateAccountViewController.m:493:        errorMsg = NSLocalizedString(@"Please enter your phone number.",nil);
Sezam/AGCreateAccountViewController.m:501:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error",nil) message:errorMsg preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGCreateAccountViewController.m:502:        UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
Sezam/AGCreateAccountViewController.m:515:    NSString *weakPasswordAlertTitle   = NSLocalizedString(@"Please Create a Stronger Password", nil);
Sezam/AGCreateAccountViewController.m:516:    NSString *weakPasswordAlertMessage = NSLocalizedString(@"August requires passwords to be at least 'medium' strength.", nil);
Sezam/AGCreateAccountViewController.m:520:        UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
Sezam/AGCreateAccountViewController.m:546:                        [self performSegueWithIdentifier:@"CreateAccountToAddProfilePhoto" sender:nil];
Sezam/AGCreateAccountViewController.m:551:                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:weakPasswordAlertTitle message:weakPasswordAlertMessage delegate:nil cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGCreateAccountViewController.m:554:                            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGCreateAccountViewController.m:564:                UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:[AGUtility userFacingDescriptionFromError:error] delegate:nil cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles:nil];
Sezam/AGDoorbellTelemetryInfo.m:22:    self.bssid = [self valueForKey:@"BSSID" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:23:    self.ssid = [self valueForKey:@"SSID" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:24:    self.ipAddress = [self valueForKey:@"ip_addr" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:26:    self.linkQuality = [self intFromObject:[self valueForKey:@"link_quality" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:27:    self.wifiFrequency = [self intFromObject:[self valueForKey:@"wifi_freq" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:28:    self.signalLevel = [self valueForKey:@"signal_level" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:30:    self.steadyACInput = [self floatFromObject:[self valueForKey:@"steady_ac_in" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:31:    self.acInput = [self floatFromObject:[self valueForKey:@"ac_in" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:32:    self.batteryLevel = [self floatFromObject:[self valueForKey:@"battery" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:33:    self.doorbellHasLowBattery = [self intFromObject:[self valueForKey:@"doorbell_low_battery" fromDict:telemetryInfo]].boolValue;
Sezam/AGDoorbellTelemetryInfo.m:34:    self.loadAverage = [self valueForKey:@"load_average" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:35:    self.temperature = [self floatFromObject:[self valueForKey:@"temperature" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:37:    self.date = [self valueForKey:@"date" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:38:    self.updatedAt = [self valueForKey:@"updated_at" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:39:    self.uptime = [self valueForKey:@"uptime" fromDict:telemetryInfo];
Sezam/AGSwitchTableCell.m:34:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGCallRecordHeartbeat.m:13:#define kAGDiaryCategory @"AGVideoStreamHeartbeat"
Sezam/AGCallRecordHeartbeat.m:58:    AGDiaryDebug(@"Beat", @"-> %@", endpoint);
Sezam/AGCallRecordHeartbeat.m:61:        AGDiaryDebug(@"Beat", @"<- %i", response.statusCode);
Sezam/AGPubSubSignaling.m:9:#define kAGDiaryCategory @"PubSubSignaling"
Sezam/AGPubSubSignaling.m:100:        NSAssert(_state == AGPSStateInitialized, @"Must be initialized before registering!");
Sezam/AGPubSubSignaling.m:109:            AGDiaryDebug(@"Debug",@"AGPubSubSignaling registration complete");
Sezam/AGPubSubSignaling.m:119:        NSAssert(_state == AGPSStateRegistered || _state == AGPSStateAsleep, @"Must register before sending wakeup message!");
Sezam/AGPubSubSignaling.m:122:                @"status" : @"wakeup",
Sezam/AGPubSubSignaling.m:123:                @"origin" : @"iOS",
Sezam/AGPubSubSignaling.m:124:                @"webrtc" : @YES,
Sezam/AGPubSubSignaling.m:125:                @"tid" : transactionID
Sezam/AGPubSubSignaling.m:138:            AGDiaryDebug(@"Debug",@"AGPubSubSignaling -> %@", wakeupBody);
Sezam/AGPubSubSignaling.m:146:    [NSException raise:@"NotImplementedException" format:@"This method has not been implemented"];
Sezam/AGPubSubSignaling.m:153:        NSAssert(_state == AGPSStateOfferReceived, @"Should not send an answer if an offer has not been received!");
Sezam/AGPubSubSignaling.m:156:                @"status" : @"answer",
Sezam/AGPubSubSignaling.m:157:                @"tid" : transactionID,
Sezam/AGPubSubSignaling.m:158:                @"session_id" : @(_sessionID),
Sezam/AGPubSubSignaling.m:159:                @"jsep" : @{@"type" : @"answer", @"sdp" : answer},
Sezam/AGPubSubSignaling.m:160:                @"origin" : @"iOS"
Sezam/AGPubSubSignaling.m:173:            AGDiaryDebug(@"Debug",@"AGPubSubSignaling -> %@", answerBody);
Sezam/AGPubSubSignaling.m:183:        NSAssert(_state != AGPSStateInitialized && _state != AGPSStateUninitialized, @"Must be registered before sending messages!");
Sezam/AGPubSubSignaling.m:193:                @"status" : @"trickle",
Sezam/AGPubSubSignaling.m:194:                @"tid" : transactionID,
Sezam/AGPubSubSignaling.m:195:                @"session_id" : @(_sessionID),
Sezam/AGPubSubSignaling.m:196:                @"origin" : @"iOS",
Sezam/AGPubSubSignaling.m:197:                @"candidates" : candidates
Sezam/AGPubSubSignaling.m:209:            AGDiaryDebug(@"Debug",@"AGPubSubSignaling -> %@", trickleBody);
Sezam/AGPubSubSignaling.m:217:    [NSException raise:@"NotImplementedException" format:@"This method has not been implemented"];
Sezam/AGPubSubSignaling.m:240:            AGDiaryDebug(@"Debug",@"Closing Pub Nub Signaling Connection");
Sezam/AGPubSubSignaling.m:256:    NSNumber * tid = payload[@"tid"];
Sezam/AGPubSubSignaling.m:261:        if(![payload[@"status"] isEqual:@"trickle"] && ![payload[@"status"] isEqual:@"error"]){
Sezam/AGPubSubSignaling.m:272:    AGSignalingOperation responseType = [AGPubSubSignaling operationType:payload[@"status"]];
Sezam/AGPubSubSignaling.m:275:        AGDiaryDebug(@"Debug",@"AGPubSubSignaling <- %@", payload);
Sezam/AGPubSubSignaling.m:286:                    NSDictionary * jsep = payload[@"jsep"];
Sezam/AGPubSubSignaling.m:287:                    NSString * sdp = jsep[@"sdp"];
Sezam/AGPubSubSignaling.m:288:                    _sessionID = [payload[@"session_id"] unsignedIntegerValue];
Sezam/AGPubSubSignaling.m:316:            NSDictionary * jsep = payload[@"jsep"];
Sezam/AGPubSubSignaling.m:317:            [_delegate didReceiveAnswer:jsep[@"sdp"] from:_channel];
Sezam/AGPubSubSignaling.m:324:                [_delegate didReceiveResponse:@"ack" from:_channel];
Sezam/AGPubSubSignaling.m:335:                [_delegate didReceiveResponse:@"ack" from:_channel];
Sezam/AGPubSubSignaling.m:344:            NSAssert(false, @"We never send acknowledgement messages, how did this happen?");
Sezam/AGPubSubSignaling.m:351:                NSArray<NSDictionary *>* candidates = payload[@"candidates"];
Sezam/AGPubSubSignaling.m:365:    NSDictionary * errorData = errorBody[@"error"];
Sezam/AGPubSubSignaling.m:366:    NSNumber * code = errorData[@"code"];
Sezam/AGPubSubSignaling.m:367:    NSString * reason = errorData[@"reason"];
Sezam/AGPubSubSignaling.m:401:                AGDiaryDebug(@"Timeout", @"Operation %@ (id:%@) timed out", [AGPubSubSignaling operationValue:operation], transactionID);
Sezam/AGPubSubSignaling.m:437:    if([value isEqualToString:@"ack"]){
Sezam/AGPubSubSignaling.m:439:    } else if([value isEqualToString:@"offer"]){
Sezam/AGPubSubSignaling.m:441:    } else if([value isEqualToString:@"answer"]){
Sezam/AGPubSubSignaling.m:443:    } else if([value isEqualToString:@"trickle"]){
Sezam/AGPubSubSignaling.m:445:    } else if([value isEqualToString:@"error"]){
Sezam/AGPubSubSignaling.m:447:    } else if([value isEqualToString:@"wakeup"]){
Sezam/AGPubSubSignaling.m:458:        case AGSignalingOperationWakeUp:return @"wakeup";
Sezam/AGPubSubSignaling.m:459:        case AGSignalingOperationOffer:return @"offer";
Sezam/AGPubSubSignaling.m:460:        case AGSignalingOperationAnswer:return @"answer";
Sezam/AGPubSubSignaling.m:461:        case AGSignalingOperationTrickle:return @"trickle";
Sezam/AGPubSubSignaling.m:462:        case AGSignalingOperationError:return @"error";
Sezam/AGPubSubSignaling.m:463:        case AGSignalingOperationAck:return @"ack";
Sezam/AGPubSubSignaling.m:464:        case AGSignalingOperationUnknown:return @"unknown";
Sezam/AGDoorSenseSettingsViewController.m:78:            if ([doorStateString isEqualToString:@"kAugDoorState_Init"]) {
Sezam/AGDoorSenseSettingsViewController.m:129:        UIAlertController *instantLockWillNotWorkAlert = [UIAlertController alertControllerWithTitle:@"Warning" message:@"Instant Auto-Lock is enabled, but will not function after disabling DoorSense. We are updating your AutoLock settings to On a Timer with an auto relock at 2 minutes." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorSenseSettingsViewController.m:130:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
Sezam/AGDoorSenseSettingsViewController.m:158:            self.mainMessageLabel.text = @"Checking DoorSense Status...";
Sezam/AGDoorSenseSettingsViewController.m:161:            self.mainMessageLabel.text = @"Your lock is currently using DoorSense, and is able to detect if your door is open or closed.";
Sezam/AGDoorSenseSettingsViewController.m:165:            self.mainMessageLabel.text = @"DoorSense enables your lock to detect if your door is open or closed.";
Sezam/AGDoorSenseSettingsViewController.m:181:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGDoorSenseSettingsViewController.m:182:    AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGDoorSenseSettingsViewController.m:203:        if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDoorSenseSettingsViewController.m:204:            [self showAlertWithTitle:@"Error" andMessage:@"There was an error with Disabling Door Sense"];
Sezam/AGDoorSenseSettingsViewController.m:207:            [self showAlertWithTitle:@"Success" andMessage:@"Your DoorSense has been disabled. Your lock will not know if your door is open or closed. To enable DoorSense later, you will be guided through the calibration process. If Instant Auto-Lock was enabled, please reset it in lock settings."];
Sezam/AGDoorSenseSettingsViewController.m:219:    if ((self.lock.lockCapability.doorSenseInstallationInstructionURL != nil) && ([self.lock.lockCapability.doorSenseInstallationInstructionURL isEqual:@""] == NO)) {
Sezam/AGDoorSenseSettingsViewController.m:222:        [self showAlertWithTitle:@"Error" andMessage:@"This lock type does not support DoorSense."];
Sezam/AGDoorSenseSettingsViewController.m:225:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGDoorSenseSettingsViewController.m:226:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGDoorSenseSettingsViewController.m:270:    [self showAlertWithTitle:@"Error" andMessage:@"Lock Connection Error"];
Sezam/AGDoorSenseSettingsViewController.m:276:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGVideoStreamDebugger.m:51:    [output appendFormat:@"Status: %@\n", self.stream.localizedStatus];
Sezam/AGVideoStreamDebugger.m:52:    [output appendFormat:@"PubSub Connection: %@\n", self.pubSubConnection];
Sezam/AGVideoStreamDebugger.m:53:    [output appendFormat:@"Internet Connection: %@\n", self.networkConnection];
Sezam/AGVideoStreamDebugger.m:54:    [output appendFormat:@"Error: %@\n", self.stream.localizedError];
Sezam/AGVideoStreamDebugger.m:55:    [output appendFormat:@"Performance Stats: %@\n", self.stream.performanceStats];
Sezam/AGVideoStreamDebugger.m:70:            self.networkConnection = @"✓";
Sezam/AGVideoStreamDebugger.m:74:            self.networkConnection = @"ⓧ";
Sezam/AGVideoStreamDebugger.m:85:            self.pubSubConnection = @"✓";
Sezam/AGVideoStreamDebugger.m:89:            self.pubSubConnection = @"ⓧ";
Sezam/AGVideoStreamDebugger.m:93:            self.pubSubConnection = @"?";
Sezam/AGUnityModuleKeypadSecurityViewController.m:15:#define kAGDiaryCategory @"UnityKeypadSecurityViewController"
Sezam/AGUnityModuleKeypadSecurityViewController.m:49:    AGDiaryDebug(@"sliderValueChanged", @"value: %d", value);
Sezam/AGUnityModuleKeypadSecurityViewController.m:55:        _shutdownLabel.text = [NSString stringWithFormat:@"%dm : %ds", min, sec];
Sezam/AGUnityModuleKeypadSecurityViewController.m:61:        _wrongCodeInputLabel.text = [NSString stringWithFormat:@"%d", value];
Sezam/AGUnityModuleKeypadSecurityViewController.m:81:    AGDiaryDebug(@"purifiedValue", @"value:%d", value);
Sezam/AGUnityModuleKeypadSecurityViewController.m:116:    _shutdownLabel.text = [NSString stringWithFormat:@"%dm : %ds", min, sec];
Sezam/AGUnityModuleKeypadSecurityViewController.m:117:    _wrongCodeInputLabel.text = [NSString stringWithFormat:@"%d", (int)_unityManager.model.wrongCodeLimit];
Sezam/AGUnityModuleKeypadSecurityViewController.m:123:    AGDiaryDebug(@"setUnityKeypadValue", @"value: %d", value);
Sezam/AGUnityModuleKeypadSecurityViewController.m:129:        AGDiaryDebug(@"setResults", @"model: %@, error: %@", strongSelf.unityManager, errorMsg);
Sezam/AGUnityModuleKeypadSecurityViewController.m:134:                                                                  btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGBodyLabel.m:18:            self.customFont = [UIFont fontWithName: @"ProximaNova-Regular" size:17];
Sezam/AGBodyLabel.m:21:            self.customBoldFont = [UIFont fontWithName: @"ProximaNova-Semibold" size:17];
Sezam/AGBodyLabel.m:36:    NSString *boldStart = @"<bold>";
Sezam/AGBodyLabel.m:37:    NSString *boldEnd = @"</bold>";
Sezam/AGBodyLabel.m:48:        [[string mutableString] replaceOccurrencesOfString:boldStart withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0, string.string.length)];
Sezam/AGBodyLabel.m:50:        [[string mutableString] replaceOccurrencesOfString:boldEnd withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0, string.string.length)];
Sezam/AGSectionedIconListPickerView.m:81:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGSectionedIconListPickerView.m:88:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSectionedIconListPickerView.m:94:    [self.closeButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGSectionedIconListPickerView.m:111:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSectionedIconListPickerView.m:117:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGSectionedIconListPickerView.m:154:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSectionedIconListPickerView.m:187:    NSString *reuseID = @"AGSectionedIconListPickerViewCellID";
Sezam/AGHomeKitManagerCreateRoomViewController.m:14:#define kAGDiaryCategory @"CreateRoom"
Sezam/AGHomeKitManagerCreateRoomViewController.m:42:                AGDiaryInfo(@"CreateRoomError", [error description]);
Sezam/AGHomeKitManagerCreateRoomViewController.m:44:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Room. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitManagerCreateRoomViewController.m:47:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Room." inViewController:theSelf];
Sezam/AGHomeKitManagerCreateRoomViewController.m:50:                AGDiaryInfo(@"CreateRoomSuccess", @"Created HK room");
Sezam/AGLockSetupAddHouseViewController.m:24:static NSString* kAGDiaryCategory = @"AddHouse";
Sezam/AGLockSetupAddHouseViewController.m:48:    [[self houseNameTextField] setText:[NSString stringWithFormat:NSLocalizedString(@"%@'s House",nil),[[AGUser currentUser] firstName]]];
Sezam/AGLockSetupAddHouseViewController.m:54:    [[self houseImageView] setImage:[UIImage imageNamed:@""]];
Sezam/AGLockSetupAddHouseViewController.m:61:        self.lockName = [infoFromLastAddedHomeKitLock objectForKey:@"lock"];
Sezam/AGLockSetupAddHouseViewController.m:65:        self.houseNameTextField.text = [infoFromLastAddedHomeKitLock objectForKey:@"house"];
Sezam/AGLockSetupAddHouseViewController.m:68:        self.homeKitFlowLabel.text = [NSString stringWithFormat:@"Adding lock %@ to house %@.",self.lockName, self.houseNameTextField.text];
Sezam/AGLockSetupAddHouseViewController.m:70:        self.houseNameTextField.hidden = true; // = [infoFromLastAddedHomeKitLock objectForKey:@"house"];
Sezam/AGLockSetupAddHouseViewController.m:71:        self.lockLocationTextField.hidden = true; // = [infoFromLastAddedHomeKitLock objectForKey:@"lock"];
Sezam/AGLockSetupAddHouseViewController.m:100:    UIAlertView *quitAlert = [[UIAlertView alloc] initWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" delegate:self cancelButtonTitle:@"Never Mind" otherButtonTitles:@"Quit", nil];
Sezam/AGLockSetupAddHouseViewController.m:143:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGLockSetupAddHouseViewController.m:146:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), nil];
Sezam/AGLockSetupAddHouseViewController.m:149:        actionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self cancelButtonTitle:NSLocalizedString(@"Cancel",nil) destructiveButtonTitle:nil otherButtonTitles:NSLocalizedString(@"Select From Gallery",nil), NSLocalizedString(@"Take Photo",nil), nil];
Sezam/AGLockSetupAddHouseViewController.m:158:    if ([buttonTitle isEqualToString:NSLocalizedString(@"Cancel",nil)]) {
Sezam/AGLockSetupAddHouseViewController.m:161:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Take Photo",nil)]) {
Sezam/AGLockSetupAddHouseViewController.m:164:    else if ([buttonTitle isEqualToString:NSLocalizedString(@"Select From Gallery",nil)]) {
Sezam/AGLockSetupAddHouseViewController.m:199:    if([segue.identifier isEqualToString:@"lockSetupToSetupOTA"])
Sezam/AGLockSetupAddHouseViewController.m:204:    } else if ([segue.identifier isEqualToString:@"AGUnityModuleRegisterViewController"]) {
Sezam/AGLockSetupAddHouseViewController.m:213:    AGDiaryInfo(@"CreateHouse", @"Creating new House");
Sezam/AGLockSetupAddHouseViewController.m:217:        self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Adding house...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLockSetupAddHouseViewController.m:221:	[AGHouse createHouseForUser:[AGUser currentUser] name:self.houseNameTextField.text city:@"" state:@""  postalCode:@""  street:@""  apartment:@""  usingBlock:^(AGHouse *house, NSError *error) {
Sezam/AGLockSetupAddHouseViewController.m:225:            if ([[[self houseImageView] image] isEqual: [UIImage imageNamed:@""]] || ![[self houseImageView] image])
Sezam/AGLockSetupAddHouseViewController.m:233:                    [self performSegueWithIdentifier:@"CreateHouseToDoorbellSetupScan" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:240:                self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Adding Image...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLockSetupAddHouseViewController.m:245:                        AGDiaryError(@"ImageUploadFailed", @"Could not upload image for house");
Sezam/AGLockSetupAddHouseViewController.m:255:                        [self performSegueWithIdentifier:@"CreateHouseToDoorbellSetupScan" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:265:            AGDiaryError(@"NetworkError", @"add house error: %@", error.localizedDescription);
Sezam/AGLockSetupAddHouseViewController.m:273:        [AGUtility showError:NSLocalizedString(@"Something went wrong. Please try adding the lock again.",nil) inViewController:self];
Sezam/AGLockSetupAddHouseViewController.m:276:        AGDiaryInfo(@"AddLockToHouse", @"Adding Lock To House");
Sezam/AGLockSetupAddHouseViewController.m:279:            self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Adding lock...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGLockSetupAddHouseViewController.m:301:                    [self performSegueWithIdentifier:@"AGUnityModuleRegisterViewController" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:305:                [self performSegueWithIdentifier:@"lockSetupToSetupOTA" sender:nil];
Sezam/AGHouseOwnerPickViewController.m:31:            self.userDict = (NSDictionary *)[dict objectForKey:@"users"];
Sezam/AGHouseOwnerPickViewController.m:40:                if ([user.type isEqualToString:@"superuser"]) {
Sezam/AGHouseOwnerPickViewController.m:48:    self.checkboxUncheckedImage = [UIImage imageNamed:@"checkbox_unchecked_v2"];
Sezam/AGHouseOwnerPickViewController.m:49:    self.checkboxCheckedImage = [UIImage imageNamed:@"checkbox_checked_v2"];
Sezam/AGHouseOwnerPickViewController.m:71:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"You can't remove your own ownership of the house.",nil) delegate:nil cancelButtonTitle:@"OK" otherButtonTitles: nil];
Sezam/AGHouseOwnerPickViewController.m:92:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"HouseOwnerCell"];
Sezam/AGHouseOwnerPickViewController.m:96:        [cell.imageView2 setImageWithURL:[NSURL URLWithString:user.thumbURL] placeholderImage:[UIImage imageNamed:@"profile_blank_v2"]];
Sezam/AGHouseOwnerPickViewController.m:98:        cell.imageView2.image = [UIImage imageNamed:@"profile_blank_v2"];
Sezam/AGNestConfirmViewController.m:32:        [self performSegueWithIdentifier:@"nestConfirmToNestStructureMap" sender:nil];
Sezam/AGNestConfirmViewController.m:35:        [self performSegueWithIdentifier:@"nestConfirmToNestCameraToLock" sender:nil];
Sezam/AGNestConfirmViewController.m:57:    if ([segue.identifier isEqualToString:@"nestConfirmToNestStructureMap"]) {
Sezam/AGNestConfirmViewController.m:62:    else if ([segue.identifier isEqualToString:@"nestConfirmToNestCameraToLock"]) {
Sezam/AGAirbnbMappingViewController.m:25:static NSString* kAGDiaryCategory = @"AirBnBMapping";
Sezam/AGAirbnbMappingViewController.m:61:    self.airbnbGlobalStatusLabel.text = @"";
Sezam/AGAirbnbMappingViewController.m:65:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {}
Sezam/AGAirbnbMappingViewController.m:66:            AGDiaryInfo(@"UpdateAirBnBmapping", @"Error: %@", error.localizedDescription);
Sezam/AGAirbnbMappingViewController.m:67:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was a problem loading your AirBnB information." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbMappingViewController.m:68:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbMappingViewController.m:85:        self.airbnbGlobalStatusLabel.text = @"Your August and Airbnb accounts are connected.";
Sezam/AGAirbnbMappingViewController.m:88:        self.airbnbGlobalStatusLabel.text = @"Your August and Airbnb accounts are connected. Airbnb guests, go to the Home Screen to view access information for your upcoming reservations.";
Sezam/AGAirbnbMappingViewController.m:103:                NSDictionary *listingItem = @{@"accessName":lock.name, @"houseName":house.name, @"accessType":@"appAccess"};
Sezam/AGAirbnbMappingViewController.m:107:                NSDictionary *listingItem = @{@"accessName":[NSString stringWithFormat:@"%@ - Keypad",lock.name], @"houseName":house.name, @"accessType":@"keypadAccess"};
Sezam/AGAirbnbMappingViewController.m:154:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAirbnbMappingViewController.m:187:        cell = [tableView dequeueReusableCellWithIdentifier:@"SelectLockCell"];
Sezam/AGAirbnbMappingViewController.m:190:        cell = [tableView dequeueReusableCellWithIdentifier:@"ItemAccessCell"];
Sezam/AGAirbnbMappingViewController.m:194:        cell.label.text = itemListing[@"accessName"];
Sezam/AGAirbnbMappingViewController.m:195:        cell.label2.text = itemListing[@"houseName"];
Sezam/AGAirbnbMappingViewController.m:196:        if ([itemListing[@"accessType"] isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbMappingViewController.m:233:            [self performSegueWithIdentifier:@"AirBnBMapViewToListingSetupView" sender:nil];
Sezam/AGAirbnbMappingViewController.m:241:    UIAlertController *disconnectAlertController = [UIAlertController alertControllerWithTitle:@"Disconnect from Airbnb?" message:@"You’ll need to sign back in to Airbnb from the August app to reconnect. \n\nAny current Airbnb guests will keep the access they already have." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbMappingViewController.m:242:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbMappingViewController.m:244:    UIAlertAction *disconnectAction = [UIAlertAction actionWithTitle:@"Disconnect" style:UIAlertActionStyleDestructive handler:^(UIAlertAction *action) {
Sezam/AGAirbnbMappingViewController.m:259:            self.airbnbGlobalStatusLabel.text = @"There was an error Disconnecting your account.";
Sezam/AGAirbnbMappingViewController.m:300:    if ([segue.identifier isEqualToString:@"AirBnBMapViewToListingSetupView"]) {
Sezam/AGAutoUnlockPersistenceUtility.m:14:    return [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
Sezam/AGUnityFactoryResetManager.m:18:#define kAGDiaryCategory @"AGUnityFactoryResetManager"
Sezam/AGUnityFactoryResetManager.m:49:    AGDiaryDebug(@"dealloc", @"AGUnityFactoryResetManager dealloc");
Sezam/AGUnityFactoryResetManager.m:54:    AGDiaryDebug(@"factoryResetWithLock", @"");
Sezam/AGUnityFactoryResetManager.m:82:    AGDiaryDebug(@"onConnected", @"connected success, lock: %@, lockId: %@", agLock, lockUUID);
Sezam/AGUnityFactoryResetManager.m:86:        AGDiaryDebug(@"onConnected", @"is Resetting, ignored!!!.............");
Sezam/AGUnityFactoryResetManager.m:115:    AGDiaryDebug(@"onConnectionError", @"errorMsg: %@", error.localizedDescription);
Sezam/AGUnityFactoryResetManager.m:118:        self.completionBlock( @"Connection error!!");
Sezam/AGUnityFactoryResetManager.m:125:    AGDiaryDebug(@"onLockStateChange", @"lock state: %d", lockState);
Sezam/AGUnityFactoryResetManager.m:129:    AGDiaryDebug(@"onDisconnected", @"lockId: %@", agLock.objectId);
Sezam/AGUnityFactoryResetManager.m:132:        AGDiaryDebug(@"connectionStatusChanged", @"can't establish BLE connect!");
Sezam/AGUnityFactoryResetManager.m:134:            self.completionBlock(@"Lock disConnected!!");
Sezam/AGUnityFactoryResetManager.m:141:    AGDiaryDebug(@"connectionStatusChanged", @"message: %@, connected: %d", message, connected);
Sezam/AGUnityFactoryResetManager.m:148:    AGDiaryDebug(@"startHomeKitReset", @"");
Sezam/AGUnityFactoryResetManager.m:158:    AGDiaryDebug(@"startHomeKitReset", @"Removing lock from homekit if possible");
Sezam/AGUnityFactoryResetManager.m:168:            AGDiaryDebug(@"startHomeKitReset", @"Completed HomeKit reset with error %@", [error description]);
Sezam/AGUnityFactoryResetManager.m:172:        AGDiaryDebug(@"WaitingHomeKit", @"Doing 5 sec delay");
Sezam/AGUnityFactoryResetManager.m:176:            AGDiaryDebug(@"WaitingHK2", @"Done waiting");
Sezam/AGUnityFactoryResetManager.m:185:    AGDiaryDebug(@"startHostReset", @"");
Sezam/AGUnityFactoryResetManager.m:194:        if (error || ![responseDict[@"error_code"] isEqualToNumber:@(0)] ) {
Sezam/AGUnityFactoryResetManager.m:195:            AGDiaryDebug(@"startHostReset", @"error: %@", [error description]);
Sezam/AGUnityFactoryResetManager.m:196:            AGDiaryDebug(@"startHostReset", @"errorCode is: %@", responseDict[@"error_code"]);
Sezam/AGUnityFactoryResetManager.m:199:                strongSelf.completionBlock(@"reset Lock host error!");
Sezam/AGUnityFactoryResetManager.m:204:        AGDiaryDebug(@"finishedHostReset", @"finished");
Sezam/AGUnityFactoryResetManager.m:208:    operation.label = @"Unity_host_factory_reset";
Sezam/AGUnityFactoryResetManager.m:214:    AGDiaryDebug(@"startUnityLockReset", @"");
Sezam/AGUnityFactoryResetManager.m:222:            AGDiaryDebug(@"startUnityLockReset", @"error: %@", [error description]);
Sezam/AGUnityFactoryResetManager.m:224:                strongSelf.completionBlock(@"reset Lock host error!");
Sezam/AGUnityFactoryResetManager.m:229:        AGDiaryDebug(@"startUnityLockReset", @"Finished!");
Sezam/AGUnityFactoryResetManager.m:234:    resetOperation.label = @"FactoryReset";
Sezam/AGUnityFactoryResetManager.m:241:    AGDiaryDebug(@"ServerFactoryReset", @"Calling server to factory reset lock");
Sezam/AGUnityFactoryResetManager.m:244:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGUnityFactoryResetManager.m:247:                self.completionBlock(@"server factory reset failed!");
Sezam/AGUnityFactoryResetManager.m:261:    AGDiaryDebug(@"CompletedFactoryReset", @"stared!");
Sezam/AGUnityFactoryResetManager.m:262:    AGDiaryDebug(@"CompletedFactoryReset", @"Removing Last User Lock and Sync'ing to Watch SharedDefaults.");
Sezam/AGUnityFactoryResetManager.m:269:        AGDiaryDebug(@"HomeKitPermissionsAlert", @"Permissions problem removing from HomeKit");
Sezam/AGUnityFactoryResetManager.m:270:        NSString *msg = @"Your lock has been factory reset and can be set up again, but you may not be able to set up HomeKit until the home's administrator removes the lock from HomeKit.";
Sezam/AGUnityFactoryResetManager.m:271:        UIAlertController *alertVC = [AGAlertHelper alertViewWithTitle:@"HomeKit Not Reset" msg:msg btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGGeneralCrossProccessUtility.m:13:NSString * const kAGGeneralCrossProcessAppGroupID = @"group.com.august.general-cross-process";
Sezam/AGGeneralCrossProccessUtility.m:27:    NSURL *lockUsageLogsDirectoryURL = [crossProcessContainerURL URLByAppendingPathComponent:@"LockUsageLogs"];
Sezam/AGGeneralCrossProccessUtility.m:45:    NSString *baseURLString = [[self userDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGGeneralCrossProccessUtility.m:48:        baseURLString = @"https://api-production.august.com";
Sezam/AGGeneralCrossProccessUtility.m:53:    if (![baseURLString containsString:@"https://"] || [baseURL.host hasSuffix:@".august.com"]) {
Sezam/AGGeneralCrossProccessUtility.m:54:        baseURLString = @"https://api-production.august.com";
Sezam/AGGeneralCrossProccessUtility.m:69:    query.service = @"Sezam";
Sezam/AGGeneralCrossProccessUtility.m:70:    query.account = @"AugustAccessToken";
Sezam/AGUtilityCommon.h:39:#define AG_LOCK_INSECURE_CONNECTION                          @"AG_LOCK_INSECURE_CONNECTION"
Sezam/AGUtilityCommon.h:40:#define AG_LOCK_CONNECTED                           @"AG_LOCK_CONNECTED"
Sezam/AGUtilityCommon.h:41:#define AG_LOCK_BLE_ERROR                           @"AG_LOCK_BLE_ERROR"
Sezam/AGUtilityCommon.h:42:#define AG_LOCK_LOW_BATTERY                         @"AG_LOCK_LOW_BATTERY"
Sezam/AGUtilityCommon.h:43:#define AG_LOCK_DISCONNECTED                        @"AG_LOCK_DISCONNECTED"
Sezam/AGUtilityCommon.h:44:#define AG_LOCK_STATUS                              @"AG_LOCK_STATUS"
Sezam/AGUtilityCommon.h:45:#define AG_LOCK_ACTION_ATTEMPT                      @"AG_LOCK_ACTION_ATTEMPT"
Sezam/AGUtilityCommon.h:46:#define AG_LOCK_ACTION_RESPONSE                     @"AG_LOCK_ACTION_RESPONSE"
Sezam/AGUtilityCommon.h:47:#define AG_HOUSETABBAR_GOTOKEYCHAIN                 @"AG_HOUSETABBAR_GOTOKEYCHAIN"
Sezam/AGUtilityCommon.h:48:#define AG_SIDEBAR_ACTION                           @"AG_SIDEBAR_ACTION"
Sezam/AGUtilityCommon.h:77:    AGDialView_StatusLabel_None,                        // @""
Sezam/AGUtilityCommon.h:78:    AGDialView_StatusLabel_Connecting,                  // @"Connecting..."
Sezam/AGUtilityCommon.h:79:    AGDialView_StatusLabel_Discovered,                  // @"Discovered"
Sezam/AGUtilityCommon.h:80:    AGDialView_StatusLabel_Connected,                   // @"Connected"
Sezam/AGUtilityCommon.h:81:    AGDialView_StatusLabel_NotCalibrated,               // @"Not Calibrated"
Sezam/AGUtilityCommon.h:82:    AGDialView_StatusLabel_Locked,                      // @"Locked"
Sezam/AGUtilityCommon.h:83:    AGDialView_StatusLabel_Closed_Locked,               // @"Closed | Locked"
Sezam/AGUtilityCommon.h:84:    AGDialView_StatusLabel_Open_Locked,                 // @"Open | Locked"
Sezam/AGUtilityCommon.h:85:    AGDialView_StatusLabel_Unlocked,                    // @"Unlocked"
Sezam/AGUtilityCommon.h:86:    AGDialView_StatusLabel_Closed_Unlocked,             // @"Closed | Unlocked"
Sezam/AGUtilityCommon.h:87:    AGDialView_StatusLabel_Open_Unlocked,               // @"Open | Unlocked"
Sezam/AGUtilityCommon.h:88:    AGDialView_StatusLabel_Connecting_Remotely,         // @"Connecting Remotely...
Sezam/AGUtilityCommon.h:89:    AGDialView_StatusLabel_Locking,                     // @"Locking..."
Sezam/AGUtilityCommon.h:90:    AGDialView_StatusLabel_Unlocking,                   // @"Unlocking..."
Sezam/AGUtilityCommon.h:91:    AGDialView_StatusLabel_Lock_In_Use,                 // @"LOCK IN USE", NSLocalizedString(@"LOCK IN USE", nil)
Sezam/AGUtilityCommon.h:92:    AGDialView_StatusLabel_Turn_Bluetooth_On,           // @"TURN BLUETOOTH ON", NSLocalizedString(@"TURN BLUETOOTH ON", nil)
Sezam/AGUtilityCommon.h:93:    AGDialView_StatusLabel_Bluetooth_Error,             // @"BLUETOOTH ERROR", NSLocalizedString(@"BLUETOOTH ERROR", nil)
Sezam/AGUtilityCommon.h:94:    AGDialView_StatusLabel_Security_Error,              // @"SECURITY ERROR", NSLocalizedString(@"SECURITY ERROR", nil)
Sezam/AGUtilityCommon.h:95:    AGDialView_StatusLabel_OTA_Restarting_Lock,         // @"RESTARTING LOCK...", NSLocalizedString(@"RESTARTING LOCK...",nil)
Sezam/AGUtilityCommon.h:96:    AGDialView_StatusLabel_Scanning_For_Lock,           // @"SCANNING FOR LOCK", NSLocalizedString(@"OUT OF RANGE", nil) *Special Case
Sezam/AGUtilityCommon.h:97:    AGDialView_StatusLabel_Operation_In_Progress,       // @"OPERATION IN PROGRESS", NSLocalizedString(@"OPERATION IN PROGRESS", nil)
Sezam/AGUtilityCommon.h:98:    AGDialView_StatusLabel_Lock_Unavailable,            // @"LOCK UNAVAILABLE" , NSLocalizedString(@"LOCK UNAVAILABLE", nil)                        error 408
Sezam/AGUtilityCommon.h:99:    AGDialView_StatusLabel_Connect_Unavailable,         // @"BRIDGE UNAVAILABLE", NSLocalizedString(@"BRIDGE UNAVAILABLE", nil)                     error 422
Sezam/AGUtilityCommon.h:100:    AGDialView_StatusLabel_Bridge_In_Use,               // @"LOCK IN USE", NSLocalizedString(@"LOCK IN USE", nil)                                   error 423
Sezam/AGUtilityCommon.h:101:    AGDialView_StatusLabel_Server_Error,                // @"SERVER FAILURE", NSLocalizedString(@"SERVER FAILURE", nil)                             error 500
Sezam/AGUtilityCommon.h:102:    AGDialView_StatusLabel_Lock_Jammed,                 // @"LOCK IS JAMMED", NSLocalizedString(@"LOCK IS JAMMED", nil)                             error 530
Sezam/AGUtilityCommon.h:103:    AGDialView_StatusLabel_Lock_Position_Unavailable,   // @"LOCK CALIBRATION FAILURE", NSLocalizedString(@"LOCK CALIBRATION FAILURE", nil)         error 531
Sezam/AGUtilityCommon.h:104:    AGDialView_StatusLabel_ERRNO_MECH_MOTPOL,           // @"LOCK FAILURE (532)", NSLocalizedString(@"LOCK FAILURE (532)", nil)                     error 532
Sezam/AGUtilityCommon.h:105:    AGDialView_StatusLabel_ERRNO_MECH_TIMEOUT_CAL,      // @"LOCK FAILURE (533)", NSLocalizedString(@"LOCK FAILURE (533)", nil)                     error 533
Sezam/AGUtilityCommon.h:106:    AGDialView_StatusLabel_ERRNO_MECH_BACKOFF,          // @"LOCK FAILURE (534)", NSLocalizedString(@"LOCK FAILURE (534)", nil)                     error 534
Sezam/AGUtilityCommon.h:107:    AGDialView_StatusLabel_ERRNO_EMPTY_LOG,             // @"LOCK FAILURE (540)", NSLocalizedString(@"LOCK FAILURE (540)", nil)                     error 540
Sezam/AGUtilityCommon.h:108:    AGDialView_StatusLabel_ERRNO_READING_LOG,           // @"LOCK FAILURE (541)", NSLocalizedString(@"LOCK FAILURE (541)", nil)                     error 541
Sezam/AGUtilityCommon.h:109:    AGDialView_StatusLabel_Low_Battery_Failure,         // @"LOW BATTERY FAILURE", NSLocalizedString(@"LOW BATTERY FAILURE", nil)                   error 550
Sezam/AGUtilityCommon.h:110:    AGDialView_StatusLabel_Lock_Overheated_Failure,     // @"HIGH TEMPERATURE FAILURE", NSLocalizedString(@"HIGH TEMPERATURE FAILURE", nil)         error 551
Sezam/AGUtilityCommon.h:111:    AGDialView_StatusLabel_Lock_Disconnected,           // @"LOCK DISCONNECTED", NSLocalizedString(@"LOCK DISCONNECTED", nil)                       error 560
Sezam/AGUtilityCommon.h:112:    AGDialView_StatusLabel_Com_Failure_Key,             // @"COMMUNICATION FAILURE (562)", NSLocalizedString(@"COMMUNICATION FAILURE (562)", nil)   error 562
Sezam/AGUtilityCommon.h:113:    AGDialView_StatusLabel_Com_Failure_Packet,          // @"COMMUNICATION FAILURE (563)", NSLocalizedString(@"COMMUNICATION FAILURE (563)", nil)   error 563
Sezam/AGUtilityCommon.h:114:    AGDialView_StatusLabel_Com_Failure_Handshake,       // @"COMMUNICATION FAILURE (564)", NSLocalizedString(@"COMMUNICATION FAILURE (564)", nil)   error 564
Sezam/AGUtilityCommon.h:115:    AGDialView_StatusLabel_Com_Failure_RBS_None,        // @"COMMUNICATION FAILURE (565)", NSLocalizedString(@"COMMUNICATION FAILURE (565)", nil)   error 565
Sezam/AGUtilityCommon.h:116:    AGDialView_StatusLabel_Failed_To_Lock,              // @"FAILED TO LOCK", NSLocalizedString(@"FAILED TO LOCK", nil)
Sezam/AGUtilityCommon.h:117:    AGDialView_StatusLabel_Failed_To_Unlock,            // @"FAILED TO UNLOCK", NSLocalizedString(@"FAILED TO UNLOCK", nil)
Sezam/AGUtilityCommon.h:118:    AGDialView_StatusLabel_Checking_Lock,               // @"CHECKING LOCK", NSLocalizedString(@"CHECKING LOCK", nil);
Sezam/AGUtilityCommon.h:119:    AGDialView_StatusLabel_Special_Text                 // @" ->Text set via Method parameter: specialText<- "
Sezam/AGAutoLockView.m:60:    [self.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoLockView.m:67:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoLockView.m:68:    self.titleLabel.text = @"AUTO-LOCK";
Sezam/AGAutoLockView.m:75:    self.autoLockDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoLockView.m:120:    self.autoLockEnabledCell.label.text = @"Auto-Lock Enabled";
Sezam/AGAutoLockView.m:131:    self.autoLockModeCell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockView.m:133:    self.autoLockModeCell.textLabel.text = @"Auto-Lock When";
Sezam/AGAutoLockView.m:134:    self.autoLockModeCell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGAutoLockView.m:142://    self.autoLockTimingCell.timingDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGAutoLockView.m:274:    self.autoLockModeCell.accessoryView = _autoLockModeAppearsTappable ? [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"menu_arrow_v2"]] : nil;
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:20:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:46:    [self.view.backButton setImage:[UIImage imageNamed:@"left_arrow_grey_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:47:    [self.view.cancelButton setImage:[UIImage imageNamed:@"Close_Button_v3"] forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:51:    UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"autounlock_setup_4_location.jpg"]];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:76:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:79:    NSString *title = @"Location Confirmed";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:80:    NSString *paragraphPart1 = @"Exiting the boundary will set Auto-Unlock to";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:81:    NSString *paragraphBoldPart1 = @" Away";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:82:    NSString *paragraphPart2 = @" mode, ready to unlock your door when you return home.";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:85:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@%@%@", title, paragraphPart1, paragraphBoldPart1, paragraphPart2];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:93:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:108:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:116:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:125:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:148:    AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:149:                                                                   @"au_source":@"AutoUnlockSetup",
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:150:                                                                   @"au_info":@{@"enabled":@(YES)}
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:153:    AGDiaryInfo(@"AutoUnlockEnrollmentComplete",@"lockid:%@", self.autoUnlockSetupInput.lock.objectId);
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:154:    [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock activated"} identifier:@"AutoUnlockUnlockEnrollmentComplete"]];
Sezam/AGTextField.m:33:    if ([[[UIDevice currentDevice] systemVersion] compare:@"7.0" options:NSNumericSearch] != NSOrderedAscending) {
Sezam/AGTextField.m:35:        [[self placeholder] drawInRect:finalRect withAttributes:@{ NSFontAttributeName:[UIFont fontWithName:@"ProximaNova-Semibold" size:16.0], NSForegroundColorAttributeName:[UIColor colorWithWhite:0.6 alpha:1.0]}];
Sezam/AGAutoUnlockSettingsController.m:17:#define kAGDiaryCategory @"AutoUnlockSettingsUI"
Sezam/AGAutoUnlockSettingsController.m:83:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockSettingsController.m:84:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockSettingsController.m:85:                                                                         @"au_cancel_type":@"AutoUnlockDisabled",
Sezam/AGAutoUnlockSettingsController.m:86:                                                                         @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockSettingsController.m:87:                                                                         @"au_info": @{
Sezam/AGAutoUnlockSettingsController.m:88:                                                                                 @"lock_version":[AGUtility modelVersionForLockID:self.autoUnlocker.lock.objectId]
Sezam/AGAutoUnlockSettingsController.m:91:        NSString *eventDescription = @"Auto-Unlock set to Home mode because it was disabled";
Sezam/AGAutoUnlockSettingsController.m:92:        [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":eventDescription} identifier:@"AutoUnlockSetToHomeBecauseAutoUnlockIsBeingDisabled"]];
Sezam/AGAutoUnlockSettingsController.m:95:    AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockSettingsController.m:96:                                                                   @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockSettingsController.m:97:                                                                   @"au_info":@{@"enabled":@(self.view.enableAutoUnlockSwitch.isOn)}
Sezam/AGAutoUnlockSettingsController.m:99:    NSString *eventDescription = [NSString stringWithFormat:@"Auto-Unlock %@", (self.view.enableAutoUnlockSwitch.isOn ? @"enabled" : @"disabled")];
Sezam/AGAutoUnlockSettingsController.m:100:    [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":eventDescription} identifier:@"AutoUnlockEnabledStatusChanged"]];
Sezam/AGAutoUnlockSettingsController.m:106:        AGDiaryInfo(@"CouldNotOpenAutoUnlockKBArticle", @"");
Sezam/AGAutoUnlockSettingsController.m:108:        AGDiaryInfo(@"OpeningAutoUnlockKBArticle", @"");
Sezam/AGAutoUnlockSettingsController.m:119:    AGDiaryInfo(@"AutoUnlockSuccessfulNotificationValueChanged", @"new value: %@", @(self.view.autoUnlockSuccessNotificationsSwitch.isOn));
Sezam/AGAutoUnlockSettingsController.m:124:    AGDiaryInfo(@"AutoUnlockAwayModeActivatedNotificationValueChanged", @"new value: %@", @(self.view.awayModeActivatedNotificationsSwitch.isOn));
Sezam/AGAddDeviceViewController.m:25:static NSString* kAGDiaryCategory = @"AGAddDeviceViewController";
Sezam/AGAddDeviceViewController.m:54:    if ([AGUtility checkForAppFeature:@"showunity"]) {
Sezam/AGAddDeviceViewController.m:95:                    AGDiaryDebug(@"calculateNumberOfLocksWithoutKeypad", @"error is: %@", error);
Sezam/AGAddDeviceViewController.m:127:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"AddDeviceCell"];
Sezam/AGAddDeviceViewController.m:130:    cell.label.text = @"SET UP AN";
Sezam/AGAddDeviceViewController.m:132:        cell.imageView0.image = [UIImage imageNamed:@"AddLock"];
Sezam/AGAddDeviceViewController.m:133:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGAddDeviceViewController.m:136:        cell.imageView0.image = [UIImage imageNamed:@"AddDoorbell"];
Sezam/AGAddDeviceViewController.m:137:        cell.label2.text = @"AUGUST DOORBELL CAM";
Sezam/AGAddDeviceViewController.m:142:        cell.imageView0.image = [UIImage imageNamed:@"AddConnect"];
Sezam/AGAddDeviceViewController.m:143:        cell.label2.text = @"AUGUST CONNECT";
Sezam/AGAddDeviceViewController.m:147:            cell.label3.text = @"AUGUST CONNECT";
Sezam/AGAddDeviceViewController.m:157:        cell.imageView0.image = [UIImage imageNamed:@"AddKeypad"];
Sezam/AGAddDeviceViewController.m:158:        cell.label2.text = @"AUGUST SMART KEYPAD";
Sezam/AGAddDeviceViewController.m:164:            cell.label3.text = @"AUGUST SMART KEYPAD";
Sezam/AGAddDeviceViewController.m:178:        cell.imageView0.image = [UIImage imageNamed:@"addUnity"];
Sezam/AGAddDeviceViewController.m:179:        cell.label.text = @"SET UP A";
Sezam/AGAddDeviceViewController.m:180:        cell.label2.text = @"YALE SMART LOCK";
Sezam/AGAddDeviceViewController.m:202:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAddDeviceViewController.m:203:            AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGAddDeviceViewController.m:207:            UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddDeviceViewController.m:208:            [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGAddDeviceViewController.m:221:            [self performSegueWithIdentifier:@"AddDeviceToPickLock" sender:nil];
Sezam/AGAddDeviceViewController.m:233:            [self performSegueWithIdentifier:@"AddDeviceToPickLock" sender:nil];
Sezam/AGAddDeviceViewController.m:240:        AGDiaryDebug(@"didSelect", @"row :%d", indexPath.row);
Sezam/AGAddDeviceViewController.m:251:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/products/august-connect/"]];
Sezam/AGAddDeviceViewController.m:255:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/products/august-keypad/"]];
Sezam/AGAddDeviceViewController.m:266:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGAddDeviceViewController.m:278:        ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:controller];
Sezam/AGAddDeviceViewController.m:284:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGAddDeviceViewController.m:285:        AGKeypadSetupNavController *keypadSetup = [storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupNavController"];
Sezam/AGAddDeviceViewController.m:287:        ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:keypadSetup];
Sezam/AGAddDeviceViewController.m:302:    if ([segue.identifier isEqualToString:@"AddDeviceToPickLock"]) {
Sezam/AGAddDeviceViewController.m:319:    if ([segue.identifier isEqualToString:@"unwindToAddDeviceViewController"]) {
Sezam/AGAddDeviceViewController.m:328:    NSLog(@"lockSetupFinished: in beginning! ");
Sezam/AGAddDeviceViewController.m:333:    NSLog(@"lockSetupCancelled: in beginning! ");
Sezam/AGLockOperationLog.m:19:static NSString* kAGDiaryCategory = @"LockMetrics";
Sezam/AGLockOperationLog.m:21:static NSString* kAGAnalyticsDiaryCategory = @"LockMetrics";
Sezam/AGLockOperationLog.m:43:        NSDictionary *defaultLongLockConnectionValues = @{@"ShowedTryingToConnectPopup" : @"False",
Sezam/AGLockOperationLog.m:44:                                                          @"TryingToConnectResponse"    : @"None",
Sezam/AGLockOperationLog.m:45:                                                          @"ShowedNextToLockPopup"      : @"False",
Sezam/AGLockOperationLog.m:46:                                                          @"NextToLockResponse"         : @"None",
Sezam/AGLockOperationLog.m:47:                                                          @"ShowedGetConnectionHelpPopup" : @"False",
Sezam/AGLockOperationLog.m:48:                                                          @"GetConnectionHelpResponse"  : @"None",
Sezam/AGLockOperationLog.m:49:                                                          @"ShowedRemoteConnectTooltip" : @"False",
Sezam/AGLockOperationLog.m:50:                                                          @"ShowedConnectPromoPopup"    : @"False",
Sezam/AGLockOperationLog.m:51:                                                          @"ConnectPromoPopupResponse"  : @"None",
Sezam/AGLockOperationLog.m:52:                                                          @"ShowedBluetoothRangePopup"  : @"False"};
Sezam/AGLockOperationLog.m:80:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:93:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:96:        NSString *keyType = @"Online";
Sezam/AGLockOperationLog.m:99:                keyType = @"Online";
Sezam/AGLockOperationLog.m:101:                keyType = @"Offline";
Sezam/AGLockOperationLog.m:113:        NSString *lockId = (NSString *)[notification.userInfo objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:115:            self.bleError = (NSError *)[notification.userInfo objectForKey:@"errorDetails"];
Sezam/AGLockOperationLog.m:123:        NSString *lockId = (NSString *)[notification.userInfo objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:124:        NSNumber *batteryLevel = (NSNumber *)[notification.userInfo objectForKey:@"batteryLevel"];
Sezam/AGLockOperationLog.m:136:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:137:    NSString *lockStatus = (NSString *)[userInfoDictionary objectForKey:@"lockStatus"];
Sezam/AGLockOperationLog.m:148:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:149:    NSString *lockAction = (NSString *)[userInfoDictionary objectForKey:@"lockAction"];
Sezam/AGLockOperationLog.m:161:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:162:    NSString *lockResponse = (NSString *)[userInfoDictionary objectForKey:@"lockResponse"];
Sezam/AGLockOperationLog.m:190:            lockOperationTerminationString = @"Unknown";
Sezam/AGLockOperationLog.m:193:            lockOperationTerminationString = @"OtherLock";
Sezam/AGLockOperationLog.m:196:            lockOperationTerminationString = @"DoorbellTab";
Sezam/AGLockOperationLog.m:199:            lockOperationTerminationString = @"ActivityFeedTab";
Sezam/AGLockOperationLog.m:202:            lockOperationTerminationString = @"GuestListTab";
Sezam/AGLockOperationLog.m:205:            lockOperationTerminationString = @"HouseSettingsTab";
Sezam/AGLockOperationLog.m:208:            lockOperationTerminationString = @"MyAccessTab";
Sezam/AGLockOperationLog.m:211:            lockOperationTerminationString = @"SideMenu";
Sezam/AGLockOperationLog.m:214:            lockOperationTerminationString = @"SideMenuViewAccount";
Sezam/AGLockOperationLog.m:217:            lockOperationTerminationString = @"SideMenuHomeButton";
Sezam/AGLockOperationLog.m:220:            lockOperationTerminationString = @"SideMenuAugustStoreButton";
Sezam/AGLockOperationLog.m:223:            lockOperationTerminationString = @"SideMenuAugustActiveMonitoring";
Sezam/AGLockOperationLog.m:226:            lockOperationTerminationString = @"SideMenuAugustAccess";
Sezam/AGLockOperationLog.m:229:            lockOperationTerminationString = @"SideMenuHelp";
Sezam/AGLockOperationLog.m:232:            lockOperationTerminationString = @"SideMenuDeviceSetup";
Sezam/AGLockOperationLog.m:235:            lockOperationTerminationString = @"SideMenuSupportMenu";
Sezam/AGLockOperationLog.m:238:            lockOperationTerminationString = @"SideMenuDebugMenu";
Sezam/AGLockOperationLog.m:241:            lockOperationTerminationString = @"KeyChain";
Sezam/AGLockOperationLog.m:244:            lockOperationTerminationString = @"ToRemoteOperation";
Sezam/AGLockOperationLog.m:247:            lockOperationTerminationString = @"LockReorder";
Sezam/AGLockOperationLog.m:250:            lockOperationTerminationString = @"RemoteStatusBySeamless";
Sezam/AGLockOperationLog.m:253:            lockOperationTerminationString = @"Logout";
Sezam/AGLockOperationLog.m:256:            lockOperationTerminationString = @"NotAuthorized";
Sezam/AGLockOperationLog.m:259:            lockOperationTerminationString = @"AppToBackground";
Sezam/AGLockOperationLog.m:320:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ShowedForceUnlockPopUp"];
Sezam/AGLockOperationLog.m:323:            [self.forceUnlockEventDictionary setObject:@"USERCANCEL" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:326:            [self.forceUnlockEventDictionary setObject:@"AUTOCANCEL" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:329:            [self.forceUnlockEventDictionary setObject:@"UNLOCK" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:332:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ForceUnlockSuccess"];
Sezam/AGLockOperationLog.m:335:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"ForceUnlockSuccess"];
Sezam/AGLockOperationLog.m:352:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"BridgeAssociated"];
Sezam/AGLockOperationLog.m:356:                self.bridgeType = @"UnknownBridge";
Sezam/AGLockOperationLog.m:359:                self.bridgeType = @"ConnectBridge";
Sezam/AGLockOperationLog.m:362:                self.bridgeType = @"DoorbellBridge";
Sezam/AGLockOperationLog.m:365:                self.bridgeType = @"HomekitBridge";
Sezam/AGLockOperationLog.m:368:                self.bridgeType = @"UnknownBridge";
Sezam/AGLockOperationLog.m:372:        self.bridgeType = @"NoBridge";
Sezam/AGLockOperationLog.m:373:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"BridgeAssociated"];
Sezam/AGLockOperationLog.m:376:        [lockMetricsDictionary setObject:self.bridgeType forKey:@"BridgeType"];
Sezam/AGLockOperationLog.m:381:        [lockMetricsDictionary setObject:currentUser.objectId forKey:@"UserId"];
Sezam/AGLockOperationLog.m:384:        [lockMetricsDictionary setObject:self.lock.objectId forKey:@"LockId"];
Sezam/AGLockOperationLog.m:388:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"HomeKitEnabled"];
Sezam/AGLockOperationLog.m:390:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"HomeKitEnabled"];
Sezam/AGLockOperationLog.m:393:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"KeypadAssociated"];
Sezam/AGLockOperationLog.m:395:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"KeypadAssociated"];
Sezam/AGLockOperationLog.m:400:    [lockMetricsDictionary setObject:lockOperationTerminationString forKey:@"HowLeft"];
Sezam/AGLockOperationLog.m:402:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.hasBLEInsecureConnection] forKey:@"BLEInsecureConnection"];  // BLEInsecureConnection
Sezam/AGLockOperationLog.m:407:            [lockMetricsDictionary setObject:insecureConnectionValue forKey:@"BLEInsecureConnectionTime"];
Sezam/AGLockOperationLog.m:414:        [lockMetricsDictionary setObject:connectTime forKey:@"ConnectTime"];                     //  ConnectTime – Time in seconds to connect to the lock after launching the view, [Event1]->[Event2]
Sezam/AGLockOperationLog.m:417:        [lockMetricsDictionary setObject:connectToTerminateTime forKey:@"ConnectToTerminateTime"];
Sezam/AGLockOperationLog.m:418:        if ([self.keyType isEqualToString:@"Offline"]) {
Sezam/AGLockOperationLog.m:419:            [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"OfflineKey"]; //  OfflineKey
Sezam/AGLockOperationLog.m:420:        } else if ([self.keyType isEqualToString:@"Online"]){
Sezam/AGLockOperationLog.m:421:            [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"OfflineKey"];
Sezam/AGLockOperationLog.m:423:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ConnectedToLock"];
Sezam/AGLockOperationLog.m:426:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"ConnectedToLock"];                 //  ConnectedToLock
Sezam/AGLockOperationLog.m:430:        [lockMetricsDictionary setObject:self.lockStatus forKey:@"LockStatus"];
Sezam/AGLockOperationLog.m:434:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"OperateAttempt"];                   //  OperateAttempt
Sezam/AGLockOperationLog.m:435:        [lockMetricsDictionary setObject:self.operationRequested forKey:@"OperationType"];       //  OperationType
Sezam/AGLockOperationLog.m:440:        [lockMetricsDictionary setObject:arriveToOperate forKey:@"ArriveToOperate"];
Sezam/AGLockOperationLog.m:441:        [lockMetricsDictionary setObject:connectToOperate forKey:@"ConnectToOperateTime"];
Sezam/AGLockOperationLog.m:443:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"OperateAttempt"];                   //  OperateAttempt
Sezam/AGLockOperationLog.m:447:        [lockMetricsDictionary setObject:self.operationResponse forKey:@"OperationResult"];      //  OperationResult
Sezam/AGLockOperationLog.m:450:        [lockMetricsDictionary setObject:operateTime forKey:@"OperateTime"];
Sezam/AGLockOperationLog.m:456:        if ([value isEqualToString:@"True"]) {
Sezam/AGLockOperationLog.m:458:        } else if ([value isEqualToString:@"False"]) {
Sezam/AGLockOperationLog.m:465:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.longLockPopUpDismissedByStatusSuccess] forKey:@"longLockPopUpDismissedByStatusSuccess"];
Sezam/AGLockOperationLog.m:467:    NSString *userType = isOwnerOfLock?@"Owner":@"Guest";
Sezam/AGLockOperationLog.m:468:    [lockMetricsDictionary setObject:userType forKey:@"UserType"];                               //  UserType
Sezam/AGLockOperationLog.m:470:    [lockMetricsDictionary setObject:numberOperations forKey:@"NumberOperations"];
Sezam/AGLockOperationLog.m:473:    [lockMetricsDictionary setObject:totalTime forKey:@"TotalTime"];                            //  TotalTime - Total time on lock screen in seconds, [Event1]->[Event5]
Sezam/AGLockOperationLog.m:480:        [lockMetricsDictionary setObject:locksInHouse forKey:@"LocksInHouse"];
Sezam/AGLockOperationLog.m:483:    [lockMetricsDictionary setObject:totalLocks forKey:@"TotalLocks"];
Sezam/AGLockOperationLog.m:487:            [lockMetricsDictionary setObject:@"AGCoreBluetooth" forKey:@"LastError"];
Sezam/AGLockOperationLog.m:488:            [lockMetricsDictionary setObject:@"BluetoothErrorIsPoweredOff" forKey:@"ErrorDetails"];;
Sezam/AGLockOperationLog.m:492:            [lockMetricsDictionary setObject:self.bleError.domain forKey:@"LastError"];
Sezam/AGLockOperationLog.m:497:                errorDetails = @"BluetoothErrorIsPoweredOff";
Sezam/AGLockOperationLog.m:499:                errorDetails = @"BluetoothErrorIsTemporarilyDown";
Sezam/AGLockOperationLog.m:501:                errorDetails = @"LockConnectionErrorDiscoverServices";
Sezam/AGLockOperationLog.m:503:                errorDetails = @"LockConnectionErrorDiscoverCharacteristics";
Sezam/AGLockOperationLog.m:505:                errorDetails = @"LockConnectionErrorTimeout";
Sezam/AGLockOperationLog.m:507:                errorDetails = @"LockConnectionErrorDisconnects";
Sezam/AGLockOperationLog.m:509:                errorDetails = @"BluetoothErrorIsPoweredOff";
Sezam/AGLockOperationLog.m:511:                errorDetails = @"BluetoothErrorIsTemporarilyDown";
Sezam/AGLockOperationLog.m:513:                errorDetails = @"LockSecurityErrorLockRandsErrorGeneric";
Sezam/AGLockOperationLog.m:515:                errorDetails = @"LockSecurityErrorLockRandsErrorConflict";
Sezam/AGLockOperationLog.m:517:                errorDetails = @"LockSecurityErrorBadLockresponse";
Sezam/AGLockOperationLog.m:519:                errorDetails = @"LockSecurityErrorBadChecksum";
Sezam/AGLockOperationLog.m:521:                errorDetails = @"LockSecurityErrorInitiateCommunication";
Sezam/AGLockOperationLog.m:523:                errorDetails = @"LockSecurityErrorDeviceBlacklisted";
Sezam/AGLockOperationLog.m:525:                errorDetails = @"LockSecurityErrorKeyChanged";
Sezam/AGLockOperationLog.m:527:                errorDetails = @"LockSecurityErrorChecksumDoesntWork";
Sezam/AGLockOperationLog.m:529:                errorDetails = @"LockSecurityErrorKeyNotDefinedInTable";
Sezam/AGLockOperationLog.m:531:                errorDetails = @"kLockSecurityErrorBadMagic";
Sezam/AGLockOperationLog.m:533:                errorDetails = [NSString stringWithFormat:@"Code: %lu", self.bleError.code];
Sezam/AGLockOperationLog.m:535:            [lockMetricsDictionary setObject:errorDetails forKey:@"ErrorDetails"];
Sezam/AGLockOperationLog.m:540:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.hasLowBattery] forKey:@"LowBattery"];
Sezam/AGLockOperationLog.m:543:        [lockMetricsDictionary setObject:self.batteryLevel forKey:@"BatteryLevel"];
Sezam/AGLockOperationLog.m:549:    AGAnalyticsDiaryData(AGDiaryLevel_Info, @"LockMetrics", @"visitedLockScreen", lockMetricsDictionary);
Sezam/AGLockSetupSuccessViewController.m:17:#define kAGDiaryCategory @"LockSetupSuccess"
Sezam/AGLockSetupSuccessViewController.m:43:    AGDiaryInfo(@"SetupIncludesConnect", setupIncludesConnect?@"YES":@"NO");
Sezam/AGLockSetupSuccessViewController.m:44:    NSString *numberOfDoorbellsWithoutLockAssociation = [NSString stringWithFormat:@"Count=%lu", unassociatedDoorbells.count];
Sezam/AGLockSetupSuccessViewController.m:45:    AGDiaryInfo(@"NumberOfDoorbellsWithoutLockAssociation", numberOfDoorbellsWithoutLockAssociation);
Sezam/AGLockSetupSuccessViewController.m:46:    AGDiaryInfo(@"HasDoorbellsWithoutLockAssocation",hasDoorbellsWithoutLockAssociation?@"YES":@"NO");
Sezam/AGLockSetupSuccessViewController.m:48:        self.heroImageView.image = [UIImage imageNamed:@"connect solo image"];
Sezam/AGLockSetupSuccessViewController.m:51:        self.heroImageView.image = [UIImage imageNamed:@"imgDoorbellcamHeader"];
Sezam/AGLockSetupSuccessViewController.m:70:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGLockSetupSuccessViewController.m:71:    AGDoorbellLockAssociationPickDeviceViewController *doorbellLockAssociationPickDeviceViewController = (AGDoorbellLockAssociationPickDeviceViewController *)[doorbellStoryboard instantiateViewControllerWithIdentifier:@"SyncDoorbellAndLockPickDevice"];
Sezam/AGLockSetupSuccessViewController.m:80:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGLockSetupSuccessViewController.m:84:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:controller];
Sezam/AGAutoUnlockEditHomeLocationController.m:14:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockEditHomeLocationController.m:60:    AGDiaryInfo(@"HomeLocationChanged", @"lockID: %@", self.autoUnlocker.lock.objectId);
Sezam/AGAutoUnlockEditHomeLocationController.m:61:    [self.autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Updated the location of your home"} identifier:@"AutoUnlockChangedHomeLocation"]];
Sezam/AGDoorAjarTimingController.m:56:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error updating Door Ajar Timing. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorAjarTimingController.m:57:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorAjarTimingController.m:88:    NSString *minutesStr = shouldShowMinutes ? [NSString stringWithFormat:@"%lim", (long)minutes] : @"";
Sezam/AGDoorAjarTimingController.m:89:    NSString *secondsStr = shouldShowSeconds ? [NSString stringWithFormat:@"%lis", (long)remainingSeconds] : @"";
Sezam/AGDoorAjarTimingController.m:90:    NSString *separatorStr = shouldShowSeparator ? @" : " : @"";
Sezam/AGDoorAjarTimingController.m:92:    NSString *timeDescription = [NSString stringWithFormat:@"%@%@%@", minutesStr, separatorStr, secondsStr];
Sezam/AGKeypadSetupScanViewController.m:24:#define kAGDiaryCategory @"KeypadSetupScan"
Sezam/AGKeypadSetupScanViewController.m:76:                [self failWithError:@"App was closed mid-operation."];
Sezam/AGKeypadSetupScanViewController.m:99:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://store.august.com/#august-smart-keypad"]];
Sezam/AGKeypadSetupScanViewController.m:114:    NSArray *images = [NSArray arrayWithObjects:[UIImage imageNamed:@"Carousel_1"], [UIImage imageNamed:@"Carousel_2"], [UIImage imageNamed:@"Carousel_3"], [UIImage imageNamed:@"Carousel_4"], nil];
Sezam/AGKeypadSetupScanViewController.m:116:    NSArray *strings = @[ @"With August Smart Keypad, give guests without a smartphone access to your home with a personal entry code.",  @"Current guests can enjoy Keypad access in addition to their app access.", @"Add, revoke and change personal entry codes when you need to.", @"The emergency access code can be used to give immediate access to your lock, if you can’t give them a personal entry code." ];
Sezam/AGKeypadSetupScanViewController.m:143:    UIAlertController *controller = [self confirmQuitController:@"Quit Setup?" withMessage:@"Are you sure you want to quit Keypad setup?"];
Sezam/AGKeypadSetupScanViewController.m:150:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Quit" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeypadSetupScanViewController.m:160:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeypadSetupScanViewController.m:192:     navController.lock.associatedKeypad.objectId = @"asdfasfd";
Sezam/AGKeypadSetupScanViewController.m:193:     navController.userActivePin = @"12435";
Sezam/AGKeypadSetupScanViewController.m:194:     AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadTestCodeController"];
Sezam/AGKeypadSetupScanViewController.m:204:    AGDiaryInfo(@"Commence", @"User tapped start");
Sezam/AGKeypadSetupScanViewController.m:208:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupComplete"];
Sezam/AGKeypadSetupScanViewController.m:213:    UIAlertView *updateAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Lock Update Needed", nil) message:NSLocalizedString(@"You need to update your lock firmware before you can set up your August Smart Keypad.", nil) delegate:self cancelButtonTitle:nil  otherButtonTitles:NSLocalizedString(@"Start Update", nil), nil];
Sezam/AGKeypadSetupScanViewController.m:245:                [self partialSuccessWithError:@"Your Keypad is set up but the lock is is not configured. Setup will be automatically be completed the next time you connect to your lock."];
Sezam/AGKeypadSetupScanViewController.m:257:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGKeypadSetupScanViewController.m:270:    navController.serialNumberOfChosenKeypad = [selectedKeypadInfo objectForKey:@"serial"];
Sezam/AGKeypadSetupScanViewController.m:272:    self.progressMeterLabel.text = @"Associating Keypad";
Sezam/AGKeypadSetupScanViewController.m:275:    AGDiary(AGDiaryLevel_Info, @"KeypadSetup", @"FoundKeypad", @"found keypad");
Sezam/AGKeypadSetupScanViewController.m:288:                        AGDiaryDebug (@"ErrorCheckLockOTA",@"Can't find whether lock needs ota for keypad. Server may not be up to date");
Sezam/AGKeypadSetupScanViewController.m:291:                        [self failWithError:@"Trouble connecting to server."];
Sezam/AGKeypadSetupScanViewController.m:301:            AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:302:            vc.errorMessageToDisplay = NSLocalizedString(@"Could not associate keypad.", nil);
Sezam/AGKeypadSetupScanViewController.m:318:        if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGKeypadSetupScanViewController.m:319:            AGDebugPickKeypadViewController *keypadPicker = (AGDebugPickKeypadViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"DebugPickKeypad"];
Sezam/AGKeypadSetupScanViewController.m:327:            [self failWithError:NSLocalizedString(@"More than one unconfigured Keypad found. Please remove batteries from the other keypad.", nil)];
Sezam/AGKeypadSetupScanViewController.m:334:        AGDiaryInfo(@"NoKeypadFound", @"No keypad found");
Sezam/AGKeypadSetupScanViewController.m:336:        NSString *lastResetCode = [[NSUserDefaults standardUserDefaults] stringForKey:@"LastKeypadResetCode"];
Sezam/AGKeypadSetupScanViewController.m:338:            [self failWithError: [NSString stringWithFormat: NSLocalizedString(@"No keypad found in range. Check the batteries and that the device is pulsing red.  If the device is not pulsing red, enter %@ followed by the August button and try setup again.", nil),  lastResetCode]];
Sezam/AGKeypadSetupScanViewController.m:341:            [self failWithError:NSLocalizedString(@"No keypad found in range. Check batteries and that device is in setup mode.", nil)];
Sezam/AGKeypadSetupScanViewController.m:349:        [self failWithError:@"Could not complete communication with Keypad."];
Sezam/AGKeypadSetupScanViewController.m:355:        BOOL forceOTAOnSetupAlways = [[NSUserDefaults standardUserDefaults] boolForKey: @"AlwaysKeypadOTAOnSetup"];
Sezam/AGKeypadSetupScanViewController.m:358:            navController.lock.associatedKeypad.currentFirmwareVersion = @"0.0.1";
Sezam/AGKeypadSetupScanViewController.m:363:        AGDiaryInfo(@"GotOTAVersion", @"Got keypad OTA %@", navController.lock.associatedKeypad.currentFirmwareVersion);
Sezam/AGKeypadSetupScanViewController.m:368:                    AGDiaryDebug(@"OTANeeded", @"Needs ota");
Sezam/AGKeypadSetupScanViewController.m:379:                    AGDiaryDebug(@"OTANotNeeded", @"Doesn't need OTA");
Sezam/AGKeypadSetupScanViewController.m:383:                        AGDiaryDebug(@"UnexpectedShutdown", @"Setup was canceled or shut down while checking OTA version");
Sezam/AGKeypadSetupScanViewController.m:388:                [self failWithError:@"Server problem checking keypad version."];
Sezam/AGKeypadSetupScanViewController.m:402:        AGDiaryInfo(@"ShutdtownKeypadBT", @"Disconnecting from keypad");
Sezam/AGKeypadSetupScanViewController.m:404:        self.progressMeterLabel.text = @"Communicating With Server";
Sezam/AGKeypadSetupScanViewController.m:408:                AGDiaryError(@"FailedServerConnect", @"Error communicating with server refreshing lock data.");
Sezam/AGKeypadSetupScanViewController.m:409:                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:414:            AGDiaryInfo(@"ServerRefreshed", @"Got updated lock data from server");
Sezam/AGKeypadSetupScanViewController.m:437:                            AGDiaryError(@"FailedServerConnect", @"Error reserving emergency pin");
Sezam/AGKeypadSetupScanViewController.m:438:                            [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:441:                        NSString *emergencyPincode = responseDict[@"pin"];
Sezam/AGKeypadSetupScanViewController.m:442:                        [navController.lock createPINUserWithPin:emergencyPincode firstName:@"Emergency" lastName:@"Code" phone:nil block:^(NSDictionary *dict, NSError *error) {
Sezam/AGKeypadSetupScanViewController.m:444:                                AGDiaryError(@"FailedServerConnect", @"Error creating emergency code user");
Sezam/AGKeypadSetupScanViewController.m:445:                                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:448:                            NSString *emergencyUserID =  [dict objectForKey:@"id"];
Sezam/AGKeypadSetupScanViewController.m:449:                            NSString *slot = dict[@"slot"];
Sezam/AGKeypadSetupScanViewController.m:452:                                    AGDiaryError(@"FailedServerConnect", @"Error creating setting load intent for emergency code");
Sezam/AGKeypadSetupScanViewController.m:453:                                    [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:462:                                        AGDiaryError(@"FailedServerConnect", @"Error communicating with server creating PIN");
Sezam/AGKeypadSetupScanViewController.m:463:                                        [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:468:                                    NSString *userPincode = responseDict[@"pin"];
Sezam/AGKeypadSetupScanViewController.m:479:                                            AGDiaryError(@"FailedServerConnect", @"Error communicating with server loading pin on server. Ignoring eror. ");
Sezam/AGKeypadSetupScanViewController.m:490:                AGDiaryError(@"FailedServerKey", @"Server doesn't have key to load on lock");
Sezam/AGKeypadSetupScanViewController.m:491:                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:501:        return NSLocalizedString(@"Scanning...", nil);
Sezam/AGKeypadSetupScanViewController.m:504:        return NSLocalizedString(@"Connecting...", nil);
Sezam/AGKeypadSetupScanViewController.m:507:        return NSLocalizedString(@"Connecting...", nil);
Sezam/AGKeypadSetupScanViewController.m:510:        return NSLocalizedString(@"Firmware OK", nil);
Sezam/AGKeypadSetupScanViewController.m:513:        return NSLocalizedString(@"Checking Keypad Firmware", nil);
Sezam/AGKeypadSetupScanViewController.m:516:        return NSLocalizedString(@"Registering Keypad...", nil);
Sezam/AGKeypadSetupScanViewController.m:519:        return NSLocalizedString(@"Setting communication keys...", nil);
Sezam/AGKeypadSetupScanViewController.m:522:        return NSLocalizedString(@"Setting up...", nil);
Sezam/AGKeypadSetupScanViewController.m:525:        return NSLocalizedString(@"Finished", nil);
Sezam/AGKeypadSetupScanViewController.m:528:        return NSLocalizedString(@"Connection Failed", nil);
Sezam/AGKeypadSetupScanViewController.m:531:        return NSLocalizedString(@"", nil); // Make this blank to not flash text on transition.
Sezam/AGKeypadSetupScanViewController.m:533:    return @"";
Sezam/AGKeypadSetupScanViewController.m:606:    AGDiaryDebug(@"UpdatedCommState", stateString);
Sezam/AGKeypadSetupScanViewController.m:613:    AGDiaryDebug(@"AttachBT", @"Found offline keys to set. Attaching to lock.");
Sezam/AGKeypadSetupScanViewController.m:614:    self.progressMeterLabel.text = @"Communicating with Lock";
Sezam/AGKeypadSetupScanViewController.m:630:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Connection Problem" message:@"We had trouble connecting to your lock to complete setup. Make sure your are in bluetooth range of the lock." delegate:self cancelButtonTitle:@"Skip" otherButtonTitles:@"Try Again", nil];
Sezam/AGKeypadSetupScanViewController.m:680:    AGDiaryDebug(@"RefreshingPinsFromServer", @"Getting updated pin data");
Sezam/AGKeypadSetupScanViewController.m:683:            AGDiaryDebug(@"UpdatingPinsOnLock", @"updating pins");
Sezam/AGKeypadSetupScanViewController.m:687:                    AGDiaryDebug(@"FinishedUpdatingPinsOnLock", @"Updated pins... now all done. Got to success screen");
Sezam/AGKeypadSetupScanViewController.m:692:                    [self partialSuccessWithError:@"Your keypad was set up but we failed to update your entry codes to the lock."];
Sezam/AGKeypadSetupScanViewController.m:696:            [self partialSuccessWithError:@"Your keypad was set up but we had a network error before updating your entry codes to the lock."];
Sezam/AGKeypadSetupScanViewController.m:706:    AGDiaryInfo(@"LockConnectionError", @"Lock connection error. Will try longer for a connection");
Sezam/AGKeypadSetupScanViewController.m:711:    AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:719:    AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:755:    AGDiaryDebug(@"OTAStart", @"Checking for OTA from server");
Sezam/AGKeypadSetupScanViewController.m:761:        AGDiaryError(@"KeypadNotAssociated", @"Expected keypad to be associated at this point");
Sezam/AGKeypadSetupScanViewController.m:766:        NSData *d  = [dict objectForKeyedSubscript:@"data"];
Sezam/AGKeypadSetupScanViewController.m:772:            self.progressMeterLabel.text = @"Updating Firmware...";
Sezam/AGKeypadSetupScanViewController.m:773:            AGDiaryInfo(@"OTAStart", @"starting ota");
Sezam/AGKeypadSetupScanViewController.m:778:            AGDiaryDebug(@"MissingOTAData", @"Did not get OTA data from server. This is either a network error or there is nothing to OTA the keypad");
Sezam/AGKeypadSetupScanViewController.m:780:            [self failWithError:@"Cannot update Keypad firmware."];
Sezam/AGKeypadSetupScanViewController.m:786:    AGDiaryDebug(@"Complete", @"go to sucesss page");
Sezam/AGKeypadSetupScanViewController.m:789:        AGDiaryInfo(@"OTAFinish", @"finished ota");
Sezam/AGKeypadSetupScanViewController.m:803:        AGDiaryError(@"OTAFailed", @"keypad OTA failed");
Sezam/AGKeypadSetupScanViewController.m:806:        [self failWithError:@"We had a problem updating the Keypad firmware."];
Sezam/AGKeypadSetupScanViewController.m:818:            AGDiaryDebug(@"BigOTAWaitDone", @"done");
Sezam/AGLockSetupDriver.m:21:static NSString *const kLockRegisterEvent = @"lockRegisterEvent";
Sezam/AGLockSetupDriver.m:22:static NSString* kAGDiaryCategory = @"AGLockSetupDriver";
Sezam/AGLockSetupDriver.m:54:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockSetupDriver.m:55:    UIViewController *beginVC = [storyboard instantiateViewControllerWithIdentifier:@"PickLockTypeViewController"];
Sezam/AGLockSetupDriver.m:64:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockSetupDriver.m:65:    AGTwoStepChecklistViewController *checkListVC = [storyboard instantiateViewControllerWithIdentifier:@"AGTwoStepChecklistViewController"];
Sezam/AGLockSetupDriver.m:83:    NSLog(@"kLockRegisterEvent, lockRegisterSetupCanceled:: ");
Sezam/AGLockSetupDriver.m:93:    AGLockSetupState state = [noti.userInfo[@"lockSetupState"] integerValue];
Sezam/AGLockSetupDriver.m:96:    AGDiaryDebug(@"kLockRegisterEvent", @"lockRegisterSetupFinished with state: %d, type: %d", state, type);
Sezam/AGHomeKitTestController.m:18:#define kAGDiaryCategory @"HomeKitTest"
Sezam/AGHomeKitTestController.m:112:    self.testItemOptions = @[@"HK State", @"All HK",@"Stress Test", @"August Get State", @"Big Data", @"All"];
Sezam/AGHomeKitTestController.m:141:        [dict setObject:theLock forKey:@"lock"];
Sezam/AGHomeKitTestController.m:149:            [dict setObject:accessoryToUse forKey:@"hklock"];
Sezam/AGHomeKitTestController.m:160:    NSString *advState = @"Unknown";
Sezam/AGHomeKitTestController.m:163:            advState = @"HomeKit and August Advertising";
Sezam/AGHomeKitTestController.m:166:            advState = @"HomeKit Advertising Only";
Sezam/AGHomeKitTestController.m:169:            advState = @"August Advertising Only";
Sezam/AGHomeKitTestController.m:247:    UIAlertView *changeAdvertising = [[UIAlertView alloc] initWithTitle:@"Change Advertising" message:@"Change the advertising model" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"August Protocol Only", @"August and HomeKit", @"HomeKit Only", nil];
Sezam/AGHomeKitTestController.m:255:    UIAlertView *setTiming = [[UIAlertView alloc] initWithTitle:@"Start Loop" message:@"Set the time you would like between each operation." delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"0 Seconds", @"0.2 Seconds", @"0.5 Seconds", @"1 Second", @"5 Seconds", @"10 Seconds", @"15 Seconds", @"Random", nil];
Sezam/AGHomeKitTestController.m:265:    [self.startStopTestButton setTitle:@"Stop" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:295:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"TestCell"];
Sezam/AGHomeKitTestController.m:300:            cell.label.text  = @"Identify";
Sezam/AGHomeKitTestController.m:303:            cell.label.text  = @"Get State";
Sezam/AGHomeKitTestController.m:306:            cell.label.text  = @"Lock";
Sezam/AGHomeKitTestController.m:309:            cell.label.text  = @"Unlock";
Sezam/AGHomeKitTestController.m:312:            cell.label.text  = @"Get State (August Protocol)";
Sezam/AGHomeKitTestController.m:315:            cell.label.text  = @"Big Data (August Protocol)";
Sezam/AGHomeKitTestController.m:330:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"An operation is already in progress" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGHomeKitTestController.m:342:            self.curOperationInfoLabel.text = @"Identify Operation";
Sezam/AGHomeKitTestController.m:343:            self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:347:                    self.curOperationResultLabel.text = @"Complete";
Sezam/AGHomeKitTestController.m:377:            self.curOperationInfoLabel.text = @"Uknown test selected";
Sezam/AGHomeKitTestController.m:378:            self.curOperationResultLabel.text = @"";
Sezam/AGHomeKitTestController.m:385:    AGDiaryDebug(@"DoTest", @"NOPLoop");
Sezam/AGHomeKitTestController.m:387:    self.curOperationInfoLabel.text = @"Post Data August Protocol";
Sezam/AGHomeKitTestController.m:388:    self.curOperationResultLabel.text = @"Connecting...";
Sezam/AGHomeKitTestController.m:398:            self.curOperationResultLabel.text = @"Sending 90 Commands";
Sezam/AGHomeKitTestController.m:401:                AGDiaryDebug(@"PostData", @"Done");
Sezam/AGHomeKitTestController.m:404:                    self.curOperationResultLabel.text = @"Success";
Sezam/AGHomeKitTestController.m:407:                    self.curOperationResultLabel.text = @"Error";
Sezam/AGHomeKitTestController.m:414:            self.curOperationResultLabel.text = @"Failed to connect";
Sezam/AGHomeKitTestController.m:426:    AGDiaryDebug(@"DoTest", @"GetAugStatus");
Sezam/AGHomeKitTestController.m:430:    self.curOperationInfoLabel.text = @"Get Status August Protocol";
Sezam/AGHomeKitTestController.m:431:    self.curOperationResultLabel.text = @"Connecting...";
Sezam/AGHomeKitTestController.m:436:            self.curOperationResultLabel.text = @"Connected";
Sezam/AGHomeKitTestController.m:440:                AGDiaryDebug(@"AugLockState", @"Lock state returned as %@",returnedValue);
Sezam/AGHomeKitTestController.m:442:                    AGDiaryInfo(@"StressTestGetStateAugSuccess", @"lock:%@", self.agLock.objectId);
Sezam/AGHomeKitTestController.m:444:                    self.curOperationResultLabel.text = [NSString stringWithFormat:@"Success: %@", returnedValue];
Sezam/AGHomeKitTestController.m:448:                        AGDiaryInfo(@"StressTestGetStateAugFail", @"lock:%@", self.agLock.objectId);
Sezam/AGHomeKitTestController.m:450:                        AGDiaryDebug(@"AugLockStateFailed", @"Operation failed %@",[error description]);
Sezam/AGHomeKitTestController.m:461:            self.curOperationResultLabel.text = @"Failed to connect";
Sezam/AGHomeKitTestController.m:462:            AGDiaryInfo(@"StressTestGetStateAugFail", @"lock:%@", self.agLock.objectId);
Sezam/AGHomeKitTestController.m:473:    AGDiaryDebug(@"DoTest", @"GetHKStatus");
Sezam/AGHomeKitTestController.m:478:    self.curOperationInfoLabel.text = @"Get Status Operation";
Sezam/AGHomeKitTestController.m:479:    self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:481:    AGDiaryDebug(@"StartStatusRequestExecute", @"Executing request. Lock Reachable: %@", self.homeKitLock.isReachable?@"YES":@"NO");
Sezam/AGHomeKitTestController.m:483:        AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGHomeKitTestController.m:487:            AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeContactState);
Sezam/AGHomeKitTestController.m:494:            AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeCurrentLockMechanismState);
Sezam/AGHomeKitTestController.m:505:                            self.curOperationResultLabel.text = @"Success: Locked";
Sezam/AGHomeKitTestController.m:508:                            self.curOperationResultLabel.text = @"Success: Unlocked";
Sezam/AGHomeKitTestController.m:511:                            self.curOperationResultLabel.text = @"Success: Jammed";
Sezam/AGHomeKitTestController.m:513:                            self.curOperationResultLabel.text = @"Success: Unknown state";
Sezam/AGHomeKitTestController.m:514:                            AGDiaryDebug(@"UnknownState", @"Unknown state returned from lock");
Sezam/AGHomeKitTestController.m:520:                        AGDiaryDebug(@"GetStatusError", [error description]);
Sezam/AGHomeKitTestController.m:531:        AGDiaryError(@"StatusRequestError", @"Lock characteristic not found");
Sezam/AGHomeKitTestController.m:532:        self.lastError = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:534:        self.curOperationResultLabel.text = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:542:    self.lastError = @"Unexpected lock disconnect";
Sezam/AGHomeKitTestController.m:547:    AGDiaryDebug(@"DoTest",isLock? @"HKLock":@"HKUnlock");
Sezam/AGHomeKitTestController.m:553:    self.curOperationInfoLabel.text = isLock?@"HK Lock Operation":@"HK Unlock Operation";
Sezam/AGHomeKitTestController.m:554:    self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:556:        AGDiaryDebug(@"LockReachable", @"HomeKit Lock is available");
Sezam/AGHomeKitTestController.m:558:            AGDiaryDebug(@"FoundService", @"%@", service.serviceType );
Sezam/AGHomeKitTestController.m:561:                AGDiaryDebug(@"FoundCharacteristic", @"%@ comparing to %@",characteristic.characteristicType, HMCharacteristicTypeTargetLockMechanismState);
Sezam/AGHomeKitTestController.m:569:                            AGDiaryDebug(@"LockUnlockComplete", isLock? @"HKLock":@"HKUnlock");
Sezam/AGHomeKitTestController.m:570:                            self.curOperationResultLabel.text = @"Complete";
Sezam/AGHomeKitTestController.m:577:                            AGDiaryDebug(@"LockUnlockError", [error description]);
Sezam/AGHomeKitTestController.m:588:            AGDiaryError(@"StatusRequestError", @"Lock characteristic not found");
Sezam/AGHomeKitTestController.m:590:            self.curOperationResultLabel.text = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:618:    NSString *statsString = [NSString stringWithFormat:@"Finished %d attempts.\n\n%d successes\n\n%d HomeKit failures\n\n %d August failures", self.numberOperationsStarted, self.numberOfSuccess, self.numberOfHKFailure, self.numberOfAugFailure ];
Sezam/AGHomeKitTestController.m:619:    UIAlertView *doneAlert = [[UIAlertView alloc] initWithTitle:@"Stopped Operations" message:statsString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGHomeKitTestController.m:620:    AGDiaryDebug(@"TestStatsResults", statsString);
Sezam/AGHomeKitTestController.m:621:    AGDiaryDebug(@"TestStatsDetails", @"%@", self.testResults);
Sezam/AGHomeKitTestController.m:629:        [self.startStopTestButton setTitle:@"Start" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:632:        if ([self.testType isEqualToString:@"Stress Test"] == false) {
Sezam/AGHomeKitTestController.m:647:    if ([self.testType isEqualToString:@"Stress Test"]) {
Sezam/AGHomeKitTestController.m:665:        self.agLock = [d objectForKey:@"lock"];
Sezam/AGHomeKitTestController.m:673:        self.homeKitLock = [d objectForKey:@"hklock"];
Sezam/AGHomeKitTestController.m:707:        [self.startStopTestButton setTitle:@"Stop" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:722:            self.curOperationInfoLabel.text = [NSString stringWithFormat:@"Stress Test %d", self.stressTestCount];
Sezam/AGHomeKitTestController.m:734:        return [NSString stringWithFormat:@"%@", [self.testCountOptions objectAtIndex:row]];
Sezam/AGHomeKitTestController.m:740:    if ([self.testType isEqualToString:@"Stress Test"]) {
Sezam/AGHomeKitTestController.m:748:            self.lastError = @"";
Sezam/AGHomeKitTestController.m:750:        NSDictionary *operationStats = @{@"priorwait":[NSNumber numberWithFloat:self.curDelayTime], @"duration": [NSNumber numberWithFloat:-[self.timeStartedOperation timeIntervalSinceDate:[NSDate date]]], @"success":[NSNumber numberWithBool:self.wasSuccessful], @"errorinfo":self.lastError, @"time":[NSDate date]};
Sezam/AGHomeKitTestController.m:775:        [self.startStopTestButton setTitle:@"Start" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:786:            if ([self.testType isEqualToString:@"All"]) {
Sezam/AGHomeKitTestController.m:805:            if ([self.testType isEqualToString:@"All HK"]) {
Sezam/AGHomeKitTestController.m:821:            if ([self.testType isEqualToString:@"HK State"]) {
Sezam/AGHomeKitTestController.m:824:            if ([self.testType isEqualToString:@"August Get State"]) {
Sezam/AGHomeKitTestController.m:827:            if ([self.testType isEqualToString:@"Big Data"]) {
Sezam/AGHomeKitTestController.m:846:            self.curOperationResultLabel.text = @"Success: Locked";
Sezam/AGHomeKitTestController.m:849:            self.curOperationResultLabel.text = @"Success: Unlocked";
Sezam/AGHomeKitTestController.m:852:            self.curOperationResultLabel.text = @"Success: Jammed";
Sezam/AGHomeKitTestController.m:854:            self.curOperationResultLabel.text = @"Success: Unknown state";
Sezam/AGHomeKitTestController.m:855:            AGDiaryDebug(@"UnknownState", @"Unknown state returned from lock");
Sezam/AGHomeKitTestController.m:865:            self.doorStateLabel.text = @"Door State: Open";
Sezam/AGHomeKitTestController.m:868:            self.doorStateLabel.text = @"Door State: Closed";
Sezam/AGHomeKitTestController.m:884:                            AGDiaryInfo(@"EnabledHomekitNotification", [NSString stringWithFormat:@"ForLockMechanismStateAndLockId: %@",self.agLock.objectId]);
Sezam/AGHomeKitTestController.m:887:                            AGDiaryInfo(@"EnabledHomekitNotification", [NSString stringWithFormat:@"ForDoorStateAndLockId: %@",self.agLock.objectId]);
Sezam/AGWeeklyRecurrencePickerController.m:77:    self.timeOfDayPickerController = (AGInviteEditDatePickerViewController *)[[UIStoryboard storyboardWithName:@"GuestList" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGInviteEditDatePickerViewController"];
Sezam/AGWeeklyRecurrencePickerController.m:184:        [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGWeeklyRecurrencePickerController.m:186:        [dateFormatter setDateFormat:@"h:mma z"];
Sezam/AGUnityConstants.h:43:static NSString *const AG_UNITY_NO_CONNECTION_TITLE = @"Lock Connection Required";
Sezam/AGUnityConstants.h:44:static NSString *const AG_UNITY_NO_CONNECTION_MESSAGE = @"Changing this setting requires a Bluetooth connection to your lock. Make sure you are near your lock and try again.";
Sezam/AGHomeKitCreateRoomViewController.m:12:static NSString* kAGDiaryCategory = @"AGHomeKit";
Sezam/AGHomeKitCreateRoomViewController.m:26:    self.roomNameTextField.text = @"Living Room";
Sezam/AGHomeKitCreateRoomViewController.m:27:    self.instructionLabel.text = [NSString stringWithFormat:@"Choose a name for the new room in %@", [self navController].selectedHome.name];
Sezam/AGHomeKitCreateRoomViewController.m:60:        self.progressAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat: NSLocalizedString(@"Creating HomeKit Room %@", nil), roomNameText] message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGHomeKitCreateRoomViewController.m:65:                AGDiaryInfo(@"CreateRoomError", [error description]);
Sezam/AGHomeKitCreateRoomViewController.m:67:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Room. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitCreateRoomViewController.m:70:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Room." inViewController:self];
Sezam/AGHomeKitCreateRoomViewController.m:73:                AGDiaryInfo(@"CreateRoomSuccess", @"Created HK room");
Sezam/AGHomeKitCreateRoomViewController.m:75:                UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGInstaToggleState.m:23:    NSString *state = @"Unknown";
Sezam/AGInstaToggleState.m:26:            state = @"Off";
Sezam/AGInstaToggleState.m:29:            state = @"Toggle";
Sezam/AGInstaToggleState.m:32:            state = @"Lock";
Sezam/AGInstaToggleState.m:36:            state = @"Unlock";
Sezam/AGInstaToggleState.m:41:    return [NSString stringWithFormat:@"August toggle state %@", state];
Sezam/AGInstaToggleState.m:48:    if ([tString isEqualToString:@"lock"])
Sezam/AGInstaToggleState.m:50:    if ([tString isEqualToString:@"unlock"])
Sezam/AGInstaToggleState.m:52:    if ([tString isEqualToString:@"toggle"])
Sezam/AGEmailVerifyViewController.m:94:            UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Error", nil)
Sezam/AGEmailVerifyViewController.m:95:                                                                                          message:NSLocalizedString(@"Please check the email address and verification code you have entered and try again.", nil)
Sezam/AGEmailVerifyViewController.m:97:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:103:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error", nil) message:NSLocalizedString(@"Incorrect verification code.", nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK", nil) otherButtonTitles:nil];
Sezam/AGEmailVerifyViewController.m:108:                            [self performSegueWithIdentifier:@"EmailVerifyToNewPassword" sender:nil];
Sezam/AGEmailVerifyViewController.m:133:                                        [self performSegueWithIdentifier:@"EmailVerifyToAccountCreated" sender:nil];
Sezam/AGEmailVerifyViewController.m:148:                                [self performSegueWithIdentifier:@"EmailVerifyToPhoneVerify" sender:nil];
Sezam/AGEmailVerifyViewController.m:154:                                [self performSegueWithIdentifier:@"EmailVerifyToAddPhone" sender:nil];
Sezam/AGEmailVerifyViewController.m:177:            NSString *errorTitle = NSLocalizedString(@"Code Re-Sent",nil);
Sezam/AGEmailVerifyViewController.m:178:            NSString *errorMsg = NSLocalizedString(@"We just emailed you another code.  Please check that you typed your email address correctly.  If you have a poor cellular connection, it might take a few moments to receive the code.",nil);
Sezam/AGEmailVerifyViewController.m:182:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:188:            NSString *errorTitle = NSLocalizedString(@"Error",nil);
Sezam/AGEmailVerifyViewController.m:193:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:208:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"message://"]];
Sezam/AGEmailVerifyViewController.m:223:    if ([segue.identifier isEqualToString:@"EmailVerifyToAddPhone"]) {
Sezam/AGEmailVerifyViewController.m:228:    } else if  ([segue.identifier isEqualToString:@"EmailVerifyToResetPassword"]) {
Sezam/AGEmailVerifyViewController.m:235:    else if ([segue.identifier isEqualToString:@"EmailVerifyToAccountCreated"]) {
Sezam/AGEmailVerifyViewController.m:238:    }else if ([segue.identifier isEqualToString:@"EmailVerifyToNewPassword"])
Sezam/AGEmailVerifyViewController.m:241:    } else if ([segue.identifier isEqualToString:@"EmailVerifyToPhoneVerify"]){
Sezam/AGNestStructureMapViewController.m:45:            NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestStructureMapViewController.m:46:            self.houseSelectLabel.text = [NSString stringWithFormat:@"Which August house would you like to pair with your Nest home \"%@\"?", structureName];
Sezam/AGNestStructureMapViewController.m:57:    self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Loading Houses..."] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:62:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:68:                if ([house.houseType isEqualToString: @"superuser"]) {
Sezam/AGNestStructureMapViewController.m:112:    NSString *structureStructureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:115:        NSString *houseStructureID = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:144:    AGCollectionViewCell * cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGNestStructureMapViewController.m:155:        cell.label.text = NSLocalizedString(@"None",nil);
Sezam/AGNestStructureMapViewController.m:159:        NSString *houseStructureID = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:161:        NSString *structureStructureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:182:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:185:            self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Removing %@ from Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:190:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:205:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:206:        NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestStructureMapViewController.m:213:    self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Linking %@ to Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:216:    NSString *structureIDMappedToHouse = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:222:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", currentMappedHouse.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:236:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:255:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error linking %@ to Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:263:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:286:    [self performSegueWithIdentifier:@"nestStructureMapToNestConfirm" sender:nil];
Sezam/AGNestStructureMapViewController.m:295:    if ([segue.identifier isEqualToString:@"nestStructureMapToNestConfirm"]) {
Sezam/AGAddPhoneNumberViewController.m:50:    NSString * message = [NSString stringWithFormat:NSLocalizedString(@"%@ is already a user of this lock",nil), [self.allIdentifiersDictionary objectForKey:identifier]];
Sezam/AGAddPhoneNumberViewController.m:51:    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message: message delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddPhoneNumberViewController.m:57:    NSString * message = @"This person is already a user of this doorbell";
Sezam/AGAddPhoneNumberViewController.m:58:    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message: message delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddPhoneNumberViewController.m:66:        UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"You can't add yourself.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddPhoneNumberViewController.m:91:    self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Searching for user...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddPhoneNumberViewController.m:103:            [self performSegueWithIdentifier:@"AddPhoneNumberToAddFirstAndLastName" sender:nil];
Sezam/AGAddPhoneNumberViewController.m:108:            [self performSegueWithIdentifier:@"AddPhoneNumberToInviteUserExists" sender:self];
Sezam/AGAddPhoneNumberViewController.m:115:    if (![self.tempNumFromAddressBook isEqual:@""]) {
Sezam/AGAddPhoneNumberViewController.m:116:        if (![sender isEqual:@"+1"])
Sezam/AGAddPhoneNumberViewController.m:136:    self.tempNumFromAddressBook = @"";
Sezam/AGAddPhoneNumberViewController.m:151:    [self.countryCodeControl.inputTextField setValue:@"BodyGrayLight" forKey:@"nuiClass"];
Sezam/AGAddPhoneNumberViewController.m:162:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v2"]];
Sezam/AGAddPhoneNumberViewController.m:165:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v2"]];
Sezam/AGUnityModuleRegisterViewController.m:35:static NSString* kAGDiaryCategory = @"AGUnityModuleRegisterViewController";
Sezam/AGUnityModuleRegisterViewController.m:40:    AGDiaryDebug(@"dealloc", @"module register dealloc");
Sezam/AGUnityModuleRegisterViewController.m:50:    _registerStateView = [[[NSBundle mainBundle] loadNibNamed:@"AGUnityModuleStateView" owner:self options:nil] firstObject];
Sezam/AGUnityModuleRegisterViewController.m:69:            @(AGUnityModuleRegisterStateBatteryInfo): @"Your lock needs to be restarted while the module is installed.",
Sezam/AGUnityModuleRegisterViewController.m:70:            @(AGUnityModuleRegisterStateConfirm): @"Please follow the instructions below to register your August module.",
Sezam/AGUnityModuleRegisterViewController.m:71:            @(AGUnityModuleRegisterStateFailed): @"There was an error registering your August module. Please try again.",
Sezam/AGUnityModuleRegisterViewController.m:72:            @(AGUnityModuleRegisterStateFinished): @"Your August module has been successfully registered.",
Sezam/AGUnityModuleRegisterViewController.m:76:            @(AGUnityModuleRegisterStateBatteryInfo):@" • \tRemove a battery from your lock\n"
Sezam/AGUnityModuleRegisterViewController.m:79:            @(AGUnityModuleRegisterStateConfirm): @" •\tEnter the master PIN code on your lock, then the gear button.\n"
Sezam/AGUnityModuleRegisterViewController.m:126:        heroImgName = @"unity_header_image_remove_battery";
Sezam/AGUnityModuleRegisterViewController.m:128:        heroImgName = @"unity_setup";
Sezam/AGUnityModuleRegisterViewController.m:176:    AGDiaryDebug(@"retrievePins", @"started!");
Sezam/AGUnityModuleRegisterViewController.m:179:            AGDiaryDebug(@"retrievePins", @"error:%@", error.description);
Sezam/AGUnityModuleRegisterViewController.m:184:        AGDiaryDebug(@"retrievePins", @"success!");
Sezam/AGUnityModuleRegisterViewController.m:215:        AGDiaryDebug(@"getUnityLockInfo", @"response: %@", responseDict);
Sezam/AGUnityModuleRegisterViewController.m:217:            AGDiaryDebug(@"getUnityLockInfo", @"link error: %@, other error_code: %d", error);
Sezam/AGUnityModuleRegisterViewController.m:220:        AGDiaryDebug(@"getUnityLockInfo", @"get unity lock: %@ ", responseDict);
Sezam/AGUnityModuleRegisterViewController.m:230:	dict[@"manufacturer"] = @"yale";
Sezam/AGUnityModuleRegisterViewController.m:231:	dict[@"serialNumber"] = responseDict[@"hostModelID"];
Sezam/AGUnityModuleRegisterViewController.m:232:	dict[@"productID"] = responseDict[@"productID"];
Sezam/AGUnityModuleRegisterViewController.m:233:	dict[@"productTypeID"] = responseDict[@"productTypeID"];
Sezam/AGUnityModuleRegisterViewController.m:237:            AGDiaryDebug(@"sendUnityHostInfoToServer", @"post Unity host infoFailed!");
Sezam/AGUnityModuleRegisterViewController.m:240:        AGDiaryDebug(@"sendUnityHostInfoToServer", @"post Unity host successed!");
Sezam/AGUnityModuleRegisterViewController.m:245:    AGDiaryDebug(@"removeAllPinsAndGoOTA", @"");
Sezam/AGUnityModuleRegisterViewController.m:254:            AGDiaryDebug(@"removePins", @"failed, error: %@", error.description);
Sezam/AGUnityModuleRegisterViewController.m:259:        AGDiaryDebug(@"removePins", @"Success");
Sezam/AGUnityModuleRegisterViewController.m:260:        [self performSegueWithIdentifier:@"lockSetupToSetupOTA" sender:nil];
Sezam/AGUnityModuleRegisterViewController.m:263:    operationItem.label = @"Clear all pin codes";
Sezam/AGUnityModuleRegisterViewController.m:278:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGUnityModuleRegisterViewController.m:279:    AGInstallGuideWebViewController *webVC = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGUnityModuleRegisterViewController.m:289:    AGDiaryDebug(@"onLockStateChange", @"state: %d", lockState);
Sezam/AGUnityModuleRegisterViewController.m:294:    AGDiaryDebug(@"onStatusChange", @"message: %d, isConnected: %d", message, connected);
Sezam/AGUnityModuleRegisterViewController.m:298:    AGDiaryDebug(@"onDisconnected", @"lock is disconnected");
Sezam/AGUnityModuleRegisterViewController.m:302:        AGDiaryDebug(@"onDisconnected", @"skipped updating UI");
Sezam/AGUnityModuleRegisterViewController.m:323:    AGDiaryInfo(@"onConnected",@"lockId:%@", self.lock.objectId);
Sezam/AGUnityModuleRegisterViewController.m:326:        AGDiaryInfo(@"onConnected",@"removeAllPinsAndGoOTA, lockId:%@", self.lock.objectId);
Sezam/AGUnityModuleRegisterViewController.m:334:        AGDiaryDebug(@"onConnected", @"skipped updating UI, because it's not loading, maybe user is reading instruction!");
Sezam/AGUnityModuleRegisterViewController.m:344:            AGDiaryInfo(@"GetStatusError", @"error: %@", error);
Sezam/AGUnityModuleRegisterViewController.m:349:        AGDiaryInfo(@"getStatusSuccess", @"lock id: %@, returnValue: %@", self.lock.objectId, returnedValue);
Sezam/AGUnityModuleRegisterViewController.m:352:        BOOL isInitialState = [returnedValue isEqual:@"kAugLockState_Init"];
Sezam/AGUnityModuleRegisterViewController.m:385:    if([segue.identifier isEqualToString:@"lockSetupToSetupOTA"]) {
Sezam/AGAutoLockTimingCell.m:37:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockTimingCell.m:43:    self.timingLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockTimingCell.m:54:    self.timingDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoLockTimingCell.m:78:        self.timingDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGAutoLockTimingCell.m:80:        self.timingDescriptionLabel.text = @"The timer will start when your door is closed.";
Sezam/AGImageQualityViewController.m:15:static NSString* kAGDiaryCategory = @"AGImageQualityViewController";
Sezam/AGImageQualityViewController.m:52:static NSString *const kTitleKey = @"title";
Sezam/AGImageQualityViewController.m:53:static NSString *const kTypeKey = @"type";
Sezam/AGImageQualityViewController.m:76:    NSArray *titles = @[@"Contrast", @"Brightness", @"Color Saturation", @"Sharpness", @"Hue Change", @"Automatic Contrast Compensation", @"Backlight Compensation"];
Sezam/AGImageQualityViewController.m:133:                AGDiaryDebug(@"AGImageQualityViewController", @"unknown type: %ld", model.type);
Sezam/AGImageQualityViewController.m:157:    cell.numberLabel.text = [NSString stringWithFormat:@"%d", value];
Sezam/AGImageQualityViewController.m:163:    AGDiaryDebug(@"AGImageQualityViewController", @"sliderValueStoppedChanged, value: %f", slider.value);
Sezam/AGImageQualityViewController.m:171:        AGDiaryDebug(@"AGImageQualityViewController", @"update image quality success: %d, error: %@", succeeded, error);
Sezam/AGImageQualityViewController.m:173:            NSString *msg = [NSString stringWithFormat:@"Error updating %@", model.title];
Sezam/AGImageQualityViewController.m:184:    UIAlertController *alerVC = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGImageQualityViewController.m:185:                                                                    message:[NSString stringWithFormat:@"Error updating %@", msg]
Sezam/AGImageQualityViewController.m:187:    UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGImageQualityViewController.m:200:    AGDiaryDebug(@"AGImageQualityViewController", @"switch is on: %d", sender.isOn);
Sezam/AGImageQualityViewController.m:209:        AGDiaryDebug(@"AGImageQualityViewController", @"update backlight compensation success: %d, error: %@", succeeded, error);
Sezam/AGImageQualityViewController.m:214:            NSString *msg = [NSString stringWithFormat:@"Error updating %@", model.title];
Sezam/AGImageQualityViewController.m:245:        AGTitleBtnCell *cell = [tableView dequeueReusableCellWithIdentifier:@"TitleBtnCell"];
Sezam/AGImageQualityViewController.m:247:            cell = [[AGTitleBtnCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"TitleBtnCell"];
Sezam/AGImageQualityViewController.m:253:        AGTableViewWithSliderCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SliderCell"];
Sezam/AGImageQualityViewController.m:255:            cell = [[AGTableViewWithSliderCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"SliderCell"];
Sezam/AGImageQualityViewController.m:268:        cell.numberLabel.text = [NSString stringWithFormat:@"%d", model.value.intValue];
Sezam/AGAutoUnlocker.m:36:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlocker.m:39:NSString *const kAGAutoUnlockerUpdatedNotification = @"kAGAutoUnlockerUpdatedNotification";
Sezam/AGAutoUnlocker.m:73:        _eventLogger = [[AGEventLogger alloc] initWithIdentifier:[NSString stringWithFormat:@"AGAutoUnlocker-%@", lock.objectId.uppercaseString]];
Sezam/AGAutoUnlocker.m:83:        _eventLogger = [[AGEventLogger alloc] initWithIdentifier:[NSString stringWithFormat:@"AGAutoUnlocker-%@", lock.objectId.uppercaseString]];
Sezam/AGAutoUnlocker.m:131:        AGDiaryInfo(@"AutoUnlockSetToUnknownState", @"Device reboot detected");
Sezam/AGAutoUnlocker.m:137:        AGDiaryInfo(@"AutoUnlockSetToUnknownState", @"Force quit detected");
Sezam/AGAutoUnlocker.m:148:        AGDiaryInfo(@"AutoUnlockerRecordNotFound", @"An AutoUnlocker can't be used if its not persisted");
Sezam/AGAutoUnlocker.m:149:        NSAssert(record, @"An AutoUnlocker can't be used if its not persisted");
Sezam/AGAutoUnlocker.m:207:    NSNumber *homeRegionRadiusNum = [AGUtility getAppFeatureNumber:@"AutoUnlockInnerHomeRegionRadius"];
Sezam/AGAutoUnlocker.m:225:    AGDiaryInfo(@"StartingGeofenceEntranceDetection", @"%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:229:    AGCircularGeoRegion *innerEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self innerGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"inner"]];
Sezam/AGAutoUnlocker.m:231:    AGCircularGeoRegion *middleEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self middleGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"middle"]];
Sezam/AGAutoUnlocker.m:233:    AGCircularGeoRegion *outerEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self outerGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"outer"]];
Sezam/AGAutoUnlocker.m:266:    AGDiaryInfo(@"DetectedEntrance", @"%@", detector.region.identifier);
Sezam/AGAutoUnlocker.m:289:    NSNumber *innerGeofenceEntranceRadiusNum = [AGUtility getAppFeatureNumber:@"AutoUnlockInnerGeofenceEntranceRadius"];
Sezam/AGAutoUnlocker.m:290:    if (innerGeofenceEntranceRadiusNum && [AGFeatureManager enabled:@"AutoUnlockCustomInnerGeofenceEntranceRadius"]) {
Sezam/AGAutoUnlocker.m:320:    AGDiaryInfo(@"CheckingForGeofenceExitImmediately", @"%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:334:    AGDiaryInfo(@"StartingExitDetection", @"%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:365:        AGDiaryInfo(@"IgnoringRegionExitBecauseRegionExitWasJustProcessed", @"");
Sezam/AGAutoUnlocker.m:393:    AGDiaryInfo(@"ExitDetected", @"Distance from home: %f", [homeLocation distanceFromLocation:verifiedExitLocation]);
Sezam/AGAutoUnlocker.m:432:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"]) {
Sezam/AGAutoUnlocker.m:433:        [[AGAutoUnlockNotificationHandler new] showGenericNotification:@"Debug: Detected spurious exit while connected to home wifi network. This represents a slight amount of wasted energy."];
Sezam/AGAutoUnlocker.m:465:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"]) {
Sezam/AGAutoUnlocker.m:466:        [[AGAutoUnlockNotificationHandler new] showGenericNotification:@"Debug: Detected spurious exit via accurate location services. This represents a slight amount of wasted energy."];
Sezam/AGAutoUnlocker.m:474:    AGDiaryInfo(@"StartMonitoringBLERegion",@"lockid:%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:476:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
Sezam/AGAutoUnlocker.m:480:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:481:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:482:                                                                         @"au_cancel_type":@"UUIDNotInAugustCache",
Sezam/AGAutoUnlocker.m:483:                                                                         @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:484:                                                                         @"au_info": @{
Sezam/AGAutoUnlocker.m:485:                                                                                 @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:488:        AGDiaryInfo(@"UUIDNotInAugustCache",@"State set to waiting_for_exit lockid:%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:489:        [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Home mode because the device could not be found in the August device cache"} identifier:@"AutoUnlockSetToHomeModeBecauseUUIDNotInAugustCache"]];
Sezam/AGAutoUnlocker.m:502:    self.bleRegionMonitor = [[AGBLERegionMonitor alloc] initWithMonitorID:[NSString stringWithFormat:@"AGAutoUnlocker-%@", self.lock.objectId] regionUUID:deviceUUID];
Sezam/AGAutoUnlocker.m:514:    AGDiaryInfo(@"BLERegionMonitorDidStart",@"lockid: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:519:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:520:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:521:                                                                     @"au_cancel_type":@"UUIDNotInOSCache",
Sezam/AGAutoUnlocker.m:522:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:523:                                                                     @"au_info": @{
Sezam/AGAutoUnlocker.m:524:                                                                             @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:527:    AGDiaryInfo(@"BLERegionMonitorFailedToStart",@"lockid: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:528:    [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Home mode because the device could not be found in the iOS Bluetooth cache"} identifier:@"AutoUnlockSetToHomeModeBecauseUUIDNotiOSCache"]];
Sezam/AGAutoUnlocker.m:540:    AGDiaryInfo(@"BLERegionMonitorDidEnterRegion",@"lockid: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:550:        AGDiaryInfo(@"BLERegionMonitorDidEnterRegionButNotAttemptingUnlock",@"lockid: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:576:            NSString *robustUnlockerError = error.userInfo[@"AGError"];
Sezam/AGAutoUnlocker.m:578:                robustUnlockerError = @"NotUnlockerError";
Sezam/AGAutoUnlocker.m:581:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:582:                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:583:                                                                             @"au_cancel_type":@"BLEOperationError",
Sezam/AGAutoUnlocker.m:584:                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:585:                                                                             @"au_info":@{
Sezam/AGAutoUnlocker.m:586:                                                                                     @"ble_error":error.description,
Sezam/AGAutoUnlocker.m:587:                                                                                     @"unlocker_error":robustUnlockerError,
Sezam/AGAutoUnlocker.m:588:                                                                                     @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:591:            AGDiaryInfo(@"ErrorUnlocking",@"lockid:%@ error:%@", self.lock.objectId, error);
Sezam/AGAutoUnlocker.m:592:            [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock did not unlock the door because there was an error communicating with the lock"} identifier:@"AutoUnlockUnlockOperationFailed"]];
Sezam/AGAutoUnlocker.m:595:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:596:                                                                             @"au_result":@"Success",
Sezam/AGAutoUnlocker.m:597:                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:598:                                                                             @"au_info": @{
Sezam/AGAutoUnlocker.m:599:                                                                                     @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:603:            AGDiaryInfo(@"SuccessfulUnlock",@"lockid:%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:604:            [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock unlocked door"} identifier:@"AutoUnlockUnlockOperationSucceeded"]];
Sezam/AGAutoUnlocker.m:667:        NSMutableDictionary *exitEventInfoDict = [NSMutableDictionary dictionaryWithDictionary:@{@"notification_shown":@(didShowImmediateReentryNotification)}];
Sezam/AGAutoUnlocker.m:670:                                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:671:                                                                                             @"au_cancel_type":@"ImmediateBLERegionEntryAfterGeofenceExit",
Sezam/AGAutoUnlocker.m:672:                                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:673:                                                                                             @"au_info": @{
Sezam/AGAutoUnlocker.m:674:                                                                                                     @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:678:        analyticsDict[@"au_exit_info"] = exitEventInfoDict;
Sezam/AGAutoUnlocker.m:680:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", analyticsDict);
Sezam/AGAutoUnlocker.m:681:        AGDiaryInfo(@"ImmediateBLERegionEntryAfterGeofenceExit",@"lockid:%@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:682:        [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock was set to Home mode because the lock was found immediately after leaving the home area"} identifier:@"AutoUnlockImmediateBLERegionEntryAfterGeofenceExit"]];
Sezam/AGAutoUnlocker.m:811:    NSString *wifiEnabledStr = [AGUtility wiFiEnabledState] == AGWifiStateEnabled ? @"true" : @"false";
Sezam/AGAutoUnlocker.m:813:    AGAnalyticsDiaryInfoData(@"AutoUnlockExitReverified", (@{
Sezam/AGAutoUnlocker.m:814:                                                                    @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:815:                                                                    @"au_info":@{
Sezam/AGAutoUnlocker.m:816:                                                                            @"wifi_enabled":wifiEnabledStr,
Sezam/AGAutoUnlocker.m:817:                                                                            @"distance_from_home":@([homeLocation distanceFromLocation:verifiedExitLocation]),
Sezam/AGAutoUnlocker.m:818:                                                                            @"exit_accuracy":@(verifiedExitLocation.horizontalAccuracy),
Sezam/AGAutoUnlocker.m:819:                                                                            @"geofence_size":@(record.region.radius),
Sezam/AGAutoUnlocker.m:820:                                                                            @"reverification_cause":[self awayModeCauseLogDescriptionFromEnum:record.awayModeCause]
Sezam/AGAutoUnlocker.m:830:    NSString *wifiEnabledStr = [AGUtility wiFiEnabledState] == AGWifiStateEnabled ? @"true" : @"false";
Sezam/AGAutoUnlocker.m:832:    AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlocker.m:833:                                                                    @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:834:                                                                    @"au_initiation_type":@"ExitedHomeArea",
Sezam/AGAutoUnlocker.m:835:                                                                    @"au_info":@{
Sezam/AGAutoUnlocker.m:836:                                                                            @"wifi_enabled":wifiEnabledStr,
Sezam/AGAutoUnlocker.m:837:                                                                            @"distance_from_home":@([homeLocation distanceFromLocation:verifiedExitLocation]),
Sezam/AGAutoUnlocker.m:838:                                                                            @"exit_accuracy":@(verifiedExitLocation.horizontalAccuracy),
Sezam/AGAutoUnlocker.m:839:                                                                            @"geofence_size":@(record.region.radius)
Sezam/AGAutoUnlocker.m:850:                                                                                  @"description":@"Exited home area"
Sezam/AGAutoUnlocker.m:851:                                                                                  } identifier:@"ExitHomeArea"]];
Sezam/AGAutoUnlocker.m:855:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:856:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:857:                                                                     @"au_cancel_type":@"AppForceQuit",
Sezam/AGAutoUnlocker.m:858:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:859:                                                                     @"au_info": @{
Sezam/AGAutoUnlocker.m:860:                                                                             @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:863:    AGDiaryInfo(@"AutoUnlockSetToHomeModeBecauseForceQuit",@"Setting state to waiting_for_exit lockid: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:864:    [self.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Home mode because the August app was force quit"} identifier:@"AutoUnlockSetToHomeModeBecauseForceQuit"]];
Sezam/AGAutoUnlocker.m:870:                                                                                  @"description":@"Auto-Unlock set to Home mode because of device reboot"
Sezam/AGAutoUnlocker.m:871:                                                                                  } identifier:@"AutoUnlockSetToHomeModeBecausePhoneRestart"]];
Sezam/AGAutoUnlocker.m:873:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:874:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:875:                                                                     @"au_cancel_type":@"DeviceReboot",
Sezam/AGAutoUnlocker.m:876:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:877:                                                                     @"au_info":@{
Sezam/AGAutoUnlocker.m:878:                                                                                @"reboot_date_diff":@([AGAppSessionMonitor sharedInstance].rebootDateTimeDifferenceSinceLastLaunch),
Sezam/AGAutoUnlocker.m:879:                                                                                @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:882:    AGDiaryInfo(@"AutoUnlockSetToHomeModeBecausePhoneRestart", @"lockID: %@", self.lock.objectId);
Sezam/AGAutoUnlocker.m:889:                                                                                  @"description":@"Auto-Unlock set to Home mode because you had been near home too long without unlocking"
Sezam/AGAutoUnlocker.m:890:                                                                                } identifier:@"AutoUnlockSetToHomeModeBecauseAwayModeInHomeRegionTooLong"]];
Sezam/AGAutoUnlocker.m:892:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:893:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:894:                                                                     @"au_cancel_type":@"AwayModeInHomeRegionTooLong",
Sezam/AGAutoUnlocker.m:895:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:896:                                                                     @"au_info":@{
Sezam/AGAutoUnlocker.m:897:                                                                             @"home_region_duration":@(durationInHomeRegion),
Sezam/AGAutoUnlocker.m:898:                                                                             @"lock_version":[AGUtility modelVersionForLockID:self.lock.objectId]
Sezam/AGAutoUnlocker.m:901:    AGDiaryInfo(@"AutoUnlockSetToHomeModeBecauseAwayModeInHomeRegionTooLong", @"lockID: %@ duration:%@", self.lock.objectId, @(durationInHomeRegion));
Sezam/AGAutoUnlocker.m:923:    [[NSNotificationCenter defaultCenter] postNotificationName:kAGAutoUnlockerUpdatedNotification object:nil userInfo:@{@"AutoUnlocker":self}];
Sezam/AGAutoUnlocker.m:927:    NSNumber *delayNum = [AGUtility getAppFeatureNumber:@"AwayModeActivatedNotificationDelay"];
Sezam/AGAutoUnlocker.m:936:    NSNumber *penaltyDistanceNum = [AGUtility getAppFeatureNumber:@"SpuriousExitPenaltyGeofenceDistance"];
Sezam/AGAutoUnlocker.m:945:    NSNumber *penaltySecondsNum = [AGUtility getAppFeatureNumber:@"SpuriousExitPenaltyDurationSeconds"];
Sezam/AGAutoUnlocker.m:954:    NSNumber *featureNum = [AGUtility getAppFeatureNumber:@"AutoUnlockRebootDateTimeDifferenceToTriggerUnverifiedAwayMode"];
Sezam/AGAutoUnlocker.m:964:        return @"ExitedHomeArea";
Sezam/AGAutoUnlocker.m:967:        return @"UserChanged";
Sezam/AGAutoUnlocker.m:970:        return @"VerifiedAfterForceQuit";
Sezam/AGAutoUnlocker.m:973:        return @"VerifiedAfterDeviceReboot";
Sezam/AGAutoUnlocker.m:975:    return @"Unknown";
Sezam/AGAutoUnlocker.m:980:    return [AGFeatureManager enabled:@"PenalizeSpuriousExits"];
Sezam/AGAutoUnlocker.m:1005://This fixes a bug where the regionID was set to @"" when changing the home location. If multiple autounlockers had their locations changed, this could lead to various errors as multiple regions had the same ID.
Sezam/AGRateAppViewController.m:32:        self.mainTextLabel.text = @"If you enjoy using August, please take a moment to write a nice review. It really helps.";
Sezam/AGRateAppViewController.m:33:        [self.actionButton setTitle:@"Rate The App" forState:UIControlStateNormal];
Sezam/AGRateAppViewController.m:36:        self.mainTextLabel.text = @"We'd love to know how we can make August better, and make your experience a happy one!";
Sezam/AGRateAppViewController.m:37:        [self.actionButton setTitle:@"Send Feedback" forState:UIControlStateNormal];
Sezam/AGRateAppViewController.m:48:        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms-apps://itunes.apple.com/app/id648730592"]];
Sezam/AGDoorbellSetupDockViewController.m:38:    [self performSegueWithIdentifier:@"DoorbellDockSetupToDoorbellScan" sender:nil];
Sezam/AGDoorbellSetupDockViewController.m:49:    if ([segue.identifier isEqualToString:@"DoorbellDockSetupToDoorbellScan"]) {
Sezam/AGAppSessionMonitor.m:12:NSString *const kAGAppSessionMonitorLastBootTimeKey = @"kAGAppSessionMonitorLastBootTimeKey";
Sezam/AGAppSessionMonitor.m:63:    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"AGAppSessionMonitor"];
Sezam/AGCountryPickerViewController.m:29:    self.indexTitles = @[@"A", @"B", @"C", @"D", @"E", @"F", @"G", @"H", @"I", @"J", @"K", @"L", @"M", @"N", @"O", @"P", @"Q", @"R", @"S", @"T", @"U", @"V", @"W", @"X", @"Y", @"Z"];
Sezam/AGCountryPickerViewController.m:58:    searchBar.text=@"";
Sezam/AGCountryPickerViewController.m:70:    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"countries" ofType:@"json"];
Sezam/AGCountryPickerViewController.m:80:        NSString *name = [entry objectForKey:@"name"];
Sezam/AGCountryPickerViewController.m:82:        NSString *code = [entry objectForKey:@"dial_code"];
Sezam/AGCountryPickerViewController.m:116:        return @"";
Sezam/AGCountryPickerViewController.m:123:    static NSString *MyIdentifier = @"CountryCell";
Sezam/AGCountryPickerViewController.m:153:        [cell.countryName setText:@""];
Sezam/AGCountryPickerViewController.m:158:        [cell.countryCode setText:@""];
Sezam/AGCountryPickerViewController.m:201:    [letter setFont:[UIFont fontWithName:@"ProximaNova-Bold" size:17]];
Sezam/AGCountryPickerViewController.m:235:            NSArray *words = [wordsAndEmptyStrings filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"length > 0"]];
Sezam/AGAddGuestViewController.m:41:    NSString * message = [NSString stringWithFormat:NSLocalizedString(@"%@ is already a user of this lock",nil), [self.allIdentifiersDictionary objectForKey:identifier]];
Sezam/AGAddGuestViewController.m:42:    UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message: message delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddGuestViewController.m:48:        UIAlertView * alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Error",nil) message:NSLocalizedString(@"You can't add yourself.",nil) delegate:self cancelButtonTitle:NSLocalizedString(@"OK",nil) otherButtonTitles: nil, nil];
Sezam/AGAddGuestViewController.m:74:    self.processingAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Searching for user...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGAddGuestViewController.m:87:            [self performSegueWithIdentifier:@"AddGuestVCtoAddNamesVC" sender:nil];
Sezam/AGAddGuestViewController.m:91:            [self performSegueWithIdentifier:@"InvitePhoneToInviteEdit" sender:nil];
Sezam/AGAddGuestViewController.m:98:    if (![self.tempNumFromAddressBook isEqual:@""]) {
Sezam/AGAddGuestViewController.m:99:        if (![sender isEqual:@"+1"])
Sezam/AGAddGuestViewController.m:109:    if ([segue.identifier isEqualToString:@"InvitePhoneToInviteEdit"]) {
Sezam/AGAddGuestViewController.m:113:    if ([segue.identifier isEqualToString:@"AddGuestVCtoAddNamesVC"]) {
Sezam/AGAddGuestViewController.m:121:    self.firstName = @"";
Sezam/AGAddGuestViewController.m:122:    self.lastName = @"";
Sezam/AGAddGuestViewController.m:124:    self.tempNumFromAddressBook = @"";
Sezam/AGAddGuestViewController.m:132:    [self.countryCodeControl.inputTextField setValue:@"BodyGrayLight" forKey:@"nuiClass"];
Sezam/AGAddGuestViewController.m:142:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_yellow_v2"]];
Sezam/AGAddGuestViewController.m:145:        [self.nextButtonImageView setImage:[UIImage imageNamed: @"right_arrow_gray_v2"]];
Sezam/AGAddGuestViewController.m:147:    [self.countryCodeControl.inputTextField setValue:@"BodyLight" forKey:@"nuiClass"];
Sezam/AGAutoUnlockHistoryController.m:37:    self.view.titleLabel.text = @"HISTORY";
Sezam/AGAutoUnlockHistoryController.m:46:    [dateFormatter setDateFormat:@"MMM dd, yyyy"];
Sezam/AGAutoUnlockHistoryController.m:71:    [eventTimeFormatter setDateFormat:@"hh:mm a"];
Sezam/AGAutoUnlockHistoryController.m:79:    NSSortDescriptor *descriptor = [[NSSortDescriptor alloc] initWithKey:@"self" ascending:NO];
Sezam/AGAutoUnlockHistoryController.m:87:            title = @"TODAY";
Sezam/AGAutoUnlockHistoryController.m:89:            title = @"YESTERDAY";
Sezam/AGAutoUnlockHistoryController.m:94:        NSSortDescriptor *descriptor = [[NSSortDescriptor alloc] initWithKey:@"self.date" ascending:NO];
Sezam/AGAutoUnlockHistoryController.m:101:            [displayableEvents addObject:[AGDisplayableLogEvent eventWithTime:[eventTimeFormatter stringFromDate:curEvent.date] description:curEvent.userInfo[@"description"]]];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:63:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"ImmediatelyFoundLockFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:72:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"LocationNotVerifiableFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:81:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"ConnectedToHomeWifiFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:93:    NSNumber *decayPeriodNum = [AGUtility getAppFeatureNumber:@"AutoUnlockDynamicGeofenceDecayPeriodDays"];
Sezam/AGNumericKeypad.m:32:	UIImageView *keyboardBackground = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"keypad_background"]];
Sezam/AGNumericKeypad.m:33:	UIImageView *keyboardGridLines = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"KeyboardNumericEntryViewGridLinesTextured"]];
Sezam/AGNumericKeypad.m:34:	UIImageView *keyboardShadow = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"navbar_bg"]];
Sezam/AGNumericKeypad.m:38:	[self addSubview:[self addNumericKeyWithTitle:@"1" frame:CGRectMake(0, 1, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:39:	[self addSubview:[self addNumericKeyWithTitle:@"2" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, 1, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:40:	[self addSubview:[self addNumericKeyWithTitle:@"3" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, 1, KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:42:	[self addSubview:[self addNumericKeyWithTitle:@"4" frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:43:	[self addSubview:[self addNumericKeyWithTitle:@"5" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:44:	[self addSubview:[self addNumericKeyWithTitle:@"6" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:46:	[self addSubview:[self addNumericKeyWithTitle:@"7" frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:47:	[self addSubview:[self addNumericKeyWithTitle:@"8" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH , KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:48:	[self addSubview:[self addNumericKeyWithTitle:@"9" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:50:	[self addSubview:[self addNumericKeyWithTitle:@"." frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT * 3 + 4, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:51:	[self addSubview:[self addNumericKeyWithTitle:@"0" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT * 3 + 4, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:72:    UIImage *buttonImage = [UIImage imageNamed:@"KeyboardNumericEntryKeyTextured"];
Sezam/AGNumericKeypad.m:73:    UIImage *buttonPressedImage = [UIImage imageNamed:@"KeyboardNumericEntryKeyPressedTextured"];
Sezam/AGNumericKeypad.m:84:    UIImage *buttonImage = [UIImage imageNamed:@"KeyboardNumericEntryKeyTextured"];
Sezam/AGNumericKeypad.m:85:    UIImage *buttonPressedImage = [UIImage imageNamed:@"KeyboardNumericEntryKeyPressedTextured"];
Sezam/AGNumericKeypad.m:86:    UIImage *image = [UIImage imageNamed:@"KeyboardNumericEntryKeyBackspaceGlyphTextured"];
Sezam/AGNumericKeypad.m:107:    if ([@"." isEqualToString:keyText]) {
Sezam/AGNumericKeypad.m:113:    NSRange dot = [_textField.text rangeOfString:@"."];
Sezam/AGNumericKeypad.m:118:                [self.textInputDelegate insertText:@"0."];
Sezam/AGNumericKeypad.m:120:                [self.textInputDelegate insertText:@"."];
Sezam/AGNumericKeypad.m:125:            if (kMaxNumber <= [[NSString stringWithFormat:@"%@%d", _textField.text, key] doubleValue]) {
Sezam/AGNumericKeypad.m:126:                _textField.text = [NSString stringWithFormat:@"%d", kMaxNumber];
Sezam/AGNumericKeypad.m:127:            } else if ([@"0.00" isEqualToString:_textField.text]) {
Sezam/AGNumericKeypad.m:128:                _textField.text = [NSString stringWithFormat:@"%d", key];
Sezam/AGNumericKeypad.m:130:                [self.textInputDelegate insertText:[NSString stringWithFormat:@"%d", key]];
Sezam/AGNumericKeypad.m:138:    if ([@"0." isEqualToString:_textField.text]) {
Sezam/AGNumericKeypad.m:139:        _textField.text = @"";
Sezam/AGSignalStrengthViewController.m:43:        self.wifiIndicatorImageView.image = [UIImage imageNamed:@"WiFiAvailable"];
Sezam/AGSignalStrengthViewController.m:44:        self.wifiTitleLabel.text = @"Checking WiFi Signal";
Sezam/AGSignalStrengthViewController.m:45:        self.wifiMessageLabel.text = @"";
Sezam/AGSignalStrengthViewController.m:47:        //float linkQuality = [self.doorbellTelemetry[@"link_quality"] floatValue];
Sezam/AGSignalStrengthViewController.m:48:        float signalLevel = [self.doorbellTelemetry[@"signal_level"] floatValue];
Sezam/AGSignalStrengthViewController.m:51:            self.wifiIndicatorImageView.image = [UIImage imageNamed:@"WiFiIndicator_v2"];
Sezam/AGSignalStrengthViewController.m:52:            self.wifiTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGSignalStrengthViewController.m:53:            self.wifiMessageLabel.text = @"Your Doorbell Cam is reporting a good Wi-Fi signal.";
Sezam/AGSignalStrengthViewController.m:56:            self.wifiIndicatorImageView.image = [UIImage imageNamed:@"wifi_icon_red"];
Sezam/AGSignalStrengthViewController.m:57:            self.wifiTitleLabel.text = @"POOR WI-FI SIGNAL";
Sezam/AGSignalStrengthViewController.m:58:            self.wifiMessageLabel.text = @"Your Doorbell Cam is reporting a very poor Wi-Fi signal. Video streaming and other features may not work properly.";
Sezam/AGSignalStrengthViewController.m:101:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGSignalStrengthViewController.m:129:    self.wifiIndicatorImageView.image = [UIImage imageNamed:@"wifi_icon_red"];
Sezam/AGSignalStrengthViewController.m:130:    self.wifiTitleLabel.text = @"DOORBELL OFFLINE";
Sezam/AGSignalStrengthViewController.m:131:    self.wifiMessageLabel.text = @"Your Doorbell Cam is offline. Wi-Fi Signal refers to the last known signal strength.";
Sezam/AGSignalStrengthViewController.m:139:    if ([messageData objectForKey:@"telemetry"]) {
Sezam/AGSignalStrengthViewController.m:140:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGSignalStrengthViewController.m:142:            self.doorbellTelemetry[@"link_quality"] = telemetry[@"link_quality"];
Sezam/AGSignalStrengthViewController.m:143:            self.doorbellTelemetry[@"signal_level"] = telemetry[@"signal_level"];
Sezam/AGSignalStrengthViewController.m:182:        cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGSignalStrengthViewController.m:183:        cell.label2.text = @"Signal Level";
Sezam/AGSignalStrengthViewController.m:184:        NSString *signalLevel = [self.doorbellTelemetry objectForKey:@"signal_level"];
Sezam/AGSignalStrengthViewController.m:185:        cell.label.text = [NSString stringWithFormat:@"%d dBm", [signalLevel intValue]];
Sezam/AGSignalStrengthViewController.m:188:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MessageRow"];
Sezam/AGSignalStrengthViewController.m:191:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGDoorbellScanSetupViewController.m:15:static NSString* kAGDiaryCategory = @"DoorbellSetupv2";
Sezam/AGDoorbellScanSetupViewController.m:30:        self.headerImageView.image = [UIImage imageNamed:@"imgDoorbellcamHeader"];
Sezam/AGDoorbellScanSetupViewController.m:31:        self.instructionsLabel.text = @"Let’s set up your Doorbell Cam. Make sure you’ve completed installation, allowed it to charge for at least 15 minutes, and can see the slow-blinking green light.";
Sezam/AGDoorbellScanSetupViewController.m:32:        [self.primaryButton setTitle:@"OK, I SEE THE BLINKING GREEN LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:34:        self.headerTitleLabel.nuiClass = @"Title";
Sezam/AGDoorbellScanSetupViewController.m:37:        self.headerImageView.image = [UIImage imageNamed:@"DoorbellSetupD2WithDock"];
Sezam/AGDoorbellScanSetupViewController.m:38:        self.instructionsLabel.text = @"Place your Doorbell Cam on the setup dock. In a moment, you should see the light pulsing white.\n\nNOTE: You may need to press the Reset button on the back of your Doorbell Cam.";
Sezam/AGDoorbellScanSetupViewController.m:39:        [self.primaryButton setTitle:@"OK, I SEE THE PULSING WHITE LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:40:        [self.secondaryButton setTitle:@"I DON'T SEE THE PULSING WHITE LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:42:        [self.backButton setImage:[UIImage imageNamed:@"left_arrow_white_v2"] forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:43:        self.headerTitleLabel.nuiClass = @"TitleWhite";
Sezam/AGDoorbellScanSetupViewController.m:79:        UIAlertController *dontSeeGreenBlinkingLightAlert = [UIAlertController alertControllerWithTitle:@"Don’t See The Green Blinking Light?" message:@"Note: The green blinking light can appear very dim in broad daylight.\n\nIf you’re sure the light is not blinking, we can help! Tap “Get Help” for step-by-step troubleshooting help with this issue." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:80:        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:84:        UIAlertAction *getHelpAction = [UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGDoorbellScanSetupViewController.m:100:        UIAlertController *needWifiAlert = [UIAlertController alertControllerWithTitle:@"Turn On Wi-Fi" message:@"Your phone must have Wi-Fi enabled to complete this scan." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:101:        [needWifiAlert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellScanSetupViewController.m:102:        [needWifiAlert addAction:[UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellScanSetupViewController.m:110:        AGDiaryInfo(@"DoorbellSetupInitialScanBegin", @"This is the user's first click of the 'Scan' button");
Sezam/AGDoorbellScanSetupViewController.m:111:        self.scanningForDoorbellAlert = [UIAlertController alertControllerWithTitle:@"Scanning for Doorbell..." message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:115:        NSString *match = [NSString stringWithFormat:@"August Doorbell Cam*"];
Sezam/AGDoorbellScanSetupViewController.m:116:        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellScanSetupViewController.m:135:        AGDiaryInfo(@"DoorbellSetupInitialScanEnd", @"Doorbells Found:1");
Sezam/AGDoorbellScanSetupViewController.m:140:        AGDiaryInfo(@"DoorbellSetupInitialScanEnd", @"Doorbells Found:2+");
Sezam/AGDoorbellScanSetupViewController.m:141:        BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellScanSetupViewController.m:144:            [self performSegueWithIdentifier:@"DoorbellScanToDebugPicker" sender:nil];
Sezam/AGDoorbellScanSetupViewController.m:146:            UIAlertController *multipleDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Multiple Doorbells Found" message:@"We found multiple unconfigured doorbells. Please power off any doorbells you are not trying to set up." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:147:            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:151:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellScanSetupViewController.m:188:        [self performSegueWithIdentifier:@"DoorbellScanToDoorbellRegister" sender:nil];
Sezam/AGDoorbellScanSetupViewController.m:209:    AGDiaryInfo(@"DoorbellSetupInitialScanEnd", @"Doorbells Found:0");
Sezam/AGDoorbellScanSetupViewController.m:223:    UIAlertController *noDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Doorbell Not Found" message:@"We couldn’t find your Doorbell Cam. This can happen for a few reasons. If you’d like help troubleshooting, select Get Help." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:224:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:228:    UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGDoorbellScanSetupViewController.m:255:    if ([segue.identifier isEqualToString:@"DoorbellScanToDebugPicker"]) {
Sezam/AGDoorbellScanSetupViewController.m:260:    if ([segue.identifier isEqualToString:@"DoorbellScanToDoorbellRegister"]) {
Sezam/AGUserInviteReceivedViewController.m:27:    UIStoryboard *signupStoryboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGUserInviteReceivedViewController.m:28:    self.checkListVC = [signupStoryboard instantiateViewControllerWithIdentifier:@"AGOnboardingChecklistViewController"];
Sezam/AGUserInviteReceivedViewController.m:69:    [self performSegueWithIdentifier:@"userInviteToOnboardingChecklist" sender:sender];
Sezam/AGAccessScheduleViewController.m:35:    self.daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGAccessScheduleViewController.m:139:    [myFormatter setDateFormat:@"c"]; // day number, like 7 for saturday
Sezam/AGAccessScheduleViewController.m:186:        cell = [tableView dequeueReusableCellWithIdentifier:@"ScheduleAlways"];
Sezam/AGAccessScheduleViewController.m:207:        AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ScheduleRecurring"];
Sezam/AGAccessScheduleViewController.m:233:        AGTemporaryAccessTableViewCell *tempCell = (AGTemporaryAccessTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ScheduleTemporary"];
Sezam/AGAccessScheduleViewController.m:329:    self.scheduleQuestionText.text = [NSString stringWithFormat: NSLocalizedString(@"How often does %@ need to access %@?", nil), self.userName, self.lockName];
Sezam/AGAccessScheduleViewController.m:350:    if ([segue.identifier isEqualToString:@"RecurTimeSegue"]) {
Sezam/AGAccessScheduleViewController.m:360:    if ([segue.identifier isEqualToString:@"TempDateSegue"]) {
Sezam/AGSimpleGeoRegionExitDetector.m:16:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGSimpleGeoRegionExitDetector.m:103:    AGDiaryInfo(@"GeofenceExit", @"region: %@", region.identifier);
Sezam/AGSimpleGeoRegionExitDetector.m:118:                    AGDiaryInfo(@"GeofenceExitVerified", @"region: %@", region.identifier);
Sezam/AGSimpleGeoRegionExitDetector.m:125:                    AGDiaryInfo(@"GeofenceExitFailedToVerify", @"region: %@", region.identifier);
Sezam/AGSimpleGeoRegionExitDetector.m:148:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-inner", self.region.identifier];
Sezam/AGSimpleGeoRegionExitDetector.m:152:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-middle", self.region.identifier];
Sezam/AGSimpleGeoRegionExitDetector.m:156:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-outer", self.region.identifier];
Sezam/AGHomeLocationMapView.m:60:    self.editHomeLocationView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"home_location_icon"]];
Sezam/AGHomeLocationMapView.m:67:    [self.zoomToUserLocationButton setImage:[UIImage imageNamed:@"zoom_to_user_location"] forState:UIControlStateNormal];
Sezam/AGHomeLocationMapView.m:178:        homeLocationAnnotation.image = [UIImage imageNamed:@"home_location_icon"];
Sezam/AGAutoUnlockManager.h:24:static NSString* kSendUnlockCommandEvent = @"sendUnlockCommand";
Sezam/AGAutoUnlockManager.h:88:#define AG_DIARY_CATEGORY_AUTO_UNLOCK    @"AutoUnlock"
Sezam/AGButton.m:33:    if ([type isEqualToString:@"Primary"]) {
Sezam/AGButton.m:37:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:39:    } else if ([type isEqualToString:@"Secondary"]) {
Sezam/AGButton.m:43:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:47:    } else if ([type isEqualToString:@"Inactive"]) {
Sezam/AGButton.m:51:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:53:    } else if ([type isEqualToString:@"Tertiary"]) {
Sezam/AGButton.m:57:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:60:    } else if ([type isEqualToString:@"Destructive Primary"]) {
Sezam/AGButton.m:64:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:66:    } else if ([type isEqualToString:@"Destructive Secondary"]) {
Sezam/AGButton.m:70:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:74:    } else if ([type isEqualToString:@"Onboard_Setup"]) {
Sezam/AGButton.m:78:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:82:    } else if ([type isEqualToString:@"Onboard_Secondary"]) {
Sezam/AGButton.m:86:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:88:    } else if ([type isEqualToString:@"Onboard_Skip"]) {
Sezam/AGButton.m:92:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:96:    } else if ([type isEqualToString:@"TealWithWhiteBorder"]) {
Sezam/AGButton.m:100:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:104:    } else if ([type isEqualToString:@"WhiteWithTealLettersAndNoBorder"]) {
Sezam/AGButton.m:108:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:121:    if ([self.size isEqualToString:@"Standard"]) {
Sezam/AGButton.m:123:    } else if ([self.size isEqualToString:@"Small"]) {
Sezam/AGButton.m:125:    } else if ([self.size isEqualToString:@"SmallAndShort"]) {
Sezam/AGButton.m:127:    } else if ([self.size isEqualToString:@"Tiny"]) {
Sezam/AGCircularGeoRegion.m:27:    return @[@"center"];
Sezam/AGAccountCreatedViewController.m:36:    [[self userName] setText: [NSString stringWithFormat:@"%@ %@",self.theUser.firstName,self.theUser.lastName]];
Sezam/AGAccountCreatedViewController.m:38:    if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"])
Sezam/AGAccountCreatedViewController.m:41:        formatedNumber = [NSString stringWithFormat:@"(%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGAccountCreatedViewController.m:42:        [[self userPhone] setText: [NSString stringWithFormat: @"+1 %@", formatedNumber]];
Sezam/AGAccountCreatedViewController.m:44:        [[self userPhone] setText: [NSString stringWithFormat: @"%@", formatedNumber]];
Sezam/AGAccountCreatedViewController.m:50:        user.objectId = @"me";
Sezam/AGAccountCreatedViewController.m:74:        if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGOnboardingChecklistViewController"]) {
Sezam/AGAccountCreatedViewController.m:76:        } else if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGTristepOnboardingChecklistViewController"]) {
Sezam/AGDisconnectFromZWaveViewController.m:15:static NSString* kAGDiaryCategory = @"ZWaveDisconnect";
Sezam/AGDisconnectFromZWaveViewController.m:75:            AGDiaryDebug(@"SetInactivity", @"Set inactivity timeout to %@", inactivityTimeoutValue);
Sezam/AGDisconnectFromZWaveViewController.m:77:            AGDiaryDebug(@"SetInactivity", @"Error setting inactivity timeout to %@", inactivityTimeoutValue);
Sezam/AGDisconnectFromZWaveViewController.m:112:    AGDiaryDebug(@"AppResigned", @"App will be minimized");
Sezam/AGDisconnectFromZWaveViewController.m:121:    AGDiaryDebug(@"AppActive", @"App reactivated");
Sezam/AGDisconnectFromZWaveViewController.m:194:    UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Reset Z-Wave device?" message:@"Only choose this option if your hub is no longer in use." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:195:    [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDisconnectFromZWaveViewController.m:196:    [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"Reset" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * action) {
Sezam/AGDisconnectFromZWaveViewController.m:212:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:213:                AGDiaryWarn(@"DisablingZWave", @"Error putting ZWave into Learn Mode for Exclusion");
Sezam/AGDisconnectFromZWaveViewController.m:234:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:235:                AGDiaryWarn(@"DisablingZWave", @"Error putting Resetting ZWave");
Sezam/AGDisconnectFromZWaveViewController.m:254:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:255:                AGDiaryWarn(@"DisablingZWave", @"Error removing ZWave from network status Timer response");
Sezam/AGDisconnectFromZWaveViewController.m:260:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGDisconnectFromZWaveViewController.m:261:                    self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGDisconnectFromZWaveViewController.m:265:                        AGDiaryWarn(@"DisablingZWave", @"Error removing ZWave from network status Timer - Timed Out");
Sezam/AGDisconnectFromZWaveViewController.m:293:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:294:                AGDiaryWarn(@"DisablingZWave", @"Error Disabling ZWave");
Sezam/AGDisconnectFromZWaveViewController.m:307:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"ZWave Error" message:@"Unable to Disable ZWave. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:308:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDisconnectFromZWaveViewController.m:319:    AGDiaryDebug(@"zWaveDebug", @"zWave disconnect success!");
Sezam/AGDisconnectFromZWaveViewController.m:330:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Reset Successful"
Sezam/AGDisconnectFromZWaveViewController.m:331:                                                                       message:@"Your lock's Z-Wave connection has been reset, and has been removed from the hub." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:333:        [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
Sezam/AGSetupOTAViewController.m:22:static NSString* kAGFirstBadLockFirmwareVersion = @"2.1.0";      // 2.1 and above is Jupiter
Sezam/AGSetupOTAViewController.m:23:static NSString* kAGLastBadLockFirmwareVersion = @"2.1.50";      // After this version (or around there) the lock has problems fixed
Sezam/AGSetupOTAViewController.m:27:static NSString* kAGDiaryCategory = @"SetupOTA";
Sezam/AGSetupOTAViewController.m:103:    self.stringsArray = @[@"Issue instant keys to anyone–wherever you are. Go to the Guest List and press the invite button to get started.",
Sezam/AGSetupOTAViewController.m:104:                          @"Auto-Lock will automatically re-lock your door behind you when you leave home. Go to lock settings to turn this feature on.",
Sezam/AGSetupOTAViewController.m:105:                          @"With Auto-Unlock your door will automatically unlock when you arrive home. Go to lock settings to turn this feature on.",
Sezam/AGSetupOTAViewController.m:106:                          @"Visit August Access to integrate your lock with Nest, Airbnb, Amazon Alexa, IFTTT, Logitech Harmony, Wink, and more."];
Sezam/AGSetupOTAViewController.m:110:        [imageArray addObject:[UIImage imageNamed:[NSString stringWithFormat:@"LockSetupTutorial_%d", i]]];
Sezam/AGSetupOTAViewController.m:115:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize],[NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"Setup OTA Style"] forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style"]];
Sezam/AGSetupOTAViewController.m:126:    AGDiaryInfo(@"StartSetupOTA", @"Starting post-setup OTA");
Sezam/AGSetupOTAViewController.m:128:    self.statusLabel.text = NSLocalizedString(@"Scanning for Smart Lock...",nil);
Sezam/AGSetupOTAViewController.m:166:        self.statusLabel.text = NSLocalizedString(@"Connection lost. Reconnecting...",nil);
Sezam/AGSetupOTAViewController.m:174:    AGDiaryInfo(@"ConnectedToLock", @"Connected to lock '%@'", lockUUID);
Sezam/AGSetupOTAViewController.m:176:    self.statusLabel.text = NSLocalizedString(@"Checking firmware version...",nil);
Sezam/AGSetupOTAViewController.m:192:                AGDiaryInfo(@"OTAError", @"Unable to Determine Lock Type");
Sezam/AGSetupOTAViewController.m:201:    if ([message isEqualToString:@"LOCK IN USE"]) {
Sezam/AGSetupOTAViewController.m:202:        self.statusLabel.text = @"Lock In Use";
Sezam/AGSetupOTAViewController.m:207:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGSetupOTAViewController.m:209:        NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
Sezam/AGSetupOTAViewController.m:210:        if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
Sezam/AGSetupOTAViewController.m:213:            errorStr = [NSString stringWithFormat:NSLocalizedString(@"Not authorized to use this lock.\ncode: %ld",nil), (long)error.code];
Sezam/AGSetupOTAViewController.m:215:        AGDiaryInfo(@"LockSecurityError", @"Lock Security error '%@'", errorStr);
Sezam/AGSetupOTAViewController.m:221:    AGDiaryDebug(@"SOSAlert", @"Showing that lock is probably incompatible with iPhone 7");
Sezam/AGSetupOTAViewController.m:222:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Device Update Needed" message:@"This iPhone's OS is not compatible for Lock Setup.\n\n Please visit the Settings app and go to the General section to update your OS. After the update you will need to set up the lock again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGSetupOTAViewController.m:228:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGSetupOTAViewController.m:236:    AGDiaryDebug(@"ConnectionTmeout", @"Timed out connecting to lock ");
Sezam/AGSetupOTAViewController.m:238:    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Cannot Connect to Lock", nil) message:NSLocalizedString(@"Setup can only be completed if you are in bluetooth range of the lock. Place your phone near your lock and try again.", nil) delegate:nil cancelButtonTitle:nil otherButtonTitles:@"Ok", nil];
Sezam/AGSetupOTAViewController.m:244:    AGDiaryDebug(@"GettingFirmwareInfo", @"Stopping any active OTA and getting firmware info.");
Sezam/AGSetupOTAViewController.m:259:    if ([self.agLock.lockCapability.onboardCPUs containsObject:@"arm"] || [self.agLock.lockCapability.onboardCPUs containsObject:@"st"]) {
Sezam/AGSetupOTAViewController.m:270:        NSString *firmwareVersionSecondTriplet = @"undefined";
Sezam/AGSetupOTAViewController.m:275:            NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@",self.armGitHash, firmwareVersionSecondTriplet, bleFirmwareVersion];
Sezam/AGSetupOTAViewController.m:293:                    AGDiaryDebug(@"SetInactivity", @"Set inactivity timeout to 10 minutes");
Sezam/AGSetupOTAViewController.m:295:                    AGDiaryDebug(@"SetInactivity", @"Error setting inactivity timeout to 10 minutes");
Sezam/AGSetupOTAViewController.m:308:        AGDiaryDebug(@"SOSALertClick", @"User has closed the SOS alert. Resetting lock");
Sezam/AGSetupOTAViewController.m:317:    AGDiaryDebug(@"OTANetworkError", @"We had an OTA problem connecting to the network to find out if we have new firmware");
Sezam/AGSetupOTAViewController.m:320:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Network Error" message:@"We had a network error. Please check your internet connectivity and try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGSetupOTAViewController.m:341:        AGDiaryDebug(@"OTADone", @"Finished OTA for '%@', chip: %@, checking again", lock, self.currentUpdatingChip);
Sezam/AGSetupOTAViewController.m:347:            NSString *fwUpdateFilePath = [[NSBundle mainBundle] pathForResource:@"jupiter-bcm-2.0.9.ota.bin" ofType:@"signed"];
Sezam/AGSetupOTAViewController.m:349:            self.currentUpdatingChip = @"bcm";
Sezam/AGSetupOTAViewController.m:352:            AGDiaryDebug(@"OTAStart", @"Starting OTA for '%@', chip: %@", lock, self.currentUpdatingChip);
Sezam/AGSetupOTAViewController.m:371:                    NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGSetupOTAViewController.m:372:                    if ((updateInfoArray.count > 0) && ([[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"] == false)) {
Sezam/AGSetupOTAViewController.m:373:                        AGDiaryInfo(@"NeedToUpdateFirmware", [NSString stringWithFormat:@"%lu chip(s) need to be updated", (unsigned long)updateInfoArray.count]);
Sezam/AGSetupOTAViewController.m:381:                        NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGSetupOTAViewController.m:391:                         if ([self.currentUpdatingChip isEqualToString:@"sd"] && self.isZWaveEnabled == NO) {
Sezam/AGSetupOTAViewController.m:393:                         } else if ([self.currentUpdatingChip isEqualToString:@"yale"]){
Sezam/AGSetupOTAViewController.m:397:                             NSString *version = [updateInfoDict objectForKey:@"version"];
Sezam/AGSetupOTAViewController.m:412:                                     AGDiaryDebug(@"OTAStart", @"Starting OTA for '%@', chip: %@", lock, self.currentUpdatingChip);
Sezam/AGSetupOTAViewController.m:418:                                     [[NSUserDefaults standardUserDefaults] setBool:YES forKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGSetupOTAViewController.m:440:    if ([self.currentUpdatingChip isEqualToString:@"st"]) {
Sezam/AGSetupOTAViewController.m:442:        AGDiaryDebug(@"OTAProgramInitiate", @"Initiate OTA program of the TI chip per user input");
Sezam/AGSetupOTAViewController.m:448:    AGDiaryDebug(@"OTAProgramStart", @"OTA program start");
Sezam/AGSetupOTAViewController.m:449:    if (([self.currentUpdatingChip isEqualToString:@"ti"]) || ([self.currentUpdatingChip isEqualToString:@"bcm"]) || ([self.currentUpdatingChip isEqualToString:@"st"])  || ([self.currentUpdatingChip isEqualToString:@"arm"])) {
Sezam/AGSetupOTAViewController.m:474:    self.pullBatteriesAlertController = [UIAlertController alertControllerWithTitle:@"Please Remove + Re-Insert Your Lock Batteries"
Sezam/AGSetupOTAViewController.m:475:                                                                            message:@"Please remove two of the batteries from your lock, then put them back in. This will reset the power on your lock and complete the update."
Sezam/AGSetupOTAViewController.m:478:    [self.pullBatteriesAlertController addAction:[UIAlertAction actionWithTitle:@"Ok, I’ve Re-Inserted the Batteries"
Sezam/AGSetupOTAViewController.m:499:    self.statusLabel.text = [NSString stringWithFormat:@"Updating Lock Firmware (%lu%%)", (unsigned long)percentageOfTotalUpdates];
Sezam/AGSetupOTAViewController.m:532:                AGDiaryDebug(@"SetInactivity", @"Restored inactivity timeout to %d", timeout);
Sezam/AGSetupOTAViewController.m:534:                AGDiaryDebug(@"SetInactivity", @"Error restoring inactivity timeout");
Sezam/AGSetupOTAViewController.m:550:                AGDiaryDebug(@"ResetBLEReboot", @"Turned off BCM rebooting");
Sezam/AGSetupOTAViewController.m:552:                AGDiaryDebug(@"ResetBLERebootError", @"Error turning off BCM rebooting");
Sezam/AGSetupOTAViewController.m:566:    AGDiaryInfo(@"NoFirmwareUpdate", @"No Firmware To Update");
Sezam/AGSetupOTAViewController.m:568:    [[NSUserDefaults standardUserDefaults] removeObjectForKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGSetupOTAViewController.m:578:            if ([bcmVersion isGreaterThan:[EDSemver semverWithString:@"2.1.74"]]) {
Sezam/AGSetupOTAViewController.m:593:    self.statusLabel.text = @"Lock is Connected.";
Sezam/AGSetupOTAViewController.m:598:        NSString *otaMessage = @"The August app is installing an important update to your lock. \n\nTo complete this update as quickly as possible, please leave your phone near the lock with the app running. This will take several minutes.\n\nSetup will resume once the update is complete.";
Sezam/AGSetupOTAViewController.m:600:        self.otaUpdateProgressAlertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Lock Update In Progress", nil)
Sezam/AGSetupOTAViewController.m:604:        [self.otaUpdateProgressAlertController addAction:[UIAlertAction actionWithTitle:NSLocalizedString(@"OK", nil)
Sezam/AGSetupOTAViewController.m:629://        [self performSegueWithIdentifier:@"setupOTAToLockAndDoorCalibration" sender:nil];
Sezam/AGSetupOTAViewController.m:631:        UIStoryboard *settingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGSetupOTAViewController.m:632:        AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = [settingsStoryboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGSetupOTAViewController.m:642:        [self performSegueWithIdentifier:@"setupOTAToManualCalibrate" sender:nil];
Sezam/AGSetupOTAViewController.m:652:    if ([segue.identifier isEqualToString:@"setupOTAToManualCalibrate"]) {
Sezam/AGNameLockViewController.m:23:    NSString *nameFromHomeKitSetup = [dictFromHomeKitSetup objectForKey:@"lock"];
Sezam/AGNameLockViewController.m:28:        [[self lockLocationTextField] setText:NSLocalizedString(@"Front Door",nil)];
Sezam/AGNameLockViewController.m:39:    [self performSegueWithIdentifier:@"LockSetupNameLockToSelectHouse" sender:nil];
Sezam/AGNameLockViewController.m:48:    if([segue.identifier isEqualToString:@"LockSetupNameLockToSelectHouse"])
Sezam/AGAugustAccessDetailViewController.m:39:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Page %@", self.partner.name] attributes:@{}];
Sezam/AGAugustAccessDetailViewController.m:50:    NSString *whatIsText = [NSString stringWithFormat:@"What is %@?", _partner.name];
Sezam/AGAugustAccessDetailViewController.m:76:    NSString *signUpText = [NSString stringWithFormat:@"Sign up for %@", _partner.name];
Sezam/AGAugustAccessDetailViewController.m:79:    NSString *locationsText = [NSString stringWithFormat:@"Available: %@", _partner.locations];
Sezam/AGAugustAccessDetailViewController.m:85:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Get More Info %@", self.partner.name] attributes:@{@"Promotion":self.partner.promotion}];
Sezam/AGAugustAccessDetailViewController.m:94:    if ([segue.identifier isEqualToString:@"PartnerDetailToNotifyMe"]) {
Sezam/AGMQTTClient.m:25:static NSString* kAGDiaryCategory = @"AGMQTTClient";
Sezam/AGMQTTClient.m:70:    AGDiaryInfo(@"MQTTClient", @"ResettingSubscribers");
Sezam/AGMQTTClient.m:95:                AGDiaryInfo(@"MQTTClientSubscription",@"Subscription failed %@ for Topic: %@", error.localizedDescription, topic);
Sezam/AGMQTTClient.m:97:                AGDiaryInfo(@"MQTTClientSubscription",@"Subscription successfull for Topic: %@ Granted Qos: %@", topic, gQoss);
Sezam/AGKeypadDisconnectViewController.m:15:static NSString* kAGDiaryCategory = @"KeypadDisconnect";
Sezam/AGKeypadDisconnectViewController.m:63:        self.resetCodeLabel2WithCode.text = @"UNKNOWN";
Sezam/AGKeypadDisconnectViewController.m:73:        [self.backlightBlinkingButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGKeypadDisconnectViewController.m:91:    [AGUtility showError:@"There was a network problem removing this keypad" inViewController:self];
Sezam/AGKeypadDisconnectViewController.m:95:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting Keypad From Lock..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGKeypadDisconnectViewController.m:98:    AGDiaryInfo(@"DisassociatingKeypad", @"Disconnecting %@", self.agLock.associatedKeypad.serialNumber);
Sezam/AGKeypadDisconnectViewController.m:100:        AGDiaryInfo(@"GotResetCode", @"Got reset code %@", resetCode);
Sezam/AGKeypadDisconnectViewController.m:106:                AGDiaryInfo(@"DissociationSucceded", @"Got a success response");
Sezam/AGKeypadDisconnectViewController.m:108:                    [[NSUserDefaults standardUserDefaults] setObject:resetCode forKey:@"LastKeypadResetCode"];
Sezam/AGKeypadDisconnectViewController.m:112:                    AGDiaryInfo(@"RefreshedLock", @"Refreshed Lock to remove offline key");
Sezam/AGKeypadDisconnectViewController.m:115:                        self.clearingAlertView = [[UIAlertView alloc] initWithTitle:@"Clearing Entry Codes From Lock" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGKeypadDisconnectViewController.m:124:                AGDiaryInfo(@"DissociationFailed", @"An error occurred");
Sezam/AGKeypadDisconnectViewController.m:133:    AGDiaryInfo(@"ClearLockOffKeypadDone", @"Success: %@", [NSNumber numberWithBool:isSuccess]);
Sezam/AGKeypadDisconnectViewController.m:146:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Not Connected", nil) message:NSLocalizedString(@"We had trouble connecting to the lock to as part of the Keypad disconnect process. This portion will be completed the next time your device connects to the lock.", nil) delegate:nil cancelButtonTitle:NSLocalizedString(@"Ok", nil) otherButtonTitles: nil];
Sezam/AGAutoUnlockUtility.m:23:#define kAGDiaryCategory @"BlueSteelAutoUnlock"
Sezam/AGAutoUnlockUtility.m:73:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:74:                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:75:                                                                             @"au_cancel_type":@"LockCannotBeFoundInAppCache",
Sezam/AGAutoUnlockUtility.m:76:                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:77:                                                                             @"au_info": @{
Sezam/AGAutoUnlockUtility.m:78:                                                                                     @"lock_version":[AGUtility modelVersionForLockID:curLockID]
Sezam/AGAutoUnlockUtility.m:81:            AGDiaryInfo(@"AutoUnlockSetToHomeModeBecauseTheLockIsNoLongerCachedOnTheDevice",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:82:            [curAutoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock disabled"} identifier:@"AutoUnlockSetToHomeModeBecauseTheLockIsNoLongerCachedOnTheDevice"]];
Sezam/AGAutoUnlockUtility.m:98:                AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:99:                                                                                 @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:100:                                                                                 @"au_cancel_type":@"LogOut",
Sezam/AGAutoUnlockUtility.m:101:                                                                                 @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:102:                                                                                 @"au_info": @{
Sezam/AGAutoUnlockUtility.m:103:                                                                                         @"lock_version":[AGUtility modelVersionForLockID:curLock.objectId]
Sezam/AGAutoUnlockUtility.m:106:                AGDiaryInfo(@"AutoUnlockCancelledBecauseUserLoggedOut",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:112:                AGDiaryInfo(@"AutoUnlockDisabledBecauseUserLoggedOut",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:113:                [curAutoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock disabled because you signed out"} identifier:@"AutoUnlockSetToHomeModeBecauseUserLoggedOut"]];
Sezam/AGAutoUnlockUtility.m:118:    NSUserDefaults *defaults = [[NSUserDefaults alloc] initWithSuiteName:@"cross_logout_defaults"];
Sezam/AGAutoUnlockUtility.m:119:    [defaults setObject:@(YES) forKey:@"AutoUnlockDidLogOut"];
Sezam/AGAutoUnlockUtility.m:131:                AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:132:                                                                                 @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:133:                                                                                 @"au_cancel_type":@"AlwaysLocationPermissionDenied",
Sezam/AGAutoUnlockUtility.m:134:                                                                                 @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:135:                                                                                 @"au_info": @{
Sezam/AGAutoUnlockUtility.m:136:                                                                                         @"lock_version":[AGUtility modelVersionForLockID:curLock.objectId]
Sezam/AGAutoUnlockUtility.m:139:                AGDiaryInfo(@"AutoUnlockCancelledBecauseAlwaysLocationPermissionDenied",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:143:                AGDiaryInfo(@"AutoUnlockDisabledBecauseAlwaysLocationPermissionDenied",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:144:                AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockUtility.m:145:                                                                               @"au_source":@"AutoUnlockLocationPermissionPrompt",
Sezam/AGAutoUnlockUtility.m:146:                                                                               @"au_info":@{@"enabled":@(NO)}
Sezam/AGAutoUnlockUtility.m:148:                [curAutoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock disabled because “Always” location permission was not granted"} identifier:@"AutoUnlockDisabledBecauseUserDeniedAlwaysLocationPermission"]];
Sezam/AGAutoUnlockUtility.m:179:                AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:180:                                                                                 @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:181:                                                                                 @"au_cancel_type":@"AnotherDoorUnlocked",
Sezam/AGAutoUnlockUtility.m:182:                                                                                 @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:183:                                                                                 @"au_info": @{
Sezam/AGAutoUnlockUtility.m:184:                                                                                         @"lock_version":[AGUtility modelVersionForLockID:curLock.objectId]
Sezam/AGAutoUnlockUtility.m:187:                AGDiaryInfo(@"AutoUnlockSetToHomeModeBecauseAnotheLockInSameHouseWasUnlocked",@"lockid: %@", curLock.objectId);
Sezam/AGAutoUnlockUtility.m:188:                [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Home mode because another door in the same house was unlocked"} identifier:@"AutoUnlockSetToHomeModeBecauseAnotheLockInSameHouseWasUnlocked"]];
Sezam/AGAutoUnlockUtility.m:202:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:203:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:204:                                                                         @"au_cancel_type":@"ManualBLEOperationAttempted",
Sezam/AGAutoUnlockUtility.m:205:                                                                         @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:206:                                                                         @"au_info": @{
Sezam/AGAutoUnlockUtility.m:207:                                                                                 @"lock_version":[AGUtility modelVersionForLockID:lock.objectId]
Sezam/AGAutoUnlockUtility.m:210:        AGDiaryInfo(@"AutoUnlockSetToHomeModeBecauseManualOperationAttempted",@"lockid: %@", lock.objectId);
Sezam/AGAutoUnlockUtility.m:211:        [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Home mode because you unlocked the door with the app"} identifier:@"AutoUnlockSetToHomeModeBecauseManualOperationAttempted"]];
Sezam/AGAutoUnlockUtility.m:224:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockUtility.m:225:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockUtility.m:226:                                                                         @"au_cancel_type":@"LockFactoryReset",
Sezam/AGAutoUnlockUtility.m:227:                                                                         @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlockUtility.m:228:                                                                         @"au_info": @{
Sezam/AGAutoUnlockUtility.m:229:                                                                                 @"lock_version":[AGUtility modelVersionForLockID:lock.objectId]
Sezam/AGAutoUnlockUtility.m:232:        AGDiaryInfo(@"AutoUnlockCancelledBecauseLockFactoryReset",@"lockid: %@", lock.objectId);
Sezam/AGAutoUnlockUtility.m:274:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockUtility.m:305:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockUtility.m:307:    double latitude = [[coordinateDict objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockUtility.m:308:    double longitude = [[coordinateDict objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockUtility.m:318:    AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockUtility.m:319:                                                                   @"au_source":@"AutoUnlockMigration",
Sezam/AGAutoUnlockUtility.m:320:                                                                   @"au_info":@{@"enabled":@(YES)}
Sezam/AGAutoUnlockUtility.m:323:    AGDiaryInfo(@"AutoUnlockMigrationCompleted",@"lockid:%@", lock.objectId);
Sezam/AGAutoUnlockUtility.m:324:    [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Welcome to the new Auto-Unlock"} identifier:@"AutoUnlockMigrationCompleted"]];
Sezam/AGAutoUnlockUtility.m:326:    NSString *uuid = [coordinateDict objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockUtility.m:327:    NSDictionary *exitRegionEventDetails = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockUtility.m:334:        AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockUtility.m:335:                                                                        @"au_source":@"AutoUnlockMigration",
Sezam/AGAutoUnlockUtility.m:336:                                                                        @"au_initiation_type":@"LegacyExitRecordExisted"
Sezam/AGAutoUnlockUtility.m:339:        [autoUnlocker.eventLogger addEvent:[AGLogEvent eventWithDate:[NSDate date] userInfo:@{@"description":@"Auto-Unlock set to Away mode during Auto-Unlock upgrade"} identifier:@"AutoUnlockMigrationSetToAwayMode"]];
Sezam/AGAutoUnlockUtility.m:355:                AGDiaryInfo(@"AutoUnlockEventTaskExtension",@"Task extension ended normally");
Sezam/AGAutoUnlockUtility.m:357:                AGDiaryInfo(@"AutoUnlockEventTaskExtension",@"Task extension ended prematuraly");
Sezam/AGAutoUnlockUtility.m:359:                AGDiaryInfo(@"AutoUnlockEventTaskExtension",@"Task extension ended cancelled");
Sezam/AGAutoUnlockUtility.m:362:        AGDiaryInfo(@"AutoUnlockEventTaskExtension",@"Starting app launch task extension");
Sezam/AGAutoUnlockUtility.m:369:    BOOL disableDelayedGeoRegionVerifier = [AGFeatureManager enabled:@"AutoUnlockDisableDelayedGeoRegionVerifier"];
Sezam/AGAutoUnlockUtility.m:385:    BOOL disableEntranceFenceDetection = [AGFeatureManager enabled:@"AutoUnlockDisableEntranceFenceDetection"];
Sezam/AGAutoUnlockUtility.m:393:    BOOL disableForceQuitDetection = [AGFeatureManager enabled:@"AutoUnlockDisableForceQuitDetection"];
Sezam/AGAutoUnlockUtility.m:401:    BOOL disableRebootDetection = [AGFeatureManager enabled:@"AutoUnlockDisableRebootDetection"];
Sezam/AGAutoUnlockUtility.m:409:    BOOL disableUnlockDirectConnection = [AGFeatureManager enabled:@"AutoUnlockDisableUnlockDirectConnection"];
Sezam/AGAutoUnlockUtility.m:417:    BOOL disableTaskExtension = [AGFeatureManager enabled:@"DisableExtendAutoUnlockAppLaunches"];
Sezam/AGAutoUnlockUtility.m:426:    BOOL shouldDisable = [AGFeatureManager enabled:@"AutoUnlockDisableLocationBackgroundModeForVerification"];
Sezam/AGAutoUnlockUtility.m:434:    BOOL shouldDisable = [AGFeatureManager enabled:@"AutoUnlockDisableRestartConnectionAttemptOnGeofenceEntrance"];
Sezam/AGAutoUnlockUtility.m:444:    BOOL shouldDisable = [AGFeatureManager enabled:@"AutoUnlockDisableAwayModeInHomeRegionTooLongTracking"];
Sezam/AGAutoUnlockUtility.m:452:    NSNumber *durationNum = [AGUtility getAppFeatureNumber:@"AutoUnlockMaxValidAwayModeInHomeRegionDuration"];
Sezam/AGAutoUnlockUtility.m:463:    NSUserDefaults *defaults = [[NSUserDefaults alloc] initWithSuiteName:@"cross_logout_defaults"];
Sezam/AGAutoUnlockUtility.m:464:    NSNumber *didLogOut = [defaults objectForKey:@"AutoUnlockDidLogOut"];
Sezam/AGAutoUnlockUtility.m:467:        [defaults setObject:@(NO) forKey:@"AutoUnlockDidLogOut"];
Sezam/AGAutoUnlockUtility.m:474:    NSNumber *radiusNum = [AGUtility getAppFeatureNumber:@"HomeLocationRadius"];
Sezam/AGAutoUnlockUtility.m:484:    BOOL shouldUseFeatureFlagUnlockDuration = [AGFeatureManager enabled:@"CustomAutoUnlockUnlockDuration"];
Sezam/AGAutoUnlockUtility.m:486:        NSNumber *unlockDurationNum = [AGUtility getAppFeatureNumber:@"ABAutoUnlockUnlockDuration"];
Sezam/AGUnityModuleStateView.m:42:            [_confirmRegisteredBtn setTitle:@"MY LOCK HAS RESTARTED" forState:UIControlStateNormal];
Sezam/AGUnityModuleStateView.m:47:            [_confirmRegisteredBtn setTitle:@"MODULE IS REGISTERED" forState:UIControlStateNormal];
Sezam/AGDoorbellVideoQualityViewController.m:63:    cell =  [tableView dequeueReusableCellWithIdentifier:@"VideoResolutionCell"];
Sezam/AGDoorbellVideoQualityViewController.m:68:        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"check_v2"]];
Sezam/AGDoorbellVideoQualityViewController.m:109:    self.progressAlertView = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"Updating Video Resolution...",nil) message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGDoorbellVideoQualityViewController.m:118:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Video Resolution" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGLicenseAgreeViewController.m:48:        self.subtitleLabel.text = @"Let's get you set up with an August account.";
Sezam/AGLicenseAgreeViewController.m:49:        self.infoLabel.text = @"I agree to the ";
Sezam/AGLicenseAgreeViewController.m:57:        self.subtitleLabel.text = @"We've recently updated our terms of service. Please take a look.";
Sezam/AGLicenseAgreeViewController.m:58:        self.infoLabel.text = @"I agree to the ";
Sezam/AGLicenseAgreeViewController.m:83:        [self performSegueWithIdentifier:@"LicenseAgreeToCreateAccount" sender:nil];
Sezam/AGLicenseAgreeViewController.m:107:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/privacy-policy/"]];
Sezam/AGLicenseAgreeViewController.m:111:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/terms-of-service/"]];
Sezam/AGLicenseAgreeViewController.m:115:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/end-user-license-agreement/"]];
Sezam/AGLicenseAgreeViewController.m:130:    if ([segue.identifier isEqualToString:@"LicenseAgreeToCreateAccount"]) {
RSKImageCropper/RSKImageCropViewController.m:270:        _moveAndScaleLabel.text = @"Move and Scale";
RSKImageCropper/RSKImageCropViewController.m:282:        [_cancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
RSKImageCropper/RSKImageCropViewController.m:294:        [_chooseButton setTitle:@"Choose" forState:UIControlStateNormal];
RSKImageCropper/RSKImageCropViewController.m:330:        CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:@"path"];
RSKImageCropper/RSKImageCropViewController.m:333:        [self.maskLayer addAnimation:pathAnimation forKey:@"path"];
