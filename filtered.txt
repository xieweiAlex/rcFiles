AGLoginKeyboardAccessoryView.m:40:    self.phoneButton.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Light" size:13];
AGLoginKeyboardAccessoryView.m:48:    self.emailButton.titleLabel.font = [UIFont fontWithName:@"HelveticaNeue-Light" size:13];
August Today/AGMiniLockTableTestHostController.m:51:    self.lockTableController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockTableController"];
August Today/AGMiniLockTableTestHostController.m:67:    lock1.houseName = @"House 1";
August Today/AGMiniLockTableTestHostController.m:68:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:70:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockTableTestHostController.m:71:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:74:    lock2.houseName = @"House 2";
August Today/AGMiniLockTableTestHostController.m:75:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:77:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockTableTestHostController.m:78:    lock2.lockID = @"lock2";
August Today/AGMiniLockTableTestHostController.m:81:    lock3.houseName = @"House 3";
August Today/AGMiniLockTableTestHostController.m:82:    lock3.houseID = @"house3";
August Today/AGMiniLockTableTestHostController.m:84:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockTableTestHostController.m:85:    lock3.lockID = @"lock3";
August Today/AGMiniLockTableTestHostController.m:88:    lock4.houseName = @"House 4";
August Today/AGMiniLockTableTestHostController.m:89:    lock4.houseID = @"house4";
August Today/AGMiniLockTableTestHostController.m:91:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockTableTestHostController.m:92:    lock4.lockID = @"lock4";
August Today/AGMiniLockTableTestHostController.m:95:    lock5.houseName = @"House 5";
August Today/AGMiniLockTableTestHostController.m:96:    lock5.houseID = @"house5";
August Today/AGMiniLockTableTestHostController.m:98:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockTableTestHostController.m:99:    lock5.lockID = @"lock5";
August Today/AGMiniLockTableTestHostController.m:106:    lock1.houseName = @"House 1";
August Today/AGMiniLockTableTestHostController.m:107:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:109:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockTableTestHostController.m:110:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:113:    lock2.houseName = @"House 2";
August Today/AGMiniLockTableTestHostController.m:114:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:116:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockTableTestHostController.m:117:    lock2.lockID = @"lock2";
August Today/AGMiniLockTableTestHostController.m:124:    lock1.houseName = @"A long house name";
August Today/AGMiniLockTableTestHostController.m:125:    lock1.houseID = @"house1";
August Today/AGMiniLockTableTestHostController.m:127:    lock1.lockName = @"A long lock name";
August Today/AGMiniLockTableTestHostController.m:128:    lock1.lockID = @"lock1";
August Today/AGMiniLockTableTestHostController.m:131:    lock2.houseName = @"A very very long house name";
August Today/AGMiniLockTableTestHostController.m:132:    lock2.houseID = @"house2";
August Today/AGMiniLockTableTestHostController.m:134:    lock2.lockName = @"A very very long lock name";
August Today/AGMiniLockTableTestHostController.m:135:    lock2.lockID = @"lock2";
August Today/AGWidgetBLELockConnectionFactory.m:41:        logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message?:@""];
August Today/AGWidgetBLELockConnectionFactory.m:43:        logMessage = [NSString stringWithFormat:@"[%@] %@", event, message?:@""];
August Today/AGWidgetLockActionHandler.m:24:    NSString *action = @"lock";
August Today/AGWidgetLockActionHandler.m:25:    NSURL *performLockURL = [NSURL URLWithString: [NSString stringWithFormat:@"AugustHome://action/%@?lockid=%@&lockname=%@&houseid=%@&v=%@",
August Today/AGWidgetLockActionHandler.m:37:    NSString *action = @"unlock";
August Today/AGWidgetLockActionHandler.m:38:    NSURL *performLockURL = [NSURL URLWithString: [NSString stringWithFormat:@"AugustHome://action/%@?lockid=%@&lockname=%@&houseid=%@&v=%@",
August Today/AGLockWidgetContainerController.m:85:    self.errorController.errorText = @"Open the August app to setup your locks.";
August Today/AGLockWidgetContainerController.m:111:    NCWidgetDisplayMode widgetDisplayMode = (NCWidgetDisplayMode)[((NSNumber *)[notification.userInfo objectForKey:@"activeDisplayMode"]) integerValue];
August Today/AGLockWidgetContainerController.m:122:        _lockSettingsController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockSettingsController"];
August Today/AGLockWidgetContainerController.m:130:        _lockTableController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockTableController"];
August Today/AGLockWidgetContainerController.m:139:        _errorController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGWidgetErrorViewController"];
August Today/AGMiniLockSettingsTestHostController.m:42:    self.settingsController = [[UIStoryboard storyboardWithName:@"LockWidget" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGMiniLockSettingsController"];
August Today/AGMiniLockSettingsTestHostController.m:78:    lock1.houseName = @"House 1";
August Today/AGMiniLockSettingsTestHostController.m:79:    lock1.houseID = @"house1";
August Today/AGMiniLockSettingsTestHostController.m:81:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockSettingsTestHostController.m:82:    lock1.lockID = @"lock1";
August Today/AGMiniLockSettingsTestHostController.m:85:    lock2.houseName = @"House 2";
August Today/AGMiniLockSettingsTestHostController.m:86:    lock2.houseID = @"house2";
August Today/AGMiniLockSettingsTestHostController.m:88:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockSettingsTestHostController.m:89:    lock2.lockID = @"lock2";
August Today/AGMiniLockSettingsTestHostController.m:92:    lock3.houseName = @"House 3";
August Today/AGMiniLockSettingsTestHostController.m:93:    lock3.houseID = @"house3";
August Today/AGMiniLockSettingsTestHostController.m:95:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockSettingsTestHostController.m:96:    lock3.lockID = @"lock3";
August Today/AGMiniLockSettingsTestHostController.m:99:    lock4.houseName = @"House 4";
August Today/AGMiniLockSettingsTestHostController.m:100:    lock4.houseID = @"house4";
August Today/AGMiniLockSettingsTestHostController.m:102:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockSettingsTestHostController.m:103:    lock4.lockID = @"lock4";
August Today/AGMiniLockSettingsTestHostController.m:106:    lock5.houseName = @"House 5";
August Today/AGMiniLockSettingsTestHostController.m:107:    lock5.houseID = @"house5";
August Today/AGMiniLockSettingsTestHostController.m:109:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockSettingsTestHostController.m:110:    lock5.lockID = @"lock5";
August Today/AGMiniLockSettingsTestHostController.m:117:    lock1.houseName = @"House 1";
August Today/AGMiniLockSettingsTestHostController.m:118:    lock1.houseID = @"house1";
August Today/AGMiniLockSettingsTestHostController.m:120:    lock1.lockName = @"Lock 1";
August Today/AGMiniLockSettingsTestHostController.m:121:    lock1.lockID = @"lock1";
August Today/AGMiniLockSettingsTestHostController.m:124:    lock2.houseName = @"House 2";
August Today/AGMiniLockSettingsTestHostController.m:125:    lock2.houseID = @"house2";
August Today/AGMiniLockSettingsTestHostController.m:127:    lock2.lockName = @"Lock 2";
August Today/AGMiniLockSettingsTestHostController.m:128:    lock2.lockID = @"lock2";
August Today/AGMiniLockSettingsTestHostController.m:131:    lock3.houseName = @"House 3";
August Today/AGMiniLockSettingsTestHostController.m:132:    lock3.houseID = @"house3";
August Today/AGMiniLockSettingsTestHostController.m:134:    lock3.lockName = @"Lock 3";
August Today/AGMiniLockSettingsTestHostController.m:135:    lock3.lockID = @"lock3";
August Today/AGMiniLockSettingsTestHostController.m:138:    lock4.houseName = @"House 4";
August Today/AGMiniLockSettingsTestHostController.m:139:    lock4.houseID = @"house4";
August Today/AGMiniLockSettingsTestHostController.m:141:    lock4.lockName = @"Lock 4";
August Today/AGMiniLockSettingsTestHostController.m:142:    lock4.lockID = @"lock4";
August Today/AGMiniLockSettingsTestHostController.m:145:    lock5.houseName = @"House 5";
August Today/AGMiniLockSettingsTestHostController.m:146:    lock5.houseID = @"house5";
August Today/AGMiniLockSettingsTestHostController.m:148:    lock5.lockName = @"Lock 5";
August Today/AGMiniLockSettingsTestHostController.m:149:    lock5.lockID = @"lock5";
August Today/AGMiniLockSettingsTestHostController.m:152:    lock6.houseName = @"House 6";
August Today/AGMiniLockSettingsTestHostController.m:153:    lock6.houseID = @"house6";
August Today/AGMiniLockSettingsTestHostController.m:155:    lock6.lockName = @"Lock 6";
August Today/AGMiniLockSettingsTestHostController.m:156:    lock6.lockID = @"lock6";
August Today/AGMiniLockSettingsTestHostController.m:159:    lock7.houseName = @"House 7";
August Today/AGMiniLockSettingsTestHostController.m:160:    lock7.houseID = @"house7";
August Today/AGMiniLockSettingsTestHostController.m:162:    lock7.lockName = @"Lock 7";
August Today/AGMiniLockSettingsTestHostController.m:163:    lock7.lockID = @"lock7";
August Today/AGMiniLockSettingsTestHostController.m:166:    lock8.houseName = @"House 8";
August Today/AGMiniLockSettingsTestHostController.m:167:    lock8.houseID = @"house8";
August Today/AGMiniLockSettingsTestHostController.m:169:    lock8.lockName = @"Lock 8";
August Today/AGMiniLockSettingsTestHostController.m:170:    lock8.lockID = @"lock8";
August Today/AGMiniLockSettingsTestHostController.m:173:    lock9.houseName = @"House 9";
August Today/AGMiniLockSettingsTestHostController.m:174:    lock9.houseID = @"house9";
August Today/AGMiniLockSettingsTestHostController.m:176:    lock9.lockName = @"Lock 9";
August Today/AGMiniLockSettingsTestHostController.m:177:    lock9.lockID = @"lock9";
August Today/AGMiniLockSettingsTestHostController.m:180:    lock10.houseName = @"House 10";
August Today/AGMiniLockSettingsTestHostController.m:181:    lock10.houseID = @"house10";
August Today/AGMiniLockSettingsTestHostController.m:183:    lock10.lockName = @"Lock 10";
August Today/AGMiniLockSettingsTestHostController.m:184:    lock10.lockID = @"lock10";
August Today/AGMiniLockSettingsTestHostController.m:187:    lock11.houseName = @"House 11";
August Today/AGMiniLockSettingsTestHostController.m:188:    lock11.houseID = @"house11";
August Today/AGMiniLockSettingsTestHostController.m:190:    lock11.lockName = @"Lock 11";
August Today/AGMiniLockSettingsTestHostController.m:191:    lock11.lockID = @"lock11";
August Today/AGMiniLockSettingsTestHostController.m:194:    lock12.houseName = @"House 12";
August Today/AGMiniLockSettingsTestHostController.m:195:    lock12.houseID = @"house12";
August Today/AGMiniLockSettingsTestHostController.m:197:    lock12.lockName = @"Lock 12";
August Today/AGMiniLockSettingsTestHostController.m:198:    lock12.lockID = @"lock12";
August Today/AGMiniLockSettingsTestHostController.m:201:    lock13.houseName = @"House 13";
August Today/AGMiniLockSettingsTestHostController.m:202:    lock13.houseID = @"house13";
August Today/AGMiniLockSettingsTestHostController.m:204:    lock13.lockName = @"Lock 13";
August Today/AGMiniLockSettingsTestHostController.m:205:    lock13.lockID = @"lock13";
August Today/AGMiniLockSettingsTestHostController.m:208:    lock14.houseName = @"House 14";
August Today/AGMiniLockSettingsTestHostController.m:209:    lock14.houseID = @"house14";
August Today/AGMiniLockSettingsTestHostController.m:211:    lock14.lockName = @"Lock 14";
August Today/AGMiniLockSettingsTestHostController.m:212:    lock14.lockID = @"lock14";
August Today/AGMiniLockSettingsTestHostController.m:215:    lock15.houseName = @"House 15";
August Today/AGMiniLockSettingsTestHostController.m:216:    lock15.houseID = @"house15";
August Today/AGMiniLockSettingsTestHostController.m:218:    lock15.lockName = @"Lock 15";
August Today/AGMiniLockSettingsTestHostController.m:219:    lock15.lockID = @"lock15";
August Today/AGWidgetOfflineKeyProvider.m:24:    query.service = @"AugustKeys";
August Today/AGWidgetOfflineKeyProvider.m:39:    NSString *offlineKeyHexStr = offlineKeyDict[@"key"];
August Today/AGWidgetOfflineKeyProvider.m:42:    NSNumber *slotNum = offlineKeyDict[@"slot"];
August Today/AGWidgetOfflineKeyProvider.m:53:    return [NSString stringWithFormat:@"OK%@", deviceID];
August Today/AGWidgetLock.m:31:             kHouseNameWidgetKey: self.houseName ?: @"",
August Today/AGWidgetLock.m:32:             kHouseIDWidgetKey:self.houseID ?: @"",
August Today/AGWidgetLock.m:33:             kLockNameWidgetKey:self.lockName ?: @"",
August Today/AGWidgetLock.m:34:             kLockIDWidgetKey:self.lockID ?: @""
August Today/AGMiniLockTableController.m:51:    NCWidgetDisplayMode widgetDisplayMode = (NCWidgetDisplayMode)[((NSNumber *)[notification.userInfo objectForKey:@"activeDisplayMode"]) integerValue];
August Today/AGMiniLockTableController.m:144:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
August Today/AGWidgetContainerController.m:51:    NSDictionary *maxSizeDict = @{@"width":@(maxSize.width), @"height":@(maxSize.height)};
August Today/AGWidgetContainerController.m:52:    NSDictionary *notificationInfo = @{@"activeDisplayMode":@(activeDisplayMode), @"maxSize":maxSizeDict};
August Today/AGKeypadInviteUserCellTableViewCell.m:69:            self.pinCode.text = @"";
August Today/AGKeypadInviteUserCellTableViewCell.m:71:            self.pinCode.text = [NSString stringWithFormat:@"#%@", pinEntry.pinCode];
August Today/AGWidgetSharedSimulatorData.m:72:        lock.houseName = [NSString stringWithFormat:@"House %i", i+1];
August Today/AGWidgetSharedSimulatorData.m:73:        lock.houseID = [NSString stringWithFormat:@"house%i", i+1];
August Today/AGWidgetSharedSimulatorData.m:75:        lock.lockName = [NSString stringWithFormat:@"Lock %i", i+1];
August Today/AGWidgetSharedSimulatorData.m:76:        lock.lockID = [NSString stringWithFormat:@"lock%i", i+1];
August Today/AGMiniLockController.m:52:        _lockView = [[[NSBundle mainBundle] loadNibNamed:@"AGMiniLockView" owner:self options:nil] objectAtIndex:0];
August Today/AGMiniLockController.m:57:        _lockView.lockStatusLabel.text = @"";
August Today/AGMiniLockController.m:81:    NSString *statusDescription = @"";
August Today/AGMiniLockController.m:85:        statusDescription = [statusDescription stringByAppendingString:@" | "];
August Today/AGMiniLockController.m:110:                    [self postLockUsageSuccessForAction:@"lock"];
August Today/AGMiniLockController.m:141:                    [self postLockUsageSuccessForAction:@"unlock"];
August Today/AGMiniLockController.m:229:    NSString *relativeURLPath = [NSString stringWithFormat:@"/locks/usage/%@", self.lock.lockID];
August Today/AGMiniLockController.m:230:    NSString *fullURLPath = [NSString stringWithFormat:@"%@%@", [AGGeneralCrossProcessUtility networkClientBaseURL], relativeURLPath];
August Today/AGMiniLockController.m:233:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
August Today/AGMiniLockController.m:235:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
August Today/AGMiniLockController.m:236:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
August Today/AGMiniLockController.m:241:                               @"action": action,
August Today/AGMiniLockController.m:242:                               @"mechanical": @"success",
August Today/AGMiniLockController.m:243:                               @"crypto": @"success",
August Today/AGMiniLockController.m:244:                               @"dateTime": dateStr
August Today/AGMiniLockController.m:249:    AGDataUploadItem *lockUsageLogItem = [[AGDataUploadItem alloc] initWithData:jsonData url:fullURLPath httpMethod:@"PUT" maxUploadAttempts:3];
August Today/AGMiniLockController.m:259:             @(AGBLELockState_Locked):@"Locked",
August Today/AGMiniLockController.m:260:             @(AGBLELockState_Locking):@"Locking...",
August Today/AGMiniLockController.m:261:             @(AGBLELockState_Unlocked):@"Unlocked",
August Today/AGMiniLockController.m:262:             @(AGBLELockState_Unlocking):@"Unlocking..."
August Today/AGMiniLockController.m:269:             @(AGBLEDoorState_Closed):@"Closed",
August Today/AGMiniLockController.m:270:             @(AGBLEDoorState_Open):@"Open",
August Today/AGMiniLockSettingsView.m:54:    [self.tableView addObserver:self forKeyPath:@"contentSize" options:(NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld) context:nil];
August Today/AGMiniLockSettingsView.m:91:    if ([keyPath isEqualToString:@"contentSize"] && object == self.tableView) {
August Today/AGMiniLockSettingsView.m:109:    NSString *lockCellID = @"LockSettingsCellID";
August Today/AGMiniLockSettingsView.m:130:        badgeLabelView.label.text = [NSString stringWithFormat:@"%li", (long)lockDisplayOrderInt];
August Today/AGMiniLockSettingsView.m:143:    NSString *lockCellTitle = [NSString stringWithFormat:@"%@ - %@", lock.houseName, lock.lockName];
August Today/AGMiniLockTableView.m:100:    unlockDeviceLabel.text = @"Please unlock your phone";
August Today/AGMiniLockTableView.m:132:        UITableViewCell *customizeCell = [tableView dequeueReusableCellWithIdentifier:@"MiniLockTableCustomizeCell"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:37:    NSNumber *userExitLat = userInfo[@"user_exit_lat"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:38:    NSNumber *userExitLon = userInfo[@"user_exit_lon"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:42:    NSNumber *userHomeLat = userInfo[@"user_home_lat"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:43:    NSNumber *userHomeLon = userInfo[@"user_home_lon"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:47:    NSNumber *userGeofenceRadius = userInfo[@"user_home_geofence_radius"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:50:    NSString *showMap = userInfo[@"should_show_map"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:58:    NSURL *crossProcessContainerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.august.general-cross-process"];
AGAutoUnlockExitNotificationContentExtension/AGAutoUnlockExitNotificationController.m:59:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
Lock Component/AGDialView.m:185:                animationNamed = @"state_unknown.json";
Lock Component/AGDialView.m:188:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:192:                animationNamed = @"spinner_closed_locked_to_closed_unlocked_pulsing.json";
Lock Component/AGDialView.m:196:                animationNamed = @"spinner_closed_unlocked_to_closed_locked_pulsing.json";
Lock Component/AGDialView.m:200:                animationNamed = @"spinner_open_locked_to_open_unlocked.json";
Lock Component/AGDialView.m:203:                animationNamed = @"spinner_open_unlocked_to_open_locked.json";
Lock Component/AGDialView.m:207:                animationNamed = @"state_closed_locked.json";
Lock Component/AGDialView.m:210:                animationNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:213:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:217:                animationNamed = @"state_open_locked.json";
Lock Component/AGDialView.m:220:                animationNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:224:                NSAssert(false, @"Illegal desiredDialState %u inside AGDialView.setDialState:", desiredDialState);
Lock Component/AGDialView.m:225:                animationNamed = @"state_unknown.json";
Lock Component/AGDialView.m:246:                animationNamed = @"transition_closed_locked_to_closed_unlocked";
Lock Component/AGDialView.m:247:                finalStateNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:251:                animationNamed = @"transition_closed_unlocked_to_closed_locked";
Lock Component/AGDialView.m:252:                finalStateNamed = @"state_closed_locked.json";
Lock Component/AGDialView.m:256:                animationNamed = @"transition_closed_unlocked_to_open_unlocked";
Lock Component/AGDialView.m:257:                finalStateNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:261:                animationNamed = @"transition_open_locked_to_open_unlocked";
Lock Component/AGDialView.m:262:                finalStateNamed = @"state_open_unlocked.json";
Lock Component/AGDialView.m:266:                animationNamed = @"transition_open_unlocked_to_open_locked";
Lock Component/AGDialView.m:267:                finalStateNamed = @"state_open_locked.json";
Lock Component/AGDialView.m:271:                animationNamed = @"transition_open_unlocked_to_closed_unlocked";
Lock Component/AGDialView.m:272:                finalStateNamed = @"state_closed_unlocked.json";
Lock Component/AGDialView.m:276:                animationNamed = @"spinner_connecting_pulsing.json";
Lock Component/AGDialView.m:277:                finalStateNamed = @"state_unknown.json";
Lock Component/AGDialView.m:336:        case AGDialView_Inactive:        return @"Inactive";
Lock Component/AGDialView.m:337:        case AGDialView_PulseOnce:       return @"PulseOnce";
Lock Component/AGDialView.m:338:        case AGDialView_Waiting:         return @"Waiting";
Lock Component/AGDialView.m:339:        case AGDialView_Closed_WaitingToUnlock: return @"ClosedWaitingToUnlock";
Lock Component/AGDialView.m:340:        case AGDialView_Closed_WaitingToLock:   return @"ClosedWaitingToLock";
Lock Component/AGDialView.m:341:        case AGDialView_Open_WaitingToUnlock: return @"OpenWaitingToUnlock";
Lock Component/AGDialView.m:342:        case AGDialView_Open_WaitingToLock:   return @"OpenWaitingToLock";
Lock Component/AGDialView.m:343:        case AGDialView_Animating:       return @"Animating";
Lock Component/AGDialView.m:344:        case AGDialView_WaitingForToggle: return @"Searching";
Lock Component/AGDialView.m:345:        case AGDialView_Open_Locked:     return @"OpenandLocked";
Lock Component/AGDialView.m:346:        case AGDialView_Open_Unlocked:   return @"OpenandUnlocked";
Lock Component/AGDialView.m:347:        case AGDialView_Closed_Locked:   return @"ClosedandLocked";
Lock Component/AGDialView.m:348:        case AGDialView_Closed_Unlocked: return @"ClosedandUnlocked";
Lock Component/AGDialView.m:352:            NSAssert(NO, @"Unrecognized AGDialState %u", dialState);
Lock Component/AGDialView.m:353:            return [NSString stringWithFormat:@"DialState-%u", dialState];
Lock Component/AGDialView.m:384:// TODO: determine if it's better to have the label be fixed (e.g. @"August Dial"), and have the following labels be accessibility values
Lock Component/AGDialView.m:395:            return @"August Inactive";
Lock Component/AGDialView.m:398:            return @"August PulseOnce";
Lock Component/AGDialView.m:401:            return @"August Waiting";
Lock Component/AGDialView.m:404:            return @"August Waiting to Unlock Remotely";
Lock Component/AGDialView.m:407:            return @"August Waiting to Lock Remotely";
Lock Component/AGDialView.m:410:            return @"August Waiting to Unlock Remotely";
Lock Component/AGDialView.m:413:            return @"August Waiting to Lock Remotely";
Lock Component/AGDialView.m:416:            return @"August Waiting for Toggle";         // what's the best descriptor for this?
Lock Component/AGDialView.m:419:            return @"August currently Locking";
Lock Component/AGDialView.m:423:            return @"Lock Your August";                       // need to confirm this is most appropriate
Lock Component/AGDialView.m:427:            return @"Unlock Your August";                     // need to confirm this is most appropriate
NewRelicAgent.framework/Versions/A/Resources/newrelic_postbuild.sh:63:SERVER_RESPONSE=$(curl --write-out %{http_code} --silent --output /dev/null -F dsym=@"${DSYM_ARCHIVE_PATH}" -F buildId="$DSYM_UUIDS"  -F appName="$EXECUTABLE_NAME" -H "X-APP-LICENSE-KEY: ${API_KEY}" "${DSYM_UPLOAD_URL}")
Lock Component/PRTween.m:276:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:278:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:294:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:318:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:320:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:337:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:339:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:355:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:371:    operation.boundGetter = NSSelectorFromString([NSString stringWithFormat:@"%@", property]);
Lock Component/PRTween.m:373:    [operation addObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp" options:NSKeyValueObservingOptionNew context:NULL];
Lock Component/PRTween.m:441:                                      @"setBounds:",            // CGRect
Lock Component/PRTween.m:442:                                      @"setPosition:",          // CGPoint
Lock Component/PRTween.m:443:                                      @"setZPosition:",         // CGFloat
Lock Component/PRTween.m:444:                                      @"setAnchorPoint:",       // CGPoint
Lock Component/PRTween.m:445:                                      @"setAnchorPointZ:",      // CGFloat
Lock Component/PRTween.m:446:                                      //@"setTransform:",         // CATransform3D
Lock Component/PRTween.m:447:                                      //@"setSublayerTransform:", // CATransform3D
Lock Component/PRTween.m:448:                                      @"setFrame:",             // CGRect
Lock Component/PRTween.m:449:                                      @"setContentsRect"        // CGRect
Lock Component/PRTween.m:450:                                      @"setContentsScale:",     // CGFloat
Lock Component/PRTween.m:451:                                      @"setContentsCenter:",    // CGPoint
Lock Component/PRTween.m:452:                                      //@"setBackgroundColor:",   // CGColorRef
Lock Component/PRTween.m:453:                                      @"setCornerRadius:",      // CGFloat
Lock Component/PRTween.m:454:                                      @"setBorderWidth:",       // CGFloat
Lock Component/PRTween.m:455:                                      @"setOpacity:",           // CGFloat
Lock Component/PRTween.m:456:                                      //@"setShadowColor:",       // CGColorRef
Lock Component/PRTween.m:457:                                      @"setShadowOpacity:",     // CGFloat
Lock Component/PRTween.m:458:                                      @"setShadowOffset:",      // CGSize
Lock Component/PRTween.m:459:                                      @"setShadowRadius:",      // CGFloat
Lock Component/PRTween.m:460:                                      //@"setShadowPath:",
Lock Component/PRTween.m:466:                                        @"setFrame:",           // CGRect
Lock Component/PRTween.m:467:                                        @"setBounds:",          // CGRect
Lock Component/PRTween.m:468:                                        @"setCenter:",          // CGPoint
Lock Component/PRTween.m:469:                                        @"setTransform:",       // CGAffineTransform
Lock Component/PRTween.m:470:                                        @"setAlpha:",           // CGFloat
Lock Component/PRTween.m:471:                                        //@"setBackgroundColor:", // UIColor
Lock Component/PRTween.m:472:                                        @"setContentStretch:",  // CGRect
Lock Component/PRTween.m:496:                    NSString *propertyUnformatted = [selector stringByReplacingCharactersInRange:NSMakeRange(0, 3) withString:@""];
Lock Component/PRTween.m:523:                    [operation.boundObject addAnimation:animation forKey:@"PRTweenCAAnimation"];
Lock Component/PRTween.m:534:                    NSString *propertyUnformatted = [selector stringByReplacingCharactersInRange:NSMakeRange(0, 3) withString:@""];
Lock Component/PRTween.m:625:    return NSSelectorFromString([NSString stringWithFormat:@"set%@:", [property stringByReplacingCharactersInRange:NSMakeRange(0, 1) withString:[[property substringToIndex:1] capitalizedString]]]);
Lock Component/PRTween.m:701:            [tweenOperation removeObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedValue"];
Lock Component/PRTween.m:705:            [tweenOperation removeObserver:[PRTween sharedInstance] forKeyPath:@"period.tweenedLerp"];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:24:    NSDictionary *imageDict = [self dictionary:request.content.userInfo safeObjectForKey:@"image"];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:25:    NSString *secureImagePath = [self dictionary:imageDict safeObjectForKey:@"secure_url"];
GenericMediaNotificationServiceExtension/AGGenericMediaNotificationServiceHandler.m:38:        UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"" URL:downloadedImageURL options:nil error:nil];
AGCountryCodeControl.m:65:        self.inputTextField.alignment = @"";
AGCountryCodeControl.m:68:        self.inputTextField.alignment = @"Left";
AGCountryCodeControl.m:73:    return [NSString stringWithFormat:@"%@%@", self.countryCodeButton.titleLabel.text, self.inputTextField.text];
AGCountryCodeControl.m:82:            paddedCodeString = [code stringByAppendingString:@"   "];
AGCountryCodeControl.m:86:            paddedCodeString = [code stringByAppendingString:@"  "];
AGCountryCodeControl.m:90:            paddedCodeString = [code stringByAppendingString:@" "];
AGCountryCodeControl.m:94:            paddedCodeString = [code stringByAppendingString:@""];
AGCountryCodeControl.m:104:    UIStoryboard *sb = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
AGCountryCodeControl.m:105:    AGCountryPickerViewController *vc = (AGCountryPickerViewController *)[sb instantiateViewControllerWithIdentifier:@"CountryPicker"];
AGCountryCodeControl.m:200:    [phoneNumberCharacterSet addCharactersInString:@"()+ -"];
AGCountryCodeControl.m:207:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"(" withString:@""];
AGCountryCodeControl.m:208:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@")" withString:@""];
AGCountryCodeControl.m:209:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@" " withString:@""];
AGCountryCodeControl.m:210:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"-" withString:@""];
AGCountryCodeControl.m:211:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"+" withString:@""];
AGCountryCodeControl.m:223:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"(" withString:@""];
AGCountryCodeControl.m:224:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@")" withString:@""];
AGCountryCodeControl.m:225:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@" " withString:@""];
AGCountryCodeControl.m:226:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"-" withString:@""];
AGCountryCodeControl.m:227:    mobileNumber = [mobileNumber stringByReplacingOccurrencesOfString:@"+" withString:@""];
AGCountryCodeControl.m:233:    [self.inputTextField setFont:[UIFont fontWithName:@"ProximaNova-Light" size:17]];
AGCountryCodeControl.m:234:    [self.inputTextField setText:@""];
AGCountryCodeControl.m:255:    [self.inputTextField setFont:[UIFont fontWithName:@"ProximaNova-Light" size:17]];
AGCountryCodeControl.m:256:    [self.inputTextField setText:@""];
AGDebugPickKeypadViewController.m:43:    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PickKeypadCell"];
AGDebugPickKeypadViewController.m:45:        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"PickKeypadCell"];
AGDebugPickKeypadViewController.m:47:    NSString *keypadSerial = [((NSDictionary *)[self.foundKeypads objectAtIndex:indexPath.row]) objectForKey:@"serial"];
Scripts/xctool.sh:64:"${AUGUST_XCTOOL_COMMAND}" "$@"
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:75:    NSString *statusDescription = @"";
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:79:        statusDescription = [statusDescription stringByAppendingString:@" | "];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:95:    [self.lockImage setImageNamed:@"lock_pulse"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:107:                    [self postLockUsageSuccessForAction:@"lock"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:127:    [self.unlockImage setImageNamed:@"unlock_pulse"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:139:                    [self postLockUsageSuccessForAction:@"unlock"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:167:        [self.statusLoadingImage setImageNamed:@"loading_indicator"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:232:    NSString *urlPath = [NSString stringWithFormat:@"/locks/usage/%@", self.lock.lockID];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:234:    request.HTTPMethod = @"PUT";
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:237:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:239:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:240:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:245:                                 @"action": action,
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:246:                                 @"mechanical": @"success",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:247:                                 @"crypto": @"success",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:248:                                 @"dateTime": dateStr
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:270:             @(AGBLELockState_Locked):@"Locked",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:271:             @(AGBLELockState_Locking):@"Locking...",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:272:             @(AGBLELockState_Unlocked):@"Unlocked",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:273:             @(AGBLELockState_Unlocking):@"Unlocking..."
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:280:             @(AGBLEDoorState_Closed):@"Closed",
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockRowController.m:281:             @(AGBLEDoorState_Open):@"Open",
AugustWatch/AugustWatchApp Extension/UI/AGWatchLockListVisibilityController.m:25:    [self setTitle:@"Show Locks"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchLockListVisibilityController.m:38:    [self.table setNumberOfRows:self.lockListVisibilityItems.count withRowType:@"AGWatchLockVisibilityRowControllerDefault"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchRefreshStateController.m:43:    [self.loadingImage setImageNamed:@"loading_indicator"];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockListController.m:43:        [self.table setRowTypes:@[@"AGWatchOperateLockRowControllerFullScreen"]];
AugustWatch/AugustWatchApp Extension/UI/AGWatchOperateLockListController.m:45:        [self.table setNumberOfRows:self.locks.count withRowType:@"AGWatchOperateLockRowControllerCompact"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:27:    AGBasicNetworkClient *networkClient = [[AGBasicNetworkClient alloc] initWithBaseURL:@"https://api-production.august.com" accessToken:[AGWatchKeyStorage accessToken]];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:46:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:47:    [updatedRequest setValue:@"en-US;q=1" forHTTPHeaderField:@"Accept-Language"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:48:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:49:    [updatedRequest setValue:[self apiKey] forHTTPHeaderField:@"x-august-api-key"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:51:            [updatedRequest setValue:[self accessToken] forHTTPHeaderField:@"x-august-access-token"];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:63:    NSString *fullPathURL = [NSString stringWithFormat:@"%@%@", self.baseURLPath, relativeURLPath];
AugustWatch/AugustWatchApp Extension/Networking/AGWatchNetworkClient.m:68:    return @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:58:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"NoAccessTokenController"] contexts:@[refreshStateControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:65:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"NoLocksToOperateController"] contexts:@[refreshStateControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:83:        [WKInterfaceController reloadRootPageControllersWithNames:@[@"AGWatchOperateLockListController"] contexts:@[operateLockListControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:88:    [WKInterfaceController reloadRootPageControllersWithNames:@[@"AGWatchOperateLockListController" ,@"AGWatchLockListVisibilityController"] contexts:@[operateLockListControllerContext, lockListVisibilityControllerContext] orientation:WKPageOrientationHorizontal pageIndex:0];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:168:    NSMutableURLRequest *request = [self.networkClient baseRequestWithRelativeURL:@"/users/me"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:169:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:197:        NSString *userID = jsonResp[@"UserID"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:206:    NSMutableURLRequest *request = [self.networkClient baseRequestWithRelativeURL:@"/users/locks/mine"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:207:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:239:            if ([curLockDict[@"UserType"] isEqual:@"user"] ||
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:240:                [curLockDict[@"UserType"] isEqual:@"limited"]) {
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:246:            curLock.lockName = curLockDict[@"LockName"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:247:            curLock.houseName = curLockDict[@"HouseName"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:269:    NSString *relativeURL = [NSString stringWithFormat:@"/locks/%@", lock.lockID];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:271:    request.HTTPMethod = @"GET";
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:293:        NSDictionary *offlineKeys = jsonResp[@"OfflineKeys"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:294:        NSArray *loadedKeys = offlineKeys[@"loaded"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:297:            NSString *curUserID = curLoadedKeyDict[@"UserID"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:299:                NSNumber *slotNum = curLoadedKeyDict[@"slot"];
AugustWatch/AugustWatchApp Extension/AGWatchLifecycleManager.m:300:                NSString *keyStr = curLoadedKeyDict[@"key"];
AugustWatch/AugustWatchApp Extension/Networking/AGBasicNetworkClient+WatchClient.m:17:    AGBasicNetworkClient *networkClient = [[AGBasicNetworkClient alloc] initWithBaseURL:@"https://api-production.august.com" accessTokenProvider:[AGWatchKeyStorage new]];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:19:    [SAMKeychain setPassword:accessToken forService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:23:    return [SAMKeychain passwordForService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:27:    [SAMKeychain deletePasswordForService:@"AGWatchAccessTokenService" account:@"AGWatchDefaultAccessTokenAccount"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:34:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:40:    [offlineKeyDict nilSafeSetObject:offlineKeyHexStr forKey:@"key"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:41:    [offlineKeyDict setObject:[NSNumber numberWithInteger:offlineKey.slot] forKey:@"slot"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:46:    [SAMKeychain setPasswordData:jsonData forService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:52:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:53:    NSData *offlineKeyJSONData = [SAMKeychain passwordDataForService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:62:    NSNumber *slotNum = offlineKeyDict[@"slot"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:64:    NSString *offlineKeyHexStr = offlineKeyDict[@"key"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:74:    NSString *offlineKeyAccountID = [NSString stringWithFormat:@"%@%@", [self offlineKeyServiceStoragePrefix], deviceID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:75:    [SAMKeychain deletePasswordForService:@"AGWatchOfflineKeyService" account:offlineKeyAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:80:    NSArray *offlineKeyAccounts = [SAMKeychain accountsForService:@"AGWatchOfflineKeyService"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:83:        [SAMKeychain deletePasswordForService:@"AGWatchOfflineKeyService" account:curAccountID];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchKeyStorage.m:88:    return @"AGOfflineKey-";
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:15:    [[NSUserDefaults standardUserDefaults] setObject:userID forKey:@"AGCurrentUserID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:20:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"AGCurrentUserID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:32:    [[NSUserDefaults standardUserDefaults] setObject:lockDictsToSave forKey:@"AGAllWatchLocks"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:40:    NSArray *savedLockDicts = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGAllWatchLocks"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:53:    [[NSUserDefaults standardUserDefaults] setObject:lockIDs forKey:@"AGWatchLocksToShow"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:58:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"AGWatchLocksToShow"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:64:    lock.lockID = dict[@"lockID"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:65:    lock.lockName = dict[@"lockName"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:66:    lock.houseName = dict[@"houseName"];
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:75:        lockDict[@"lockID"] = lock.lockID;
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:79:        lockDict[@"lockName"] = lock.lockName;
AugustWatch/AugustWatchApp Extension/DataPersistence/AGWatchPersistenceManager.m:83:        lockDict[@"houseName"] = lock.houseName;
AugustWatch/AugustWatchApp Extension/AGWatchBLELockConnectionFactory.m:38:        logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message?:@""];
AugustWatch/AugustWatchApp Extension/AGWatchBLELockConnectionFactory.m:40:        logMessage = [NSString stringWithFormat:@"[%@] %@", event, message?:@""];
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityAppManager.m:47:    NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustWatch/AugustWatchApp Extension/WatchConnectivity/AGWatchConnectivityAppManager.m:48:    replyHandler(@{AGWatchMessageBodyKey:accessToken ?: @""});
AugustWatch/AugustWatchApp Extension/Utility/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:15:    [escapedString replaceOccurrencesOfString:@"&amp;"  withString:@"&"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:16:    [escapedString replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:17:    [escapedString replaceOccurrencesOfString:@"&#x27;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:18:    [escapedString replaceOccurrencesOfString:@"&#39;"  withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:19:    [escapedString replaceOccurrencesOfString:@"&#x92;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:20:    [escapedString replaceOccurrencesOfString:@"&#x96;" withString:@"-"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:21:    [escapedString replaceOccurrencesOfString:@"&gt;"   withString:@">"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustWatch/AugustWatchApp Extension/Utility/NSString+HTMLEscape.m:22:    [escapedString replaceOccurrencesOfString:@"&lt;"   withString:@"<"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:42:        if ([[messageData objectForKey:@"status"] isEqual:@"imagecapture"]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:43:            NSDictionary *dataDict = [messageData objectForKey:@"data"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:44:            NSDictionary *imageDict = [dataDict objectForKey:@"cloudinaryResult"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:45:            NSString *secureImageURL = [imageDict objectForKey:@"secure_url"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:91:    NSDictionary *imageDict = [userInfo objectForKey:@"image"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:93:        imageURL = [imageDict objectForKey:@"secure_url"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:95:    NSString *doorbellID = [userInfo objectForKey:@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:121:                NSString *tmpFile = [NSString stringWithFormat:@"file://%@%@", tmpDir, request.identifier];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:133:                UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"doorbell_image" URL:tmpFileURL options:attachmentOptions error:&attachmentError];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:158:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationServiceHandler.m:159:    BOOL isMotionEvent = [status isEqualToString:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:61:    NSDictionary *simulateButtonPress = @{@"status":@"simulate_button_press", @"origin":@"iOS"};
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:71:        if ([[messageData objectForKey:@"status"] isEqualToString:@"buttonpush"] &&
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:72:            [[messageData objectForKey:@"doorbellID"] isEqualToString:self.curDoorbellToListenFor]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:82:    NSDictionary *dataDict = [messageDict objectForKey:@"data"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:83:    NSString *doorbellName = [dataDict objectForKey:@"doorbellName"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:84:    NSString *houseName = [dataDict objectForKey:@"houseName"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:85:    NSString *pushBody = [NSString stringWithFormat:@"%@ doorbell is ringing at %@", doorbellName, houseName];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:86:    NSString *imageURL = @"";//@"https://res.cloudinary.com/august-com/image/upload/v1477599834/yvv40d2wumn3rgarvh26.jpg"; //@"https://i.imgur.com/yomz9DLb.jpg"
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:92:                                  @"aps":@{
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:93:                                          @"alert":@{
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:94:                                                  @"title":@"",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:95:                                                  @"body":pushBody
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:97:                                          @"sound":@"doorbell",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:98:                                          @"category":kDoorbellNotificationCategory,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:100:                                  @"status":@"buttonpush",
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:101:                                  @"doorbellName":doorbellName,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:102:                                  @"houseName":houseName,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:103:                                  @"imageURL":imageURL,
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:104:                                  @"callID":messageDict[@"callID"],
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:105:                                  @"doorbellID":messageDict[@"doorbellID"],
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationTestingHelper.m:122:            AGDoorbell *doorbell = [[AGSharedData sharedInstance] findDoorbellWithID:@"a1b4cd368901"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:64:    BOOL isMotionEvent = [[pushNotificationDict treatNSNullAsNilObjectForKey:@"event"] isEqual:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:88:    NSString *status = apnsDictionary[@"status"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:89:    NSString *doorbellID = apnsDictionary[@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:93:    if (apnsDictionary[@"doorbellName"] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:94:        doorbellName = [AGClient stringByDecodingXMLEntities:apnsDictionary[@"doorbellName"]];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:96:    if (apnsDictionary[@"houseName"] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:97:        houseName = [AGClient stringByDecodingXMLEntities:apnsDictionary[@"houseName"]];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:99:    if  (apnsDictionary[@"callID" ] != nil) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:100:        callID = apnsDictionary[@"callID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:109:        if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]) {
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:115:                [[AGVideoCallSummary sharedInstance] addVideoCallEventV2:@"APNS" andStatus:status andPath:nil andError:nil];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:164:    NSString *doorbellID = pushNotificationDict[@"doorbellID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:172:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:173:            self.houseTabBarController = [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:198:        BOOL isMotionEvent = [[self.currentNotification treatNSNullAsNilObjectForKey:@"event"] isEqual:@"doorbell_motion_detected"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:202:            NSString *dvrID = [self.currentNotification treatNSNullAsNilObjectForKey:@"dvrID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:205:            NSString *callID = [self.currentNotification treatNSNullAsNilObjectForKey:@"callID"];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:211:                [self.logBookViewController performSegueWithIdentifier:@"logBookToMotionActivity" sender:matchingEvent];
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationFlowDriver.m:213:                [self.logBookViewController performSegueWithIdentifier:@"logBookToDoorbellActivity" sender:matchingEvent];
AugustNotifications/AGNotificationHandler.m:130:    NSMutableDictionary *parameters = [NSMutableDictionary dictionaryWithDictionary:@{@"deviceID":[AGUtility persistentDeviceID]}];
AugustNotifications/AGNotificationHandler.m:132:        [parameters setObject:voipToken forKey:@"voiptoken"];
AugustNotifications/AGNotificationHandler.m:135:        [parameters setObject:apnsToken forKey:@"apnstoken"];
AugustNotifications/AGNotificationHandler.m:150:    if ([payload.dictionaryPayload[@"aps"][@"category"] isEqualToString:kDoorbellNotificationCategory]) {
AugustNotifications/AGNotificationHandler.m:160:    NSDictionary *apsDict = [payload objectForKey:@"aps"];
AugustNotifications/AGNotificationHandler.m:161:    NSDictionary *alertDict = [[apsDict objectForKey:@"alert"] isKindOfClass:[NSDictionary class]] ? [apsDict objectForKey:@"alert"] : nil;
AugustNotifications/AGNotificationHandler.m:163:    notifContent.title = alertDict ? [alertDict objectForKey:@"title"] : [apsDict objectForKey:@"alert"];
AugustNotifications/AGNotificationHandler.m:164:    notifContent.subtitle = alertDict ? [alertDict objectForKey:@"subtitle"] : nil;
AugustNotifications/AGNotificationHandler.m:165:    notifContent.body = alertDict ? [alertDict objectForKey:@"body"] : nil;
AugustNotifications/AGNotificationHandler.m:166:    notifContent.sound = [UNNotificationSound soundNamed:[apsDict objectForKey:@"sound"]];
AugustNotifications/AGNotificationHandler.m:167:    notifContent.categoryIdentifier = [apsDict objectForKey:@"category"];
AugustNotifications/AGNotificationHandler.m:175:    if (NSClassFromString(@"UNNotificationCategory")) {
AugustNotifications/AGNotificationHandler.m:176:        UNNotificationAction *viewAction = [UNNotificationAction actionWithIdentifier:kDoorbellNotificationViewAction title:@"View" options:(UNNotificationActionOptionAuthenticationRequired | UNNotificationActionOptionForeground)];
AugustNotifications/AGNotificationHandler.m:188:    NSString *curEpochTimeStr = [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970]*1000.0];//Put the time in millis
AugustNotifications/AGNotificationHandler.m:203:    content.sound = [UNNotificationSound soundNamed:@"doorbell.caf"];
AugustNotifications/AGNotificationHandler.m:236:    NSDictionary *aps = [userInfo objectForKey:@"aps"];
AugustNotifications/AGNotificationHandler.m:237:    NSString *message = [aps objectForKey:@"alert"];
AugustNotifications/AGNotificationHandler.m:238:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/AGNotificationHandler.m:242:    if ([notification.request.content.categoryIdentifier isEqualToString:kDoorbellNotificationCategory] || [notification.request.content.categoryIdentifier isEqualToString:@"doorbellSetupReminder"] || isAutoUnlockForegroundNotification) {
AugustNotifications/AGNotificationHandler.m:247:            UIAlertController * alert=   [UIAlertController alertControllerWithTitle:@"30 Minute Reminder"
AugustNotifications/AGNotificationHandler.m:248:                                                                             message:@"Your Doorbell battery has charged for 30 minutes. Please continue setup."
AugustNotifications/AGNotificationHandler.m:251:            UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
AugustNotifications/AGNotificationHandler.m:259:    }else if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]){
AugustNotifications/AGNotificationHandler.m:264:            BOOL messageIsEmpty = message == nil || [[message stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]] isEqualToString:@""];
AugustNotifications/AGNotificationHandler.m:266:                UIAlertController * alert=   [UIAlertController alertControllerWithTitle:@"August" message:message preferredStyle:UIAlertControllerStyleAlert];
AugustNotifications/AGNotificationHandler.m:267:                UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
AugustNotifications/AGNotificationHandler.m:283:    NSString *status = [userInfo objectForKey:@"status"];
AugustNotifications/AGNotificationHandler.m:287:    }else if ([status isEqualToString:@"buttonpush"] || [status isEqualToString:@"doorbell_motion_detected"]){
AugustNotifications/DoorbellNotifications/AGDoorbellNotificationPersistanceManager.m:76:            NSString *filePath = [NSString stringWithFormat:@"%@/%@", [self dataFolderURL].path, fileName];
NUI/UI/UITableView+NUI.m:16:        self.nuiClass = @"Table";
NUI/UI/UITableView+NUI.m:23:    if (![self.nuiClass isEqualToString:@"none"]) {
NUI/UI/UIProgressView+NUI.m:16:        self.nuiClass = @"Progress";
NUI/UI/UIProgressView+NUI.m:24:        if (![self.nuiClass isEqualToString:@"none"]) {
AugustAPI/august-api/NSData+StringConversion.m:17:        [hexStr appendString:[NSString stringWithFormat:@"%02.2hhx", bytes[i]]];
AugustAPI/august-api/AGGuestbookEntry.m:22:                guestbookEntry.objectId = responseDictionary[@"EntryID"];
AugustAPI/august-api/AGGuestbookEntry.m:23:                NSDictionary *userDict = responseDictionary[@"author"];
AugustAPI/august-api/AGGuestbookEntry.m:27:                guestbookEntry.content = [AGClient stringByDecodingXMLEntities:responseDictionary[@"snippet"]];
AugustAPI/august-api/AGGuestbookEntry.m:28:                long long timeIntervalSince1970 = [responseDictionary[@"date"] longLongValue];
AugustAPI/august-api/AGGuestbookEntry.m:43:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGGuestbookEntry.m:53:    NSString * path = [NSString stringWithFormat:@"houses/%@/guestbook", houseID];
AugustAPI/august-api/AGGuestbookEntry.m:69:    NSString * path = [NSString stringWithFormat:@"houses/guestbookentry/%@", entryID];
AugustAPI/august-api/AGNotificationRule.m:38:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules?deviceID=%@", lockID];
AugustAPI/august-api/AGNotificationRule.m:42:                              header:@{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGNotificationRule.m:60:    NSString *path = @"/smartalert/rules";
AugustAPI/august-api/AGNotificationRule.m:83:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
AugustAPI/august-api/AGNotificationRule.m:109:    NSString *path = [NSString stringWithFormat:@"/smartalert/rules/%@", notificationRule.objectId];
AugustAPI/august-api/AGGeofenceLimits.m:31:            d = [d objectForKey:@"ios"];
AugustAPI/august-api/AGGeofenceLimits.m:51:            if ([d objectForKey:@"thresholds"]) {
AugustAPI/august-api/AGGeofenceLimits.m:52:                self.thresholds = [d objectForKey:@"thresholds"];
AugustAPI/august-api/AGGeofenceLimits.m:55:            if ([d objectForKey:@"probabilities"]) {
AugustAPI/august-api/AGGeofenceLimits.m:56:                self.probabilities = [d objectForKey:@"probabilities"];
AugustAPI/august-api/AGGeofenceLimits.m:68:    [dict3 setObject:self.thresholds forKey:@"thresholds"];
AugustAPI/august-api/AGGeofenceLimits.m:69:    [dict3 setObject:self.probabilities forKey:@"probabilities"];
AugustAPI/august-api/AGGeofenceLimits.m:88:    _versionID = @"default4"; // If the server provided version does not match this version id, then the local params are overriden in the AutoUnlock code that stores the geofence limits to persisten memeory.
AugustAPI/august-api/AGGeofenceLimits.m:105:    self.thresholds = @{@"wifi": @{@"val":@"wifionexit" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:106:                        @"fastexit" :  @{@"val":@"exitdiff" , @"max":@1},
AugustAPI/august-api/AGGeofenceLimits.m:107:                        @"20minout" :  @{@"val":@"outsideseconds" , @"max":@(20.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:108:                        @"over2hours" :  @{@"val":@"outsideseconds" , @"min":@(2*60.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:109:                        @"over4hours" :  @{@"val":@"outsideseconds" , @"min":@(4*60.0*60.0)},
AugustAPI/august-api/AGGeofenceLimits.m:110:                        @"gpsexitverifyfailed" :  @{@"val":@"gpsexitverifyfailed" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:111:                        @"walkedabit" :  @{@"val":@"walkseconds" , @"min":@180},
AugustAPI/august-api/AGGeofenceLimits.m:112:                        @"othertransport" :  @{@"val":@"othertransseconds" , @"min":@1},
AugustAPI/august-api/AGGeofenceLimits.m:113:                        @"nightowlexit" : @{@"val":@"hour24exit", @"max":@6},
AugustAPI/august-api/AGGeofenceLimits.m:114:                        @"nightowlenter" : @{@"val":@"hour24enter", @"max":@6}
AugustAPI/august-api/AGGeofenceLimits.m:116:     @"notothertransport" :  @{@"val":@"othertransseconds" , @"max":@60.0},
AugustAPI/august-api/AGGeofenceLimits.m:117:     @"notwalkedabit" :  @{@"val":@"walkseconds" , @"max":@300.0},
AugustAPI/august-api/AGGeofenceLimits.m:125:    self.probabilities = @[@{@"or":@[@"wifi"], @"p":@0.75},
AugustAPI/august-api/AGGeofenceLimits.m:126:                           @{@"or":@[@"fastexit"], @"p":@0.45},
AugustAPI/august-api/AGGeofenceLimits.m:127:                           @{@"or":@[@"gpsexitverifyfailed"], @"p":@0.4},
AugustAPI/august-api/AGGeofenceLimits.m:128:                           @{@"and":@[@"20minout"], @"p":@0.49}, // a short 20 min exit
AugustAPI/august-api/AGGeofenceLimits.m:129:                           @{@"and":@[@"over2hours"], @"p":@0.4}, // over 2 hours
AugustAPI/august-api/AGGeofenceLimits.m:130:                           @{@"and":@[@"over4hours"], @"p":@0.33}, // over 4 hours
AugustAPI/august-api/AGGeofenceLimits.m:131:                           @{@"and":@[@"othertransport"], @"p":@0.01},
AugustAPI/august-api/AGGeofenceLimits.m:132:                           @{@"and":@[@"walkedabit"], @"p":@0.1},
AugustAPI/august-api/AGGeofenceLimits.m:133:                           @{@"and":@[@"nightowlexit",@"nightowlenter"], @"p": @0.6},
AugustAPI/august-api/AGGeofenceLimits.m:135:     @{@"and":@[@"notwalkedabit",@"notothertransport"], @"p": @0.999}
AugustAPI/august-api/AGHouse.m:44:    NSString *userType = isOwner?@"superuser":@"user";
AugustAPI/august-api/AGHouse.m:45:    NSString * path = [NSString stringWithFormat:@"houses/adduser/%@/%@/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
AugustAPI/august-api/AGHouse.m:69:    NSString *userType = isOwner?@"superuser":@"user";
AugustAPI/august-api/AGHouse.m:70:    NSString * path = [NSString stringWithFormat:@"houses/%@/users/%@/setusertype/%@", houseId, [AGUser getUserIdFromAGUser:user], userType];
AugustAPI/august-api/AGHouse.m:89:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
AugustAPI/august-api/AGHouse.m:107:    NSString * path = [NSString stringWithFormat:@"houses/%@", houseId];
AugustAPI/august-api/AGHouse.m:126:    NSString * path = [NSString stringWithFormat:@"houses/%@/image", houseId];
AugustAPI/august-api/AGHouse.m:146:	NSString * path = [NSString stringWithFormat:@"houses/%@",houseID];
AugustAPI/august-api/AGHouse.m:183:    return [NSDictionary dictionaryWithObjectsAndKeys:self.objectId, kHouseIdKey, self.name, kHouseNameKey, locks, @"locks", doorbells, @"doorbells", @{kImageURLKey: self.imageURL}, kImageInfoKey, self.houseType, kUserTypeKeyHouse, nil];
AugustAPI/august-api/AGHouse.m:202:        //DLog(@"houses %@", responseArray.description);
AugustAPI/august-api/AGHouse.m:255:            //DLog(@"houses fail %@", error.description);
AugustAPI/august-api/AGHouse.m:330:		//DLog(@"houses %@", responseObject.description);
AugustAPI/august-api/AGHouse.m:363:            //DLog(@"houses fail %@", error.description);
AugustAPI/august-api/AGHouse.m:413:    NSDictionary *locksResponse = responseDictionary[@"locks"];
AugustAPI/august-api/AGHouse.m:434:    NSArray *camerasResponseArray = responseDictionary[@"cameras"];
AugustAPI/august-api/AGHouse.m:442:    NSDictionary *doorbellsResponseArray = responseDictionary[@"doorbells"];
AugustAPI/august-api/AGHouse.m:466:	NSString * path = [@"houses/" stringByAppendingString:houseId];
AugustAPI/august-api/AGHouse.m:747:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld&endDate=%ld", houseID, (long)count, (long)endDate];
AugustAPI/august-api/AGHouse.m:751:        path = [NSString stringWithFormat:@"/houses/%@/activities?limit=%ld", houseID, (long)count];
AugustAPI/august-api/AGHouse.m:841:                        if (![[existingHouseRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:842:                            if ([[newRule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:886:            if (![user.type.lowercaseString isEqualToString:@"limited"]) {
AugustAPI/august-api/AGHouse.m:913:                if (![ruleID isEqualToString:@"always"]) {
AugustAPI/august-api/AGHouse.m:974:        if ([[rule.user displayTypeFromAGUser].capitalizedString.uppercaseString isEqualToString:@"OWNER"]) {
AugustAPI/august-api/AGHouse.m:1026:    NSArray *orderArray = @[@"earlier", @"the past week", @"yesterday", @"today", @"tomorrow", @"upcoming"];
AugustAPI/august-api/AGHouse.m:1043:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
AugustAPI/august-api/AGHouse.m:1052:        return @"today";
AugustAPI/august-api/AGHouse.m:1055:        return @"tomorrow";
AugustAPI/august-api/AGHouse.m:1058:        return @"yesterday";
AugustAPI/august-api/AGHouse.m:1061:        return @"upcoming";
AugustAPI/august-api/AGHouse.m:1064:        return @"the past week";
AugustAPI/august-api/AGHouse.m:1067:        return @"earlier";
AugustAPI/august-api/AGHouse.m:1141:                        [temperatures addObject:[tempDict objectForKey:@"farenheit"]];
AugustAPI/august-api/AGLog.m:38:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
AugustAPI/august-api/AGLog.m:47:	NSString *thePath = [NSString stringWithFormat:@"%@/%@", documentsDirectory, @"theLog"];
AugustAPI/august-api/AGLog.m:61:    if ([key rangeOfString:@"error" options:NSCaseInsensitiveSearch].location == NSNotFound) {
AugustAPI/august-api/AGLog.m:65:        DDLogError(@"%@", value);
AugustAPI/august-api/AGLog.m:77:    NSString *path = [NSString stringWithFormat:@"/clientlogdata"];
AugustAPI/august-api/AGLog.m:118:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockoperatedata", lockId];
AugustAPI/august-api/AGLog.m:122:    [parameters setObject:self.timeLogUUID forKey:@"ID"];
AugustAPI/august-api/AGLog.m:152:    NSDictionary* details = @{@"action": action,
AugustAPI/august-api/AGLog.m:153:                              @"event": event,
AugustAPI/august-api/AGLog.m:154:                              @"timestamp": [NSNumber numberWithLong:timestamp]};
AugustAPI/august-api/AGCamera.m:36:    camera.objectId = [responseDictionary objectForKey:@"CameraID"];
AugustAPI/august-api/AGCamera.m:37:    camera.name = [responseDictionary objectForKey:@"CameraName"];
AugustAPI/august-api/AGCamera.m:38:    camera.manufacturerID = [responseDictionary objectForKey:@"ManufacturerCameraID"];
AugustAPI/august-api/AGCamera.m:39:    camera.manufacturer = [responseDictionary objectForKey:@"manufacturer"];
AugustAPI/august-api/AGCamera.m:40:    camera.manufacturerData = [responseDictionary objectForKey:@"manufacturerData"];
AugustAPI/august-api/AGCamera.m:41:    camera.lockIDs = [responseDictionary objectForKey:@"locks"];
AugustAPI/august-api/AGCamera.m:42:    camera.doorbellIDs = [responseDictionary objectForKey:@"doorbells"];
AugustAPI/august-api/AGCamera.m:43:    camera.houseID = [responseDictionary objectForKey:@"HouseID"];
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:29:            self.host = @"";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:31:        } else if ([messagingProtocol isEqual:@"pubnub"]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:34:            self.host = @"";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:36:        } else if ([messagingProtocol isEqual:@"mqtt"]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:38:            if (messagingURL == nil || [messagingURL isEqual:@""]) {
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:39:                self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:40:                self.host = @"dev-mqtt.august.com";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:43:                NSArray* urlComponentsArray = [messagingURL componentsSeparatedByString: @":"];
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:45:                    self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:46:                    self.host = @"dev-mqtt.august.com";
AugustAPI/august-api/AGPubSubMessageBrokerClientDetails.m:51:                    self.host = [hostURLString stringByReplacingOccurrencesOfString:@"/" withString:@""];
AugustAPI/august-api/ISO8601DateFormatter.m:191:	NSAssert(timeSep != '\0', @"Time separator must not be NUL.");
AugustAPI/august-api/ISO8601DateFormatter.m:531:						timeZone = [NSTimeZone timeZoneWithAbbreviation:@"UTC"];
AugustAPI/august-api/ISO8601DateFormatter.m:651:		[timeFormatMutable replaceOccurrencesOfString:@":"
AugustAPI/august-api/ISO8601DateFormatter.m:682:		dateFormat = [dateFormat stringByAppendingFormat:@"'T'%@", [self replaceColonsInString:ISO_TIME_FORMAT withTimeSeparator:self.timeSeparator]];
AugustAPI/august-api/ISO8601DateFormatter.m:793:		timeString = @"";
AugustAPI/august-api/ISO8601DateFormatter.m:795:	return [NSString stringWithFormat:@"%lu-W%02lu-%02lu%@", (unsigned long)year, (unsigned long)week, ((unsigned long)dayOfWeek) + 1U, timeString];
AugustAPI/august-api/AGLockLogEntry.h:175: * This is @"self" for missed and declined calls. And a userId for answered and intiated calls.
AugustAPI/august-api/AGLockCapability.m:74:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:75:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:82:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:83:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:84:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:85:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:86:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:87:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:88:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:89:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:90:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:91:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:110:                self.onboardCPUs = @[@"arm", @"ti"];
AugustAPI/august-api/AGLockCapability.m:116:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:117:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:125:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:126:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:127:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:128:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:129:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:130:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:131:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:132:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:133:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:134:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:153:                self.onboardCPUs = @[@"bcm", @"st"];
AugustAPI/august-api/AGLockCapability.m:159:                self.lockInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:160:                self.doorSenseInstallationInstructionURL = @"";
AugustAPI/august-api/AGLockCapability.m:168:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:169:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:170:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:171:                                         kCalibrationImageStart : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:172:                                         kCalibrationImageClosedAndLockedLock : @"Calibrate_lock_door",
AugustAPI/august-api/AGLockCapability.m:173:                                         kCalibrationImageClosedAndUnlockedLock : @"Calibrate_unlock_door",
AugustAPI/august-api/AGLockCapability.m:174:                                         kCalibrationImageDoorWideOpenDoor : @"",
AugustAPI/august-api/AGLockCapability.m:175:                                         kCalibrationImageDoorAjarDoor : @"",
AugustAPI/august-api/AGLockCapability.m:176:                                         kCalibrationImageClosedAndUnlockedDoor : @"",
AugustAPI/august-api/AGLockCapability.m:177:                                         kCalibrationImageFinished : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:196:                self.onboardCPUs = @[@"dlg",@"sd"];
AugustAPI/august-api/AGLockCapability.m:202:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/";
AugustAPI/august-api/AGLockCapability.m:203:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl3";
AugustAPI/august-api/AGLockCapability.m:211:                                         kLockSettingsIcon : @"LockSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:212:                                         kLockSetupHeroImage : @"basic_lock_setup",
AugustAPI/august-api/AGLockCapability.m:213:                                         kCalibrationImageLockAndDoorQuestion : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:214:                                         kCalibrationImageStart : @"DoorStateCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:215:                                         kCalibrationImageClosedAndLockedLock : @"DoorStateCalibrationClosedAndHandLocked",
AugustAPI/august-api/AGLockCapability.m:216:                                         kCalibrationImageClosedAndUnlockedLock : @"DoorStateCalibrationClosedAndHandUnlocked",
AugustAPI/august-api/AGLockCapability.m:217:                                         kCalibrationImageDoorWideOpenDoor : @"DoorStateCalibrationDoorOpen",
AugustAPI/august-api/AGLockCapability.m:218:                                         kCalibrationImageDoorAjarDoor : @"DoorStateCalibrationDoorAjar",
AugustAPI/august-api/AGLockCapability.m:219:                                         kCalibrationImageClosedAndUnlockedDoor : @"DoorStateCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:220:                                         kCalibrationImageFinished : @"EuropaCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:239:                self.onboardCPUs = @[@"dlg"];
AugustAPI/august-api/AGLockCapability.m:245:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl4/";
AugustAPI/august-api/AGLockCapability.m:246:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-asl4";
AugustAPI/august-api/AGLockCapability.m:254:                                         kLockSettingsIcon : @"CallistoSettingsIcon",
AugustAPI/august-api/AGLockCapability.m:255:                                         kLockSetupHeroImage : @"CallistoLockSetup",
AugustAPI/august-api/AGLockCapability.m:256:                                         kCalibrationImageLockAndDoorQuestion : @"CallistoCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:257:                                         kCalibrationImageStart : @"CallistoCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:258:                                         kCalibrationImageClosedAndLockedLock : @"CallistoCalibrationClosedAndHandLocked",
AugustAPI/august-api/AGLockCapability.m:259:                                         kCalibrationImageClosedAndUnlockedLock : @"CallistoCalibrationClosedAndHandUnlocked",
AugustAPI/august-api/AGLockCapability.m:260:                                         kCalibrationImageDoorWideOpenDoor : @"CallistoCalibrationDoorOpen",
AugustAPI/august-api/AGLockCapability.m:261:                                         kCalibrationImageDoorAjarDoor : @"CallistoCalibrationDoorAjar",
AugustAPI/august-api/AGLockCapability.m:262:                                         kCalibrationImageClosedAndUnlockedDoor : @"CallistoCalibrationClosedAndUnlocked",
AugustAPI/august-api/AGLockCapability.m:263:                                         kCalibrationImageFinished : @"CallistoCalibrationHero",
AugustAPI/august-api/AGLockCapability.m:282:                self.onboardCPUs = @[@"dlg",@"yale"];
AugustAPI/august-api/AGLockCapability.m:288:                self.lockInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/md01/";
AugustAPI/august-api/AGLockCapability.m:289:                self.doorSenseInstallationInstructionURL = @"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/doorsense-md01-yale/";
AugustAPI/august-api/AGLockCapability.m:296:                                         kLockSettingsIcon : @"UnitySettingsIcon",
AugustAPI/august-api/AGLockCapability.m:297:                                         kLockSetupHeroImage : @"unity_setup",
AugustAPI/august-api/AGLockCapability.m:298:                                         kCalibrationImageLockAndDoorQuestion : @"unity_setup",
AugustAPI/august-api/AGLockCapability.m:299:                                         kCalibrationImageStart : @"unity_calibration1",
AugustAPI/august-api/AGLockCapability.m:300:                                         kCalibrationImageClosedAndLockedLock : @"calibration_yale_lock_door",
AugustAPI/august-api/AGLockCapability.m:301:                                         kCalibrationImageClosedAndUnlockedLock : @"calibration_yale_closed_unlocked",
AugustAPI/august-api/AGLockCapability.m:302:                                         kCalibrationImageDoorWideOpenDoor : @"calibration_yale_open_door",
AugustAPI/august-api/AGLockCapability.m:303:                                         kCalibrationImageDoorAjarDoor : @"calibration_yale_ajar_door",
AugustAPI/august-api/AGLockCapability.m:304:                                         kCalibrationImageClosedAndUnlockedDoor : @"calibration_yale_closed_unlocked",
AugustAPI/august-api/AGLockCapability.m:305:                                         kCalibrationImageFinished : @"doorsense_yale",
AugustAPI/august-api/AGLockCapability.m:315:    [loggingDictionary setObject:[NSNumber numberWithInt:self.lockPlanetType] forKey:@"LockType"];
AugustAPI/august-api/AGPartnerCategory.m:19:        self.name = dict[@"tag"];
AugustAPI/august-api/AGPartnerCategory.m:20:        self.partnerIDs = dict[@"appItems"];
AugustAPI/august-api/AGKeyStorage.m:23:        return @"HK";
AugustAPI/august-api/AGKeyStorage.m:26:        return @"OK";
AugustAPI/august-api/AGKeyStorage.m:61:    [SAMKeychain setPassword:serializedData forService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:67:    [SAMKeychain deletePasswordForService:kAugustKeychainService account:[prefix stringByAppendingString:lockID] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:78:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"]];
AugustAPI/august-api/AGKeyStorage.m:81:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:83:        [SAMKeychain deletePasswordForService:kAugustKeychainService account:[curAccount objectForKey:@"acct"] accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:99:        NSString *accountID = [curAccount objectForKey:@"acct"];
AugustAPI/august-api/AGKeyStorage.m:105:    accounts = [SAMKeychain accountsForService:kAugustKeychainService accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:107:        NSString *accountID = [curAccount objectForKey:@"acct"];
AugustAPI/august-api/AGKeyStorage.m:109:            [SAMKeychain deletePasswordForService:kAugustKeychainService account:accountID accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGKeyStorage.m:115:    return !([[[NSUserDefaults standardUserDefaults] stringForKey:@"KeysMigrated"] boolValue]);
AugustAPI/august-api/AGKeyStorage.m:136:        [[NSUserDefaults standardUserDefaults]  setObject:[NSNumber numberWithBool:TRUE] forKey:@"KeysMigrated"];
AugustAPI/august-api/AGClient.m:34:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:48:    if ([url rangeOfString:@"https://"].location != 0) {
AugustAPI/august-api/AGClient.m:52:    return [theURL.host hasSuffix:@".august.com"];
AugustAPI/august-api/AGClient.m:62:        NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:91:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Accept"];
AugustAPI/august-api/AGClient.m:92:    [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/AGClient.m:93:    [self.requestSerializer setValue:kSezamAPIVersion forHTTPHeaderField:@"accept-version"];
AugustAPI/august-api/AGClient.m:111:    [[NSUserDefaults standardUserDefaults] setObject:urlString forKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:114:    NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
AugustAPI/august-api/AGClient.m:115:    [crossProcessDefaults setObject:urlString forKey:@"APIBaseURL"];
AugustAPI/august-api/AGClient.m:124:    NSMutableDictionary *userInfo = @{@"clientSerial": clientSerial, @"requestTime" : [NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000]}.mutableCopy;
AugustAPI/august-api/AGClient.m:132:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:145:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
AugustAPI/august-api/AGClient.m:161:                else if ((response.statusCode == 400) && ([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:167:                            serverErrorCode = [(NSDictionary *)localizedRecoverySuggestion objectForKey:@"code"];
AugustAPI/august-api/AGClient.m:169:                        if ([serverErrorCode isEqualToString:@"InvalidVersion"]) {
AugustAPI/august-api/AGClient.m:183:                else if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && (response.statusCode != 404) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:192:                    if ((error.userInfo!=nil) && ([error.userInfo objectForKey:@"NSLocalizedDescription"] != nil)) {
AugustAPI/august-api/AGClient.m:193:                        errorUserInfo = @{@"NSLocalizedDescription":error.userInfo[@"NSLocalizedDescription"]};
AugustAPI/august-api/AGClient.m:204:                if (([urlRequest.HTTPMethod isEqualToString:@"GET"]) && ([urlRequest.URL.absoluteString rangeOfString:@"augustappversionok" options:NSCaseInsensitiveSearch].location == NSNotFound)) {
AugustAPI/august-api/AGClient.m:219:                if (([urlRequest.URL.absoluteString rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"clientlogdata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"lockoperatedata" options:NSCaseInsensitiveSearch].location == NSNotFound) && ([urlRequest.URL.absoluteString rangeOfString:@"/log" options:NSCaseInsensitiveSearch].location == NSNotFound)) {         // don't log the log requests!
AugustAPI/august-api/AGClient.m:231:                    NSString *accessToken = [allHTTPHeaderFields objectForKey:@"x-august-access-token"];
AugustAPI/august-api/AGClient.m:238:                        [userInfo setObject:[NSString stringWithFormat:@"%f", [[NSDate date] timeIntervalSince1970] * 1000] forKey:@"responseTime"];
AugustAPI/august-api/AGClient.m:263:    [self logRequest:request logType:@"LOG SYNCHRONOUS REQUEST"];
AugustAPI/august-api/AGClient.m:269:    [self logResponse:response responseBody:data request:request error:error logType:@"LOG SYNCHRONOUS RESPONSE"];
AugustAPI/august-api/AGClient.m:270:    if ((error != nil) && ([error.localizedDescription rangeOfString:@"401"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:318:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"GET" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:320:    if (([URLString.lowercaseString rangeOfString:@"locks/firmware"].location != NSNotFound) || ([URLString.lowercaseString rangeOfString:@"firmware/arm"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:322:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/octet-stream"}];
AugustAPI/august-api/AGClient.m:324:    else if ([URLString.lowercaseString rangeOfString:@"firmware/ti"].location != NSNotFound) {
AugustAPI/august-api/AGClient.m:326:        [request setAllHTTPHeaderFields:@{@"Accept": @"application/x-gzip"}];
AugustAPI/august-api/AGClient.m:362:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:377:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:URLString parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:378:    [request setValue:nil forHTTPHeaderField:@"accept-version"];
AugustAPI/august-api/AGClient.m:389:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"POST" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:402:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:417:    NSMutableURLRequest *request = [self.requestSerializer requestWithMethod:@"PUT" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:436:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"DELETE" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:452:    NSURLRequest *request = [self.requestSerializer requestWithMethod:@"PATCH" URLString:[self appendClientSerial:URLString clientSerial:clientSerial] parameters:parameters error:nil];
AugustAPI/august-api/AGClient.m:461:    [self uploadFileWithType:@"POST" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
AugustAPI/august-api/AGClient.m:468:    [self uploadFileWithType:@"PUT" path:path fileData:fileData mimeType:mimeType augustAPIResponse:augustAPIResponse];
AugustAPI/august-api/AGClient.m:480:    [request setValue:mimeType forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/AGClient.m:481:    [request setValue:@"" forHTTPHeaderField:@"Accept-Encoding"];
AugustAPI/august-api/AGClient.m:487:    if ([path rangeOfString:@"logrequesttime" options:NSCaseInsensitiveSearch].location == NSNotFound) {
AugustAPI/august-api/AGClient.m:488:        return [NSString stringWithFormat:@"%@%@clientSerial=%@", path,
AugustAPI/august-api/AGClient.m:489:                [path rangeOfString:@"?"].length > 0 ? @"&" : @"?", clientSerial];
AugustAPI/august-api/AGClient.m:497:    NSUInteger location = [path rangeOfString:@"?clientSerial="].location;
AugustAPI/august-api/AGClient.m:521:    [[NSUserDefaults standardUserDefaults] setObject:@"1" forKey:@"GotAccessTokenAfterInstall"];
AugustAPI/august-api/AGClient.m:523:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGClient.m:524:    [SAMKeychain setPassword:accessToken forService:kSezam account:@"AugustAccessToken" accessGroup:@"group.com.august.general-cross-process" error:nil];
AugustAPI/august-api/AGClient.m:538:    NSUInteger ampIndex = [stringToDecode rangeOfString:@"&" options:NSLiteralSearch].location;
AugustAPI/august-api/AGClient.m:552:    NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];
AugustAPI/august-api/AGClient.m:557:        if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {
AugustAPI/august-api/AGClient.m:564:        if ([scanner scanString:@"&amp;" intoString:NULL])
AugustAPI/august-api/AGClient.m:565:            [result appendString:@"&"];
AugustAPI/august-api/AGClient.m:566:        else if ([scanner scanString:@"&apos;" intoString:NULL])
AugustAPI/august-api/AGClient.m:567:            [result appendString:@"'"];
AugustAPI/august-api/AGClient.m:568:        else if ([scanner scanString:@"&quot;" intoString:NULL])
AugustAPI/august-api/AGClient.m:569:            [result appendString:@"\""];
AugustAPI/august-api/AGClient.m:570:        else if ([scanner scanString:@"&lt;" intoString:NULL])
AugustAPI/august-api/AGClient.m:571:            [result appendString:@"<"];
AugustAPI/august-api/AGClient.m:572:        else if ([scanner scanString:@"&gt;" intoString:NULL])
AugustAPI/august-api/AGClient.m:573:            [result appendString:@">"];
AugustAPI/august-api/AGClient.m:574:        else if ([scanner scanString:@"&#" intoString:NULL]) {
AugustAPI/august-api/AGClient.m:577:            NSString *xForHex = @"";
AugustAPI/august-api/AGClient.m:580:            if ([scanner scanString:@"x" intoString:&xForHex]) {
AugustAPI/august-api/AGClient.m:588:                [result appendFormat:@"%C", (unichar)charCode];
AugustAPI/august-api/AGClient.m:590:                [scanner scanString:@";" intoString:NULL];
AugustAPI/august-api/AGClient.m:593:                NSString *unknownEntity = @"";
AugustAPI/august-api/AGClient.m:598:                [result appendFormat:@"&#%@%@", xForHex, unknownEntity];
AugustAPI/august-api/AGClient.m:600:                //[scanner scanUpToString:@";" intoString:&unknownEntity];
AugustAPI/august-api/AGClient.m:601:                //[result appendFormat:@"&#%@%@;", xForHex, unknownEntity];
AugustAPI/august-api/AGClient.m:610:            [scanner scanString:@"&" intoString:&amp];  //an isolated & symbol
AugustAPI/august-api/AGClient.m:614:             NSString *unknownEntity = @"";
AugustAPI/august-api/AGClient.m:615:             [scanner scanUpToString:@";" intoString:&unknownEntity];
AugustAPI/august-api/AGClient.m:616:             NSString *semicolon = @"";
AugustAPI/august-api/AGClient.m:617:             [scanner scanString:@";" intoString:&semicolon];
AugustAPI/august-api/AGClient.m:618:             [result appendFormat:@"%@%@", unknownEntity, semicolon];
AugustAPI/august-api/AGClient.m:632:    encodedString = [encodedString stringByReplacingOccurrencesOfString:@"+" withString:@"%2B"];
AugustAPI/august-api/AGClient.m:638:    NSMutableDictionary *requestURLDataTypesDict = [[NSMutableDictionary alloc] initWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"]];
AugustAPI/august-api/AGClient.m:640:    [[NSUserDefaults standardUserDefaults] setObject:requestURLDataTypesDict forKey:@"requestURLDataTypes"];
AugustAPI/august-api/AGClient.m:645:    NSDictionary *requestURLDataTypesDict = [[NSUserDefaults standardUserDefaults] objectForKey:@"requestURLDataTypes"];
AugustAPI/august-api/AGClient.m:667:    NSArray *cachedNetworkObjectKeys = [[NSUserDefaults standardUserDefaults] objectForKey:@"CachedNetworkObjectKeys"];
AugustAPI/august-api/AGClient.m:679:    NSString *agNetworkCacheFolder = [documentsDirectory stringByAppendingPathComponent:@"AGResponseCache"];
AugustAPI/august-api/AGClient.m:685:    return (([requestURL rangeOfString:@"nest"].location != NSNotFound) || ([requestURL rangeOfString:@"temperature"].location != NSNotFound) || ([requestURL rangeOfString:@"airbnb"].location != NSNotFound));
AugustAPI/august-api/AGClient.m:696:    return @[@"logrequesttime", @"clientlogdata", @"lockoperatedata", @"/log", @"/session"];
AugustAPI/august-api/AGClient.m:709:    [self logRequest:request logType:@"LOG REQUEST"];
AugustAPI/august-api/AGClient.m:719:    if (([[request.allHTTPHeaderFields objectForKey:@"Content-Type"] rangeOfString:@"application/json"].location != NSNotFound)) {
AugustAPI/august-api/AGClient.m:726:        [logDictionary setObject:@"<data>" forKey:@"Body"];
AugustAPI/august-api/AGClient.m:735:                                                                                        @"Type": type,
AugustAPI/august-api/AGClient.m:736:                                                                                        @"Request": request.URL.absoluteString
AugustAPI/august-api/AGClient.m:740:        [logEntryDict setObject:[self.logCleaner cleanedJSON:request.allHTTPHeaderFields] forKey:@"Headers"];
AugustAPI/august-api/AGClient.m:745:            [logEntryDict setObject:cleanedJSON forKey:@"Body"];
AugustAPI/august-api/AGClient.m:753:    [self logResponse:response responseBody:body request:request error:error logType:@"LOG RESPONSE"];
AugustAPI/august-api/AGClient.m:781:                                                                                        @"Type": type,
AugustAPI/august-api/AGClient.m:782:                                                                                        @"Request": request.URL.absoluteString
AugustAPI/august-api/AGClient.m:785:        [logEntryDict setObject:[NSString stringWithFormat:@"%ld", (long)[response statusCode]] forKey:@"Response"];
AugustAPI/august-api/AGClient.m:788:        [logEntryDict setObject:[self.logCleaner cleanedJSON:response.allHeaderFields] forKey:@"Headers"];
AugustAPI/august-api/AGClient.m:791:        [logEntryDict setObject:cleanedJSON forKey:@"Body"];
AugustAPI/august-api/AGClient.m:794:        [logEntryDict setObject:error.localizedDescription forKey:@"Error"];
AugustAPI/august-api/AGAPIUtilityTests.m:32:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"D2GT00000F"] isEqualToString:@"2.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:33:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"L3FSQ0007D"] isEqualToString:@"3.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:34:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"X12FP00001A"] isEqualToString:@"12.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:37:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"abc123"] isEqualToString:@"0.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:38:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"D1"] isEqualToString:@"0.0.0"]);
AugustAPI/august-api/AGAPIUtilityTests.m:39:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@"DD12GT0000F"] isEqualToString:@"0.0.0"]);//Too many D's at front
AugustAPI/august-api/AGAPIUtilityTests.m:40:    XCTAssertTrue([[AGAPIUtility semanticVersionFromSerialNumber:@" D12GT0000F"] isEqualToString:@"0.0.0"]);//Prefixed by a space
AugustAPI/august-api/AGPartner.m:18:        self.serverId = dict[@"_id"];
AugustAPI/august-api/AGPartner.m:19:        self.name = dict[@"name"];
AugustAPI/august-api/AGPartner.m:20:        self.heroImageURL = dict[@"heroImageURL"];
AugustAPI/august-api/AGPartner.m:21:        self.partnerURL = dict[@"partnerURL"];
AugustAPI/august-api/AGPartner.m:22:        self.logoURL = dict[@"logoURL"];
AugustAPI/august-api/AGPartner.m:23:        self.wordmarkURL = dict[@"wordmarkURL"];
AugustAPI/august-api/AGPartner.m:24:        self.partnerTagline = dict[@"partnerTagline"];
AugustAPI/august-api/AGPartner.m:25:        self.jointTagline = dict[@"jointTagline"];
AugustAPI/august-api/AGPartner.m:26:        self.partnerDescription = dict[@"partnerDescription"];
AugustAPI/august-api/AGPartner.m:27:        self.jointDescription = dict[@"jointDescription"];
AugustAPI/august-api/AGPartner.m:28:        self.promotion = dict[@"promotion"];
AugustAPI/august-api/AGPartner.m:29:        self.locations = dict[@"locations"];
AugustAPI/august-api/AGPartner.m:30:        self.type = dict[@"type"];
AugustAPI/august-api/AGLockServerStatus.m:19:    NSString *status = (NSString *)dictionary[@"status"];
AugustAPI/august-api/AGLockServerStatus.m:20:    NSString *lastUpdatedAt = (NSString *)dictionary[@"dateTime"];
AugustAPI/august-api/AGLockServerStatus.m:21:    if ([status isEqualToString:@"locked"]) {
AugustAPI/august-api/AGLockServerStatus.m:23:    } else if ([status isEqualToString:@"unlocked"]) {
AugustAPI/august-api/AGLockServerStatus.m:28:    if ((lastUpdatedAt != nil) && (![lastUpdatedAt isEqualToString:@""])) {
AugustAPI/august-api/AGNestCamera.m:39:        nestCamera.name = [nestCameraDictionary objectForKey:@"name"];
AugustAPI/august-api/AGNestCamera.m:40:        nestCamera.nestDeviceID = [nestCameraDictionary objectForKey:@"device_id"];
AugustAPI/august-api/AGNestCamera.m:41:        nestCamera.nestStructureID = [nestCameraDictionary objectForKey:@"structure_id"];
AugustAPI/august-api/AGNestCamera.m:42:        nestCamera.nameLong = [nestCameraDictionary objectForKey:@"name_long"];
AugustAPI/august-api/AGNestCamera.m:43:        nestCamera.webURL = [nestCameraDictionary objectForKey:@"web_url"];
AugustAPI/august-api/AGNestCamera.m:44:        nestCamera.appURL = [nestCameraDictionary objectForKey:@"app_url"];
AugustAPI/august-api/AGNestCamera.m:54:            self.objectId = [responseObject objectForKey:@"CameraID"];
AugustAPI/august-api/NSString+HTMLEscape.m:15:    [escapedString replaceOccurrencesOfString:@"&amp;"  withString:@"&"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:16:    [escapedString replaceOccurrencesOfString:@"&quot;" withString:@"\"" options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:17:    [escapedString replaceOccurrencesOfString:@"&#x27;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:18:    [escapedString replaceOccurrencesOfString:@"&#39;"  withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:19:    [escapedString replaceOccurrencesOfString:@"&#x92;" withString:@"'"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:20:    [escapedString replaceOccurrencesOfString:@"&#x96;" withString:@"-"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:21:    [escapedString replaceOccurrencesOfString:@"&gt;"   withString:@">"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/NSString+HTMLEscape.m:22:    [escapedString replaceOccurrencesOfString:@"&lt;"   withString:@"<"  options:NSLiteralSearch range:NSMakeRange(0, [escapedString length])];
AugustAPI/august-api/AGUser.m:26:		return [NSString stringWithFormat:@"%@ %@", self.firstName , self.lastName];
AugustAPI/august-api/AGUser.m:43:		return [NSString stringWithFormat:@"%@", self.email];
AugustAPI/august-api/AGUser.m:50:    if ([self.type.lowercaseString isEqualToString:@"superuser"]) {
AugustAPI/august-api/AGUser.m:51:        return @"Owner";
AugustAPI/august-api/AGUser.m:53:    else if ([self.type.lowercaseString isEqualToString:@"manager"]) {
AugustAPI/august-api/AGUser.m:54:        return @"Host";
AugustAPI/august-api/AGUser.m:56:    else if ([self.type.lowercaseString isEqualToString:@"limited"] || [self.type.lowercaseString isEqualToString:@"user"]) {
AugustAPI/august-api/AGUser.m:57:        return @"Guest";
AugustAPI/august-api/AGUser.m:60:    return @"";
AugustAPI/august-api/AGUser.m:65:	NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:92:	user.username = dictionary[@"UserID"];
AugustAPI/august-api/AGUser.m:93:	user.password = dictionary[@"UserPassword"];
AugustAPI/august-api/AGUser.m:103:	NSString * path = [@"users/" stringByAppendingString:userId];
AugustAPI/august-api/AGUser.m:144:        [parameters setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:147:        [parameters setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:150:        [parameters setObject:email forKey:@"Email"];
AugustAPI/august-api/AGUser.m:153:        [parameters setObject:phoneNumber forKey:@"PhoneNo"];
AugustAPI/august-api/AGUser.m:156:        [parameters setObject:password forKey:@"UserPassword"];
AugustAPI/august-api/AGUser.m:159:	NSString * path = [NSString stringWithFormat:@"users"];
AugustAPI/august-api/AGUser.m:203:	NSString * path = @"users/me" ;
AugustAPI/august-api/AGUser.m:248:    NSString * gotAccessTokenAfterInstall = [[NSUserDefaults standardUserDefaults] objectForKey:@"GotAccessTokenAfterInstall"];
AugustAPI/august-api/AGUser.m:255:    NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
AugustAPI/august-api/AGUser.m:275:            NSString *accessToken = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:&error];
AugustAPI/august-api/AGUser.m:284:                user.objectId = @"me";
AugustAPI/august-api/AGUser.m:292:                    NSString *lastLoggedOutUserPhoneNumber = [[NSUserDefaults standardUserDefaults] objectForKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:295:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:296:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:297:                        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:300:                    [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:user];
AugustAPI/august-api/AGUser.m:320:	NSString * path = @"apns/devtoken";
AugustAPI/august-api/AGUser.m:323:                                 @"apnstoken": token,
AugustAPI/august-api/AGUser.m:324:                                 @"deviceID":deviceID
AugustAPI/august-api/AGUser.m:335:    NSString * path = [NSString stringWithFormat:@"users/%@/image", userId];
AugustAPI/august-api/AGUser.m:353:    NSString * path = [NSString stringWithFormat:@"users/%@", phoneNumber];
AugustAPI/august-api/AGUser.m:464:                                        //  @"FirstName":self.email,
AugustAPI/august-api/AGUser.m:465:                                        //  @"LastName":self.email,
AugustAPI/august-api/AGUser.m:466:                                        //  @"MacAddress":self.email,
AugustAPI/august-api/AGUser.m:467:                                        //  @"PhoneNo":self.email,
AugustAPI/august-api/AGUser.m:468:                                        //  @"Type":self.email,
AugustAPI/august-api/AGUser.m:529:        [paramsDict setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:532:        [paramsDict setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:535:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:556:        [paramsDict setObject:firstName forKey:@"FirstName"];
AugustAPI/august-api/AGUser.m:559:        [paramsDict setObject:lastName forKey:@"LastName"];
AugustAPI/august-api/AGUser.m:562:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:589:            if ([responseObject objectForKey:@"exists"] != nil) {
AugustAPI/august-api/AGUser.m:590:                exists = [[responseObject objectForKey:@"exists"] boolValue];
AugustAPI/august-api/AGUser.m:610:        paramsDict = @{@"value":[email lowercaseString]};
AugustAPI/august-api/AGUser.m:629:                                        @"code":code
AugustAPI/august-api/AGUser.m:633:        [paramsDict setObject:[email lowercaseString]  forKey:@"email"];
AugustAPI/august-api/AGUser.m:654:        paramsDict = @{@"value":phone};
AugustAPI/august-api/AGUser.m:673:                                 @"code":code
AugustAPI/august-api/AGUser.m:677:        [paramsDict setObject:phone forKey:@"phone"];
AugustAPI/august-api/AGUser.m:696:    NSMutableDictionary *paramsDict = @{@"installId":installToken
AugustAPI/august-api/AGUser.m:700:        [paramsDict setObject:identifier forKey:@"identifier"];
AugustAPI/august-api/AGUser.m:703:        [paramsDict setObject:password forKey:@"password"];
AugustAPI/august-api/AGUser.m:724:                NSString *message = [responseObject objectForKey:@"message"];
AugustAPI/august-api/AGUser.m:924:        id account = [accountDict objectForKey:@"acct"];
AugustAPI/august-api/AGUser.m:926:        if (([[account class] isSubclassOfClass:[NSString class]]) && (![account isEqualToString:@"AugustInstallToken"])) {
AugustAPI/august-api/AGUser.m:932:    NSString *apiBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:935:    NSDictionary *autoUnlockRegions = [[NSUserDefaults standardUserDefaults] objectForKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:936:    NSDictionary *exitRegionLockEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:937:    BOOL doDisableOTA = [[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"];
AugustAPI/august-api/AGUser.m:938:    BOOL doDebugAddLock =  [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
AugustAPI/august-api/AGUser.m:939:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGUser.m:944:    if(![[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] containsObject:@"PairingEnabled"]){
AugustAPI/august-api/AGUser.m:946:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"PairingEnabled"];
AugustAPI/august-api/AGUser.m:950:        [[NSUserDefaults standardUserDefaults] setObject:apiBaseURL forKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:952:        NSUserDefaults *crossProcessDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
AugustAPI/august-api/AGUser.m:953:        [crossProcessDefaults setObject:apiBaseURL forKey:@"APIBaseURL"];
AugustAPI/august-api/AGUser.m:959:    [[NSUserDefaults standardUserDefaults] setObject:autoUnlockRegions forKey:@"AutoUnlockRegions"];
AugustAPI/august-api/AGUser.m:961:    [[NSUserDefaults standardUserDefaults] setObject:exitRegionLockEventDetail forKey:@"ExitRegionLockEventDetail"];
AugustAPI/august-api/AGUser.m:962:    [[NSUserDefaults standardUserDefaults] setBool:doDisableOTA forKey:@"DisableOTA"];
AugustAPI/august-api/AGUser.m:963:    [[NSUserDefaults standardUserDefaults] setBool:doDebugAddLock forKey:@"DebugAddLock"];
AugustAPI/august-api/AGUser.m:964:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGUser.m:967:        [[NSUserDefaults standardUserDefaults] setObject:[AGUser currentUser].phoneNumber forKey:@"LastLoggedOutUserPhoneNumber"];
AugustAPI/august-api/AGUser.m:1050:            if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGUser.m:1052:            }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGUser.m:1083:    NSString *installTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustInstallToken" error:nil];
AugustAPI/august-api/AGUser.m:1086:        [SAMKeychain setPassword:installTokenStr forService:kSezam account:@"AugustInstallToken" error:nil];
AugustAPI/august-api/AGUser.m:1093:    [SAMKeychain deletePasswordForService:kSezam account:@"AugustInstallToken"];
AugustAPI/august-api/AGUser.m:1097:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:1101:    NSArray *accessTokenChunks = [accessTokenStr componentsSeparatedByString: @"."];
AugustAPI/august-api/AGUser.m:1106:    NSString *paddingEqualsStr = @"";
AugustAPI/august-api/AGUser.m:1109:            paddingEqualsStr = @"";
AugustAPI/august-api/AGUser.m:1112:            paddingEqualsStr = @"=";
AugustAPI/august-api/AGUser.m:1115:            paddingEqualsStr = @"==";
AugustAPI/august-api/AGUser.m:1118:            paddingEqualsStr = @"===";
AugustAPI/august-api/AGUser.m:1124:    NSString *accessTokenMeatStrWithPadding = [NSString stringWithFormat:@"%@%@", accessTokenMeatStr, paddingEqualsStr];
AugustAPI/august-api/AGUser.m:1137:    NSString *accessTokenStr = [SAMKeychain passwordForService:kSezam account:@"AugustAccessToken" error:nil];
AugustAPI/august-api/AGUser.m:1148:        NSNumber *isPhoneVerified = [accessTokenDict objectForKey:@"vPhone"];
AugustAPI/august-api/AGUser.m:1159:        NSNumber *isEmailVerified = [accessTokenDict objectForKey:@"vEmail"];
AugustAPI/august-api/AGUser.m:1170:        NSNumber *isPasswordVerified = [accessTokenDict objectForKey:@"vPassword"];
AugustAPI/august-api/AGUser.m:1181:        NSNumber *isInstallIdVerified = [accessTokenDict objectForKey:@"vInstallId"];
AugustAPI/august-api/AGUser.m:1192:        NSNumber *isPhonePresent = [accessTokenDict objectForKey:@"hasPhone"];
AugustAPI/august-api/AGUser.m:1203:        NSNumber *isEmailPresent = [accessTokenDict objectForKey:@"hasEmail"];
AugustAPI/august-api/AGUser.m:1214:        NSNumber *isPasswordPresent = [accessTokenDict objectForKey:@"hasPassword"];
AugustAPI/august-api/AGUser.m:1225:        NSNumber *isInstallIdPresent = [accessTokenDict objectForKey:@"hasInstallId"];
AugustAPI/august-api/AGUser.m:1254:    NSString *final = [emailOrPhone stringByReplacingOccurrencesOfString:@"email:" withString:@""];
AugustAPI/august-api/AGUser.m:1255:    final = [final stringByReplacingOccurrencesOfString:@"phone:" withString:@""];
AugustAPI/august-api/AGUser.m:1256:    final = [final stringByReplacingOccurrencesOfString:@"tel:" withString:@""];
AugustAPI/august-api/AGUser.m:1265:    if ([emailOrPhone rangeOfString:@"@"].location == NSNotFound) {
AugustAPI/august-api/AGUser.m:1267:        return [NSString stringWithFormat:@"phone:%@", updatedString];
AugustAPI/august-api/AGUser.m:1271:        return [NSString stringWithFormat:@"email:%@", updatedString];
AugustAPI/august-api/AGUser.m:1284:    [[NSUserDefaults standardUserDefaults] setObject:userID forKey:@"CurrentUserID"];
AugustAPI/august-api/AGUser.m:1289:    return [[NSUserDefaults standardUserDefaults] objectForKey:@"CurrentUserID"];
AugustAPI/august-api/AGRule.m:26:    NSRange range = [recurrenceString rangeOfString:@"BYDAY="];
AugustAPI/august-api/AGRule.m:33:    [ruleScanner scanUpToString:@"BYDAY=" intoString:nil];
AugustAPI/august-api/AGRule.m:34:    [ruleScanner scanUpToString:@";" intoString:&dayStr];
AugustAPI/august-api/AGRule.m:35:    dayStr = [dayStr stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
AugustAPI/august-api/AGRule.m:36:    NSArray* daysSplit = [dayStr componentsSeparatedByString: @","];
AugustAPI/august-api/AGBridge.m:89:    if ([bridgeStatus isEqual:@"online"]) {
AugustAPI/august-api/AGBridge.m:91:    }else if ([bridgeStatus isEqual:@"offline"]) {
AugustAPI/august-api/AGBridge.m:123:                                         userInfo:@{@"mfgBridgeId":@"mfgBridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:129:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:136:                                         userInfo:@{@"bridgeModel":@"bridgeModel cannot be nil"}];
AugustAPI/august-api/AGBridge.m:149:    [[AGClient sharedClient] postPath:@"bridges" parameters:parameters
AugustAPI/august-api/AGBridge.m:159:                    bridge.objectId = [responseObject valueForKey:@"bridgeID"];
AugustAPI/august-api/AGBridge.m:185:    [[AGClient sharedClient] getPath:@"users/bridges/mine" parameters:nil
AugustAPI/august-api/AGBridge.m:201:                     NSArray *lockIds = (NSArray *)[bridgeDictionary objectForKey:@"locks"];
AugustAPI/august-api/AGBridge.m:238:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:244:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGBridge.m:272:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:278:    NSString* path = [@"bridges/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGBridge.m:306:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:314:    NSString *type = typeAndChannelDictionary[@"type"];
AugustAPI/august-api/AGBridge.m:315:    //NSString *channel = typeAndChannelDictionary[@"channel"];
AugustAPI/august-api/AGBridge.m:318:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
AugustAPI/august-api/AGBridge.m:348:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:356:    NSString *type = typeAndChannelDictionary[@"type"];
AugustAPI/august-api/AGBridge.m:357:    //NSString *channel = typeAndChannelDictionary[@"channel"];
AugustAPI/august-api/AGBridge.m:360:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications/%@", self.objectId, type];
AugustAPI/august-api/AGBridge.m:405:    NSDictionary *typeAndChannelDictionary = [[NSDictionary alloc] initWithObjectsAndKeys:type, @"type", channel, @"channel",nil];
AugustAPI/august-api/AGBridge.m:420:                                         userInfo:@{@"bridgeId":@"bridgeId cannot be nil"}];
AugustAPI/august-api/AGBridge.m:426:    NSString *path = [NSString stringWithFormat:@"bridges/%@/notifications", self.objectId];
AugustAPI/august-api/ISO8601DateFormatter.h:12: *The loose parser will return an NSDate for this string: @" \t\r\n\f\t  2006-03-02!!!"
AugustAPI/august-api/AGLock.m:59:    NSDictionary *parameters = @{@"LockName": name};
AugustAPI/august-api/AGLock.m:61:    NSString *path = [NSString stringWithFormat:@"locks/acquire/%@/%@/%@", lockID, houseID, code];
AugustAPI/august-api/AGLock.m:95:                                 kLockTypeKey:@"1",
AugustAPI/august-api/AGLock.m:101:	NSString * path = [@"locks/" stringByAppendingString:houseID];
AugustAPI/august-api/AGLock.m:104:		//DLog(@"create lock %@", responseObject.description);
AugustAPI/august-api/AGLock.m:147:            NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
AugustAPI/august-api/AGLock.m:151:            [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
AugustAPI/august-api/AGLock.m:153:            NSString* updatedDateString = [NSString stringWithFormat:@"%@",responseObject[kUpdatedKey]];
AugustAPI/august-api/AGLock.m:164:            //DLog(@" fail %@", error.description);
AugustAPI/august-api/AGLock.m:191:    [[AGClient sharedClient] getPath:[NSString stringWithFormat: @"locks/%@/status", self.objectId] parameters:nil
AugustAPI/august-api/AGLock.m:205://[[AGClient sharedClient] postPath:@"add_user" parameters:paramsDict success:^(AFHTTPRequestOperation *operation, NSDictionary* responseObject) {
AugustAPI/august-api/AGLock.m:214:    //@"users/:userID/locks"
AugustAPI/august-api/AGLock.m:215:    //	NSString * path = @"users/";
AugustAPI/august-api/AGLock.m:217:    //	//path = [path stringByAppendingString:@":"];
AugustAPI/august-api/AGLock.m:219:    //	path = [path stringByAppendingString:@"/locks"];
AugustAPI/august-api/AGLock.m:224:            //DLog(@"locks %@", responseDictionary.description);
AugustAPI/august-api/AGLock.m:305:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGLock.m:376:        NSString *identifier = [invitationInfo objectForKey:@"identifier"];
AugustAPI/august-api/AGLock.m:377:        if (([identifier rangeOfString:@"phone:"].location != NSNotFound) || ([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGLock.m:380:        if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGLock.m:383:        NSString *ruleId = [invitationInfo objectForKey:@"rule"];
AugustAPI/august-api/AGLock.m:388:        invitedUser.firstName = [AGClient stringByDecodingXMLEntities:[invitationInfo objectForKey:@"Name"]];
AugustAPI/august-api/AGLock.m:390:        invitedUser.type = [invitationInfo objectForKey:@"type"];
AugustAPI/august-api/AGLock.m:399:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
AugustAPI/august-api/AGLock.m:400:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
AugustAPI/august-api/AGLock.m:414:    if ([[offlineKey objectForKey:@"UserID"] isEqualToString:[AGUser currentUser].objectId]) {
AugustAPI/august-api/AGLock.m:415:        int slot =  ([((NSNumber *)[offlineKey objectForKey:@"slot"]) intValue]);
AugustAPI/august-api/AGLock.m:437:    NSArray *createdArray = [dictionary objectForKey:@"created"];
AugustAPI/august-api/AGLock.m:438:    NSArray *loadedArray = [dictionary objectForKey:@"loaded"];
AugustAPI/august-api/AGLock.m:439:    NSArray *deletedArray = [dictionary objectForKey:@"deleted"];
AugustAPI/august-api/AGLock.m:441:    NSArray *hkCreatedArray = [dictionary objectForKey:@"createdhk"];
AugustAPI/august-api/AGLock.m:442:    NSArray *hkLoadedArray = [dictionary objectForKey:@"loadedhk"];
AugustAPI/august-api/AGLock.m:443:    NSArray *hkDeletedArray = [dictionary objectForKey:@"deletedhk"];
AugustAPI/august-api/AGLock.m:496:        if ([[curLoadedKey objectForKey:@"slot"] isEqual:[newlyLoadedOfflineKey objectForKey:@"slot"]]) {
AugustAPI/august-api/AGLock.m:512:    NSString * path = [NSString stringWithFormat: @"locks/%@/pins", lockId];
AugustAPI/august-api/AGLock.m:553:    NSString * path = [@"locks/" stringByAppendingString:lockId];
AugustAPI/august-api/AGLock.m:607:        self.messagingProtocol = @"pubnub";
AugustAPI/august-api/AGLock.m:612:        self.messagingURL = @"";
AugustAPI/august-api/AGLock.m:756:	NSString * path = [NSString stringWithFormat:@"locks/%@",lockId];
AugustAPI/august-api/AGLock.m:778:	NSString * path = [@"locks/" stringByAppendingString:lockId];
AugustAPI/august-api/AGLock.m:779:	path = [path stringByAppendingString:@"/key"];
AugustAPI/august-api/AGLock.m:870:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@/%@", lockId, userId, type];
AugustAPI/august-api/AGLock.m:908:	NSString * path = [NSString stringWithFormat:@"locks/adduser/%@/%@/%@", lockId, userId, type];
AugustAPI/august-api/AGLock.m:910:    NSDictionary *parameters = @{@"Name":[user displayName]};
AugustAPI/august-api/AGLock.m:959:	NSString * path = [NSString stringWithFormat:@"locks/%@/%@", lockId, userId];
AugustAPI/august-api/AGLock.m:980:    NSString *path = [NSString stringWithFormat:@"locks/log/%@/lockcommand", lockID];
AugustAPI/august-api/AGLock.m:999:	NSString * path = [NSString stringWithFormat:@"/locks/log/before/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
AugustAPI/august-api/AGLock.m:1018:	NSString * path = [NSString stringWithFormat:@"/locks/log/after/%@/%lld/%ld", lockID, [dateTime longLongValue], (long)count];
AugustAPI/august-api/AGLock.m:1036:    NSString *path = [NSString stringWithFormat:@"rules/rulewithuser/%@/%@", lockID, userID];
AugustAPI/august-api/AGLock.m:1040:    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@"en_US_POSIX"];
AugustAPI/august-api/AGLock.m:1044:    [dateFormatter setDateFormat:@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSS'Z'"];//e.g. 2013-03-20T23:45:19.638Z
AugustAPI/august-api/AGLock.m:1048:                                        @"startTime":[dateFormatter stringFromDate:startTime],
AugustAPI/august-api/AGLock.m:1049:                                        @"endTime":[dateFormatter stringFromDate:endTime],
AugustAPI/august-api/AGLock.m:1050:                                        @"Name":[user displayName]
AugustAPI/august-api/AGLock.m:1053:        [parameters setObject:recurrence forKey:@"recurrence"];
AugustAPI/august-api/AGLock.m:1076:    NSString *path = [NSString stringWithFormat:@"rules/%@/%@", ruleID, userID];
AugustAPI/august-api/AGLock.m:1108:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
AugustAPI/august-api/AGLock.m:1110:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?",  self.bridge.mfgBridgeId];
AugustAPI/august-api/AGLock.m:1112:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
AugustAPI/august-api/AGLock.m:1116:        endpointString = [NSString stringWithFormat:@"%@%@type=async", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1119:        endpointString = [NSString stringWithFormat:@"%@%@connection=persistent", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1127:                intentString = @"intent=regular";
AugustAPI/august-api/AGLock.m:1130:                intentString = @"intent=wakeup";;
AugustAPI/august-api/AGLock.m:1133:                intentString = @"intent=keepalive";;
AugustAPI/august-api/AGLock.m:1136:                intentString = @"intent=lockstateunknown";
AugustAPI/august-api/AGLock.m:1141:            endpointString = [NSString stringWithFormat:@"%@%@%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", intentString];
AugustAPI/august-api/AGLock.m:1159:                               NSString* lockStatus = [responseDict objectForKey:@"status"];
AugustAPI/august-api/AGLock.m:1174:                                   userInfo = @{@"response":httpResponse};
AugustAPI/august-api/AGLock.m:1188:    NSString *endpointString = [NSString stringWithFormat:@"remoteoperate/%@/%@", self.objectId, command];
AugustAPI/august-api/AGLock.m:1190:        endpointString = [NSString stringWithFormat:@"%@%@sn=%@", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?", self.bridge.mfgBridgeId];
AugustAPI/august-api/AGLock.m:1192:            endpointString = [NSString stringWithFormat:@"%@&v=%@", endpointString, self.bridge.firmwareVersion];
AugustAPI/august-api/AGLock.m:1196:        endpointString = [NSString stringWithFormat:@"%@%@state=setup", endpointString, [endpointString rangeOfString:@"?"].length > 0 ? @"&" : @"?"];
AugustAPI/august-api/AGLock.m:1198:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"remoteoperate/%@/%@?sn=%@&v=%@", self.objectId, command, self.bridge.mfgBridgeId, self.bridge.firmwareVersion] parameters:@{} waitTime:90.0
AugustAPI/august-api/AGLock.m:1210:                                         NSString* lockStatus = [responseDict objectForKey:@"status"];
AugustAPI/august-api/AGLock.m:1248:    NSDictionary *parameters = @{@"deviceModel": deviceModel,
AugustAPI/august-api/AGLock.m:1249:                                 @"movedCenter": movedCenter?@"true":@"false",
AugustAPI/august-api/AGLock.m:1250:                                 @"changedRadius": changedRadius?@"true":@"false",
AugustAPI/august-api/AGLock.m:1251:                                 @"newRadius": [NSString stringWithFormat:@"%f", radius],
AugustAPI/august-api/AGLock.m:1252:                                 @"distance": [NSString stringWithFormat:@"%f", distance]};
AugustAPI/august-api/AGLock.m:1253:    NSString *path = [NSString stringWithFormat:@"/locks/geofenceinfo/%@", lockID];
AugustAPI/august-api/AGLock.m:1341:                NSNumber *resBool = [responseObject objectForKey:@"supported"];
AugustAPI/august-api/AGLock.m:1377:    NSDictionary *params = @{@"serialNumber":serialNumber, @"lockID":self.objectId, @"supportsEncryption":[NSNumber numberWithBool:true]};
AugustAPI/august-api/AGLock.m:1381:            block([resultDict objectForKey:@"keypadID"], nil);
AugustAPI/august-api/AGLock.m:1452:        returnVal = @"load";
AugustAPI/august-api/AGLock.m:1455:        returnVal = @"delete";
AugustAPI/august-api/AGLock.m:1458:        returnVal = @"disable";
AugustAPI/august-api/AGLock.m:1461:        returnVal = @"enable";
AugustAPI/august-api/AGLock.m:1464:        returnVal = @"UnkownPinState";
AugustAPI/august-api/AGLock.m:1539:    NSString *stateMessage = @"";
AugustAPI/august-api/AGLock.m:1542:        stateMessage = @"load";
AugustAPI/august-api/AGLock.m:1545:        stateMessage = @"delete";
AugustAPI/august-api/AGLock.m:1548:        stateMessage = @"disable";
AugustAPI/august-api/AGLock.m:1551:        stateMessage = @"enable";
AugustAPI/august-api/AGLock.m:1555:            @"pin": pinCode,
AugustAPI/august-api/AGLock.m:1556:            @"state": stateMessage,
AugustAPI/august-api/AGLock.m:1557:            @"action": (action==AGPinActionIntent)?@"intent":@"commit"} mutableCopy];
AugustAPI/august-api/AGLock.m:1559:        parameters[@"slot"] = slot;
AugustAPI/august-api/AGLock.m:1588:    [parameters setObject: firstName?firstName:@"" forKey: @"firstName"];
AugustAPI/august-api/AGLock.m:1589:    [parameters setObject:lastName?lastName:@"" forKey: @"lastName"];
AugustAPI/august-api/AGLock.m:1590:    [parameters setObject:self.objectId forKey: @"lockID"];
AugustAPI/august-api/AGLock.m:1615:    NSMutableDictionary *parameters = [NSMutableDictionary  dictionaryWithObjectsAndKeys: pinCode, @"pin" ,
AugustAPI/august-api/AGLock.m:1616:                                self.objectId,  @"lockID", nil];
AugustAPI/august-api/AGLock.m:1619:        [parameters setObject: firstName forKey: @"firstName"];
AugustAPI/august-api/AGLock.m:1623:        [parameters setObject:lastName forKey: @"lastName"];
AugustAPI/august-api/AGLock.m:1627:        [parameters setObject:optionalPhonenumber forKey: @"phone"];
AugustAPI/august-api/AGLock.m:1737:                                                @"mRand1": [NSNumber numberWithUnsignedInt:mRand1],
AugustAPI/august-api/AGLock.m:1738:                                                @"mRand2": [NSNumber numberWithUnsignedInt:mRand2]}];
AugustAPI/august-api/AGLock.m:1740:    NSString *initiateCommEndpoint = [NSString stringWithFormat:@"/locks/initiatecomm/%@", lockID];
AugustAPI/august-api/AGLock.m:1743:        initiateCommEndpoint = [NSString stringWithFormat:@"%@?intent=%@", initiateCommEndpoint, onlineKeyUsageReason];
AugustAPI/august-api/AGLock.m:1761:    NSDictionary *parameters = @{@"LockResponse": lockResponse};
AugustAPI/august-api/AGLock.m:1779:    NSString *path = [NSString stringWithFormat:@"/locks/setnotification/%@/%@/%@", lockID, userID, on];
AugustAPI/august-api/AGLock.m:1797:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/%@", lockID, userID];
AugustAPI/august-api/AGLock.m:1811:            NSString *notificationType = [notifDict objectForKey:@"NotificationType"];
AugustAPI/august-api/AGLock.m:1816:            if ([notificationType isEqualToString:@"neither"]) {
AugustAPI/august-api/AGLock.m:1837:    NSString *path = [NSString stringWithFormat:@"/locks/%@/timezone", self.objectId];
AugustAPI/august-api/AGLock.m:1856:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/status", lockID];
AugustAPI/august-api/AGLock.m:1873:    NSString *path = [NSString stringWithFormat:@"/private/locks/status/%@", lockID];
AugustAPI/august-api/AGLock.m:1874:    if (([lockStatusDictionary objectForKey:@"status"] == NO) && ([lockStatusDictionary objectForKey:kDoorStateKey] == NO)) {
AugustAPI/august-api/AGLock.m:1878:    if ([lockStatusDictionary objectForKey:@"status"] && [lockStatusDictionary objectForKey:kDoorStateKey]) {
AugustAPI/august-api/AGLock.m:1879:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"], kDoorStateKey: [lockStatusDictionary objectForKey:kDoorStateKey]};
AugustAPI/august-api/AGLock.m:1880:    } else if ([lockStatusDictionary objectForKey:@"status"]) {
AugustAPI/august-api/AGLock.m:1881:        parameters = @{@"status": [lockStatusDictionary objectForKey:@"status"]};
AugustAPI/august-api/AGLock.m:1901:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/params", lockID];
AugustAPI/august-api/AGLock.m:1918:    NSString *path = [NSString stringWithFormat:@"locks/%@/offlinekeys/%@", lockID, action];
AugustAPI/august-api/AGLock.m:1935:    NSString *path = [NSString stringWithFormat:@"locks/acknowledgeparamupdate/%@", lockID];
AugustAPI/august-api/AGLock.m:1953:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:1974:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:1995:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2016:    NSString * path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2018:    NSDictionary *params = @{@"hostLockInfo": infoDict};
AugustAPI/august-api/AGLock.m:2039:    return [NSString stringWithFormat:@"AGCurrentUserOfflineKey_%@", lockID];
AugustAPI/august-api/AGLock.m:2044:    return [NSString stringWithFormat:@"AGCurrentUserHomeKitKey_%@", lockID];
AugustAPI/august-api/AGLock.m:2052:    NSMutableDictionary *parameters = @{@"event":event, @"date":dateAsMSFromEpoch, @"LockID":lockID, @"UserID":userID}.mutableCopy;
AugustAPI/august-api/AGLock.m:2055:        [parameters setObject:description forKey:@"description"];
AugustAPI/august-api/AGLock.m:2075:    NSString *path = [NSString stringWithFormat:@"locks/%@", lockID];
AugustAPI/august-api/AGLock.m:2115:                 NSString *path = [NSString stringWithFormat:@"locks/setnotification/%@/%@/%@", self.objectId, type, action];
AugustAPI/august-api/AGLock.m:2152:                                         userInfo:@{@"lockId":@"lockId cannot be nil"}];
AugustAPI/august-api/AGLock.m:2158:    NSString* path = [NSString stringWithFormat:@"locks/notifications/%@/manuallock", self.objectId];
AugustAPI/august-api/AGLock.m:2186:                    if ([type isEqualToString:@"both"]) {
AugustAPI/august-api/AGPinCodeInfo.m:27:        self.created = [self makePinEntryArrayFromArray:[dict objectForKey:@"created"] state: AGPinStateCreated];
AugustAPI/august-api/AGPinCodeInfo.m:28:        self.deleting = [self makePinEntryArrayFromArray:[dict objectForKey:@"deleting"] state: AGPinStateDeleting];
AugustAPI/august-api/AGPinCodeInfo.m:29:        self.disabled = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabled"] state: AGPinStateDisabled];
AugustAPI/august-api/AGPinCodeInfo.m:30:        self.disabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"disabling"] state: AGPinStateDisabling];
AugustAPI/august-api/AGPinCodeInfo.m:31:        self.enabling = [self makePinEntryArrayFromArray:[dict objectForKey:@"enabling"] state: AGPinStateEnabling];
AugustAPI/august-api/AGPinCodeInfo.m:32:        self.loaded = [self makePinEntryArrayFromArray:[dict objectForKey:@"loaded"] state: AGPinStateLoaded];
AugustAPI/august-api/AGPinCodeInfo.m:80:    if ([invitationPhoneNumber rangeOfString:@"phone:"].location == 0) {
AugustAPI/august-api/AGUserPinEntry.m:23:        self.firstName = [dict objectForKey:@"firstName"];
AugustAPI/august-api/AGUserPinEntry.m:24:        self.lastName = [dict objectForKey:@"lastName"];
AugustAPI/august-api/AGUserPinEntry.m:25:        self.pinCode = [dict objectForKey:@"pin"];
AugustAPI/august-api/AGUserPinEntry.m:26:        self.slot = [dict objectForKey:@"slot"];
AugustAPI/august-api/AGUserPinEntry.m:27:        self.userID = [dict objectForKey:@"userID"];
AugustAPI/august-api/AGUserPinEntry.m:28:        self.phoneNumber = [dict objectForKey:@"phone"];
AugustAPI/august-api/AGUserPinEntry.m:29:        NSNumber *vNum = [dict objectForKey:@"unverified"];
AugustAPI/august-api/AGUserPinEntry.m:58:        return @"created";
AugustAPI/august-api/AGUserPinEntry.m:61:        return  @"deleting";
AugustAPI/august-api/AGUserPinEntry.m:64:        return @"disabled";
AugustAPI/august-api/AGUserPinEntry.m:67:        return  @"disabling";
AugustAPI/august-api/AGUserPinEntry.m:70:        return  @"loaded";
AugustAPI/august-api/AGUserPinEntry.m:73:        return @"enabling";
AugustAPI/august-api/AGUserPinEntry.m:79:    if ([state isEqualToString:@"loaded"]) {
AugustAPI/august-api/AGUserPinEntry.m:82:    if ([state isEqualToString:@"deleting"]) {
AugustAPI/august-api/AGUserPinEntry.m:85:    if ([state isEqualToString:@"created"]) {
AugustAPI/august-api/AGUserPinEntry.m:88:    if ([state isEqualToString:@"enabling"]) {
AugustAPI/august-api/AGUserPinEntry.m:91:    if ([state isEqualToString:@"disabling"]) {
AugustAPI/august-api/AGUserPinEntry.m:94:    if ([state isEqualToString:@"created"]) {
AugustAPI/august-api/AGUserPinEntry.m:101:    return [NSString stringWithFormat:@"pin: %@, slot: %@", _pinCode, _slot];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:45:        [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:49:        NSString *authValue = [NSString stringWithFormat:@"Basic %@", [authData base64EncodedStringWithOptions:0]];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:50:        [self.requestSerializer setValue:authValue forHTTPHeaderField:@"Authorization"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:53:        responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"text/plain"]];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:107:    NSString *customBaseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:108:    if (customBaseURL && ![customBaseURL containsString:@"prod"]) {//Don't log unless pointed at production
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:115:    NSURLRequest *request = [[AGKibanaLoggerSessionManager sharedManager].requestSerializer requestWithMethod:@"POST" URLString:kKibanaLoggingEndpoint parameters:json error:&error];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:129:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:130:    appVersion = appVersion == nil ? @"not_ios_app" : appVersion;//The version will be nil during unit testing
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:133:    NSString *time =  [NSString stringWithFormat:@"%li", epochMillis];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:141:                                     @"device_model":[[UIDevice currentDevice] platformString],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:142:                                     @"ios_version":[[UIDevice currentDevice] systemVersion],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:143:                                     @"app_version":appVersion,
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:144:                                     @"time":time,
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:145:                                     @"log_level":[self stringForLogLevel:logLevel],
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:146:                                     @"session_id":[self loggingSessionID]
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:152:        [mdataJSON setObject:event forKey:@"event"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:156:        [mdataJSON setObject:category forKey:@"category"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:161:        [mdataJSON setObject:hwVersion forKey:@"hw_version"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:165:                              @"type":@"app-ios",
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:166:                              @"mdata1":mdataJSON
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:186:        return @"FATAL";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:188:        return @"ERROR";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:190:        return @"WARN";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:192:        return @"INFO";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:194:        return @"DEBUG";
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:200:    NSDate *sessionExpirationDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:201:    NSString *sessionID = [[NSUserDefaults standardUserDefaults] objectForKey:@"AGKibanaLoggerSessionID"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:207:        [[NSUserDefaults standardUserDefaults] setObject:sessionID forKey:@"AGKibanaLoggerSessionID"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:213:        [[NSUserDefaults standardUserDefaults] setObject:nextDate forKey:@"AGKibanaLoggerSessionID_ExpirationDate"];
AugustAPI/august-api/KibanaLogging/AGKibanaLogger.m:240:        hwVersion = @"unknown";
AugustAPI/august-api/KibanaLogging/Tests/AGKibanaLoggerTests.m:21:    [[NSUserDefaults standardUserDefaults] setObject:kSezamAPIBaseURLString forKey:@"APIBaseURL"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:54:    NSDictionary *headers = [response objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:55:    NSString *command = [headers objectForKey:@"command"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:74:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:87:                    NSDictionary *headers = [queryResponse objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:88:                    NSString *indexStr = [headers objectForKey:@"index"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:92:                    NSDictionary *otaStatusBitmap = [queryResponse objectForKey:@"otaStatusBitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:93:                    NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:126:        if ([command isEqualToString:@"AUG_CMD_OTA_Error"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:191:        NSDictionary *headers = [response objectForKey:@"header"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:192:        NSString *indexStr = [headers objectForKey:@"index"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:196:        NSDictionary *otaStatusBitmap = [response objectForKey:@"otaStatusBitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:197:        NSArray *bitmap = [otaStatusBitmap objectForKey:@"bitmap"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:198:        NSNumber *crc32Num = [otaStatusBitmap objectForKey:@"crc32"];
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:325:    if (([self.chip isEqualToString:@"arm"]) || ([self.chip isEqualToString:@"st"])) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:333:    else if ([self.chip isEqualToString:@"ti"]) {
AugustAPI/august-api/Bluetooth/AugustLockOTA.m:373:        if ([self.chip isEqualToString:@"st"]) {
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:46:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:54:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:72:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:111:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:390:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
AugustAPI/august-api/Bluetooth/EuropaLockOTA.m:399:    NSString *newVersion = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)newVersionMajor.bytes, *(uint8_t *)newVersionMinor.bytes, *(uint8_t *)newVersionPatch.bytes];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:16:static NSString* kAGLastOldLockLogVersion = @"1.0.99";      // After this version is the new log format.
AugustAPI/august-api/Bluetooth/BLELockOperation.m:20:static NSString* kErrorCategoryLockOperation = @"BLELockOperation";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:384:            NSNumber *errorResponse = [responseDict objectForKey:@"error"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:591:    NSString *statusString = @"Unknown";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:594:            statusString = @"AGLockStatusConnecting";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:597:            statusString = @"AGLockStatusAuthorizing";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:600:            statusString = @"AGLockStatusConnected";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:603:            statusString = @"AGLockStatusSoftScan";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:703:                [operItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:722:                [item failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected while command queued."];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:878:            [self.currentOperationItem failWithError:kLockOperationErrorDisconnectedDuringSending msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:897:            [item failWithError:kLockOperationErrorDisconnectedWhileCommandQueued msg:@"Disconnected"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:944:            if (([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedDescending) || ([[[UIDevice currentDevice] systemVersion] compare:@"9.1" options:NSNumericSearch] == NSOrderedSame)) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1139:    [[NSUserDefaults standardUserDefaults]  setObject:[NSMutableDictionary dictionaryWithCapacity:3] forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1263:    NSNumber *canConnectToLock = [advertisementData objectForKey:@"kCBAdvDataIsConnectable"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1370:    NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1371:    NSString *lockState = [lockStatusDict objectForKey:@"AUG_STAT_LOCK_STATE"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1372:    NSString *doorStateResponse = [lockStatusDict objectForKey:@"AUG_STAT_DOOR_STATE"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1380:        if (([lockState isEqualToString:@"kAugLockState_Locked"]) || ([lockState isEqualToString:@"kAugLockState_Locking"])) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1384:        } else if ([lockState isEqualToString:@"kAugLockState_Unlocked"] || ([lockState isEqualToString:@"kAugLockState_Unlocking"])) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1388:        } else if ([lockState isEqualToString:@"kAugLockState_UnknownStaticPosition"] ||[lockState isEqualToString:@"kAugLockState_Init"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1462:                NSDictionary *lockStatusDict = [lockDictionary objectForKey:@"getStatus"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1497:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"getParameter"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1515:                NSDictionary *lockParamDict = [lockDictionary objectForKey:@"setParameter"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1808:    NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1809:    if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1919:            NSInteger errorCode = [dict[@"error"] integerValue];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1951:    oper.label = @"LockUnlockCommand";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1961:    NSAssert(situation != AGLockActionSituationWatch, @"AGLockActionSituationWatch not supported");
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1982:                    NSNumber *offsetInitial = [dict objectForKey:@"timeZoneOffsetInitial"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1983:                    NSNumber *offsetT1 = [dict objectForKey:@"timeZoneOffsetTransition1"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1984:                    NSNumber *offsetT2 = [dict objectForKey:@"timeZoneOffsetTransition2"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1985:                    NSNumber *transitionTime1 = [dict objectForKey:@"transitionTime1"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:1986:                    NSNumber *transitionTime2 = [dict objectForKey:@"transitionTime2"];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2136:    oper.label = @"UnreadLogItems";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2162:    NSString *atomicGroupIdentifier = @"SetParamsGroup";
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2292:        NSString *logMessage = [NSString stringWithFormat:@"Offline key handshake failed %li attempt(s) but can try again with offline key", (long)self.numberOfOfflineKeyFailuresSinceAttach];
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2332:    if ([statusResponse isEqualToString:@"kAugDoorState_Init"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2334:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Closed"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2336:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Ajar"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2338:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Open"]) {
AugustAPI/august-api/Bluetooth/BLELockOperation.m:2340:    }else if ([statusResponse isEqualToString:@"kAugDoorState_Unknown"]) {
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:55:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:63:        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(hasLockDisconnection:) name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:81:    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"AG_LOCK_DISCONNECTED" object:nil];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:120:                    NSString *versionFromQuery = [NSString stringWithFormat:@"%d.%d.%d", packet->version[0], packet->version[1], packet->version[2]];
AugustAPI/august-api/Bluetooth/JupiterLockOTA.m:392:    NSString *version = [NSString stringWithFormat:@"%d.%d.%d", *(uint8_t *)versionMajor.bytes, *(uint8_t *)versionMinor.bytes, *(uint8_t *)versionPatch.bytes];
AugustAPI/august-api/Bluetooth/BLELock.m:433:    NSString *MSID = [advertisementData valueForKey:@"kCBAdvDataManufacturerData"];
AugustAPI/august-api/Bluetooth/BLELock.m:484:                    if (![[lockID substringWithRange:NSMakeRange(curChar,1)] isEqual:@"0"]) {
AugustAPI/august-api/Bluetooth/BLELock.m:516:		[hexEncoded appendString:[NSString stringWithFormat:@"%02X", bytes[i]]];
AugustAPI/august-api/Bluetooth/BLELock.m:599:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
AugustAPI/august-api/Bluetooth/BLELock.m:689:    NSMutableDictionary *lockIDToUUIDMap = [[[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"] mutableCopy];
AugustAPI/august-api/Bluetooth/BLELock.m:696:    [[NSUserDefaults standardUserDefaults] setObject:lockIDToUUIDMap forKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/Bluetooth/BLELock.m:701:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
AugustAPI/august-api/AGSubscriptions.m:36:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"subscriptions/%@", subscriptionId]
AugustAPI/august-api/AGSubscriptions.m:42:                           if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
AugustAPI/august-api/AGSubscriptions.m:52:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"subscriptions/%@/enable", subscriptionId]
AugustAPI/august-api/AGSubscriptions.m:58:                              if ([[(NSDictionary *) responseObject objectForKey:@"message"] isEqualToString:@"success"]) {
AugustAPI/august-api/AGSubscriptions.m:69:            NSString *token = [(NSDictionary *)responseObject objectForKey:@"token"];
AugustAPI/august-api/AGAugustAccess.m:17:    [[AGClient sharedClient] getPath:@"partners"
AugustAPI/august-api/AGAugustAccess.m:19:                              header:@{@"accept-version" : @"2.0.0"}
AugustAPI/august-api/AGAugustAccess.m:42:                                         userInfo:@{@"partnerId":@"partnerId cannot be nil"}];
AugustAPI/august-api/AGAugustAccess.m:45:    NSDictionary *parameters = @{@"partnerID":partnerId, @"platform":@"ios"};
AugustAPI/august-api/AGAugustAccess.m:46:    [[AGClient sharedClient] getPath:@"partners/oauthurl"
AugustAPI/august-api/AGAugustAccess.m:53:                               NSString *partnerOAuthUrl = [respDictionary objectForKey:@"url"];
AugustAPI/august-api/AGAugustAccess.m:66:    [[AGClient sharedClient] getPath:@"partners/tags"
AugustAPI/august-api/AGAugustAccess.m:91:    NSString *path = [NSString stringWithFormat:@"partners/%@/mailinglist", partnerId];
AugustAPI/august-api/AGAugustAccess.m:93:                           parameters:@{ @"email": email}
AugustAPI/august-api/AGDateUtils.m:23:    NSLocale *utcLocale = [NSLocale localeWithLocaleIdentifier:@"UTC"];
AugustAPI/august-api/AGDateUtils.m:25:    [dateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
AugustAPI/august-api/AGDateUtils.m:26:    [dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSS'Z"];
AugustAPI/august-api/AGDateUtils.m:32:    NSArray* daysOfTheWeek = [[NSArray alloc] initWithObjects: @"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA", nil];
AugustAPI/august-api/AGDateUtils.m:44:    NSArray *orderedDayStrings = [[setToOrder array] valueForKey:@"description"];
AugustAPI/august-api/AGDateUtils.m:45:    NSString *joinedDaysString = [orderedDayStrings componentsJoinedByString:@","];
AugustAPI/august-api/AGDateUtils.m:48:        joinedDaysString = [orderedDayStrings componentsJoinedByString:@"/"];
AugustAPI/august-api/AGDateUtils.m:62:    if (days.count == 1 && ([[days objectAtIndex:0] isEqualToString:@"SU"] || [[days objectAtIndex:0] isEqualToString:@"SA"])) {
AugustAPI/august-api/AGDateUtils.m:66:    if (![days containsObject:@"WE"]) {//Wednesday isn't present. Wedneday's presence makes it obvious what a "T" stands for.
AugustAPI/august-api/AGDateUtils.m:69:    if ([days containsObject:@"TU"] && [days containsObject:@"TH"]) {
AugustAPI/august-api/AGDateUtils.m:74:                                                              @"SU":(satSunShouldBeFullAbbreviation ? @"SU": @"S"),
AugustAPI/august-api/AGDateUtils.m:75:                                                              @"MO":@"M",
AugustAPI/august-api/AGDateUtils.m:76:                                                              @"TU":(tuesThursShouldBeFullAbbreviation ? @"TU": @"T"),
AugustAPI/august-api/AGDateUtils.m:77:                                                              @"WE":@"W",
AugustAPI/august-api/AGDateUtils.m:78:                                                              @"TR":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),//Defensive against any one mistakinlgy calling this using "TR" abbrviations
AugustAPI/august-api/AGDateUtils.m:79:                                                              @"TH":(tuesThursShouldBeFullAbbreviation ? @"TH": @"T"),
AugustAPI/august-api/AGDateUtils.m:80:                                                              @"FR":@"F",
AugustAPI/august-api/AGDateUtils.m:81:                                                              @"SA":(satSunShouldBeFullAbbreviation ? @"SA": @"S")
AugustAPI/august-api/AGCache.m:76:    return [NSString stringWithFormat:@"user_%@", user.objectId];
AugustAPI/august-api/AGLockLogEntry.m:22:    if ([@"lock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:25:    else if ([@"unlock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:28:    else if ([@"dooropen" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:31:    else if ([@"doorclosed" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:34:    else if ([@"add" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:37:    else if ([@"remove" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:40:    else if ([@"addtorule" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:43:    else if ([@"removefromrule" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:46:    else if ([@"addedpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:49:    else if ([@"removedpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:52:    else if ([@"disabledpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:55:    else if ([@"enabledpin" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:58:    else if ([@"invalidcode" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:61:    else if ([@"onetouchlock" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:64:    else if ([ @"camera" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:67:    else if ([ @"doorbell_call_missed" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:70:    else if ([ @"doorbell_call_declined" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:73:    else if ([ @"doorbell_call_hangup" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:76:    else if ([ @"doorbell_call_initiated" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:79:    else if ([ @"doorbell_motion_detected" isEqualToString:actionString]) {
AugustAPI/august-api/AGLockLogEntry.m:89:    NSArray *stringArray = @[@"AGLockLogAction_Locked",
AugustAPI/august-api/AGLockLogEntry.m:90:                             @"AGLockLogAction_Unlocked",
AugustAPI/august-api/AGLockLogEntry.m:91:                             @"AGLockLogAction_DoorOpen",
AugustAPI/august-api/AGLockLogEntry.m:92:                             @"AGLockLogAction_DoorClosed",
AugustAPI/august-api/AGLockLogEntry.m:93:                             @"AGLockLogAction_AddUser",
AugustAPI/august-api/AGLockLogEntry.m:94:                             @"AGLockLogAction_RemoveUser",
AugustAPI/august-api/AGLockLogEntry.m:95:                             @"AGLockLogAction_AddUserToRule",
AugustAPI/august-api/AGLockLogEntry.m:96:                             @"AGLockLogAction_RemoveUserFromRule",
AugustAPI/august-api/AGLockLogEntry.m:97:                             @"AGLockLogAction_AddedPin",
AugustAPI/august-api/AGLockLogEntry.m:98:                             @"AGLockLogAction_RemovedPin",
AugustAPI/august-api/AGLockLogEntry.m:99:                             @"AGLockLogAction_EnabledPin",
AugustAPI/august-api/AGLockLogEntry.m:100:                             @"AGLockLogAction_DisabledPin",
AugustAPI/august-api/AGLockLogEntry.m:101:                             @"AGLockLogAction_InvalidKeypadCode",
AugustAPI/august-api/AGLockLogEntry.m:102:                             @"AGLockLogAction_Camera",
AugustAPI/august-api/AGLockLogEntry.m:103:                             @"AGLockLogAction_OneTouchLock",
AugustAPI/august-api/AGLockLogEntry.m:104:                             @"AGDoorbellLogAction_Call_Missed",
AugustAPI/august-api/AGLockLogEntry.m:105:                             @"AGDoorbellLogAction_Call_Declined",
AugustAPI/august-api/AGLockLogEntry.m:106:                             @"AGDoorbellLogAction_Call_Hangup",
AugustAPI/august-api/AGLockLogEntry.m:107:                             @"AGDoorbellLogAction_Call_Initiated",
AugustAPI/august-api/AGLockLogEntry.m:108:                             @"AGDoorbellLogAction_Motion_Detected",
AugustAPI/august-api/AGLockLogEntry.m:109:                             @"AGLockLogAction_Unrecognized" ];
AugustAPI/august-api/AGLockLogEntry.m:123:    NSDictionary *userData = [dictionary objectForKey:@"callingUser"];
AugustAPI/august-api/AGLockLogEntry.m:128:    NSDictionary *otherUserData = [dictionary objectForKey:@"otherUser"];
AugustAPI/august-api/AGLockLogEntry.m:132:    long long timeIntervalSince1970 = [[dictionary objectForKey:@"dateTime"] longLongValue];
AugustAPI/august-api/AGLockLogEntry.m:135:    NSString* actionString = [dictionary objectForKey:@"action"];
AugustAPI/august-api/AGLockLogEntry.m:139:    self.deviceName = [AGClient stringByDecodingXMLEntities:[dictionary objectForKey:@"deviceName"]];
AugustAPI/august-api/AGLockLogEntry.m:140:    NSDictionary* infoDict = [dictionary objectForKey:@"info"];
AugustAPI/august-api/AGLockLogEntry.m:141:    self.isRemote = [[infoDict objectForKey:@"remote"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:142:    if ([infoDict objectForKey:@"agent"]) {
AugustAPI/august-api/AGLockLogEntry.m:143:        NSString *agent = (NSString *)[infoDict objectForKey:@"agent"];
AugustAPI/august-api/AGLockLogEntry.m:144:        if ([agent isEqualToString:@"homekit"]) {
AugustAPI/august-api/AGLockLogEntry.m:146:        } else if ([agent isEqualToString:@"zwave"]) {
AugustAPI/august-api/AGLockLogEntry.m:151:    self.isUsingKeypad = [[infoDict objectForKey:@"keypad"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:152:    self.isPINOnlyKeypadUser = [[infoDict objectForKey:@"pinonlyuser"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:153:    self.hasVideoAvailable = [[infoDict objectForKey:@"videoAvailable"] boolValue];
AugustAPI/august-api/AGLockLogEntry.m:154:    self.dvrEventID = [infoDict objectForKey:@"dvrID"];
AugustAPI/august-api/AGLockLogEntry.m:155:    self.callID = [infoDict objectForKey:@"callID"];
AugustAPI/august-api/AGLockLogEntry.m:162:            self.user.firstName = @"One-Touch";
AugustAPI/august-api/AGLockLogEntry.m:163:            self.user.lastName = @"Lock";
AugustAPI/august-api/AGLockLogEntry.m:164:            self.user.objectId = @"onetouchlock";
AugustAPI/august-api/AGLockLogEntry.m:171:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:173:            self.doorbellUserId = @"self";
AugustAPI/august-api/AGLockLogEntry.m:177:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:179:            NSDictionary *users = infoDict[@"users"];
AugustAPI/august-api/AGLockLogEntry.m:181:                self.doorbellUserId = users[@"answered_user"];
AugustAPI/august-api/AGLockLogEntry.m:187:                self.doorbellImageUrl = infoDict[@"image"];
AugustAPI/august-api/AGLockLogEntry.m:189:            NSDictionary *users = infoDict[@"users"];
AugustAPI/august-api/AGLockLogEntry.m:191:                self.doorbellUserId = users[@"initiated_user"];
AugustAPI/august-api/AGLockLogEntry.m:197:                if ([infoDict[@"activityZones"] isKindOfClass:[NSArray class]]) {
AugustAPI/august-api/AGLockLogEntry.m:198:                    self.activityZones = infoDict[@"activityZones"];
AugustAPI/august-api/AGLockLogEntry.m:200:                self.doorbellImageUrl = infoDict[@"imageURL"];
AugustAPI/august-api/AGLockLogEntry.m:206:                self.doorbellImageUrl = infoDict[@"image"][@"secure_url"];
AugustAPI/august-api/AGLockLogEntry.m:208:            self.doorbellUserId = @"self";
AugustAPI/august-api/AGLockLogEntry.m:214:    self.animatedURL = [infoDict objectForKey:@"animatedURL"];
AugustAPI/august-api/AGLockLogEntry.m:215:    self.webURL = [infoDict objectForKey:@"webURL"];
AugustAPI/august-api/AGLockLogEntry.m:216:    self.appURL = [infoDict objectForKey:@"appURL"];
AugustAPI/august-api/AGLockLogEntry.m:218:    self.deviceID = [dictionary objectForKey:@"deviceID"];
AugustAPI/august-api/AGLockLogEntry.m:219:    NSDictionary *house = dictionary[@"house"];
AugustAPI/august-api/AGLockLogEntry.m:221:        self.houseID = house[@"houseID"];
AugustAPI/august-api/AGLockLogEntry.m:235:            if ([self.user.objectId isEqualToString:@"manuallock"]) {
AugustAPI/august-api/AGLockLogEntry.m:238:            else if ([self.user.objectId isEqualToString:@"automaticrelock"]) {
AugustAPI/august-api/AGLockLogEntry.m:241:            else if ([self.user.objectId isEqualToString:@"onetouchlock"]) {
AugustAPI/august-api/AGLockLogEntry.m:251:            if ([self.user.objectId isEqualToString:@"manualunlock"]) {
AugustAPI/august-api/AGAirbnbListing.m:36:    listing.listingID = [responseDictionary objectForKey:@"id"];
AugustAPI/august-api/AGAirbnbListing.m:37:    listing.name = [responseDictionary objectForKey:@"name"];
AugustAPI/august-api/AGAirbnbListing.m:38:    NSArray <NSDictionary *> *lockAccesses = [[NSMutableArray alloc] initWithArray:[responseDictionary objectForKey:@"access"]];
AugustAPI/august-api/AGAirbnbListing.m:44:        if ([lockDictionary objectForKey:@"lockID"]) {
AugustAPI/august-api/AGAirbnbListing.m:45:            lockId = (NSString *)[lockDictionary objectForKey:@"lockID"];
AugustAPI/august-api/AGAirbnbListing.m:47:        if ([lockDictionary objectForKey:@"appAccess"]) {
AugustAPI/august-api/AGAirbnbListing.m:48:            appAccess = [[lockDictionary objectForKey:@"appAccess"] boolValue];
AugustAPI/august-api/AGAirbnbListing.m:50:        if ([lockDictionary objectForKey:@"keypadAccess"]) {
AugustAPI/august-api/AGAirbnbListing.m:51:            keypadAccess = [[lockDictionary objectForKey:@"keypadAccess"] boolValue];
AugustAPI/august-api/AGAirbnbListing.m:62:    NSDictionary *parameters = @{@"appAccess": [NSNumber numberWithBool:airbnbLockAccess.appAccess], @"keypadAccess": [NSNumber numberWithBool:airbnbLockAccess.keypadAccess]};
AugustAPI/august-api/AGKey.m:33:	NSString * path = [@"locks/" stringByAppendingString:lockID];
AugustAPI/august-api/AGKey.m:36:		//DLog(@"locks %@", responseObject.description);
AugustAPI/august-api/AGKey.m:54:            key.objectId = responseObject[@"key"];//not sure I'm understanding what is being returned here
AugustAPI/august-api/AGLockLog.m:54:        fileName = [[NSString alloc] initWithFormat:@"%@/bleLockLogsToUpload.plist", documentsDirectory];
AugustAPI/august-api/AGLockLog.m:65:    recursiveLock.name = [NSString stringWithFormat:@"<%@: %p> recursiveLock", NSStringFromClass([self class]), self];
AugustAPI/august-api/AGLockLog.m:97:    NSDictionary *parameters = @{@"action": action,
AugustAPI/august-api/AGLockLog.m:98:                                 @"mechanical": mechanical,
AugustAPI/august-api/AGLockLog.m:99:                                 @"crypto": crypto,
AugustAPI/august-api/AGLockLog.m:100:                                 @"dateTime": [AGDateUtils ISO8601UTCDateTimeStringFromDate:[NSDate date]]};
AugustAPI/august-api/AGLockLog.m:101:    NSString *path = [NSString stringWithFormat:@"/locks/usage/%@", lockID];
AugustAPI/august-api/AGLockLog.m:102:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", parameters, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:103:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:109:    NSString *path = [NSString stringWithFormat:@"/locks/log/%@/lockdata", lockID];
AugustAPI/august-api/AGLockLog.m:110:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", lockData, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:111:    [log setObject:@"POST" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:117:    NSString *path = [NSString stringWithFormat:@"/locks/timeadustment/%@/%d/%d", lockID, realTimeSentToLock, lockTimeStamp];
AugustAPI/august-api/AGLockLog.m:118:    NSMutableDictionary * log =  [[NSMutableDictionary alloc] initWithObjectsAndKeys: path, @"path", nil, @"parameters", nil];
AugustAPI/august-api/AGLockLog.m:119:    [log setObject:@"PUT" forKey: @"HTTPMethod"];
AugustAPI/august-api/AGLockLog.m:162:                if([log objectForKey:@"HTTPMethod"] != nil) {
AugustAPI/august-api/AGLockLog.m:163:                    [[AGClient sharedClient] sendSynchronousRequestWithPath:[log objectForKey:@"path"] parameters:[log objectForKey:@"parameters"] httpMthod:[log objectForKey:@"HTTPMethod"]];
AugustAPI/august-api/AGKeypad.m:19:        self.objectId = [dict objectForKey:@"_id"];
AugustAPI/august-api/AGKeypad.m:28:    [keypadDictionary setObject:self.objectId forKey:@"_id"];
AugustAPI/august-api/AGKeypad.m:30:        [keypadDictionary setObject:self.serialNumber forKey:@"serialNumber"];
AugustAPI/august-api/AGKeypad.m:33:        [keypadDictionary setObject:self.currentFirmwareVersion forKey:@"currentFirmwareVersion"];
AugustAPI/august-api/AGKeypad.m:36:        [keypadDictionary setObject:self.batteryLevel forKey:@"batteryLevel"];
AugustAPI/august-api/AGKeypad.m:39:        [keypadDictionary setObject:self.associatedLockId forKey:@"lockID"];
AugustAPI/august-api/AGKeypad.m:46:    self.serialNumber = [dict objectForKey:@"serialNumber"];
AugustAPI/august-api/AGKeypad.m:47:    self.currentFirmwareVersion =  [dict objectForKey:@"currentFirmwareVersion"];
AugustAPI/august-api/AGKeypad.m:49:        self.currentFirmwareVersion = @"0.0";
AugustAPI/august-api/AGKeypad.m:51:    self.batteryLevel = [dict objectForKey:@"batteryLevel"];
AugustAPI/august-api/AGKeypad.m:53:        self.batteryLevel = @"Unknown";
AugustAPI/august-api/AGKeypad.m:55:    self.associatedLockId = [dict objectForKey:@"lockID"];
AugustAPI/august-api/AGKeypad.m:60:    NSString * path = [@"keypads/" stringByAppendingString:self.objectId];
AugustAPI/august-api/AGKeypad.m:80:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/handshakeKey", self.objectId];
AugustAPI/august-api/AGKeypad.m:103:                    block(@{@"data": responseObject},nil);
AugustAPI/august-api/AGKeypad.m:121:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
AugustAPI/august-api/AGKeypad.m:133:        NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:139:                                        block([responseDictionary objectForKey:@"resetCode"], nil);
AugustAPI/august-api/AGKeypad.m:159:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/firmware/%@", self.objectId, self.currentFirmwareVersion];
AugustAPI/august-api/AGKeypad.m:167:                                         NSString *newFirmwareVersion =  [((NSDictionary *)[responseDictionary objectForKey:@"updateInfo"]) objectForKey:@"version"];
AugustAPI/august-api/AGKeypad.m:193:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:201:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
AugustAPI/august-api/AGKeypad.m:216:    NSString * path = [NSString stringWithFormat: @"/keypads/%@/code", self.objectId];
AugustAPI/august-api/AGKeypad.m:233:                                         NSString *resetCode = [responseDictionary objectForKey:@"resetCode"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:19:        NSString *accessTypeString = [dict objectForKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:21:        if ([accessTypeString isEqualToString:@"onetime"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:25:        NSString *timeStrings = [dict objectForKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:28:            times = [timeStrings componentsSeparatedByString:@";"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:31:        if ([accessTypeString isEqualToString:@"recurring"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:33:            self.daysOfWeek = [[AGRule new] recurrenceDaySetFromString:[dict objectForKey:@"accessRecurrence"]];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:35:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:39:                    if ([dateType isEqualToString:@"STARTSEC"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:42:                    if ([dateType isEqualToString:@"ENDSEC"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:50:        if ([accessTypeString isEqualToString:@"temporary"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:54:                NSArray *components = [timeElementString componentsSeparatedByString:@"="];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:58:                    if ([dateType isEqualToString:@"DTSTART"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:61:                    if ([dateType isEqualToString:@"DTEND"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:68:        if ([accessTypeString isEqualToString:@"onetime"]) {
AugustAPI/august-api/AGKeypadPinAccessInfo.m:79:        [dict setObject:@"always" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:83:        [dict setObject:@"onetime" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:87:        [dict setObject:@"temporary" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:89:        NSString *timeString = [NSString stringWithFormat:@"DTSTART=%@;DTEND=%@", [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.startDate], [AGDateUtils ISO8601UTCDateTimeStringFromDate:self.endDate]];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:90:        [dict setObject:timeString forKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:94:        [dict setObject:@"recurring" forKey:@"accessType"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:95:        NSString *timeString = [NSString stringWithFormat:@"STARTSEC=%d;ENDSEC=%d", (int) _recurStartSec, (int) _recurEndSec];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:96:        [dict setObject:timeString forKey:@"accessTimes"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:99:        [dict setObject:[NSString stringWithFormat:@"FREQ=WEEKLY;INTERVAL=1;BYDAY=%@", recurrenceDays] forKey:@"accessRecurrence"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:173:        NSArray *daysOfWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
AugustAPI/august-api/AGKeypadPinAccessInfo.m:181:                if ([day isEqualToString:@"TR"]) {
AugustAPI/august-api/AGSubscriptionItem.m:15:    if ([statusString isEqualToString:@"paid"]) {
AugustAPI/august-api/AGSubscriptionItem.m:18:    if ([statusString isEqualToString:@"trial"]) {
AugustAPI/august-api/AGSubscriptionItem.m:21:    if ([statusString isEqualToString:@"trial_expired"]) {
AugustAPI/august-api/AGSubscriptionItem.m:24:    if ([statusString isEqualToString:@"past_due"]) {
AugustAPI/august-api/AGSubscriptionItem.m:27:    if ([statusString isEqualToString:@"expired"]) {
AugustAPI/august-api/AGSubscriptionItem.m:30:    if ([statusString isEqualToString:@"cancelled"]) {
AugustAPI/august-api/AGSubscriptionItem.m:33:    if ([statusString isEqualToString:@"created"]) {
AugustAPI/august-api/AGSubscriptionItem.m:42:            return @"trial";
AugustAPI/august-api/AGSubscriptionItem.m:46:            return @"trial_expired";
AugustAPI/august-api/AGSubscriptionItem.m:50:            return @"paid";
AugustAPI/august-api/AGSubscriptionItem.m:54:            return @"past_due";
AugustAPI/august-api/AGSubscriptionItem.m:58:            return @"expired";
AugustAPI/august-api/AGSubscriptionItem.m:62:            return @"cancelled";
AugustAPI/august-api/AGSubscriptionItem.m:66:            return @"created";
AugustAPI/august-api/AGSubscriptionItem.m:70:            return @"Unknown";
AugustAPI/august-api/AGSubscriptionItem.m:78:    sub.userID = [dict objectForKey:@"userID"];
AugustAPI/august-api/AGSubscriptionItem.m:82:    sub.type = [dict objectForKey:@"type"];
AugustAPI/august-api/AGSubscriptionItem.m:83:    sub.status = [AGSubscriptionItem subStatusFromString:[dict objectForKey:@"status"]];
AugustAPI/august-api/AGSubscriptionItem.m:84:    NSString *dateString = [dict objectForKey:@"expiresAt"];
AugustAPI/august-api/AGSubscriptionItem.m:118:        [dict setObject:self.userID forKey:@"userID"];
AugustAPI/august-api/AGSubscriptionItem.m:121:        [dict setObject:self.type forKey:@"type"];
AugustAPI/august-api/AGSubscriptionItem.m:124:    [dict setObject:[AGSubscriptionItem infoStringFromSubscriptionStatus:self.status] forKey:@"status"];
AugustAPI/august-api/AGSubscriptionItem.m:128:                 forKey:@"expiresAt"];
AugustAPI/august-api/AGSubscriptionItem.m:137:        return @"Premium";
AugustAPI/august-api/AGSubscriptionItem.m:139:        return @"Basic";
AugustAPI/august-api/AGSubscriptionItem.m:158:        return [NSString stringWithFormat:@"%d day%@", daysLeft, (daysLeft==1)?@"":@"s"];
AugustAPI/august-api/AGSubscriptionItem.m:162:        return [NSString stringWithFormat:@"%d month%@", months, (months==1)?@"":@"s"];
AugustAPI/august-api/AGClient.h:43://Posts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGClient.h:58://Puts the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGClient.h:65://Deletes the specified parameters and headers to the URL. Note header and parameters should be valid json. Example of header: nil or a dictionary like @{@"accept-version":@"2.0.0"}
AugustAPI/august-api/AGObject.m:20:	return [NSString stringWithFormat:@"%@ %@", NSStringFromClass([self class]), self.objectId];
AugustAPI/august-api/AGObject.m:30:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:56:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:84:	NSString* description __unused = [NSString stringWithFormat:@"Subclass %@ must implement %s for its unique type.", NSStringFromClass([self class]), __PRETTY_FUNCTION__];
AugustAPI/august-api/AGObject.m:93:    if ([str isEqualToString:@"lock"]) {
AugustAPI/august-api/AGObject.m:96:    if ([str isEqualToString:@"doorbell"]) {
AugustAPI/august-api/AGObject.m:104:            return @"lock";
AugustAPI/august-api/AGObject.m:108:            return @"doorbell";
AugustAPI/august-api/AGObject.m:112:            return @"unknown";
AugustAPI/august-api/AGDoorbell.m:21:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:27:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:45:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:70:                                         userInfo:@{@"doorbellSerialNumber":@"doorbellSerialNumber cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:76:                                         userInfo:@{@"houseId":@"houseId cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:93:        [parameters setObject:doorbellType forKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:97:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@", houseId] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:128:        [dict setObject:self.type forKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:148:            [caps addObject:@"join"];
AugustAPI/august-api/AGDoorbell.m:151:            [caps addObject:@"webrtc"];
AugustAPI/august-api/AGDoorbell.m:153:        [dict setObject:caps forKey:@"caps"];
AugustAPI/august-api/AGDoorbell.m:160:        [intellivisionCreds setObject:self.deviceId forKey:@"deviceID"];
AugustAPI/august-api/AGDoorbell.m:161:        [dict setObject:intellivisionCreds.copy forKey:@"intellivisionCreds"];
AugustAPI/august-api/AGDoorbell.m:165:        [settings setObject:@"1" forKey:kTurnOffCamera];
AugustAPI/august-api/AGDoorbell.m:167:        [settings setObject:@"0" forKey:kTurnOffCamera];
AugustAPI/august-api/AGDoorbell.m:170:        [settings setObject:@"1" forKey:kKeepEncoderRunning];
AugustAPI/august-api/AGDoorbell.m:172:        [settings setObject:@"0" forKey:kKeepEncoderRunning];
AugustAPI/august-api/AGDoorbell.m:174:    [dict setObject:settings.copy forKey:@"settings"];
AugustAPI/august-api/AGDoorbell.m:183:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:191:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:parameters
AugustAPI/august-api/AGDoorbell.m:231:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:237:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@", doorbellID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:265:    NSDictionary *intellivisionCreds = (NSDictionary *)[response objectForKey:@"intellivisionCreds"];
AugustAPI/august-api/AGDoorbell.m:267:        NSString *deviceID = [intellivisionCreds objectForKey:@"deviceID"];
AugustAPI/august-api/AGDoorbell.m:278:    self.type = [response objectForKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:281:            if ([self.type isEqualToString:@"homekit"]) {
AugustAPI/august-api/AGDoorbell.m:285:            if ([self.type isEqualToString:@"mars"] || [self.type isEqualToString:@"mars2"]) {
AugustAPI/august-api/AGDoorbell.m:291:        if ([self.serialNumber hasPrefix:@"D2"]) {
AugustAPI/august-api/AGDoorbell.m:292:            self.type = @"mars2";
AugustAPI/august-api/AGDoorbell.m:294:            self.type = @"mars";
AugustAPI/august-api/AGDoorbell.m:303:    if (response[@"currentDoorbellAppVersion"]) {
AugustAPI/august-api/AGDoorbell.m:304:        doorbell.firmwareVersion = response[@"currentDoorbellAppVersion"];
AugustAPI/august-api/AGDoorbell.m:307:        self.firmwareVersion = @"Unknown";
AugustAPI/august-api/AGDoorbell.m:314:        self.messagingProtocol = @"pubnub";
AugustAPI/august-api/AGDoorbell.m:319:        self.messagingURL = @"";
AugustAPI/august-api/AGDoorbell.m:330:    NSDictionary *settingsDictionary = (NSDictionary *)[response objectForKey:@"settings"];
AugustAPI/august-api/AGDoorbell.m:371:        if (settingsDictionary[@"saturation"]) {
AugustAPI/august-api/AGDoorbell.m:372:            doorbell.saturation = [settingsDictionary[@"saturation"] intValue];
AugustAPI/august-api/AGDoorbell.m:374:        if (settingsDictionary[@"brightness"]) {
AugustAPI/august-api/AGDoorbell.m:375:            doorbell.brightness = [settingsDictionary[@"brightness"] intValue];
AugustAPI/august-api/AGDoorbell.m:377:        if (settingsDictionary[@"hue"]) {
AugustAPI/august-api/AGDoorbell.m:378:            doorbell.hue = [settingsDictionary[@"hue"] intValue];
AugustAPI/august-api/AGDoorbell.m:380:        if (settingsDictionary[@"contrast"]) {
AugustAPI/august-api/AGDoorbell.m:381:            doorbell.contrast = [settingsDictionary[@"contrast"] intValue];
AugustAPI/august-api/AGDoorbell.m:383:        if (settingsDictionary[@"sharpness"]) {
AugustAPI/august-api/AGDoorbell.m:384:            doorbell.sharpness = [settingsDictionary[@"sharpness"] intValue];
AugustAPI/august-api/AGDoorbell.m:386:        if (settingsDictionary[@"auto_contrast_mode"]) {
AugustAPI/august-api/AGDoorbell.m:387:            doorbell.autoContrastMode = [settingsDictionary[@"auto_contrast_mode"] intValue];
AugustAPI/august-api/AGDoorbell.m:389:        if (settingsDictionary[@"backlight_comp"]) {
AugustAPI/august-api/AGDoorbell.m:390:            doorbell.BacklightComp = [settingsDictionary[@"backlight_comp"] intValue];
AugustAPI/august-api/AGDoorbell.m:395:    if ([[response objectForKey:@"caps"] isKindOfClass:[NSArray class]]) {
AugustAPI/august-api/AGDoorbell.m:396:        NSArray *capabilitiesArray = (NSArray *)[response objectForKey:@"caps"];
AugustAPI/august-api/AGDoorbell.m:398:            if ([capability isEqualToString:@"join"]) {
AugustAPI/august-api/AGDoorbell.m:401:            if([capability isEqualToString:@"webrtc"]){
AugustAPI/august-api/AGDoorbell.m:407:    NSDictionary *recentImage = (NSDictionary *)[response objectForKey:@"recentImage"];
AugustAPI/august-api/AGDoorbell.m:409:        NSString *url = [recentImage objectForKey:@"secure_url"];
AugustAPI/august-api/AGDoorbell.m:410:        NSNumber *height = [NSNumber numberWithInt:[[recentImage objectForKey:@"height"] intValue]];
AugustAPI/august-api/AGDoorbell.m:411:        NSNumber *width = [NSNumber numberWithInt:[[recentImage objectForKey:@"width"] intValue]];
AugustAPI/august-api/AGDoorbell.m:412:        NSString *dateString = [recentImage objectForKey:@"created_at"];
AugustAPI/august-api/AGDoorbell.m:414:        if ((dateString != nil) && (![dateString isEqualToString:@""])) {
AugustAPI/august-api/AGDoorbell.m:420:        if (url) {doorbellImageDictionary[@"url"] = url;}
AugustAPI/august-api/AGDoorbell.m:421:        if (height) {doorbellImageDictionary[@"height"] = height;}
AugustAPI/august-api/AGDoorbell.m:422:        if (width) {doorbellImageDictionary[@"width"] = width;}
AugustAPI/august-api/AGDoorbell.m:423:        if (date) {doorbellImageDictionary[@"date"] = date;}
AugustAPI/august-api/AGDoorbell.m:426:    NSDictionary *usersDictionary = (NSDictionary *)[response objectForKey:@"users"];
AugustAPI/august-api/AGDoorbell.m:430:    NSArray *invitationsArray = (NSArray *)[response objectForKey:@"invitations"];
AugustAPI/august-api/AGDoorbell.m:440:    if ([videoResolution isEqualToString:@"640x480"]) {
AugustAPI/august-api/AGDoorbell.m:442:    } else if ([videoResolution isEqualToString:@"960x720"]) {
AugustAPI/august-api/AGDoorbell.m:444:    } else if ([videoResolution isEqualToString:@"1280x960"]) {
AugustAPI/august-api/AGDoorbell.m:456:            videoResolution = @"640x480";
AugustAPI/august-api/AGDoorbell.m:459:            videoResolution = @"960x720";
AugustAPI/august-api/AGDoorbell.m:462:            videoResolution = @"1280x960";
AugustAPI/august-api/AGDoorbell.m:465:            videoResolution = @"640x480";
AugustAPI/august-api/AGDoorbell.m:476:            videoResolutionString = @"Good (480p)";
AugustAPI/august-api/AGDoorbell.m:479:            videoResolutionString = @"Better (720p)";
AugustAPI/august-api/AGDoorbell.m:482:            videoResolutionString = @"Best (960p)";
AugustAPI/august-api/AGDoorbell.m:485:            videoResolutionString = @"480p";
AugustAPI/august-api/AGDoorbell.m:497:        user.firstName = [AGClient stringByDecodingXMLEntities:[invite objectForKey:@"Name"]];
AugustAPI/august-api/AGDoorbell.m:498:        user.type = [invite objectForKey:@"type"];
AugustAPI/august-api/AGDoorbell.m:522:                    if ([identifier rangeOfString:@"email:"].location != NSNotFound) {
AugustAPI/august-api/AGDoorbell.m:524:                    }else if (([identifier rangeOfString:@"phone:"].location != NSNotFound)||([identifier rangeOfString:@"tel:"].location != NSNotFound)) {
AugustAPI/august-api/AGDoorbell.m:584:            param[@"saturation"] = value;
AugustAPI/august-api/AGDoorbell.m:587:            param[@"brightness"] = value;
AugustAPI/august-api/AGDoorbell.m:590:            param[@"hue"] = value;
AugustAPI/august-api/AGDoorbell.m:593:            param[@"contrast"] = value;
AugustAPI/august-api/AGDoorbell.m:596:            param[@"sharpness"] = value;
AugustAPI/august-api/AGDoorbell.m:599:            param[@"auto_contrast_mode"] = value;
AugustAPI/august-api/AGDoorbell.m:602:            param[@"backlight_comp"] = value;
AugustAPI/august-api/AGDoorbell.m:607:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/settings/doorbell", self.objectId]
AugustAPI/august-api/AGDoorbell.m:624:    NSDictionary *parameters = @{@"fields":@"mp4url"};
AugustAPI/august-api/AGDoorbell.m:628:                block([responseObject objectForKey:@"transactionID"], nil);
AugustAPI/august-api/AGDoorbell.m:861:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:869:    [[AGClient sharedClient] putPath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:891:                                         userInfo:@{@"Lock":@"Lock cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:899:    [[AGClient sharedClient] deletePath:[NSString stringWithFormat:@"doorbells/%@/lock/%@", self.objectId, lockID] parameters:nil
AugustAPI/august-api/AGDoorbell.m:920:    NSDictionary *parameters = @{@"Name":[user displayName]};
AugustAPI/august-api/AGDoorbell.m:922:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/adduser/%@", doorbellID, userId];
AugustAPI/august-api/AGDoorbell.m:944:    NSString * path = [NSString stringWithFormat:@"doorbells/%@/%@", doorbellID, userId];
AugustAPI/august-api/AGDoorbell.m:963:    NSDictionary *parameters = @{@"dvrID": dvrID, @"description":description};
AugustAPI/august-api/AGDoorbell.m:1013:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/AGDoorbell.m:1057:    NSString *action = @"initiate";
AugustAPI/august-api/AGDoorbell.m:1058:    NSString *tokenKey = @"token";
AugustAPI/august-api/AGDoorbell.m:1078:    [[AGClient sharedClient] getPath:[NSString stringWithFormat:@"doorbells/%@/videoevent", self.objectId] parameters:@{@"dvrID":dvrEventID}
AugustAPI/august-api/AGDoorbell.m:1100:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1104:    NSString *action = @"status";
AugustAPI/august-api/AGDoorbell.m:1106:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil waitTime:5.0
AugustAPI/august-api/AGDoorbell.m:1113:                 NSDictionary *callStats = responseDictionary[@"callStats"];
AugustAPI/august-api/AGDoorbell.m:1115:                     if (callStats[@"answered_user"] == nil) {
AugustAPI/august-api/AGDoorbell.m:1119:                         doorbellCallStatus.answeredByUserId = callStats[@"answered_user"];
AugustAPI/august-api/AGDoorbell.m:1121:                     NSDictionary *image = callStats[@"image"];
AugustAPI/august-api/AGDoorbell.m:1123:                         doorbellCallStatus.imageHeight = [image[@"height"]intValue];
AugustAPI/august-api/AGDoorbell.m:1124:                         doorbellCallStatus.imageWidth = [image[@"width"] intValue];
AugustAPI/august-api/AGDoorbell.m:1125:                         doorbellCallStatus.imageUrl = image[@"secure_url"];
AugustAPI/august-api/AGDoorbell.m:1149:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1153:    NSString *action = @"respond";
AugustAPI/august-api/AGDoorbell.m:1164:                     if (responseObject[@"videoAvailable"] != nil) {
AugustAPI/august-api/AGDoorbell.m:1165:                         doorbell.videoAvailable = [responseObject[@"videoAvailable"] boolValue];
AugustAPI/august-api/AGDoorbell.m:1190:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1194:    NSString *action = @"token";
AugustAPI/august-api/AGDoorbell.m:1202:                 doorbellCallCredentials.customerID = intellivisionSessionInfo[@"customerID"];
AugustAPI/august-api/AGDoorbell.m:1203:                 doorbellCallCredentials.expiresAt = intellivisionSessionInfo[@"expiresAt"];
AugustAPI/august-api/AGDoorbell.m:1204:                 NSDictionary *session = (NSDictionary *)intellivisionSessionInfo[@"session"];
AugustAPI/august-api/AGDoorbell.m:1206:                     doorbellCallCredentials.apiKey = session[@"apiKey"];
AugustAPI/august-api/AGDoorbell.m:1207:                     doorbellCallCredentials.localID = session[@"localId"];
AugustAPI/august-api/AGDoorbell.m:1208:                     doorbellCallCredentials.partnerID = session[@"partnerId"];
AugustAPI/august-api/AGDoorbell.m:1209:                     doorbellCallCredentials.refreshToken = session[@"refreshToken"];
AugustAPI/august-api/AGDoorbell.m:1210:                     doorbellCallCredentials.sessionKey = session[@"sessionKey"];
AugustAPI/august-api/AGDoorbell.m:1211:                     doorbellCallCredentials.sessionSecret = session[@"sessionSecret"];
AugustAPI/august-api/AGDoorbell.m:1233:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1237:    NSString *action = @"decline";
AugustAPI/august-api/AGDoorbell.m:1238:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", doorbellID, action] parameters:nil
AugustAPI/august-api/AGDoorbell.m:1260:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1264:    NSString *action = @"hangup";
AugustAPI/august-api/AGDoorbell.m:1266:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
AugustAPI/august-api/AGDoorbell.m:1286:    NSString *action = @"heartbeat";
AugustAPI/august-api/AGDoorbell.m:1287:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:log
AugustAPI/august-api/AGDoorbell.m:1307:    NSString *action = @"join";
AugustAPI/august-api/AGDoorbell.m:1328:                                         userInfo:@{@"callStatus":@"callStats cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1332:    NSString *action = @"leave";
AugustAPI/august-api/AGDoorbell.m:1334:    [[AGClient sharedClient] postPath:[NSString stringWithFormat:@"doorbells/%@/avsession/%@", self.objectId, action] parameters:callStats
AugustAPI/august-api/AGDoorbell.m:1387:                                         userInfo:@{@"doorbellID":@"doorbellID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1393:                                         userInfo:@{@"callID":@"callID cannot be nil"}];
AugustAPI/august-api/AGDoorbell.m:1407:            //DLog(@"locks fail %@", error.description);
AugustAPI/august-api/UIDevice+HardwareName.m:188:    if ([platform isEqualToString:@"iFPGA"])        return UIDeviceIFPGA;
AugustAPI/august-api/UIDevice+HardwareName.m:191:    if ([platform isEqualToString:@"iPhone1,1"])    return UIDevice1GiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:192:    if ([platform isEqualToString:@"iPhone1,2"])    return UIDevice3GiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:193:    if ([platform isEqualToString:@"iPhone2,1"])    return UIDevice3GSiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:194:    if ([platform isEqualToString:@"iPhone3,1"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:195:    if ([platform isEqualToString:@"iPhone3,2"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:196:    if ([platform isEqualToString:@"iPhone3,3"])    return UIDevice4iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:197:    if ([platform isEqualToString:@"iPhone4,1"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:198:    if ([platform isEqualToString:@"iPhone4,2"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:199:    if ([platform isEqualToString:@"iPhone4,3"])    return UIDevice4SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:200:    if ([platform isEqualToString:@"iPhone5,1"])    return UIDevice5iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:201:    if ([platform isEqualToString:@"iPhone5,2"])    return UIDevice5iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:202:    if ([platform isEqualToString:@"iPhone5,3"])    return UIDevice5CiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:203:    if ([platform isEqualToString:@"iPhone5,4"])    return UIDevice5CiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:204:    if ([platform isEqualToString:@"iPhone6,1"])    return UIDevice5SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:205:    if ([platform isEqualToString:@"iPhone6,2"])    return UIDevice5SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:206:    if ([platform isEqualToString:@"iPhone7,1"])    return UIDevice6iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:207:    if ([platform isEqualToString:@"iPhone7,2"])    return UIDevice6PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:208:    if ([platform isEqualToString:@"iPhone8,1"])    return UIDevice6SiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:209:    if ([platform isEqualToString:@"iPhone8,2"])    return UIDevice6SPlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:210:    if ([platform isEqualToString:@"iPhone8,4"])    return UIDeviceSEiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:211:    if ([platform isEqualToString:@"iPhone9,1"])    return UIDevice7iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:212:    if ([platform isEqualToString:@"iPhone9,2"])    return UIDevice7PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:213:    if ([platform isEqualToString:@"iPhone9,3"])    return UIDevice7iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:214:    if ([platform isEqualToString:@"iPhone9,4"])    return UIDevice7PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:215:    if ([platform isEqualToString:@"iPhone10,1"])    return UIDevice8iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:216:    if ([platform isEqualToString:@"iPhone10,2"])    return UIDevice8PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:217:    if ([platform isEqualToString:@"iPhone10,3"])    return UIDeviceXiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:218:    if ([platform isEqualToString:@"iPhone10,4"])    return UIDevice8iPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:219:    if ([platform isEqualToString:@"iPhone10,5"])    return UIDevice8PlusiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:220:    if ([platform isEqualToString:@"iPhone10,6"])    return UIDeviceXiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:223:    if ([platform isEqualToString:@"iPod1,1"])    return UIDevice1GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:224:    if ([platform isEqualToString:@"iPod2,1"])    return UIDevice2GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:225:    if ([platform isEqualToString:@"iPod2,2"])    return UIDevice2GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:226:    if ([platform isEqualToString:@"iPod3,1"])    return UIDevice3GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:227:    if ([platform isEqualToString:@"iPod4,1"])    return UIDevice4GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:228:    if ([platform isEqualToString:@"iPod5,1"])    return UIDevice5GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:229:    if ([platform isEqualToString:@"iPod7,1"])    return UIDevice6GiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:232:    if ([platform isEqualToString:@"iPad1,1"])    return UIDevice1GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:233:    if ([platform isEqualToString:@"iPad2,1"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:234:    if ([platform isEqualToString:@"iPad2,2"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:235:    if ([platform isEqualToString:@"iPad2,3"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:236:    if ([platform isEqualToString:@"iPad2,4"])    return UIDevice2GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:237:    if ([platform isEqualToString:@"iPad3,1"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:238:    if ([platform isEqualToString:@"iPad3,2"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:239:    if ([platform isEqualToString:@"iPad3,3"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:240:    if ([platform isEqualToString:@"iPad3,4"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:241:    if ([platform isEqualToString:@"iPad3,5"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:242:    if ([platform isEqualToString:@"iPad3,6"])    return UIDevice3GiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:243:    if ([platform isEqualToString:@"iPad4,1"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:244:    if ([platform isEqualToString:@"iPad4,2"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:245:    if ([platform isEqualToString:@"iPad4,3"])    return UIDeviceAiriPad;
AugustAPI/august-api/UIDevice+HardwareName.m:246:    if ([platform isEqualToString:@"iPad5,3"])    return UIDeviceAir2iPad;
AugustAPI/august-api/UIDevice+HardwareName.m:247:    if ([platform isEqualToString:@"iPad5,4"])    return UIDeviceAir2iPad;
AugustAPI/august-api/UIDevice+HardwareName.m:249:    if ([platform isEqualToString:@"iPad2,5"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:250:    if ([platform isEqualToString:@"iPad2,6"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:251:    if ([platform isEqualToString:@"iPad2,7"])    return UIDevice1GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:252:    if ([platform isEqualToString:@"iPad4,4"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:253:    if ([platform isEqualToString:@"iPad4,5"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:254:    if ([platform isEqualToString:@"iPad4,6"])    return UIDevice2GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:255:    if ([platform isEqualToString:@"iPad4,7"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:256:    if ([platform isEqualToString:@"iPad4,8"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:257:    if ([platform isEqualToString:@"iPad4,9"])    return UIDevice3GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:258:    if ([platform isEqualToString:@"iPad5,1"])    return UIDevice4GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:259:    if ([platform isEqualToString:@"iPad5,2"])    return UIDevice4GiPadMini;
AugustAPI/august-api/UIDevice+HardwareName.m:262:    if ([platform isEqualToString:@"iPad6,3"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:263:    if ([platform isEqualToString:@"iPad6,4"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:264:    if ([platform isEqualToString:@"iPad6,7"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:265:    if ([platform isEqualToString:@"iPad6,8"])    return UIDevice1GiPadPro;
AugustAPI/august-api/UIDevice+HardwareName.m:268:    if ([platform isEqualToString:@"AppleTV2,1"])    return UIDeviceAppleTV2;
AugustAPI/august-api/UIDevice+HardwareName.m:269:    if ([platform isEqualToString:@"AppleTV3,1"])    return UIDeviceAppleTV3;
AugustAPI/august-api/UIDevice+HardwareName.m:270:    if ([platform isEqualToString:@"AppleTV3,2"])    return UIDeviceAppleTV4;
AugustAPI/august-api/UIDevice+HardwareName.m:272:    if ([platform hasPrefix:@"iPhone"])             return UIDeviceUnknowniPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:273:    if ([platform hasPrefix:@"iPod"])               return UIDeviceUnknowniPod;
AugustAPI/august-api/UIDevice+HardwareName.m:274:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
AugustAPI/august-api/UIDevice+HardwareName.m:275:    if ([platform hasPrefix:@"iPad"])               return UIDeviceUnknowniPad;
AugustAPI/august-api/UIDevice+HardwareName.m:276:    if ([platform hasPrefix:@"AppleTV"])            return UIDeviceUnknownAppleTV;
AugustAPI/august-api/UIDevice+HardwareName.m:279:    if ([platform hasSuffix:@"86"] || [platform isEqual:@"x86_64"])
AugustAPI/august-api/UIDevice+HardwareName.m:365:    if ([platform hasPrefix:@"iPhone"]) return UIDeviceFamilyiPhone;
AugustAPI/august-api/UIDevice+HardwareName.m:366:    if ([platform hasPrefix:@"iPod"]) return UIDeviceFamilyiPod;
AugustAPI/august-api/UIDevice+HardwareName.m:367:    if ([platform hasPrefix:@"iPad"]) return UIDeviceFamilyiPad;
AugustAPI/august-api/UIDevice+HardwareName.m:368:    if ([platform hasPrefix:@"AppleTV"]) return UIDeviceFamilyAppleTV;
AugustAPI/august-api/UIDevice+HardwareName.m:416:    NSString *outstring = [NSString stringWithFormat:@"%02X:%02X:%02X:%02X:%02X:%02X", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
AugustAPI/august-api/UIDevice+HardwareName.m:424:Class  btclass = NSClassFromString(@"GKBluetoothSupport");
AugustAPI/august-api/AGOctetStreamResponseSerializer.m:37:    return [NSSet setWithObject:@"application/octet-stream"];
AugustAPI/august-api/AGAnalyticsDiary.m:66:        NSAssert(false, @"Can't log category named '%@' because it has illegal characters", category);
AugustAPI/august-api/AGAnalyticsDiary.m:74:        NSAssert(false, @"Can't log event named '%@' because it has illegal characters", event);
AugustAPI/august-api/AGAnalyticsDiary.m:89:        NSAssert(false, @"You need to specify either an event or a message.  Cannot have both be nil");
AugustAPI/august-api/AGAnalyticsDiary.m:117:        NSAssert(false, @"You need to specify either an event or data.  Cannot have both be nil");
AugustAPI/august-api/SecureLogging/NSString+SecureLogging.m:48:        NSString *logString = [@"h" stringByAppendingString:[fullHash substringToIndex:idealOutputLength]];
AugustAPI/august-api/SecureLogging/NSString+SecureLogging.m:89:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:65:                 @"pin",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:66:                 @"key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:67:                 @"x-august-api-key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:68:                 @"x-august-api-session-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:69:                 @"x-august-access-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:70:                 @"lRand1",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:71:                 @"lRand2",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:72:                 @"mRand1",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:73:                 @"mRand2",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:74:                 @"LockResponse",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:75:                 @"packet"
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:87:                 @"x-august-api-key",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:88:                 @"x-august-api-session-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:89:                 @"x-august-access-token",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:90:                 @"publishKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:91:                 @"secretKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:92:                 @"subscribeKey",
AugustAPI/august-api/SecureLogging/AGLogCleaner.m:93:                 @"password"
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:35:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:36:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:39:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:40:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:41:                                @"arr":@[@"a", @"b"],
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:42:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:43:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:44:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:51:    XCTAssertTrue([sanitizedDict[@"key"] isEqualToString:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:52:    XCTAssertTrue([sanitizedDict[@"nested"][@"key"] isEqualToString:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:58:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:59:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:62:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:63:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:64:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:65:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:66:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:79:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:80:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:83:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:84:                                @"other":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:85:                                @"arr":@[@{@"key":sensitiveData},@{@"a":@"b"}, @"test val", @3],
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:86:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:87:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:88:                                        @"other":notSensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:95:    XCTAssertTrue([sanitizedDict[@"arr"][0][@"key"] isEqual:@"h6367c48"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:96:    XCTAssertTrue([sanitizedDict[@"arr"][2] isEqual:@"test val"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:103:    NSString *sensitiveData = @"abc123";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:104:    NSString *notSensitiveData = @"not sensitive data";
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:107:                                @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:108:                                @"x-august-access-token":notSensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:109:                                @"nested":@{
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:110:                                        @"key":sensitiveData,
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:111:                                        @"x-august-access-token":sensitiveData
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:119:    XCTAssertNil(sanitizedDict[@"x-august-access-token"]);
AugustAPI/august-api/SecureLogging/Tests/AGLogCleanerTests.m:120:    XCTAssertNil(sanitizedDict[@"nested"][@"x-august-access-token"]);
Sezam/AGAutoUnlockSetupLocationPermissionController.m:48:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:122:    NSString *title = @"Location Permissions";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:123:    NSString *paragraph1 = @"For Auto-Unlock to function, please set location permissions for the August app to “Always” in your Settings.";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:126:        paragraph1 = @"Auto-Unlock needs permission to use your location.";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:130:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupLocationPermissionController.m:138:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupLocationPermissionController.m:154:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationPermissionController.m:165:    NSString *title = @"OPEN SETTINGS";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:167:        title = @"OK, ALLOW LOCATION ACCESS";
Sezam/AGAutoUnlockSetupLocationPermissionController.m:180:    self.gettingLocationAlert = [UIAlertController alertControllerWithTitle:@"Getting Lock Location" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSelectorAndReorderViewController.m:31:    [self.reorderButton setTitle:@"Reorder" forState:UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:58:    AGTableViewCell *cell = cell =  (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"LockName"];
Sezam/AGLockSelectorAndReorderViewController.m:61:    NSString *lockName = @"NA";
Sezam/AGLockSelectorAndReorderViewController.m:143:        [self.reorderButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:145:        self.header.text = @"RE-ORDER LOCKS";
Sezam/AGLockSelectorAndReorderViewController.m:148:        [self.reorderButton setTitle:@"Reorder" forState: UIControlStateNormal];
Sezam/AGLockSelectorAndReorderViewController.m:150:        self.header.text = @"CHOOSE A LOCK";
Sezam/AGDoorbellFactoryResetViewController.m:35:        self.titleLabel.text = @"FACTORY RESET";
Sezam/AGDoorbellFactoryResetViewController.m:36:        self.textLabel.text = @"Factory reset will restore your doorbell to its original settings. All current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGDoorbellFactoryResetViewController.m:39:        self.titleLabel.text = @"LOCK CONNECTION";
Sezam/AGDoorbellFactoryResetViewController.m:40:        self.textLabel.text = @"You must factory reset your doorbell to disconnect it from your August Smart Lock. This will restore it to its original settings and all current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGDoorbellFactoryResetViewController.m:58:                self.textLabel.text = [NSString stringWithFormat:@"This doorbell is connected to \"%@.\"\n\nYou must factory reset your doorbell to disconnect it from your August Smart Lock. This will restore it to its original settings and all current users will lose access to this doorbell.\n\nIf this doorbell is enrolled in an August Video Recording subscription, the subscription will be cancelled and the paying user will receive a prorated refund.", associatedLock.name];
Sezam/AGDoorbellFactoryResetViewController.m:83:    [AGVideoCallEvent postIndependentLogToBackendOutsideCallFlowForDoorbell:self.doorbell withEvent:@"FactoryReset" andStatus:[NSString stringWithFormat:@"UserID:%@,FirstName:%@,LastName:%@", currentUser.objectId, currentUser.firstName, currentUser.lastName] andError:nil];
Sezam/AGDoorbellFactoryResetViewController.m:88:                UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellFactoryResetViewController.m:89:                                                                                              message:[NSString stringWithFormat:@"Unable to factory reset doorbell: %@", error.localizedDescription]
Sezam/AGDoorbellFactoryResetViewController.m:91:                [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellFactoryResetViewController.m:123:    NSString *lastUsedDoorbell = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbell"];
Sezam/AGDoorbellFactoryResetViewController.m:125:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbell"];
Sezam/AGDoorbellFactoryResetViewController.m:126:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellName"];
Sezam/AGDoorbellFactoryResetViewController.m:127:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellHouse"];
Sezam/AGDoorbellFactoryResetViewController.m:128:        [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedDoorbellHouseName"];
Sezam/AGDoorbellFactoryResetViewController.m:141:        UIAlertController *confirmFactoryResetController = [UIAlertController alertControllerWithTitle:@"Success"
Sezam/AGDoorbellFactoryResetViewController.m:142:                                                                                               message:@"Your doorbell has been Factory Reset."
Sezam/AGDoorbellFactoryResetViewController.m:144:        [confirmFactoryResetController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action){
Sezam/SRWebSocket.m:319:    assert([scheme isEqualToString:@"ws"] || [scheme isEqualToString:@"http"] || [scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]);
Sezam/SRWebSocket.m:321:    if ([scheme isEqualToString:@"wss"] || [scheme isEqualToString:@"https"]) {
Sezam/SRWebSocket.m:384:    [self willChangeValueForKey:@"readyState"];
Sezam/SRWebSocket.m:387:    [self didChangeValueForKey:@"readyState"];
Sezam/SRWebSocket.m:395:    NSAssert(_readyState == SR_CONNECTING, @"Cannot call -(void)open on SRWebSocket more than once");
Sezam/SRWebSocket.m:445:        SRFastLog(@"Request failed with response code %d", responseCode);
Sezam/SRWebSocket.m:490:            SRFastLog(@"Finished reading headers %@", CFBridgingRelease(CFHTTPMessageCopyAllHeaderFields(_receivedHTTPHeaders)));
Sezam/SRWebSocket.m:500:    SRFastLog(@"Connected");
Sezam/SRWebSocket.m:504:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Host"), (__bridge CFStringRef)(_url.port ? [NSString stringWithFormat:@"%@:%@", _url.host, _url.port] : _url.host));
Sezam/SRWebSocket.m:521:    CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Version"), (__bridge CFStringRef)[NSString stringWithFormat:@"%ld", (long)_webSocketVersion]);
Sezam/SRWebSocket.m:526:        CFHTTPMessageSetHeaderFieldValue(request, CFSTR("Sec-WebSocket-Protocol"), (__bridge CFStringRef)[_requestedProtocols componentsJoinedByString:@", "]);
Sezam/SRWebSocket.m:630:        SRFastLog(@"Closing with code %d reason %@", code, reason);
Sezam/SRWebSocket.m:688:            SRFastLog(@"Failing with error %@", error.localizedDescription);
Sezam/SRWebSocket.m:708:    NSAssert(self.readyState != SR_CONNECTING, @"Invalid State: Cannot call send: until connection is open");
Sezam/SRWebSocket.m:726:    NSAssert(self.readyState == SR_OPEN, @"Invalid State: Cannot call send: until connection is open");
Sezam/SRWebSocket.m:746:    SRFastLog(@"Received pong");
Sezam/SRWebSocket.m:756:    SRFastLog(@"Received message");
Sezam/SRWebSocket.m:802:    SRFastLog(@"Received close frame");
Sezam/SRWebSocket.m:806:        [self _closeWithProtocolError:@"Payload for close must be larger than 2 bytes"];
Sezam/SRWebSocket.m:812:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Cannot have close code of %d", _closeCode]];
Sezam/SRWebSocket.m:818:                [self _closeWithProtocolError:@"Close reason MUST be valid UTF-8"];
Sezam/SRWebSocket.m:839:    SRFastLog(@"Trying to disconnect");
Sezam/SRWebSocket.m:861:                [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Sezam/SRWebSocket.m:884:            [self _closeWithProtocolError:[NSString stringWithFormat:@"Unknown opcode %ld", (long)opcode]];
Sezam/SRWebSocket.m:902:        [self _closeWithProtocolError:@"Fragmented control frames not allowed"];
Sezam/SRWebSocket.m:907:        [self _closeWithProtocolError:@"Control frames cannot have payloads larger than 126 bytes"];
Sezam/SRWebSocket.m:985:            [self _closeWithProtocolError:@"Server used RSV bits"];
Sezam/SRWebSocket.m:994:            [self _closeWithProtocolError:@"all data frames after the initial data frame must have opcode 0"];
Sezam/SRWebSocket.m:999:            [self _closeWithProtocolError:@"cannot continue a message"];
Sezam/SRWebSocket.m:1014:            [self _closeWithProtocolError:@"Client must receive unmasked data"];
Sezam/SRWebSocket.m:1252:                        [self closeWithCode:SRStatusCodeInvalidUTF8 reason:@"Text frames must be valid UTF-8"];
Sezam/SRWebSocket.m:1311:    NSAssert([data isKindOfClass:[NSData class]] || [data isKindOfClass:[NSString class]], @"NSString or NSData");
Sezam/SRWebSocket.m:1317:        [self closeWithCode:SRStatusCodeMessageTooBig reason:@"Message too big"];
Sezam/SRWebSocket.m:1419:                SRFastLog(@"NSStreamEventOpenCompleted %@", aStream);
Sezam/SRWebSocket.m:1434:                SRFastLog(@"NSStreamEventErrorOccurred %@ %@", aStream, [[aStream streamError] copy]);
Sezam/SRWebSocket.m:1445:                SRFastLog(@"NSStreamEventEndEncountered %@", aStream);
Sezam/SRWebSocket.m:1459:                                [self.delegate webSocket:self didCloseWithCode:SRStatusCodeGoingAway reason:@"Stream end encountered" wasClean:NO];
Sezam/SRWebSocket.m:1469:                SRFastLog(@"NSStreamEventHasBytesAvailable %@", aStream);
Sezam/SRWebSocket.m:1491:                SRFastLog(@"NSStreamEventHasSpaceAvailable %@", aStream);
Sezam/SRWebSocket.m:1497:                SRFastLog(@"(default)  %@", aStream);
Sezam/SRWebSocket.m:1577:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1586:    return [NSURLProtocol propertyForKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1591:    [NSURLProtocol setProperty:SR_SSLPinnedCertificates forKey:@"SR_SSLPinnedCertificates" inRequest:self];
Sezam/SRWebSocket.m:1602:    if ([scheme isEqualToString:@"wss"]) {
Sezam/SRWebSocket.m:1603:        scheme = @"https";
Sezam/SRWebSocket.m:1604:    } else if ([scheme isEqualToString:@"ws"]) {
Sezam/SRWebSocket.m:1605:        scheme = @"http";
Sezam/SRWebSocket.m:1609:        return [NSString stringWithFormat:@"%@://%@:%@/", scheme, self.host, self.port];
Sezam/SRWebSocket.m:1611:        return [NSString stringWithFormat:@"%@://%@/", scheme, self.host];
Sezam/AGKeypadOTAProgressViewController.m:67:    return @"Unknown state";
Sezam/AGSharedData.m:74:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:87:        for (NSDictionary *house in [storedData objectForKey:@"houses"]) {
Sezam/AGSharedData.m:92:        for (NSDictionary *doorbellDictionary in [storedData objectForKey:@"doorbells"]) {
Sezam/AGSharedData.m:97:        for (NSDictionary *bridgeDictionary in [storedData objectForKey:@"bridges"]) {
Sezam/AGSharedData.m:103:        for (NSDictionary *lock in [storedData objectForKey:@"locks"]) {
Sezam/AGSharedData.m:105:            if (lock[@"HouseID"] != nil) {
Sezam/AGSharedData.m:107:                house.objectId = lock[@"HouseID"];
Sezam/AGSharedData.m:108:                if (lock[@"HouseName"] != nil) {
Sezam/AGSharedData.m:109:                    house.name = lock[@"HouseName"];
Sezam/AGSharedData.m:117:        for (NSDictionary *keypadDictionary in [storedData objectForKey:@"keypads"]) {
Sezam/AGSharedData.m:124:        for (NSDictionary *sub in [storedData objectForKey:@"subscriptions"]) {
Sezam/AGSharedData.m:161:            if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGSharedData.m:171:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:174:    for (NSDictionary *doorbellDictionary in [storedData objectForKey:@"doorbells"]) {
Sezam/AGSharedData.m:184:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:218:    [storedData setObject:houses forKey:@"houses"];
Sezam/AGSharedData.m:219:    [storedData setObject:locks forKey:@"locks"];
Sezam/AGSharedData.m:220:    [storedData setObject:keypads forKey:@"keypads"];
Sezam/AGSharedData.m:221:    [storedData setObject:doorbells forKey:@"doorbells"];
Sezam/AGSharedData.m:222:    [storedData setObject:bridges forKey:@"bridges"];
Sezam/AGSharedData.m:223:    [storedData setObject:subscriptions forKey:@"subscriptions"];
Sezam/AGSharedData.m:224:    NSString *appVersion = (NSString *)[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"];
Sezam/AGSharedData.m:225:    [storedData setObject:appVersion forKey:@"appVersion"];
Sezam/AGSharedData.m:227:    NSString *fullPath = [path URLByAppendingPathComponent:@"entities.plist"].path;
Sezam/AGSharedData.m:455:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGSharedData.m:513:                    if ([subItem.type isEqualToString:@"doorbellDvr"]) {
Sezam/AGSharedData.m:528:            if ([lastError.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGSharedData.m:606:        if ([house.highestDeviceType isEqualToString:@"superuser"] || ([house.highestDeviceType isEqualToString:@"manager"])) {
Sezam/AGVideoCallSummary.m:33:    self.source = @"iOS";
Sezam/AGVideoCallSummary.m:34:    self.platform = @"iOS";
Sezam/AGVideoCallSummary.m:35:    self.app_version = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGVideoCallSummary.m:37:    self.manufacturer = @"Apple";
Sezam/AGVideoCallSummary.m:39:    self.name = @"doorbell_call_event";
Sezam/AGVideoCallSummary.m:63:    if ([status isEqualToString:@"first_video_frame_rendered"]) {
Sezam/AGVideoCallSummary.m:64:        [[NSNotificationCenter defaultCenter] postNotificationName:@"VideoCallIsActive" object:self];
Sezam/AGVideoCallSummary.m:75:    videoCallStatistic.video_packet_loss_count = playerStatistics[@"Packet Loss"];
Sezam/AGVideoCallSummary.m:76:    videoCallStatistic.audio_packet_loss_count = playerStatistics[@"Packet Loss"];
Sezam/AGVideoCallSummary.m:77:    videoCallStatistic.average_time_diff_millis = playerStatistics[@"Audio-Video Time Diff"];
Sezam/AGVideoCallSummary.m:78:    videoCallStatistic.video_average_decode_time = playerStatistics[@"Avg Video Decode Time"];
Sezam/AGVideoCallSummary.m:79:    videoCallStatistic.audio_average_decode_time = playerStatistics[@"Avg Audio Decode Time"];
Sezam/AGVideoCallSummary.m:80:    videoCallStatistic.audio_fps = playerStatistics[@"Avg Audio FPS"];
Sezam/AGVideoCallSummary.m:81:    videoCallStatistic.video_fps = playerStatistics[@"Avg Video FPS"];
Sezam/AGVideoCallSummary.m:89:    videoCallStatistic.status = @"ongoing_call_stats";              // ie. ongoing_call_stats
Sezam/AGVideoCallSummary.m:91:    videoCallStatistic.event = @"IVSDK";
Sezam/AGVideoCallSummary.m:111:    statisticDictionary[@"name"] = self.name;
Sezam/AGVideoCallSummary.m:112:    statisticDictionary[@"doorbellID"] = self.doorbell.objectId;
Sezam/AGVideoCallSummary.m:113:    statisticDictionary[@"source"] = self.source;
Sezam/AGVideoCallSummary.m:114:    statisticDictionary[@"platform"] = self.platform;
Sezam/AGVideoCallSummary.m:115:    statisticDictionary[@"callID"] = self.call_id;
Sezam/AGVideoCallSummary.m:116:    statisticDictionary[@"manufacturer"] = self.manufacturer;
Sezam/AGVideoCallSummary.m:117:    statisticDictionary[@"client_version"] = self.client_version;
Sezam/AGVideoCallSummary.m:118:    statisticDictionary[@"app_version"] = self.app_version;
Sezam/AGVideoCallSummary.m:119:    statisticDictionary[@"installToken"] = self.installToken;
Sezam/AGVideoCallSummary.m:120:    statisticDictionary[@"device_uuid"] = self.device_uuid;
Sezam/AGVideoCallSummary.m:122:    statisticDictionary[@"event"] = videoCallStatistic.event;
Sezam/AGVideoCallSummary.m:125:    [details setValue:videoCallStatistic.log_creation_timestamp forKey:@"log_creation_timestamp"];
Sezam/AGVideoCallSummary.m:128:    [details setValue:videoCallStatistic.duration_seconds forKey:@"duration_seconds"];
Sezam/AGVideoCallSummary.m:129:    details[@"status"] = videoCallStatistic.status;
Sezam/AGVideoCallSummary.m:134:    [details setValue:my_timestamp forKey:@"my_timestamp"];
Sezam/AGVideoCallSummary.m:135:    [details setValue:videoCallStatistic.video_packet_loss_count forKey:@"video_packet_loss_count"];
Sezam/AGVideoCallSummary.m:136:    [details setValue:videoCallStatistic.audio_packet_loss_count forKey:@"audio_packet_loss_count"];
Sezam/AGVideoCallSummary.m:137:    [details setValue:videoCallStatistic.average_time_diff_millis forKey:@"average_time_diff_millis"];
Sezam/AGVideoCallSummary.m:138:    [details setValue:videoCallStatistic.video_average_decode_time forKey:@"video_average_decode_time"];
Sezam/AGVideoCallSummary.m:139:    [details setValue:videoCallStatistic.audio_average_decode_time forKey:@"audio_average_decode_time"];
Sezam/AGVideoCallSummary.m:140:    [details setValue:videoCallStatistic.audio_fps forKey:@"audio_fps"];
Sezam/AGVideoCallSummary.m:141:    [details setValue:videoCallStatistic.video_fps forKey:@"video_fps"];
Sezam/AGVideoCallSummary.m:142:    [details setValue:videoCallStatistic.playback_timestamp forKey:@"playback_timestamp"];
Sezam/AGVideoCallSummary.m:144:    statisticDictionary[@"details"] = details;
Sezam/SDCloudUserDefaults.m:62:    [[NSNotificationCenter defaultCenter] addObserverForName:@"NSUbiquitousKeyValueStoreDidChangeExternallyNotification"
Sezam/SDCloudUserDefaults.m:68:                                                      NSDictionary* changedKeys = (notification.userInfo)[@"NSUbiquitousKeyValueStoreChangedKeysKey"];
Sezam/AGWeeklyRecurrenceScheduleTests.m:37:    XCTAssert([regeneratedSchedule.days isEqualToSet:originalSchedule.days], @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:38:    XCTAssert(regeneratedSchedule.startTime == originalSchedule.startTime, @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:39:    XCTAssert(regeneratedSchedule.endTime == originalSchedule.endTime, @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGWeeklyRecurrenceScheduleTests.m:40:    XCTAssert([regeneratedSchedule.timeZone isEqualToTimeZone:originalSchedule.timeZone], @"The regenerated schedule should have the same schedule as the original schedule");
Sezam/AGKibanaVideoCallLog.m:29:            log.callInitiationType = @"ButtonPush";
Sezam/AGKibanaVideoCallLog.m:32:            log.callInitiationType = @"MobileInitiated";
Sezam/AGKibanaVideoCallLog.m:35:            log.callInitiationType = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:42:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGKibanaVideoCallLog.m:45:        logDictionary[@"doorbellID"] = doorbell.objectId;
Sezam/AGKibanaVideoCallLog.m:48:        logDictionary[@"serialNumber"] = doorbell.serialNumber;
Sezam/AGKibanaVideoCallLog.m:51:        logDictionary[@"firmwareVersion"] = doorbell.firmwareVersion;
Sezam/AGKibanaVideoCallLog.m:54:        logDictionary[@"appVersion"] = appVersion;
Sezam/AGKibanaVideoCallLog.m:56:    logDictionary[@"platform"] = @"iOS";
Sezam/AGKibanaVideoCallLog.m:57:    logDictionary[isTesting?@"eventQA":@"event"] = @"StartVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:58:    logDictionary[isTesting?@"callTypeQA":@"callType"] = log.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:96:            kibanaVideoCallResultString = @"VideoSuccess";
Sezam/AGKibanaVideoCallLog.m:99:            kibanaVideoCallResultString = @"UserCancel";
Sezam/AGKibanaVideoCallLog.m:102:            kibanaVideoCallResultString = @"VideoFailurePower";
Sezam/AGKibanaVideoCallLog.m:105:            kibanaVideoCallResultString = @"VideoFailureToken";
Sezam/AGKibanaVideoCallLog.m:108:            kibanaVideoCallResultString = @"VideoFailure";
Sezam/AGKibanaVideoCallLog.m:111:            kibanaVideoCallResultString = @"DoorbellNeverOnline";
Sezam/AGKibanaVideoCallLog.m:114:            kibanaVideoCallResultString = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:125:            callErrorTypeString = @"None";
Sezam/AGKibanaVideoCallLog.m:128:            callErrorTypeString = @"NoVideoFrames";
Sezam/AGKibanaVideoCallLog.m:131:            callErrorTypeString = @"DoorbellProxyReconnection";
Sezam/AGKibanaVideoCallLog.m:134:            callErrorTypeString = @"CallUnavailable";
Sezam/AGKibanaVideoCallLog.m:137:            callErrorTypeString = @"IncompatibleServers";
Sezam/AGKibanaVideoCallLog.m:140:            callErrorTypeString = @"CallEnded";
Sezam/AGKibanaVideoCallLog.m:143:            callErrorTypeString = @"CallAnswered";
Sezam/AGKibanaVideoCallLog.m:146:            callErrorTypeString = @"CallAnsweredWithUserDetails";
Sezam/AGKibanaVideoCallLog.m:149:            callErrorTypeString = @"BatteryLow";
Sezam/AGKibanaVideoCallLog.m:152:            callErrorTypeString = @"NoTokenInfo";
Sezam/AGKibanaVideoCallLog.m:155:            callErrorTypeString = @"CameraError";
Sezam/AGKibanaVideoCallLog.m:158:            callErrorTypeString = @"VideoStopped";
Sezam/AGKibanaVideoCallLog.m:161:            callErrorTypeString = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:169:        logDictionary[@"doorbellID"] = self.doorbell.objectId;
Sezam/AGKibanaVideoCallLog.m:172:        logDictionary[@"serialNumber"] = self.doorbell.serialNumber;
Sezam/AGKibanaVideoCallLog.m:175:        logDictionary[@"firmwareVersion"] = self.doorbell.firmwareVersion;
Sezam/AGKibanaVideoCallLog.m:177:    NSString *appVersion = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/AGKibanaVideoCallLog.m:179:        logDictionary[@"appVersion"] = appVersion;
Sezam/AGKibanaVideoCallLog.m:181:    logDictionary[@"platform"] = @"iOS";
Sezam/AGKibanaVideoCallLog.m:191:            logDictionary[@"networkReachabilityStatus"] = @"Unknown";
Sezam/AGKibanaVideoCallLog.m:195:            logDictionary[@"networkReachabilityStatus"] = @"NotReachable";
Sezam/AGKibanaVideoCallLog.m:199:            logDictionary[@"networkReachabilityStatus"] = @"WWAN";
Sezam/AGKibanaVideoCallLog.m:203:            logDictionary[@"networkReachabilityStatus"] = @"WiFi";
Sezam/AGKibanaVideoCallLog.m:210:        logDictionary[@"wifi" ] = @"Yes";
Sezam/AGKibanaVideoCallLog.m:212:        logDictionary[@"wifi"] = @"No";
Sezam/AGKibanaVideoCallLog.m:216:            logDictionary[@"carrier" ] = carrier.carrierName;
Sezam/AGKibanaVideoCallLog.m:219:            logDictionary[@"connectionType"] = netinfo.currentRadioAccessTechnology;
Sezam/AGKibanaVideoCallLog.m:223:    logDictionary[isTesting?@"eventQA":@"event"] = @"EndVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:224:    logDictionary[isTesting?@"callTypeQA":@"callType"] = self.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:225:    logDictionary[isTesting?@"videoCallResultQA":@"videoCallResult"] = kibanaVideoCallResultString;
Sezam/AGKibanaVideoCallLog.m:226:    logDictionary[isTesting?@"callErrorTypeQA":@"callErrorType"] = callErrorTypeString;
Sezam/AGKibanaVideoCallLog.m:228:    logDictionary[@"event"] = @"EndVideoCallLog";
Sezam/AGKibanaVideoCallLog.m:230:        logDictionary[@"callType"] = self.callInitiationType;
Sezam/AGKibanaVideoCallLog.m:233:        logDictionary[@"videoCallResult"] = kibanaVideoCallResultString;
Sezam/AGKibanaVideoCallLog.m:236:        logDictionary[@"callErrorType"] = callErrorTypeString;
Sezam/AGKibanaVideoCallLog.m:240:        [logDictionary setValue:[NSNumber numberWithFloat:(float)self.imageDownloadDuration] forKey:@"imageDownloadDuration"];
Sezam/AGKibanaVideoCallLog.m:243:    [logDictionary setValue:durationToResultNumber forKey:@"durationToResultsInSeconds"];
Sezam/AGKibanaVideoCallLog.m:245:    [logDictionary setValue:retriesNumber forKey:@"retries"];
Sezam/AGKibanaVideoCallLog.m:250:                logDictionary[@"powerMode" ] = @"high";
Sezam/AGKibanaVideoCallLog.m:253:                logDictionary[@"powerMode" ] = @"medium";
Sezam/AGKibanaVideoCallLog.m:256:                logDictionary[@"powerMode" ] = @"low";
Sezam/AGKibanaVideoCallLog.m:259:                logDictionary[@"powerMode" ] = @"unknown";
Sezam/AGKibanaVideoCallLog.m:265:        self.proxyURL = @"None";
Sezam/AGKibanaVideoCallLog.m:268:        self.proxyConnectionType = @"None";
Sezam/AGKibanaVideoCallLog.m:270:    logDictionary[@"proxyConnectionType"] = self.proxyConnectionType;
Sezam/AGKibanaVideoCallLog.m:271:    logDictionary[@"proxyURL"] = self.proxyURL;
Sezam/AGKibanaVideoCallLog.m:273:    if (![kibanaVideoCallResultString isEqualToString:@"VideoSuccess"]) {
Sezam/AGKibanaVideoCallLog.m:275:        if (([kibanaVideoCallResultString isEqualToString:@"UserCancel"]) && (durationToResultInSeconds < 5.0)) {
Sezam/AGKibanaVideoCallLog.m:279:            NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGKibanaVideoCallLog.m:285:        logDictionary[@"video_call_version"] = self.videoCallVersion;
Sezam/AGKibanaVideoCallLog.m:288:        logDictionary[@"ending_status"] = self.endingCallStatus;
Sezam/AGKibanaVideoCallLog.m:339:    NSDictionary *doorbellSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"DoorbellSuccessMetics"];
Sezam/AGKibanaVideoCallLog.m:341:        NSNumber *successCount = (NSNumber *)doorbellSuccessMetrics[@"successCount"];
Sezam/AGKibanaVideoCallLog.m:342:        NSNumber *failureCount = (NSNumber *)doorbellSuccessMetrics[@"failureCount"];
Sezam/AGKibanaVideoCallLog.m:353:    NSDictionary *updatedSuccessMetrics = [NSDictionary dictionaryWithObjectsAndKeys:successCount, @"successCount", failureCount, @"failureCount", nil];
Sezam/AGKibanaVideoCallLog.m:354:    [[NSUserDefaults standardUserDefaults] setObject:updatedSuccessMetrics forKey:@"DoorbellSuccessMetics"];
Sezam/AGInviteUserExistsViewController.m:58:        if ((![[user  firstName] isEqualToString:@""] && [user  firstName])||(![[user   lastName] isEqualToString:@""] && [user  lastName])) {
Sezam/AGInviteUserExistsViewController.m:67:    if ([segue.identifier isEqualToString:@"InviteUserExistsToInviteEdit"]) {
Sezam/AGInviteUserExistsViewController.m:74:    [self performSegueWithIdentifier:@"InviteUserExistsToInviteEdit" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:57:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:self];
Sezam/AGInviteEntryCodeGuest.m:93:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:98:    [self performSegueWithIdentifier:@"PinInviteToInviteEditVC" sender:nil];
Sezam/AGInviteEntryCodeGuest.m:109:    if ([segue.identifier isEqualToString:@"PinInviteToInviteEditVC"]) {
Sezam/Reachability.m:58:NSString *kReachabilityChangedNotification = @"kNetworkReachabilityChangedNotification";
Sezam/Reachability.m:89:	NSCAssert(info != NULL, @"info was NULL in ReachabilityCallback");
Sezam/Reachability.m:90:	NSCAssert([(__bridge NSObject*) info isKindOfClass: [Reachability class]], @"info was wrong class in ReachabilityCallback");
Sezam/Reachability.m:275:	NSAssert(_reachabilityRef != NULL, @"connectionRequired called with NULL reachabilityRef");
Sezam/Reachability.m:289:	NSAssert(_reachabilityRef != NULL, @"currentNetworkStatus called with NULL SCNetworkReachabilityRef");
Sezam/AGDebugModeViewController.m:59:    [[self addLockSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]];
Sezam/AGDebugModeViewController.m:60:    [[self autoUnlockNotificationSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAutoUnlockNotify"]];
Sezam/AGDebugModeViewController.m:62:    [[self keypadOTAOnSetupSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"AlwaysKeypadOTAOnSetup"]];
Sezam/AGDebugModeViewController.m:63:    [[self otaDisabledToggleSwitch] setOn: [[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"]];
Sezam/AGDebugModeViewController.m:65:    self.otaStatusLabelSwitch.on = [[NSUserDefaults standardUserDefaults] boolForKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:69:    NSDictionary *knownLaunchImageDictionary = @{@"{320, 480}" : @"LaunchImage-700",
Sezam/AGDebugModeViewController.m:70:                           @"{320, 568}" : @"LaunchImage-700-568h",
Sezam/AGDebugModeViewController.m:71:                           @"{375, 667}" : @"LaunchImage-800-667h",
Sezam/AGDebugModeViewController.m:72:                           @"{414, 736}" : @"LaunchImage-800-Portrait-736h"};
Sezam/AGDebugModeViewController.m:74:    NSArray *currentImagesDictionariesArray = [[[NSBundle mainBundle] infoDictionary] valueForKey:@"UILaunchImages"];
Sezam/AGDebugModeViewController.m:78:        NSPredicate *p = [NSPredicate predicateWithFormat:@"UILaunchImageSize = %@", knownImageDimension];
Sezam/AGDebugModeViewController.m:85:            if ([knownImageDimension isEqualToString:@"{320, 480}"]) {
Sezam/AGDebugModeViewController.m:86:                [missingLaunchImagesArray addObject:@"iPhone 4S size"];
Sezam/AGDebugModeViewController.m:87:            } else if ([knownImageDimension isEqualToString:@"{320, 568}"]) {
Sezam/AGDebugModeViewController.m:88:                [missingLaunchImagesArray addObject:@"iPhone 5"];
Sezam/AGDebugModeViewController.m:89:            } else if ([knownImageDimension isEqualToString:@"{375, 667}"]) {
Sezam/AGDebugModeViewController.m:90:                [missingLaunchImagesArray addObject:@"iPhone 6"];
Sezam/AGDebugModeViewController.m:91:            } else if ([knownImageDimension isEqualToString:@"{414, 736}"]) {
Sezam/AGDebugModeViewController.m:92:                [missingLaunchImagesArray addObject:@"iPhone 6 Plus"];
Sezam/AGDebugModeViewController.m:99:        self.graphicsResolutionLabel.text = @"Native Resolution";
Sezam/AGDebugModeViewController.m:101:        self.graphicsResolutionLabel.text = [NSString stringWithFormat:@"Non-Native Resolution for %@", [[missingLaunchImagesArray valueForKey:@"description"] componentsJoinedByString:@""]];
Sezam/AGDebugModeViewController.m:107:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGDebugModeViewController.m:124:    [[NSUserDefaults standardUserDefaults] setBool:self.addLockSwitch.on forKey:@"DebugAddLock"];
Sezam/AGDebugModeViewController.m:129:    [[NSUserDefaults standardUserDefaults] setBool:self.autoUnlockNotificationSwitch.on forKey:@"DebugAutoUnlockNotify"];
Sezam/AGDebugModeViewController.m:134:    [[NSUserDefaults standardUserDefaults] setBool:self.otaDisabledToggleSwitch.on forKey:@"DisableOTA"];
Sezam/AGDebugModeViewController.m:140:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AlwaysKeypadOTAOnSetup"];
Sezam/AGDebugModeViewController.m:143:        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"AlwaysKeypadOTAOnSetup"];
Sezam/AGDebugModeViewController.m:150:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:153:        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"ShowOTAStatusLabel"];
Sezam/AGDebugModeViewController.m:160:    NSString *customBaseURLString = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGDebugModeViewController.m:169:    [self performSegueWithIdentifier:@"DebugModeToSelectServer" sender:nil];
Sezam/AGDebugModeViewController.m:173:    [AGUtility sendLogs:self toEmail:@"autounlock@august.com"];
Sezam/AGDebugModeViewController.m:179:    self.deleteCacheAlertView = [[UIAlertView alloc] initWithTitle:@"Cache Deleted" message:@"Your network cache has been cleared. Press 'Ok' to crash the app." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDebugModeViewController.m:191:    if ([segue.identifier isEqualToString:@"DebugModeToSelectServer"]) {
Sezam/AGHomeKitManageCreateHomeViewController.m:47:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Home. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitManageCreateHomeViewController.m:50:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Home." inViewController:self];
Sezam/NSString+AGVideoStream.m:14:        case AGVideoStreamStateUnknown: return @"Unknown";
Sezam/NSString+AGVideoStream.m:15:        case AGVideoStreamStateInitialized: return @"Initialized";
Sezam/NSString+AGVideoStream.m:16:        case AGVideoStreamStatePreparing: return @"Preparing";
Sezam/NSString+AGVideoStream.m:17:        case AGVideoStreamStatePrepared: return @"Prepared";
Sezam/NSString+AGVideoStream.m:18:        case AGVideoStreamStateBuffering: return @"Buffering";
Sezam/NSString+AGVideoStream.m:19:        case AGVideoStreamStateStreaming: return @"Streaming";
Sezam/NSString+AGVideoStream.m:20:        case AGVideoStreamStateClosing: return @"Closing";
Sezam/NSString+AGVideoStream.m:21:        case AGVideoStreamStateClosed: return @"Closed";
Sezam/NSString+AGVideoStream.m:22:        case AGVideoStreamStateError: return @"Error";
Sezam/NSString+AGVideoStream.m:23:        case AGVideoStreamStateRestarting: return @"Restarting";
Sezam/NSString+AGVideoStream.m:24:        case AGVideoStreamStateFailed: return @"Failed";
Sezam/NSString+AGVideoStream.m:32:        case AGWebRTCErrorUnknown: return @"Unknown";
Sezam/NSString+AGVideoStream.m:33:        case AGWebRTCErrorBadSessionID:return @"Bad Session ID";
Sezam/NSString+AGVideoStream.m:34:        case AGWebRTCErrorBusy:return @"Peer Busy";
Sezam/NSString+AGVideoStream.m:35:        case AGWebRTCErrorSDPFail:return @"SDP Failure";
Sezam/NSString+AGVideoStream.m:36:        case AGWebRTCErrorICEFail:return @"ICE Failure";
Sezam/NSString+AGVideoStream.m:37:        case AGWebRTCErrorSlow:return @"Slow Connection";
Sezam/NSString+AGVideoStream.m:38:        case AGWebRTCErrorSessionTimeout:return @"Session Timeout";
Sezam/AGAppDelegate.m:93:    if ([url.scheme containsString:@"augusthome"] || [url.scheme containsString:@"AugustHome"])
Sezam/AGAppDelegate.m:97:        if ([url.host containsString:@"oauth"]) {
Sezam/AGAppDelegate.m:100:            NSString *command = [url.path stringByReplacingOccurrencesOfString:@"/" withString:@""];
Sezam/AGAppDelegate.m:102:            NSString *lockId = [AGUtility valueForKey:@"lockid" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:103:            NSString *houseId = [AGUtility valueForKey:@"houseid" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:104:            NSString *verifyString = [AGUtility valueForKey:@"v" fromURLQueryItems:queryItems];
Sezam/AGAppDelegate.m:118:    if ([url.scheme isEqualToString: @"sezam"] )
Sezam/AGAppDelegate.m:133:        if ([oauthResult containsString:@"success"]) {
Sezam/AGAppDelegate.m:136:        if ([oauthResult containsString:@"failed"]) {
Sezam/AGAppDelegate.m:142:        if ([oauthResult containsString:@"success"]) {
Sezam/AGAppDelegate.m:145:        if ([oauthResult containsString:@"failed"]) {
Sezam/AGAppDelegate.m:209:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:210:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:256:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:257:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:281:    NSString *noSpeedTestString = [NSString stringWithFormat:@"NoSpeedTestAlert_%@", doorbell.objectId];
Sezam/AGAppDelegate.m:291:    suggestSpeedTestAlertController = [UIAlertController alertControllerWithTitle:@"Hmm, this is taking a while!"
Sezam/AGAppDelegate.m:292:                                                                          message:@"It looks like you may be experiencing connection speed issues. We recommend running a speed test on your Doorbell Cam."
Sezam/AGAppDelegate.m:294:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Run a Doorbell Speed Test"
Sezam/AGAppDelegate.m:300:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Don't Show Again"
Sezam/AGAppDelegate.m:303:                                                                          NSString *noSpeedTestString = [NSString stringWithFormat:@"NoSpeedTestAlert_%@", doorbell.objectId];
Sezam/AGAppDelegate.m:308:    [suggestSpeedTestAlertController addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGAppDelegate.m:350:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAppDelegate.m:351:    AGDoorbellVideoSpeedTestViewController *doorbellVideoSpeedTestViewController = [doorbellStoryboard instantiateViewControllerWithIdentifier:@"DoorbellVideoSpeedTest"];
Sezam/AGAppDelegate.m:372:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:373:            AGHouseTabBarViewController *houseTabBar =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:391:        UIViewController *vc = [rootViewController.storyboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGAppDelegate.m:400:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAppDelegate.m:402:            AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGAppDelegate.m:405:            UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:406:            [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGAppDelegate.m:425:    NSAssert(lockID, @"Cannot doLaunchLockOperation with lockID = nil");
Sezam/AGAppDelegate.m:456:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGAppDelegate.m:457:        AGHouseTabBarViewController* tabBarController =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAppDelegate.m:493:	return [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGAppDelegate.m:532:    if(![[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] allKeys] containsObject:@"PairingEnabled"]){
Sezam/AGAppDelegate.m:534:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"PairingEnabled"];
Sezam/AGAppDelegate.m:544:    [[NSFileManager defaultManager] removeItemAtPath:[NSString stringWithFormat:@"%@/%@", libraryDirectory, @"Caches/p2p"] error:nil];
Sezam/AGAppDelegate.m:545:    [[NSFileManager defaultManager] removeItemAtPath:[NSString stringWithFormat:@"%@/%@", libraryDirectory, @"Caches/ivfolder"] error:nil];
Sezam/AGAppDelegate.m:578:                                                                diskPath:@"nscache"];
Sezam/AGAppDelegate.m:590:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGAppDelegate.m:592:        [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:@"AppInstallDate"];
Sezam/AGAppDelegate.m:596:    NSString* nuiPath = [[NSBundle mainBundle] pathForResource:@"August" ofType:@"nss"];
Sezam/AGAppDelegate.m:655:    if([args containsObject:@"--noAnimations"]){
Sezam/AGAppDelegate.m:661:    if([args containsObject:@"--clean"]){
Sezam/AGAppDelegate.m:665:        if([SAMKeychain passwordForService:kSezam account:@"AugustInstallToken"]) {
Sezam/AGAppDelegate.m:667:            NSAssert([SAMKeychain deletePasswordForService:kSezam account:@"AugustInstallToken"],
Sezam/AGAppDelegate.m:668:                    @"For testing, we should be able to delete this.");
Sezam/AGAppDelegate.m:673:    if ([args containsObject:@"--logout"]){
Sezam/AGAppDelegate.m:696:        NSString *lastUsedLock = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLock"];
Sezam/AGAppDelegate.m:697:        NSString *lastUsedLockName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockName"];
Sezam/AGAppDelegate.m:698:        NSString *lastUsedLockHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockHouse"];
Sezam/AGAppDelegate.m:699:        NSString *lastUsedLockHouseName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLockHouseName"];
Sezam/AGAppDelegate.m:705:            UIApplicationShortcutIcon *lockShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"activity_locked_v2"];
Sezam/AGAppDelegate.m:706:            lockInfo = @{@"lockId":lastUsedLock,@"lockName":lastUsedLockName, @"houseId":lastUsedLockHouse};
Sezam/AGAppDelegate.m:707:            lockShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"lock" localizedTitle:lastUsedLockName localizedSubtitle:lastUsedLockHouseName icon:lockShortcutIcon userInfo:lockInfo];
Sezam/AGAppDelegate.m:708:            UIApplicationShortcutIcon *unLockShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"activity_unlocked_v2"];
Sezam/AGAppDelegate.m:709:            unLockShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"unlock" localizedTitle:lastUsedLockName localizedSubtitle:lastUsedLockHouseName icon:unLockShortcutIcon userInfo:lockInfo];
Sezam/AGAppDelegate.m:712:        NSString *lastUsedDoorbell = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbell"];
Sezam/AGAppDelegate.m:713:        NSString *lastUsedDoorbellName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellName"];
Sezam/AGAppDelegate.m:714:        NSString *lastUsedDoorbellHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellHouse"];
Sezam/AGAppDelegate.m:715:        NSString *lastUsedDoorbellHouseName = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedDoorbellHouseName"];
Sezam/AGAppDelegate.m:719:            doorbellInfo = @{@"doorbellID":lastUsedDoorbell,@"doorbellName":lastUsedDoorbellName, @"houseId":lastUsedDoorbellHouse};
Sezam/AGAppDelegate.m:720:            UIApplicationShortcutIcon *doorbellShortcutIcon = [UIApplicationShortcutIcon iconWithTemplateImageName:@"camera_unselected_v2"];
Sezam/AGAppDelegate.m:721:            doorbellShortCut = [[UIMutableApplicationShortcutItem alloc] initWithType:@"doorbell" localizedTitle:lastUsedDoorbellName localizedSubtitle:lastUsedDoorbellHouseName icon:doorbellShortcutIcon userInfo:doorbellInfo];
Sezam/AGAppDelegate.m:742:    NSString *lastUsedLock = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedLock"];
Sezam/AGAppDelegate.m:743:    NSString *lastUsedHouse = (NSString *)[[NSUserDefaults standardUserDefaults] objectForKey:@"LastUsedHouse"];
Sezam/AGAppDelegate.m:745:    if (((![lastUsedHouse isEqualToString:@""]) && (!(lastUsedHouse == nil)) && (![lastUsedHouse isEqual:([NSNull null])]))) {
Sezam/AGAppDelegate.m:756:    if ([shortcutType isEqualToString:@"lock"] || [shortcutType isEqualToString:@"unlock"]) {
Sezam/AGAppDelegate.m:757:        NSString *lockId = userInfo[@"lockId"];
Sezam/AGAppDelegate.m:758:        NSString *houseId = userInfo[@"houseId"];
Sezam/AGAppDelegate.m:760:            if ([shortcutType isEqualToString:@"lock"]) {
Sezam/AGAppDelegate.m:763:            if ([shortcutType isEqualToString:@"unlock"]) {
Sezam/AGAppDelegate.m:768:    if ([shortcutType isEqualToString:@"doorbell"]) {
Sezam/AGAppDelegate.m:769:        NSString *doorbellID = userInfo[@"doorbellID"];
Sezam/AGAppDelegate.m:791:                logMessage = [NSString stringWithFormat:@"[%@.%@] %@", category, event, message];
Sezam/AGAppDelegate.m:793:                logMessage = [NSString stringWithFormat:@"[%@] %@", category, message];
Sezam/AGAppDelegate.m:819:            if ((([category isEqualToString:@"Bluetooth"]) || ([category isEqualToString:@"ApiClient"])) &&
Sezam/AGAppDelegate.m:824:            if (([category isEqualToString:@"ApiClient"]) && ([event isEqualToString:@"NetworkErrorResponse"]))
Sezam/AGAppDelegate.m:827:            if ([event isEqualToString:@"NetworkError"])
Sezam/AGAppDelegate.m:837:                        CLSLog(@"%@ [%@.%@] %@", levelString, category, event, message);
Sezam/AGAppDelegate.m:839:                        CLSLog(@"%@ [%@] %@", levelString, category, message);
Sezam/AGAppDelegate.m:861:            data[@"message"] = message;
Sezam/AGAppDelegate.m:865:            data[@"tests"] = [experimentalFeatureTags allObjects];
Sezam/AGAppDelegate.m:873:            modifiedData[@"tests"] = [experimentalFeatureTags allObjects];
Sezam/AGAppDelegate.m:884:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildGitCommit] forKey:@"AGAugustAppBuildGitCommit"];
Sezam/AGAppDelegate.m:885:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildUser] forKey:@"AGAugustAppBuildUser"];
Sezam/AGAppDelegate.m:886:    [[Crashlytics sharedInstance] setObjectValue:[NSString stringWithUTF8String:AGAugustAppBuildDate] forKey:@"AGAugustAppBuildDate"];
Sezam/AGAppDelegate.m:888:    [Mixpanel sharedInstanceWithToken:@"753a897c4af15f742965c3d584dc5bc7"];
Sezam/AGAppDelegate.m:932:        BOOL userShownNotificationsOffAlert = [[NSUserDefaults standardUserDefaults] boolForKey:@"UserShownNotificationsOffAlert"];
Sezam/AGAppDelegate.m:935:            UIAlertController *notificationsOffAlert = [UIAlertController alertControllerWithTitle:@"Warning: Notifications Off" message:@"Because you have notifications turned off for August you will not receive intended alerts and some features will not function properly." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:936:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAppDelegate.m:938:            UIAlertAction *goToSettingsAction = [UIAlertAction actionWithTitle:@"Turn Notifications On" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:942:            UIAlertAction *doNotShowAgainAction = [UIAlertAction actionWithTitle:@"Don't Show Again" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:943:                [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"UserShownNotificationsOffAlert"];
Sezam/AGAppDelegate.m:1002:    [AGUtility logEventToFabric:@"App Launched" attributes:@{}];
Sezam/AGAppDelegate.m:1016:        if ([message isEqualToString:@"upgrade"]) {
Sezam/AGAppDelegate.m:1017:            UIAlertController *upgradeAlert = [UIAlertController alertControllerWithTitle:@"Upgrade August"
Sezam/AGAppDelegate.m:1018:                                                                                             message:@"Please upgrade August to the latest version to continue using it."
Sezam/AGAppDelegate.m:1020:            [upgradeAlert addAction:[UIAlertAction actionWithTitle:@"Upgrade"
Sezam/AGAppDelegate.m:1023:                                                               [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms-apps://itunes.apple.com/app/id648730592"]];
Sezam/AGAppDelegate.m:1066:            if ([[dict objectForKey:@"approved"] boolValue] == NO) {
Sezam/AGAppDelegate.m:1069:                    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGAppDelegate.m:1070:                    AGLicenseAgreeViewController* licenseAgreeVC = (AGLicenseAgreeViewController*)[storyboard instantiateViewControllerWithIdentifier:@"LicenseAgree"];
Sezam/AGAppDelegate.m:1093:            if(credentials[@"turn"]){
Sezam/AGAppDelegate.m:1094:                NSString * username = credentials[@"turn"][@"user"];
Sezam/AGAppDelegate.m:1095:                NSString * password = credentials[@"turn"][@"password"];
Sezam/AGAppDelegate.m:1098:                [SAMKeychain setPassword:password forService:@"turn" account:username];
Sezam/AGAppDelegate.m:1107:    NSDictionary *appFeatures = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"appfeatures"];
Sezam/AGAppDelegate.m:1120:        [[NSUserDefaults standardUserDefaults] setObject:workingDict forKey:@"appfeatures"];
Sezam/AGAppDelegate.m:1142:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"] == NO) {    // Ignore the beta server check if user is in DebugMode
Sezam/AGAppDelegate.m:1144:        BOOL betaStagingAppFeature = [AGUtility checkForAppFeature:@"beta-staging"];
Sezam/AGAppDelegate.m:1145:        NSString *baseURL = [[NSUserDefaults standardUserDefaults] objectForKey:@"APIBaseURL"];
Sezam/AGAppDelegate.m:1147:            baseURL = @"https://api-production.august.com";
Sezam/AGAppDelegate.m:1150:        NSString *apiproductionURL = @"https://api-production.august.com";
Sezam/AGAppDelegate.m:1151:        NSString *productionURL = @"https://production.august.com";
Sezam/AGAppDelegate.m:1152:        NSString *stagingURL = @"https://staging.august.com";
Sezam/AGAppDelegate.m:1175:        NSString *message = [NSString stringWithFormat:@"Switching Server to %@. Application will automatically close.", baseURL];
Sezam/AGAppDelegate.m:1176:        UIAlertController *changingServersAlertController = [UIAlertController alertControllerWithTitle:@"Changing Server" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAppDelegate.m:1177:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppDelegate.m:1267:        BOOL didDisplayWhatsNew = [[NSUserDefaults standardUserDefaults] boolForKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAppDelegate.m:1269:            UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGAppDelegate.m:1270:            AGWhatsNewViewController *whatsNewViewController =  (AGWhatsNewViewController *)[augustStoryboard instantiateViewControllerWithIdentifier: @"WhatsNew"];
Sezam/AGAppDelegate.m:1276:            [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAppDelegate.m:1298:    if ([AGFeatureManager enabled:@"ABTestingControl1"]) {
Sezam/AGAppDelegate.m:1299:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1302:    if ([AGFeatureManager enabled:@"ABTestingControl2"]) {
Sezam/AGAppDelegate.m:1303:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1306:    if ([AGFeatureManager enabled:@"ABTestingControl3"]) {
Sezam/AGAppDelegate.m:1307:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1310:    if ([AGFeatureManager enabled:@"ABTestingControl4"]) {
Sezam/AGAppDelegate.m:1311:        AGAnalyticsDiaryInfo(@"ABTestingControl", @"");
Sezam/AGAppDelegate.m:1358:    NSString *emptyStr = @"";
Sezam/AGAppDelegate.m:1369:    return [NSString stringWithFormat:@"%@/Library/Saved Application State/%@.savedState/data.data", NSHomeDirectory(), [[NSBundle mainBundle] bundleIdentifier]];
Sezam/AGAppDelegate.m:1374:    [defaults setObject:[NSNumber numberWithBool:isExpectingToAppRestorationFileToExist] forKey:@"AGAppIsExpectingAppRestorationFileToExist"];
Sezam/AGAppDelegate.m:1381:    return ((NSNumber *)[defaults objectForKey:@"AGAppIsExpectingAppRestorationFileToExist"]).boolValue;
Sezam/AGAppDelegate.m:1385:    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"AGAppForceQuitDetector"];
Sezam/AGAppDelegate.m:1393:    if ([AGFeatureManager enabled:@"BackgroundTerminationSimulation"]){
Sezam/AGAppDelegate.m:1400:    NSURL *crossProcessContainerURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:@"group.com.august.general-cross-process"];
Sezam/AGAppDelegate.m:1402:    NSURL *deviceLockDetectionFileURL = [crossProcessContainerURL URLByAppendingPathComponent:@"DeviceLockDetectionFile.empty"];
Sezam/AGAppDelegate.m:1405:                                            contents:[@"" dataUsingEncoding:NSUTF8StringEncoding]
Sezam/AGAppDelegate.m:1419:    NSString *crashString = [NSString stringWithFormat:@"report.id:%@| report.dateCreated:%@|  report.isCrash:%i", report.identifier, report.dateCreated, report.isCrash];
Sezam/AGInviteSuccessViewController.m:37:    [[self nameLabel] setText: [NSString stringWithFormat: @"%@ %@",[[self user] firstName],[[self user] lastName]]];
Sezam/AGInviteSuccessViewController.m:46:    [[self phoneLabel] setText: @""];
Sezam/AGInviteSuccessViewController.m:47:    [[self statusLabel] setText: [NSString stringWithFormat: @"%@",[self userStatus]]];
Sezam/AGInviteSuccessViewController.m:51:    if ([[[self timeFrameLabel] text] isEqual:@"Recurring"]) {
Sezam/AGInviteSuccessViewController.m:52:        [formatter setDateFormat:@"h:mm a"];
Sezam/AGInviteSuccessViewController.m:54:        [formatter setDateFormat:@"M/d/yy h:mm a"];
Sezam/AGInviteSuccessViewController.m:60:    if ([[[self timeFrameLabel] text] isEqual:@"Recurring"]) {
Sezam/AGInviteSuccessViewController.m:70:    }else if ([[[self timeFrameLabel] text] isEqual:@"Temporary"]){
Sezam/AGInviteSuccessViewController.m:88:    if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteSuccessViewController.m:90:        formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteSuccessViewController.m:117:    AGCollectionViewCell *cell = (AGCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:@"DAY_CELL" forIndexPath:indexPath];
Sezam/AGAlertController.m:21:    self = [self initWithNibName:@"AGAlertController" bundle:[NSBundle mainBundle]];
Sezam/AGKeypadOTAViewController.m:57:            self.keypadOTAManager  = [AGKeypadOTAManager sharedInstanceWithLock:self.lock dataForOTA:[dict objectForKey:@"data"]  otaVersion:futureFirmwareVersion];
Sezam/AGKeypadOTAViewController.m:108:    return @"";
Sezam/AGKeypadOTAViewController.m:141:            AGKeypadOTAFailedViewController *vc = (AGKeypadOTAFailedViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadOTAFailed"];
Sezam/AGAutoUnlockSetupArrivingController.m:42:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupArrivingController.m:46:    NSString *title = @"Arriving Home";
Sezam/AGAutoUnlockSetupArrivingController.m:47:    NSString *paragraph1 = @"When you arrive home, Auto-Unlock will unlock your door once your phone is within a few feet of your lock.";
Sezam/AGAutoUnlockSetupArrivingController.m:48:    NSString *paragraph2Part1 = @"Auto-Unlock will then switch back to";
Sezam/AGAutoUnlockSetupArrivingController.m:49:    NSString *paragraph2BoldPart1 = @" Home ";
Sezam/AGAutoUnlockSetupArrivingController.m:50:    NSString *paragraph2Part2 = @"mode until you leave your neighborhood again.";
Sezam/AGAutoUnlockSetupArrivingController.m:53:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@\n\n%@%@%@", title, paragraph1, paragraph2Part1, paragraph2BoldPart1, paragraph2Part2];
Sezam/AGAutoUnlockSetupArrivingController.m:62:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupArrivingController.m:78:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupArrivingController.m:85:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupArrivingController.m:94:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:70:	self.title = _isOpen?@"Unlocked":@"LOCKED";
Sezam/SZLockViewController.m.orig:190://	self.lockSwitch.onText = @"Open";
Sezam/SZLockViewController.m.orig:191://	self.lockSwitch.offText = @"Locked";
Sezam/SZLockViewController.m.orig:293: [self outputToScreen:@"_________________________________________"];
Sezam/SZLockViewController.m.orig:311:	//            [self.buttonChangeMode setTitle:[NSString stringWithFormat:@"Data"] forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:314:	//            [self.buttonChangeMode setTitle:[NSString stringWithFormat:@"Command"] forState:UIControlStateNormal];
Sezam/SZLockViewController.m.orig:330:			modeString = @"BrspModeIdle";
Sezam/SZLockViewController.m.orig:334:			modeString = @"BrspModeData";
Sezam/SZLockViewController.m.orig:337:			modeString = @"BrspModeRemoteCommand";
Sezam/SZLockViewController.m.orig:341:			modeString = @"BrspModeFirmwareUpdate";
Sezam/SZLockViewController.m.orig:358://    if ([[segue identifier] isEqualToString:@"commandsListSegue"]) {
Sezam/SZLockViewController.m.orig:396:	NSString * key = @"12345678";
Sezam/AGLogBookViewController.m:204:                                                                                                                     forKey:[NSString stringWithFormat:@"%@-%@-%@", entryDateString, lockLogEntry.deviceID, [AGLockLogEntry stringForAction:lockLogEntry.action]]];
Sezam/AGLogBookViewController.m:221:                                                           DLog(@"locks error: %@", error.localizedDescription);
Sezam/AGLogBookViewController.m:321:    NSString *lockEntryKeyString = [NSString stringWithFormat:@"%@-%@-%@", [[self storyDateFormatter] stringFromDate:lockLogEntry.date], lockLogEntry.deviceID,
Sezam/AGLogBookViewController.m:361:    heightForRow += [self contentLabelHeight:[NSString stringWithFormat:@"%@", [logEntry.user displayName].capitalizedString] font:[UIFont fontWithName:@"ProximaNova-Light" size:17] textViewSize:textViewSize]+32;
Sezam/AGLogBookViewController.m:466:    cell.userNameLabel.text = [NSString stringWithFormat:@"%@", [logEntry.user displayName].capitalizedString];
Sezam/AGLogBookViewController.m:494:                cell.activityNameLabel.text = [NSString stringWithFormat:@"One-Touch Lock at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:497:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked remotely", logEntry.deviceName];
Sezam/AGLogBookViewController.m:502:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with HomeKit", logEntry.deviceName];
Sezam/AGLogBookViewController.m:506:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with Z-Wave", logEntry.deviceName];
Sezam/AGLogBookViewController.m:510:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked manually", logEntry.deviceName];
Sezam/AGLogBookViewController.m:514:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ Auto-Locked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:518:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked with entry code", logEntry.deviceName];
Sezam/AGLogBookViewController.m:522:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ locked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:528:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ opened", logEntry.deviceName];
Sezam/AGLogBookViewController.m:532:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ closed", logEntry.deviceName];
Sezam/AGLogBookViewController.m:535:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Nest detected motion at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:539:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ declined", logEntry.deviceName];
Sezam/AGLogBookViewController.m:543:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ answered", logEntry.deviceName];
Sezam/AGLogBookViewController.m:547:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ live stream viewed", logEntry.deviceName];
Sezam/AGLogBookViewController.m:551:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Missed visitor at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:555:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Motion detected at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:561:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with entry code", logEntry.deviceName];
Sezam/AGLogBookViewController.m:566:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked remotely", logEntry.deviceName];
Sezam/AGLogBookViewController.m:571:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with HomeKit", logEntry.deviceName];
Sezam/AGLogBookViewController.m:575:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked with Z-Wave", logEntry.deviceName];
Sezam/AGLogBookViewController.m:579:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked manually", logEntry.deviceName];
Sezam/AGLogBookViewController.m:583:                cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ unlocked", logEntry.deviceName];
Sezam/AGLogBookViewController.m:591:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ given access to %@", logEntry.otherUser.displayName, logEntry.deviceName];
Sezam/AGLogBookViewController.m:598:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ removed from %@", logEntry.otherUser.displayName, logEntry.deviceName];
Sezam/AGLogBookViewController.m:603:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Invalid entry code used at %@", logEntry.deviceName];
Sezam/AGLogBookViewController.m:608:            cell.activityNameLabel.text = [NSString stringWithFormat:@"%@ entry code created for %@", logEntry.deviceName, logEntry.otherUser.displayName];
Sezam/AGLogBookViewController.m:618:            cell.activityNameLabel.text = [NSString stringWithFormat:@"Access changed for %@", logEntry.otherUser.displayName];
Sezam/AGLogBookViewController.m:643:    [_storyDateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
Sezam/AGLogBookViewController.m:644:    [_storyDateFormatter setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
Sezam/AGLogBookViewController.m:653:        NSString *cellID = @"LOADING_CELL";
Sezam/AGLogBookViewController.m:666:        NSString *cellID = @"ACTIVITY_FEED_CELL";
Sezam/AGLogBookViewController.m:812:        [self performSegueWithIdentifier:@"logBookToMotionActivity" sender:logEntry];
Sezam/AGLogBookViewController.m:814:        [self performSegueWithIdentifier:@"logBookToDoorbellActivity" sender:logEntry];
Sezam/AGLogBookViewController.m:842:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGLogBookViewController.m:887:    if ([segue.identifier isEqualToString:@"logBookToMotionActivity"]) {
Sezam/AGLogBookViewController.m:892:    if ([segue.identifier isEqualToString:@"logBookToDoorbellActivity"]) {
Sezam/AGUnitySettingManager.m:54:            completedBlock(NO, @"lock not connected!");
Sezam/AGUnitySettingManager.m:69:        int errorCode = [(NSNumber *)responseDict[@"error_code"] intValue];
Sezam/AGUnitySettingManager.m:83:    operation.label = @"Unity set settings ";
Sezam/AGUnitySettingManager.m:114:        self.completedBlock(NO, @"onConnectionError");
Sezam/AGUnitySettingManager.m:158:    operation.label = @"Unity_get_settings";
Sezam/AGUnitySettingManager.m:167:            completedBlock(NO, @"not connect, blocked the request!");
Sezam/AGUnitySettingManager.m:203:                completedBlock(NO, @"get settings failed!");
Sezam/AGUnitySettingManager.m:208:        NSArray *responseArray1 = responseDict1[@"response"];
Sezam/AGUnitySettingManager.m:209:        NSArray *responseArray2 = responseDict2[@"response"];
Sezam/AGUnitySettingManager.m:214:            NSNumber *errorCode = dict[@"error_code"];
Sezam/AGUnitySettingManager.m:217:                NSString *errorString = [NSString stringWithFormat:@"key: %@ parse error, errorcode: %@", key, errorCode];
Sezam/AGUnitySettingManager.m:232:        model.showIndicatorLight = [resultDic[@"UNITY_PARAM_INSIDE_LED"] integerValue] == 0xFF ? YES : NO;
Sezam/AGUnitySettingManager.m:233:        model.allowOneTouchLocking = [resultDic[@"UNITY_PARAM_ONE_TOUCH_LOCKING"] integerValue] == 0xFF ? YES : NO;;
Sezam/AGUnitySettingManager.m:234:        model.languageType = [resultDic[@"UNITY_PARAM_LANGUAGE"] integerValue];
Sezam/AGUnitySettingManager.m:235:        model.soundVolumeType = [resultDic[@"UNITY_PARAM_AUDIO_VOLUME"] integerValue];
Sezam/AGUnitySettingManager.m:236:        model.operatingModeType = [resultDic[@"UNITY_PARAM_OPERATING_MODE"] integerValue];
Sezam/AGUnitySettingManager.m:237:        model.shutDownTime = [resultDic[@"UNITY_PARAM_SHUTDOWN_TIME"] integerValue];
Sezam/AGUnitySettingManager.m:238:        model.wrongCodeLimit = [resultDic[@"UNITY_PARAM_WRONG_CODE_LIMIT"] integerValue];
Sezam/en.lproj/Localizable.strings:181:"error: %@" = "error: %@";
Sezam/en.lproj/Localizable.strings:206:"App Version %@" = "App Version %@";
Sezam/en.lproj/Localizable.strings:213:"%@ TO %@" = "%@ TO %@";
Sezam/en.lproj/Localizable.strings:269:"Firmware %@" = "Firmware %@";
Sezam/en.lproj/Localizable.strings:278:"%@ added %@" = "%@ added %@";
Sezam/en.lproj/Localizable.strings:279:"%@ removed %@" = "%@ removed %@";
Sezam/AGAutoUnlockLocationPermissionListener.m:69:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Location Needed" message:@"For Auto-Unlock to function, please set location permissions for the August app to “Always” in your Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockLocationPermissionListener.m:71:    [alertController addAction:[UIAlertAction actionWithTitle:@"Open Settings" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockLocationPermissionListener.m:75:    [alertController addAction:[UIAlertAction actionWithTitle:@"Disable Auto-Unlock" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockSetupConfirmLocationController.m:64:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:67:    NSString *title = @"Confirm Location";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:68:    NSString *paragraph1 = @"Drag the map to position the house icon on your home.";
Sezam/AGAutoUnlockSetupConfirmLocationController.m:70:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:78:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupConfirmLocationController.m:93:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupConfirmLocationController.m:102:    [self.view.actionButton setTitle:@"CONFIRM LOCATION" forState:UIControlStateNormal];
Sezam/AGUserAccessViewController.m:62:    if ((![[[self user]  firstName] isEqualToString:@""] && [[self user]  firstName])||(![[[self user]  lastName] isEqualToString:@""] && [[self user]  lastName])) {
Sezam/AGUserAccessViewController.m:79:        if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGUserAccessViewController.m:81:            formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGUserAccessViewController.m:138:            if (![user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGUserAccessViewController.m:202:        AGTableViewCell *profileCell =[tableView dequeueReusableCellWithIdentifier:@"ProfileCell1"];
Sezam/AGUserAccessViewController.m:215:            if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGUserAccessViewController.m:217:                formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGUserAccessViewController.m:231:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessType"];
Sezam/AGUserAccessViewController.m:239:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleAlways"];
Sezam/AGUserAccessViewController.m:247:            AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleRecurring"];
Sezam/AGUserAccessViewController.m:259:            AGTemporaryAccessTableViewCell *tempCell = (AGTemporaryAccessTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleTemporary"];
Sezam/AGUserAccessViewController.m:269:        AGTableViewCell *pinCell =  [tableView dequeueReusableCellWithIdentifier:@"MyAccessPIN"];
Sezam/AGUserAccessViewController.m:337:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGUserAccessViewController.m:378:                    UIAlertController *errorAlertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error removing yourself." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGUserAccessViewController.m:379:                    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGHouseTabBarViewController.m:50:    if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGHouseTabBarViewController.m:124:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHouseTabBarViewController.m:125:    UIViewController *keychain = [lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGHouseTabBarViewController.m:145:    if ([segue.identifier isEqualToString:@"EmbedTabBarController"]) {
Sezam/AGHouseTabBarViewController.m:173:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound)  || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGHouseTabBarViewController.m:213:                self.isSuperUser = [lock.type isEqualToString:@"superuser"];
Sezam/AGHouseTabBarViewController.m:234:    UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGHouseTabBarViewController.m:236:    self.myPermissionsViewController = (AGUserAccessViewController*)[guestListStoryboard instantiateViewControllerWithIdentifier:@"MyAccessViewController"];
Sezam/AGHouseTabBarViewController.m:246:    self.myPermissionsViewController.tabBarItem.accessibilityLabel = @"My Permissions";
Sezam/AGHouseTabBarViewController.m:257:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHouseTabBarViewController.m:258:    self.houseSettingsTabViewController = (AGHouseSettingsTabViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"HouseSettingsTabViewController"];
Sezam/AGHouseTabBarViewController.m:260:    if ([self.house.houseType isEqualToString:@"superuser"]) {
Sezam/AGHouseTabBarViewController.m:268:    self.houseSettingsTabViewController.tabBarItem.accessibilityLabel = @"Settings";
Sezam/AGHouseTabBarViewController.m:274:    UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGHouseTabBarViewController.m:275:    self.guestListViewController = (AGGuestListViewController*)[guestListStoryboard instantiateViewControllerWithIdentifier:@"GuestList"];
Sezam/AGHouseTabBarViewController.m:284:    self.guestListViewController.tabBarItem.accessibilityLabel = @"Guest List";
Sezam/AGHouseTabBarViewController.m:290:    UIStoryboard *activityLogGuestbookStoryboard = [UIStoryboard storyboardWithName:@"ActivityLogGuestbook" bundle:nil];
Sezam/AGHouseTabBarViewController.m:292:    self.activityLogViewController = (AGLogBookViewController*)[activityLogGuestbookStoryboard instantiateViewControllerWithIdentifier:@"LogBook"];
Sezam/AGHouseTabBarViewController.m:300:    self.activityLogViewController.tabBarItem.accessibilityLabel = @"Activity Log";
Sezam/AGHouseTabBarViewController.m:306:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGHouseTabBarViewController.m:307:    self.doorbellViewController = (AGDoorbellViewController *)[storyboard instantiateViewControllerWithIdentifier:@"DoorbellHouseTabViewController"];
Sezam/AGHouseTabBarViewController.m:310:    self.doorbellViewController.title = @"";
Sezam/AGHouseTabBarViewController.m:317:    self.doorbellViewController.tabBarItem.accessibilityLabel = @"Doorbell";
Sezam/AGHouseTabBarViewController.m:324:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGHouseTabBarViewController.m:325:    self.lockPaginationViewController = (AGLockPaginationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockPaginationViewController"];
Sezam/AGHouseTabBarViewController.m:328:    self.lockPaginationViewController.title = @"";
Sezam/AGHouseTabBarViewController.m:337:    self.lockPaginationViewController.tabBarItem.accessibilityLabel = @"Your Locks";
Sezam/AGHouseTabBarViewController.m:364:    if ([self.house.houseType isEqualToString:@"superuser"] || [self.house.highestDeviceType isEqualToString:@"superuser"]) {
Sezam/AGHouseTabBarViewController.m:410:    NSDictionary *superUserInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"SuperUserForHouse"];
Sezam/AGHouseTabBarViewController.m:422:    NSMutableDictionary *superUserInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"SuperUserForHouse"];
Sezam/AGHouseTabBarViewController.m:431:    [[NSUserDefaults standardUserDefaults] setObject:superUserInfo forKey:@"SuperUserForHouse"];
Sezam/AJNotificationView.m:41:        _titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:20.0];
Sezam/AJNotificationView.m:82:    if ([[[UIDevice currentDevice] systemVersion] compare:@"7.0" options:NSNumericSearch] == NSOrderedAscending) {
Sezam/AGPickLockTypeViewController.m:70:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"LockTypeCell"];
Sezam/AGPickLockTypeViewController.m:75:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGPickLockTypeViewController.m:76:        cell.label3.text = @"3RD GENERATION";
Sezam/AGPickLockTypeViewController.m:81:        cell.label2.text = @"AUGUST SMART LOCK PRO";
Sezam/AGPickLockTypeViewController.m:82:        cell.label3.text = @"3RD GENERATION";
Sezam/AGPickLockTypeViewController.m:87:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGPickLockTypeViewController.m:88:        cell.label3.text = @"1ST OR 2ND GENERATION";
Sezam/AGPickLockTypeViewController.m:100:        [self performSegueWithIdentifier:@"pickLockTypeToTwoStepEuropaSetup" sender:nil];
Sezam/AGPickLockTypeViewController.m:103:        [self performSegueWithIdentifier:@"pickLockTypeToTwoStepEuropaSetup" sender:nil];
Sezam/AGPickLockTypeViewController.m:113:    UINavigationController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGPickLockTypeViewController.m:131:    if ([segue.identifier isEqualToString:@"pickLockTypeToTwoStepEuropaSetup"]) {
Sezam/AGListPickerView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGListPickerView.m:113:    NSString *reuseID = @"AGListPickerViewCellID";
Sezam/AGListPickerView.m:117:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGGeoRegionEntranceDetector.m:120:    return [NSString stringWithFormat:@"AGGeoRegionEntranceDetector-%@", self.region.identifier];
Sezam/AGKeypadCentralProtocol.m:199:        uint32_t  paramID = (uint32_t)[(NSNumber *)[paramInfo objectForKey:@"index"] integerValue];
Sezam/AGKeypadCentralProtocol.m:200:        uint32_t paramValue = (uint32_t)[(NSNumber *)[paramInfo objectForKey:@"value"] integerValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:76:    NSString *initialString = @"This test will analyze how well video is likely to stream from your Doorbell Cam. \n\n Results shown are for Doorbell Cam only, and may not reflect overall network performance.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:82:    UIAlertController *noConnectAlert = [UIAlertController alertControllerWithTitle:@"Unable to Connect to Doorbell"
Sezam/AGDoorbellVideoSpeedTestViewController.m:83:                                                                            message:@"Make sure your Doorbell Cam is installed correctly and is powered on."
Sezam/AGDoorbellVideoSpeedTestViewController.m:131:    NSString *downloadString = @"The test can take a few minutes, depending on the speed of your connection.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:133:    self.testingStatusLabel.text = @"TESTING DOWNLOAD SPEED...";
Sezam/AGDoorbellVideoSpeedTestViewController.m:142:    NSDictionary *downloadTestCommand = @{@"status":@"speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellVideoSpeedTestViewController.m:149:    NSString *uploadString = @"The test can take a few minutes, depending on the speed of your connection.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:151:    self.testingStatusLabel.text = @"TESTING UPLOAD SPEED...";
Sezam/AGDoorbellVideoSpeedTestViewController.m:154:    NSDictionary *uploadTestCommand = @{@"status":@"upload_speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellVideoSpeedTestViewController.m:161:    NSString *errorString = @"Test failed, please try again.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:163:    self.testingStatusLabel.text = @"TEST ERROR";
Sezam/AGDoorbellVideoSpeedTestViewController.m:174:    UIAlertController *longTestAlert = [UIAlertController alertControllerWithTitle:@"Test is Taking Longer Than Usual"
Sezam/AGDoorbellVideoSpeedTestViewController.m:175:                                                                            message:@"This could indicate a poor connection, or a momentary issue. Would you like to stop the test, or continue waiting?"
Sezam/AGDoorbellVideoSpeedTestViewController.m:177:    [longTestAlert addAction:[UIAlertAction actionWithTitle:@"Stop Test"
Sezam/AGDoorbellVideoSpeedTestViewController.m:203:    NSString *testSucceededInfoString = @"Your connection speed should be sufficient for streaming Doorbell Cam video.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:204:    NSString *testFailedInfoString = @"A connection speed of 1 Mbps is required to provide enough bandwidth for Doorbell Cam video.\n\nYou are likely to experience performance issues when streaming video.";
Sezam/AGDoorbellVideoSpeedTestViewController.m:206:    NSString *testSucceededStatusString = @"GOOD CONNECTION SPEED";
Sezam/AGDoorbellVideoSpeedTestViewController.m:207:    NSString *testFailedStatusString = @"LOW CONNECTION SPEED";
Sezam/AGDoorbellVideoSpeedTestViewController.m:251:        if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_progress"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:252:            float downloadTotal = [[messageData objectForKey:@"download_total"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:253:            float downloadNow = [[messageData objectForKey:@"download_now"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:260:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_completed"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:261:            self.downloadActualSpeedLabel.text = [NSString stringWithFormat:@"%.2f Mbps", [[messageData objectForKey:@"speed_mbps"] floatValue]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:263:            self.goodDownload = [[messageData objectForKey:@"speed_mbps"] floatValue] < 1 ? NO : YES;
Sezam/AGDoorbellVideoSpeedTestViewController.m:266:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_progress"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:267:            float uploadTotal = [[messageData objectForKey:@"upoad_total"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:268:            float uploadNow = [[messageData objectForKey:@"upload_now"] floatValue];
Sezam/AGDoorbellVideoSpeedTestViewController.m:275:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_completed"]) {
Sezam/AGDoorbellVideoSpeedTestViewController.m:277:            self.uploadActualSpeedLabel.text = [NSString stringWithFormat:@"%.2f Mbps", [[messageData objectForKey:@"speed_mbps"] floatValue]];
Sezam/AGDoorbellVideoSpeedTestViewController.m:279:            self.goodUpload = [[messageData objectForKey:@"speed_mbps"] floatValue] < 1 ? NO : YES;
Sezam/AGDoorbellVideoSpeedTestViewController.m:283:        } else if ([[messageData objectForKey:@"status"] isEqualToString:@"speed_test_failed"]) {
Sezam/AGBasicNetworkClient.m:36:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
Sezam/AGBasicNetworkClient.m:37:    [updatedRequest setValue:@"en-US;q=1" forHTTPHeaderField:@"Accept-Language"];
Sezam/AGBasicNetworkClient.m:38:    [updatedRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Sezam/AGBasicNetworkClient.m:39:    [updatedRequest setValue:[self apiKey] forHTTPHeaderField:@"x-august-api-key"];
Sezam/AGBasicNetworkClient.m:43:            [updatedRequest setValue:accessToken forHTTPHeaderField:@"x-august-access-token"];
Sezam/AGBasicNetworkClient.m:55:    NSString *fullPathURL = [NSString stringWithFormat:@"%@%@", self.baseURLPath, relativeURLPath];
Sezam/AGBasicNetworkClient.m:60:    return @"79fd0eb6-381d-4adf-95a0-47721289d1d9";
Sezam/AGSmartAlertEditorView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertEditorView.m:71:    self.editorDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertEditorView.m:72:    self.editorDescriptionLabel.text = @"Alert me when:";
Sezam/AGSmartAlertEditorView.m:89:    self.destructiveActionButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertEditorView.m:102:    self.saveButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertEditorView.m:108:    [self.saveButton setTitle:@"SAVE" forState:UIControlStateNormal];
Sezam/AGVideoStreamCallRecord.m:110:    NSAssert(self.callRecordState == AGInitiateHangupCallRecordState_Uninitialized, @"API Misuse. A call record cannot be started if it's already been started once.");
Sezam/AGVideoStreamCallRecord.m:111:    NSAssert(self.callType != AGCallTypeUnknown, @"Call record requires a call type!");
Sezam/AGVideoStreamCallRecord.m:149:    NSString *callDurationStr = self.heartbeatStartDate ? [NSString stringWithFormat:@"%fl", [[NSDate date] timeIntervalSinceDate:self.heartbeatStartDate]] : @"0";
Sezam/AGVideoStreamCallRecord.m:150:    self.callStats = @{@"callstats":@{@"approximateCallDuration":callDurationStr}};
Sezam/AGVideoStreamCallRecord.m:163:    NSString *status = messageData[@"status"];
Sezam/AGVideoStreamCallRecord.m:250:    parameters[@"token"] = self.callID;
Sezam/AGAutoUnlockRecord.m:14:    return @"lockID";
Sezam/AGBridgeSetupProgressViewController.m:26:static NSString *kSignalStregthBad = @"Bad";
Sezam/AGBridgeSetupProgressViewController.m:27:static NSString *kSignalStregthPoor = @"Poor";
Sezam/AGBridgeSetupProgressViewController.m:28:static NSString *kSignalStregthGood = @"Good";
Sezam/AGBridgeSetupProgressViewController.m:29:static NSString *kSignalStregthGreat = @"Great";
Sezam/AGBridgeSetupProgressViewController.m:154:    self.bleSignalStrengthLabel.text  = @"";
Sezam/AGBridgeSetupProgressViewController.m:155:    self.routerSignalStrengthLabel.text = @"";
Sezam/AGBridgeSetupProgressViewController.m:163:    self.bodyLabel.text= @"";
Sezam/AGBridgeSetupProgressViewController.m:179:        self.bodyLabel.text = [NSString stringWithFormat:@"August Connect has been added to %@.\n\nNext, let’s test your Bluetooth and Wi-Fi signals.", self.setupNavController.wifiSSID];
Sezam/AGBridgeSetupProgressViewController.m:181:        [self.bigCenterButton setTitle:@"TEST SIGNALS" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:188:        self.bodyLabel.text = @"Unfortunately, we failed to get August Connect onto your network.\n\nLet’s see if we can help.";
Sezam/AGBridgeSetupProgressViewController.m:191:        [self.leftButton setTitle:[@"Get Wi-Fi Help" uppercaseString] forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:192:        [self.rightButton setTitle:[@"Continue"uppercaseString] forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:198:        self.bodyLabel.text = @"Unplug your Connect, then plug it into an outlet as close to your router as possible.";
Sezam/AGBridgeSetupProgressViewController.m:200:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:211:        self.bodyLabel.text = @"Please wait while we test your Bluetooth and Wi-Fi signals.";
Sezam/AGBridgeSetupProgressViewController.m:214:        self.statusLabel.text = @"Analyzing signal strength...";
Sezam/AGBridgeSetupProgressViewController.m:222:        self.bodyLabel.text = @"This looks like a good location for your Connect! Let’s finish the setup process.";
Sezam/AGBridgeSetupProgressViewController.m:226:        [self.bigCenterButton setTitle:@"FINALIZE SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:234:        self.bodyLabel.text = @"It looks like we need a stronger connection to your Wi-Fi router.\n\nIs it possible to move your router and Connect closer together, or within direct line-of-sight?";
Sezam/AGBridgeSetupProgressViewController.m:237:        [self.leftButton setTitle:@"NO" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:238:        [self.rightButton setTitle:@"YES" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:245:        self.bodyLabel.text = @"Unplug your Connect, then plug it in to the new outlet.\n\nFor best results, plug Connect into a wall opposite from your lock, with no obstructions.";
Sezam/AGBridgeSetupProgressViewController.m:247:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:260:        self.bodyLabel.text = @"It looks like we need a stronger Bluetooth connection to your August Smart Lock.\r\nAre any other outlets available within 10 feet of your door?";
Sezam/AGBridgeSetupProgressViewController.m:264:        [self.leftButton setTitle:@"NO" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:265:        [self.rightButton setTitle:@"YES" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:273:        self.bodyLabel.text = @"Unplug your Connect, then plug it in to the new outlet.\n\nFor best results, plug Connect into a wall opposite from your lock, with no obstructions.";
Sezam/AGBridgeSetupProgressViewController.m:276:        [self.bigCenterButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:280:        self.bodyLabel.text = @"Congratulations! August Connect is set up and ready to go.";
Sezam/AGBridgeSetupProgressViewController.m:283:        [self.bigCenterButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:288:        self.bodyLabel.text = @"Congratulations! August Connect is set up and ready to go. To access your lock remotely, press the remote connect icon in the top right corner of the lock screen.";
Sezam/AGBridgeSetupProgressViewController.m:291:        [self.bigCenterButton setTitle:@"OK, GOT IT" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:297:        self.bodyLabel.text = @"Unfortunately, your Connect has gone offline. Make sure it’s plugged in within network range.";
Sezam/AGBridgeSetupProgressViewController.m:301:        [self.leftButton setTitle:@"GET WI-FI HELP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:302:        [self.rightButton setTitle:@"TRY AGAIN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:307:        self.bodyLabel.text = @"Would you like to try to complete setup? Setup may succeed but you are likely to experience connection issues or lag time when operating your lock remotely.";
Sezam/AGBridgeSetupProgressViewController.m:308:        self.bodyLabel.text = @"Let’s complete the setup process. If you continue to experience connection problems, please contact support@august.com.";
Sezam/AGBridgeSetupProgressViewController.m:311:        [self.leftButton setTitle:@"GET HELP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:312:        [self.rightButton setTitle:@"COMPLETE SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupProgressViewController.m:460:    AGBridgeSetupProgressViewController *progressVC = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupProgressViewController.m:507:    int wifiPoor = [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIPoor" withDefault:-77];
Sezam/AGBridgeSetupProgressViewController.m:508:    int wifiGood =  [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIGood" withDefault:-65];
Sezam/AGBridgeSetupProgressViewController.m:509:    int wifiExcellent = [AGUtility getAppFeatureValueFromKey:@"ConnectWiFiRSSIExcellent" withDefault:-50];
Sezam/AGBridgeSetupProgressViewController.m:511:    int btPoor = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIPoor" withDefault:-77];
Sezam/AGBridgeSetupProgressViewController.m:512:    int btGood = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIGood" withDefault:-65];
Sezam/AGBridgeSetupProgressViewController.m:513:    int btExcellent = [AGUtility getAppFeatureValueFromKey:@"ConnectBLERSSIExcellent" withDefault:-50];
Sezam/AGBridgeSetupProgressViewController.m:562:    [self.setupNavController.agLock sendRemoteOperateCommandDetail:@"status" isDoingSetup:YES block:
Sezam/AGBridgeSetupProgressViewController.m:601:             NSDictionary *info = [dict objectForKey:@"info"];
Sezam/AGBridgeSetupProgressViewController.m:604:                 int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSetupProgressViewController.m:605:                 int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSetupProgressViewController.m:606:                 int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGBridgeSetupProgressViewController.m:663:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupProgressViewController.m:674:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupProgressViewController.m:689:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGResetPasswordViewController.m:49:    [self.instructionsText setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGResetPasswordViewController.m:111:                [self performSegueWithIdentifier:@"ResetPasswordToPhoneVerify" sender:nil];
Sezam/AGResetPasswordViewController.m:121:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:143:                [self performSegueWithIdentifier:@"ResetPasswordToEmailVerify" sender:nil];
Sezam/AGResetPasswordViewController.m:153:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:170:        [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:209:                [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGResetPasswordViewController.m:243:    if ([segue.identifier isEqualToString:@"ResetPasswordToEmailVerify"]) {
Sezam/AGResetPasswordViewController.m:249:    else if ([segue.identifier isEqualToString:@"ResetPasswordToPhoneVerify"]) {
Sezam/AGNotifyMeViewController.m:35:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Notify Signup %@", self.partner.name] attributes:@{@"Promotion":self.partner.promotion}];
Sezam/AGNotifyMeViewController.m:40:    _promptLabel.text = @"When the beta begins you will receive an email from us which will contain details about participation. Please enter your email:";
Sezam/AGNotifyMeViewController.m:44:    NSString *emailRegExPattern = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
Sezam/AGNotifyMeViewController.m:47:    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegExPattern];
Sezam/AGNotifyMeViewController.m:50:        [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Submitted Email for %@", self.partner.name] attributes:@{}];
Sezam/AGNotifyMeViewController.m:64:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Invalid Email"
Sezam/AGNotifyMeViewController.m:65:                                                                       message:@"Please enter a valid email address."
Sezam/AGNotifyMeViewController.m:67:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGPreferencesContainerView.m:64:    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(userRefreshed:) name:@"USER_REFRESHED" object:nil];
Sezam/AGPreferencesContainerView.m:66:    self.versionLabel.text = [NSString stringWithFormat:@"App Version %@", [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]];
Sezam/AGPreferencesContainerView.m:86:    [rowTitlesConstruction addObject:@"My Account"];
Sezam/AGPreferencesContainerView.m:89:    if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGPreferencesContainerView.m:90:        [rowTitlesConstruction addObject:@"Keychain"];
Sezam/AGPreferencesContainerView.m:92:        [rowTitlesConstruction addObject:@"Home"];
Sezam/AGPreferencesContainerView.m:96:    [rowTitlesConstruction addObject:@"August Store"];
Sezam/AGPreferencesContainerView.m:99:    NSString *subscriptionsTitle = [AGActiveMonitoringUtility activeMonitoringAvailable] ? @"Subscriptions" : @"August Video Recording";
Sezam/AGPreferencesContainerView.m:103:    [rowTitlesConstruction addObject:@"August Access"];
Sezam/AGPreferencesContainerView.m:106:    [rowTitlesConstruction addObject:@"Help"];
Sezam/AGPreferencesContainerView.m:109:    [rowTitlesConstruction addObject:@"Set up a New Device"];
Sezam/AGPreferencesContainerView.m:144:        cell =  [tableView dequeueReusableCellWithIdentifier:@"LabelCell"];
Sezam/AGPreferencesContainerView.m:148:        cell =  [tableView dequeueReusableCellWithIdentifier:@"AccountCell"];
Sezam/AGPreferencesContainerView.m:225:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"Profile"];
Sezam/AGPreferencesContainerView.m:234:        if ([AGUtility checkForAppFeature:@"nodots"]) {
Sezam/AGPreferencesContainerView.m:243:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AugustAccessNavController"];
Sezam/AGPreferencesContainerView.m:251:        AGStoreWebViewController *vc = (AGStoreWebViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"StoreWebViewController"];
Sezam/AGPreferencesContainerView.m:252:        [vc setUrlToLoad:[NSURL URLWithString:@"https://store.august.com/?utm_source=august_app&utm_medium=iossidemenu"]];
Sezam/AGPreferencesContainerView.m:259:        AGWebViewController *vc = (AGWebViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"WebViewController"];
Sezam/AGPreferencesContainerView.m:261:        [vc setUrlToLoad:[NSURL URLWithString:@"http://www.august.com/support"]];
Sezam/AGPreferencesContainerView.m:269:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"AddDeviceViewController"];
Sezam/AGPreferencesContainerView.m:277:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AGSubscriptions" bundle:nil];
Sezam/AGPreferencesContainerView.m:295:            UIViewController *subscriptionNoDbcVC= [storyboard instantiateViewControllerWithIdentifier:@"SubscriptionNoDoorbell"];
Sezam/AGPreferencesContainerView.m:298:            UIViewController *subscriptionVC= [storyboard instantiateViewControllerWithIdentifier:@"SubscriptionList"];
Sezam/AGPreferencesContainerView.m:310:        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"AugustInternal"] == YES)
Sezam/AGPreferencesContainerView.m:313:            [self performSegueWithIdentifier:@"preferencesToDebugMode" sender:nil];
Sezam/AGPreferencesContainerView.m:315:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"August" message:@"This function can't be performed." delegate:self cancelButtonTitle:nil otherButtonTitles:@"OK", nil] ;
Sezam/AGPreferencesContainerView.m:326:    userInfo = @{@"terminationType":[NSNumber numberWithInt:lockOperationTerminationType]};
Sezam/AGPreferencesContainerView.m:339:        [self performSegueWithIdentifier:@"preferencesToDebugMode" sender:nil];
Sezam/AGPreferencesContainerView.m:340:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AugustInternal"];
Sezam/AGPreferencesContainerView.m:347:        UIViewController *secretSupport = [self.storyboard instantiateViewControllerWithIdentifier:@"AGSecretSupportViewController"];
Sezam/AGPreferencesContainerView.m:351:        NSString *stagingServerUrl = @"https://staging.august.com";
Sezam/AGPreferencesContainerView.m:355:        NSString *productionServerUrl = @"https://api-production.august.com";
Sezam/AGProfileViewController.m:103:    [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:[AGUser currentUser]];
Sezam/AGProfileViewController.m:265:        if ([[formattedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGProfileViewController.m:267:            formattedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formattedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(6, (formattedNumberNoCode.length-6))]];
Sezam/AGProfileViewController.m:273:            cell = [tableView dequeueReusableCellWithIdentifier:@"NameCell"];
Sezam/AGProfileViewController.m:277:            cell = [tableView dequeueReusableCellWithIdentifier:@"EmailCell"];
Sezam/AGProfileViewController.m:281:            cell = [tableView dequeueReusableCellWithIdentifier:@"MobileNumberCell"];
Sezam/AGProfileViewController.m:285:            cell = [tableView dequeueReusableCellWithIdentifier:@"ChangePasswordCell"];
Sezam/AGProfileViewController.m:288:            cell = [tableView dequeueReusableCellWithIdentifier:@"SignOutCell"];
Sezam/AGProfileViewController.m:322:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:323:        AGCreateAccountViewController *updateNameController = (AGCreateAccountViewController *)[storyboard instantiateViewControllerWithIdentifier:@"UpdateUserName"];
Sezam/AGProfileViewController.m:329:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:330:        AGAddEmailViewController* addEmailController = (AGAddEmailViewController*)[storyboard instantiateViewControllerWithIdentifier:@"AddEmail"];
Sezam/AGProfileViewController.m:338:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:339:        AGAddPhoneViewController* addPhoneController = (AGAddPhoneViewController*)[storyboard instantiateViewControllerWithIdentifier:@"AddPhone"];
Sezam/AGProfileViewController.m:347:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGProfileViewController.m:348:        AGNewPasswordViewController* newPasswordController = (AGNewPasswordViewController*)[storyboard instantiateViewControllerWithIdentifier:@"NewPassword"];
Sezam/AGProfileViewController.m:363:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Sign Out?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGProfileViewController.m:364:    [alertController addAction:[UIAlertAction actionWithTitle:@"Sign Out" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGProfileViewController.m:380:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGRobustBLEUnlocker.m:170:        BOOL lockLocked = [returnedValue isEqual:@"kAugLockState_Locked"];
Sezam/AGHomeKitManageHomesViewController.m:76:    AGTableViewCell *cell = (AGTableViewCell *)[self.homesTableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitManageHomesViewController.m:78:        cell.label.text = @"Add New Home...";
Sezam/AGHomeKitManageHomesViewController.m:79:        cell.label2.text = @"";
Sezam/AGHomeKitManageHomesViewController.m:83:        cell.label2.text = (hmHome.isPrimary)?@"Primary":@"";
Sezam/AGHomeKitManageHomesViewController.m:103:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateHome"];
Sezam/AGHomeKitManageHomesViewController.m:107:        AGHomeKitEditHomeViewController *vc = (AGHomeKitEditHomeViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitEditHome"];
Sezam/AGEventLogger.m:86:        [eventDict setObject:event.date forKey:@"date"];
Sezam/AGEventLogger.m:89:        [eventDict setObject:event.userInfo forKey:@"userInfo"];
Sezam/AGEventLogger.m:92:        [eventDict setObject:event.identifier forKey:@"identifier"];
Sezam/AGEventLogger.m:99:    return [AGLogEvent eventWithDate:dictionary[@"date"] userInfo:dictionary[@"userInfo"] identifier:dictionary[@"identifier"]];
Sezam/AGEventLogger.m:105:    return [NSString stringWithFormat:@"AGEventLogger-%@", self.identifier];
Sezam/AGEventLogger.m:109:    return [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.general-cross-process"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:53:        [self handleUnexpectedError:@"NoLockAndNoDoorbellSelected"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:58:        self.topTitle.text = @"SYNC TO DOORBELL";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:59:        self.topMessage.text = @"Which doorbell would you like to sync this lock to?";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:62:        self.topTitle.text = @"SYNC TO LOCK";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:63:        self.topMessage.text = @"Which lock would you like to sync this doorbell to?";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:80:            beganWithStringForError = @"Began With Lock";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:83:            beganWithStringForError = @"Began With Doorbell";
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:86:    NSString *errorStringForLogsAppended = [NSString stringWithFormat:@"%@:%@", beganWithStringForError, errorStringForLogs];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:90:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Setup Error" message:@"An unexpected setup error occured. Please retry Setup or contact support." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:92:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:106:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:107:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:111:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:224:    AGTableViewCell *houseHeadercell = [self.housesAndDevicesTableView dequeueReusableCellWithIdentifier: @"HouseSectionHeader"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:249:    AGTableViewCell *cell = [self.housesAndDevicesTableView dequeueReusableCellWithIdentifier: @"DevicePickerCell"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:300:        [self showGenericAlertWithTitle:@"Error" message:@"Please select a device to associate"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:305:        [self handleUnexpectedError:@"House Array out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:314:            [self handleUnexpectedError:@"Device Array for Doorbells out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:323:            [self handleUnexpectedError:@"Device Array for Locks out of range"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:332:        [self handleUnexpectedError:@"Lock HouseId is nil"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:336:        [self handleUnexpectedError:@"Doorbell HouseId is nil"];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:341:        [self performSegueWithIdentifier:@"AssociationPickerToDevicePermissions" sender:nil];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:343:        UIAlertController *differentHouseAlert = [UIAlertController alertControllerWithTitle:@"Different Houses" message:@"Your Lock and Doorbell are in different August Houses" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:344:        UIAlertAction *useLockHouseAction = [UIAlertAction actionWithTitle:@"Use Lock's House"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:348:                                                                           [self performSegueWithIdentifier:@"AssociationPickerToDevicePermissions" sender:nil];
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:351:        UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:380:    if ([segue.identifier isEqualToString:@"AssociationPickerToDevicePermissions"]) {
Sezam/AGDoorbellLockAssociationPickDeviceViewController.m:395:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGBridgeSetupFailedViewController.m:70:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGAddFirstAndLastNameViewController.m:52:    [self performSegueWithIdentifier:@"AddNamesVCtoInviteEditVC" sender:self];
Sezam/AGAddFirstAndLastNameViewController.m:94:    if ([segue.identifier isEqualToString:@"AddNamesVCtoInviteEditVC"]) {
Sezam/AGTextPinToGuestCell.m:37:    doneToolbar.items = @[[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil],  [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(donePressed:)]];
Sezam/AGKeypadGiveEntryCodesViewController.m:87:    self.instructionsLabel.text = @"Connecting to Server...";
Sezam/AGKeypadGiveEntryCodesViewController.m:103:                    NSString *pinCode = responseDict[@"pin"];
Sezam/AGKeypadGiveEntryCodesViewController.m:104:                    NSString *slot = responseDict[@"slot"];
Sezam/AGKeypadGiveEntryCodesViewController.m:216:            if ([user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGKeypadGiveEntryCodesViewController.m:237:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Connection Problem" message:@"We had trouble connecting to your lock. Make sure your are in bluetooth range of the lock." delegate:self cancelButtonTitle:@"Skip" otherButtonTitles:@"Try Again", nil];
Sezam/AGKeypadGiveEntryCodesViewController.m:253:        cell = [tableView dequeueReusableCellWithIdentifier:@"UserPinSelectAllCell"];
Sezam/AGKeypadGiveEntryCodesViewController.m:259:       cell =  [tableView dequeueReusableCellWithIdentifier:@"UserPinCell"];
Sezam/AGKeypadGiveEntryCodesViewController.m:303:    self.instructionsLabel.text = @"Connecting to Lock";
Sezam/AGKeypadGiveEntryCodesViewController.m:325:        userString = @"selectall";
Sezam/AGKeypadGiveEntryCodesViewController.m:328:    if ([userString isEqualToString:@"selectall"]) {
Sezam/AGKeypadGiveEntryCodesViewController.m:382:    self.instructionsLabel.text = @"Sending Entry Codes...";
Sezam/AGHomeKitPickHouseViewController.m:33:            AGHomeKitCreateHouseViewController *createHouse = (AGHomeKitCreateHouseViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateHouse"];
Sezam/AGHomeKitPickHouseViewController.m:41:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickRoom"];
Sezam/AGHomeKitPickHouseViewController.m:94:    AGTableViewCell *cell = (AGTableViewCell *)[self.housesTableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitPickHouseViewController.m:96:        cell.label.text = @"Add a new HomeKit Home";
Sezam/AGHomeKitEnableViewController.m:85:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitEnableViewController.m:88:        self.instructLabel.text = @"Connecting To Lock...";
Sezam/AGHomeKitEnableViewController.m:117:        self.instructLabel.text = @"Make sure you’re standing near your Smart Lock and you’ve removed the battery tab. Once HomeKit is enabled you’ll need to create an August account and set up your lock.";
Sezam/AGHomeKitEnableViewController.m:169:                                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Authorizing lock For HomeKit..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGHomeKitEnableViewController.m:182:                                item1.label = @"BLETimeout10";
Sezam/AGHomeKitEnableViewController.m:194:                    [self failWithError:@"Unable to connect to the lock. Please try again."];
Sezam/AGHomeKitEnableViewController.m:203:            [self failWithError:@"Unable to connect to the lock"];
Sezam/AGHomeKitEnableViewController.m:256:        NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitEnableViewController.m:262:                    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitEnableViewController.m:291:                                if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitEnableViewController.m:321:                [self.enableButton setTitle:@"Disable HomeKit" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:324:                self.enableButton.accessibilityLabel = @"Disable HomeKit";
Sezam/AGHomeKitEnableViewController.m:340:        self.headerDark.text = @"HOME SETTINGS";
Sezam/AGHomeKitEnableViewController.m:375:    self.instructLabel.text = [NSString stringWithFormat:@"HomeKit has now been enabled for %@.\n\nYou can now use Siri and third-party HomeKit apps to operate your lock.", [self navController].agLock.name];
Sezam/AGHomeKitEnableViewController.m:376:    [self.enableButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:387:                NSString *homeKitKey = [result objectForKey:@"key"];
Sezam/AGHomeKitEnableViewController.m:388:                NSNumber *homeKitKeySlot = [result objectForKey:@"slot"];
Sezam/AGHomeKitEnableViewController.m:390:                NSString *combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitEnableViewController.m:400:                                    [weakSelf failWithError:@"Failed to authorize HomeKit. Please go to Home Settings and try again later."];
Sezam/AGHomeKitEnableViewController.m:414:                    [self failWithError:@"Failed to authorize HomeKit. Please go to Home Settings and try again later."];
Sezam/AGHomeKitEnableViewController.m:435:    [self.enableButton setTitle:@"OK" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:478:            AGHomeKitSelectLockViewController *selectVC = (AGHomeKitSelectLockViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitSelectLock"];
Sezam/AGHomeKitEnableViewController.m:510:        self.instructLabel.text = @"We were unable to find your lock through HomeKit.";
Sezam/AGHomeKitEnableViewController.m:525:                    item1.label = @"ResetTimeout";
Sezam/AGHomeKitEnableViewController.m:557:    self.instructLabel.text = @"Authorizing HomeKit for this lock.";
Sezam/AGHomeKitEnableViewController.m:560:    [self.enableButton setTitle:@"Done" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:578:    [self.enableButton setTitle:@"ENABLE HOMEKIT" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:580:    self.instructLabel.text = @"Enabling HomeKit allows you to use Siri and the iOS Home app to operate your August Smart Lock.";
Sezam/AGHomeKitEnableViewController.m:583:    self.enableButton.accessibilityLabel = @"ENABLE HOMEKIT";
Sezam/AGHomeKitEnableViewController.m:602:    self.instructLabel.text = @"";
Sezam/AGHomeKitEnableViewController.m:604:    [self.enableButton setTitle:@"Disconnect" forState:UIControlStateNormal];
Sezam/AGHomeKitEnableViewController.m:608:    self.enableButton.accessibilityLabel = @"Disconnect";
Sezam/AGHomeKitEnableViewController.m:634:                    if ([(NSString *)[dict objectForKey:@"key"] isEqualToString:(NSString *)[homeKitKey objectForKey:@"key"]]) {
Sezam/AGHomeKitEnableViewController.m:656:    self.instructLabel.text = @"Remove the faceplate from the front of your August Smart lock and locate the 8-digit accessory code.";
Sezam/AGHomeKitEnableViewController.m:672:                item1.label = @"EnableHomeKit";
Sezam/AGHomeKitEnableViewController.m:686:                    homeKitReset.label = @"ResetHomeKit";
Sezam/AGHomeKitEnableViewController.m:715:                                        AGHomeKitCompleteViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitEnableViewController.m:725:                        [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:730:                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:768:            self.homeKitOnLabel.text = @"Disconnecting from HomeKit...";
Sezam/AGHomeKitEnableViewController.m:799:        item1.label = @"BLETimeout10";
Sezam/AGHomeKitEnableViewController.m:815:                homeKitReset.label = @"TurnOffHomeKit";
Sezam/AGHomeKitEnableViewController.m:819:                inactivityTimeoutSet.label = @"30SecTimeout";
Sezam/AGHomeKitEnableViewController.m:834:                    disableHomeKitAdvt.label = @"DisableHomeKit";
Sezam/AGHomeKitEnableViewController.m:847:                                            UIAlertController *alertViewController = [UIAlertController alertControllerWithTitle:@"Removal Completed" message:@"Your lock has been removed from HomeKit." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGHomeKitEnableViewController.m:848:                                            [alertViewController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGHomeKitEnableViewController.m:856:                                        [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:862:                                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:871:                [self failWithError:@"We had a problem connecting to your lock."];
Sezam/AGHomeKitEnableViewController.m:888:    self.progressText.text = @"Closing HomeKit";
Sezam/AGHomeKitEnableViewController.m:962:        UIViewController *setLockName = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitLockName"];
Sezam/AGHomeKitEnableViewController.m:976:        AGSiriNameViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"SetSiriName"];
Sezam/AGHomeKitEnableViewController.m:988:        UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageHomes"];
Sezam/AGHomeKitEnableViewController.m:992:        AGHomeKitChangeRoomViewController *vc = (AGHomeKitChangeRoomViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitChangeRoom"];
Sezam/AGHomeKitEnableViewController.m:1027:        cell = (AGTableViewCell *)[self.tableView dequeueReusableCellWithIdentifier:@"HKHouseCellNoChevron"];
Sezam/AGHomeKitEnableViewController.m:1030:        cell = (AGTableViewCell *)[self.tableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGHomeKitEnableViewController.m:1046:                cell.label.text = @"Siri Name";
Sezam/AGHomeKitEnableViewController.m:1051:                cell.label.text = @"Home";
Sezam/AGHomeKitEnableViewController.m:1059:                cell.label2.text = @"";
Sezam/AGHomeKitEnableViewController.m:1060:                cell.label.text = @"Find this lock (light will flash)";
Sezam/AGHomeKitEnableViewController.m:1069:                    name = @"Not Assigned";
Sezam/AGHomeKitEnableViewController.m:1071:                cell.label2.text =  (name!=nil)?name:@"None";
Sezam/AGHomeKitEnableViewController.m:1072:                cell.label.text = @"Room";
Sezam/AGHomeKitEnableViewController.m:1080:                cell.label.text = @"Manage Homes";
Sezam/AGHomeKitEnableViewController.m:1081:                cell.label2.text = @"";
Sezam/AGHomeKitEnableViewController.m:1084:                cell.label.text = @"";
Sezam/AGHomeKitEnableViewController.m:1085:                cell.label2.text = @"";
Sezam/AGRTCFactory.m:72:    NSArray *stunServersUrlStrings = @[@"stun:dev-turn.august.com:3478", @"stun:dev-turn.august.com:3479"];
Sezam/AGRTCFactory.m:78:    NSArray *turnServersUrlStrings = @[@"turn:dev-turn.august.com:3478", @"turn:dev-turn.august.com:3479"];
Sezam/AGRTCFactory.m:79:    NSArray * turnAccounts = [SAMKeychain accountsForService:@"turn"];
Sezam/AGRTCFactory.m:84:    NSString * password = [SAMKeychain passwordForService:@"turn" account:username];
Sezam/AGHomeKitCreateHouseViewController.m:29:        self.instructionLabel.text = @"Choose a name for your new HomeKit Home.";
Sezam/AGHomeKitCreateHouseViewController.m:72:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Home. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitCreateHouseViewController.m:75:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Home." inViewController:self];
Sezam/AGHomeKitCreateHouseViewController.m:80:                UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickRoom"];
Sezam/AGDebugModeSelectServer.m:26:    self.availableServers = @[@"production", @"staging", @"api-dev-aws", @"dev-jonathan", @"dev-justin", @"dev-dan", @"dev-ingo", @"dev-phil", @"dev-ipalibo", @"dev-etienne", @"dev-sean", @"Other"];
Sezam/AGDebugModeSelectServer.m:54:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ServerCell"];
Sezam/AGDebugModeSelectServer.m:58:    NSString *serverUrl = [NSString stringWithFormat:@"https://%@.august.com", serverName.lowercaseString];
Sezam/AGDebugModeSelectServer.m:87:    if ([self.selectedServer isEqualToString:@"Other"]) {
Sezam/AGDebugModeSelectServer.m:88:        UIAlertView *customAlertView = [[UIAlertView alloc] initWithTitle:@"Custom server" message:@"Server full address (https://www.example.com)" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Custom", nil] ;
Sezam/AGDebugModeSelectServer.m:92:        UIAlertView *changeServerConfirmation = [[UIAlertView alloc] initWithTitle:@"Confirm Server" message:[NSString stringWithFormat:@"Switching server to %@", self.selectedServer] delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Confirm", nil];
Sezam/AGDebugModeSelectServer.m:101:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"The URL you specified is invalid" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGDebugModeSelectServer.m:105:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"DebugAddLock"];
Sezam/AGDebugModeSelectServer.m:122:    if ([buttonTitle isEqualToString:@"Cancel"]) {
Sezam/AGDebugModeSelectServer.m:126:    if ([buttonTitle isEqualToString:@"Custom"]) {
Sezam/AGDebugModeSelectServer.m:133:    if ([buttonTitle isEqualToString:@"Confirm"]) {
Sezam/AGDebugModeSelectServer.m:134:        NSString *newServerUrl = [NSString stringWithFormat:@"https://%@.august.com", self.selectedServer.lowercaseString];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:52:            NSDictionary *info = [response objectForKey:@"info"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:54:                self.bleSignalLevel =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:86:        self.bleTitleLabel.text = @"NO BLUETOOTH SIGNAL";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:87:        self.bleMessageLabel.text = @"Your Doorbell Cam is not reporting a bluetooth signal to to your August Smart Lock. Please check that your lock is powered on and in range.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:88:        self.bleSignalLevelText = @"No Signal";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:93:            self.bleTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:94:            self.bleMessageLabel.text = @"Your Doorbell Cam is reporting a good bluetooth conection to your August Smart Lock.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:95:            self.bleSignalLevelText = [NSString stringWithFormat:@"Great (%i)", self.bleSignalLevel];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:99:            self.bleTitleLabel.text = @"POOR BLUETOOTH SIGNAL";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:100:            self.bleMessageLabel.text = @"Your Doorbell Cam is reporting a very poor bluetooth conection to your August Smart Lock. Remote lock operations may be slow or not work properly.";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:101:            self.bleSignalLevelText = [NSString stringWithFormat:@"Poor (%i)", self.bleSignalLevel];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:136:        cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:137:        cell.label2.text = @"Lock Bluetooth Signal";
Sezam/AGDoorbellToLockSignalStrengthViewController.m:141:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MessageRow"];
Sezam/AGDoorbellToLockSignalStrengthViewController.m:144:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGInviteEditDoorbellViewController.m:29:            self.userStatus.text = @"No Access";
Sezam/AGInviteEditDoorbellViewController.m:35:            self.userStatus.text = @"Owner";
Sezam/AGInviteEditDoorbellViewController.m:41:            self.userStatus.text = @"No Access";
Sezam/AGInviteEditDoorbellViewController.m:80:        if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteEditDoorbellViewController.m:82:            formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteEditDoorbellViewController.m:124:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Success" message:@"User Added to Doorbell" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:133:            UIAlertView *errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to Add this user" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:145:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Warning" message:@"You are the last owner of this doorbell and can not be removed. Please Factory reset your doorbell to remove all users." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:160:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Success" message:@"User Removed from Doorbell" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGInviteEditDoorbellViewController.m:169:            UIAlertView *errorAlertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to remove this user" delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGGuestListViewController.m:126:            if ([AGUtility checkTriggerTooltipForKey:@"InviteUserTip" initialDefaultTriggerOn:false]) {
Sezam/AGGuestListViewController.m:128:                    [self showTooltipForString:@"Tap here to send someone an entry code." anchorItem:cell.contentView autoDismissDelay:5.0];
Sezam/AGGuestListViewController.m:156:    if ([self.addedRule.user.type.lowercaseString isEqualToString:@"user"]) {
Sezam/AGGuestListViewController.m:219:                    if ([onlyUser.type isEqualToString:@"superuser"] || [onlyUser.type isEqualToString:@"manager"]) {
Sezam/AGGuestListViewController.m:223:                            lock.type = @"user"; // This is a bit of a hack until server starts sending us our own user type
Sezam/AGGuestListViewController.m:391:                if (![ruleID isEqualToString:@"always"]) {
Sezam/AGGuestListViewController.m:464:                    if ([user.type isEqualToString:@"superuser"]) {
Sezam/AGGuestListViewController.m:465:                        houseUser.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:486:                    houseUser.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:490:                user.highestHouseLevelType = @"superuser";
Sezam/AGGuestListViewController.m:495:    [self.mergedLockUsersInHouse sortUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"firstName" ascending:YES]]];
Sezam/AGGuestListViewController.m:514:        if ([houseUser.highestHouseLevelType isEqualToString:@"superuser"]) {
Sezam/AGGuestListViewController.m:649:        AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"INVITE_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:650:                                  //dequeueReusableCellWithReuseIdentifier:@"INVITE_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:655:        cell.label2.text = @"";
Sezam/AGGuestListViewController.m:667:            cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL_ONE_LINE" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:669:            cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:676:            cell.label2.text = @"";
Sezam/AGGuestListViewController.m:682:                    cell.label2.text = @"ALWAYS";
Sezam/AGGuestListViewController.m:692:                cell.label2.text = @"";
Sezam/AGGuestListViewController.m:711:        if ([cell.label2.text isEqualToString:@""]) {
Sezam/AGGuestListViewController.m:712:            cell.accessibilityLabel = [NSString stringWithFormat:@"User %@ with ALWAYS access", cell.label.text];
Sezam/AGGuestListViewController.m:714:            cell.accessibilityLabel = [NSString stringWithFormat:@"User %@ with %@ access", cell.label.text, cell.label2.text];
Sezam/AGGuestListViewController.m:733:            AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:739:            cell.label.text = [NSString stringWithFormat:@"%@ %@", pinUser.firstName, pinUser.lastName];
Sezam/AGGuestListViewController.m:747:            AGTableViewCell * cell = [self.guestListTableView dequeueReusableCellWithIdentifier:@"GUEST_CELL" forIndexPath:indexPath];
Sezam/AGGuestListViewController.m:762:            cell.label.text = [NSString stringWithFormat:@"%@", rule.user.firstName];
Sezam/AGGuestListViewController.m:766:                cell.label2.text = @"";
Sezam/AGGuestListViewController.m:773:            if ([cell.label2.text isEqualToString:@""]) {
Sezam/AGGuestListViewController.m:774:                cell.accessibilityLabel = [NSString stringWithFormat:@"Pending invite for %@", cell.label.text];
Sezam/AGGuestListViewController.m:776:                cell.accessibilityLabel = [NSString stringWithFormat:@"Pending invite for %@ to lock %@", cell.label.text, cell.label2.text];
Sezam/AGGuestListViewController.m:791:            accssTimeStr = @"always";
Sezam/AGGuestListViewController.m:802:            NSString *recurTime = [NSString stringWithFormat:@"%@ - %@", starTimeStr, endTimeStr];
Sezam/AGGuestListViewController.m:804:            accssTimeStr = [NSString stringWithFormat:@"%@ %@", weekdaysStr, recurTime];
Sezam/AGGuestListViewController.m:812:            accssTimeStr = [NSString stringWithFormat:@"%@ %@", startTimeStr, endTimeStr];
Sezam/AGGuestListViewController.m:817:            accssTimeStr = @"";
Sezam/AGGuestListViewController.m:845:        titleLabel.text = @"INVITATIONS";
Sezam/AGGuestListViewController.m:848:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGGuestListViewController.m:908:                                       [self performSegueWithIdentifier:@"GuestListToInvite" sender:nil];
Sezam/AGGuestListViewController.m:918:                                   [self performSegueWithIdentifier:@"GuestListToPINInvite" sender:nil];
Sezam/AGGuestListViewController.m:965:            [self performSegueWithIdentifier:@"GuestListToInvite" sender:nil];
Sezam/AGGuestListViewController.m:982:        [self performSegueWithIdentifier:@"lockGuestToSelectGuest" sender:nil];
Sezam/AGGuestListViewController.m:1000:    if (([segue.identifier isEqualToString:@"GuestListToInvite"]) || ([segue.identifier isEqualToString:@"GuestListToPINInvite"])) {
Sezam/AGGuestListViewController.m:1006:        if ([segue.identifier isEqualToString:@"lockGuestToSelectGuest"]) {
Sezam/AGDeviceInfoViewController.m:109:        self.sectionTitles = @[@"AUGUST MODULE"];
Sezam/AGDeviceInfoViewController.m:121:            @(AGDeviceInfoTypeSerialNumber): @"Serial Number",
Sezam/AGDeviceInfoViewController.m:122:            @(AGDeviceInfoTypeFWVersion): @"FW Version",
Sezam/AGDeviceInfoViewController.m:150:            @(AGDeviceInfoTypeModel): @"Model",
Sezam/AGDeviceInfoViewController.m:151:            @(AGDeviceInfoTypeFWVersion): @"FW Version",
Sezam/AGDeviceInfoViewController.m:161:    NSString *firmwareVersion = dict[@"firmwareVersion"];
Sezam/AGDeviceInfoViewController.m:162:    NSString *hostModelID = dict[@"hostModelID"];
Sezam/AGDeviceInfoViewController.m:171:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGDeviceInfoViewController.m:173:    return lockSerial ? lockSerial : @"";
Sezam/AGDeviceInfoViewController.m:177:    NSDictionary *uuidsToModelNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToModelNumbersDictionary"];
Sezam/AGDeviceInfoViewController.m:179:    return modelNumber ? modelNumber : @"";
Sezam/AGDeviceInfoViewController.m:261:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGDeviceInfoViewController.m:282:    static NSString *cellIdentifier = @"cellIdentifier";
Sezam/AGDeviceInfoViewController.m:289:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGDeviceInfoViewController.m:290:    cell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGDeviceInfoViewController.m:346:            NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGDeviceInfoViewController.m:385:    NSString *zwaveDSKDescriptionPart = @"Z-Wave DSK - ";
Sezam/AGDeviceInfoViewController.m:393:    NSString *fullText = [NSString stringWithFormat:@"%@%@%@", zwaveDSKDescriptionPart, underlinedDSKPart, remainingDSKPart];
Sezam/AGDeviceInfoViewController.m:398:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGAutoUnlockSetupAwayController.m:39:    NSString *homeAreaRadius = [NSString stringWithFormat:@"%im", (int)[AGAutoUnlockUtility baseHomeLocationGeofenceRadius]];
Sezam/AGAutoUnlockSetupAwayController.m:58:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size: isAnnoyingTinyScreenDevice ? 14.5 : 17.0],
Sezam/AGAutoUnlockSetupAwayController.m:63:    [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"Your “Neighborhood”\n(%@ Perimeter)", homeAreaRadius]
Sezam/AGAutoUnlockSetupAwayController.m:74:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupAwayController.m:76:    NSString *title = @"Leaving Home";
Sezam/AGAutoUnlockSetupAwayController.m:77:    NSString *paragraph1Part1 = @"Whenever your phone detects you’ve";
Sezam/AGAutoUnlockSetupAwayController.m:78:    NSString *paragraph1BoldPart1 = @" left your neighborhood";
Sezam/AGAutoUnlockSetupAwayController.m:79:    NSString *paragraph1Part2 = [NSString stringWithFormat:@" (at least %@ from home), Auto-Unlock will switch to", homeAreaRadius];
Sezam/AGAutoUnlockSetupAwayController.m:80:    NSString *paragraph1BoldPart2 = @" Away";
Sezam/AGAutoUnlockSetupAwayController.m:81:    NSString *paragraph1Part3 = @" mode.";
Sezam/AGAutoUnlockSetupAwayController.m:87:    NSString *paragraph1 = [NSString stringWithFormat:@"%@%@%@%@%@", paragraph1Part1, paragraph1BoldPart1, paragraph1Part2, paragraph1BoldPart2, paragraph1Part3];
Sezam/AGAutoUnlockSetupAwayController.m:89:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupAwayController.m:97:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupAwayController.m:112:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupAwayController.m:120:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupAwayController.m:131:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:57:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertListView.m:161:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertListView.m:162:    self.titleLabel.text = @"SMART ALERTS";
Sezam/AGSmartAlertListView.m:174:    self.centerLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertListView.m:199:    self.createAlertButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:200:    [self.createAlertButton setTitle:@"CREATE A SMART ALERT" forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:207:    self.learnMoreButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:208:    [self.learnMoreButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGSmartAlertListView.m:273:    NSString *smartAlertListCellReuseID = @"SmartAlertListCell";
Sezam/AGSmartAlertListView.m:307:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertListView.m:310:    label.text = @"MY SMART ALERTS";
Sezam/AGKeypadSetupCompleteViewController.m:25:    [AGUtility setTooltipNeededForKey:@"InviteUserTip" needsToBeShown:true]; // Triggers tooltip on guestlist page
Sezam/AGKeypadSetupCompleteViewController.m:27:    self.lockNameLabel.text = [NSString stringWithFormat:@"\u201C%@\u201D", navController.lock.name];
Sezam/AGKeypadSetupCompleteViewController.m:38:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadTestCodeController"];
Sezam/AGAirbnbConnectViewController.m:54:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"didDisplayWhatsNewAirbnb"];
Sezam/AGAirbnbConnectViewController.m:67:            if ([partner.name isEqualToString:@"Airbnb"]) {
Sezam/AGAirbnbConnectViewController.m:93:            [self performSegueWithIdentifier:@"airbnbConnectToAirbnbMapping" sender:nil];
Sezam/AGAirbnbConnectViewController.m:122:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://www.airbnb.com/"]];
Sezam/AGAirbnbConnectViewController.m:152:    if ([segue.identifier isEqualToString:@"airbnbConnectToAirbnbMapping"]) {
Sezam/AGSmartAlertChooseEventView.m:62:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSmartAlertChooseEventView.m:63:    self.titleLabel.text = @"CHOOSE AN EVENT";
Sezam/AGSmartAlertChooseEventView.m:80:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSmartAlertChooseEventView.m:86:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGDoorbellOTASetupViewController.m:52:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellOTASetupViewController.m:56:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellOTASetupViewController.m:60:    NSArray *strings = @[ @"Receive notifications and captured video when motion is detected at your door.",  @"See and speak with visitors who ring your doorbell - and let them in using your August Smart Lock!", @"Use August Video Recording to view archived videos of motion events and doorbell calls.", @"Download and share memorable video clips for later viewing." ];
Sezam/AGDoorbellOTASetupViewController.m:62:    NSDictionary *options = @{@"Image Content Mode": [NSNumber numberWithInt: UIViewContentModeScaleAspectFill]};
Sezam/AGDoorbellOTASetupViewController.m:74:    if (messageData[@"status"]) {
Sezam/AGDoorbellOTASetupViewController.m:75:        NSString *status = messageData[@"status"];
Sezam/AGDoorbellOTASetupViewController.m:76:        if ([status isEqual:@"online"]) {
Sezam/AGDoorbellOTASetupViewController.m:81:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellOTASetupViewController.m:83:            if ([status isEqualToString:@"ota_update_initiate"]) {
Sezam/AGDoorbellOTASetupViewController.m:85:            } else if ([status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellOTASetupViewController.m:86:                NSDictionary *data = (NSDictionary *)messageData[@"data"];
Sezam/AGDoorbellOTASetupViewController.m:87:                NSString *progressString = (NSString *)data[@"progress"];
Sezam/AGDoorbellOTASetupViewController.m:92:                self.progressLabel.text = [NSString stringWithFormat:@"Updating firmware… %@%% complete.",progress.stringValue];
Sezam/AGDoorbellOTASetupViewController.m:95:                self.progressLabel.text = @"Rebooting doorbell...";
Sezam/AGDoorbellOTASetupViewController.m:123:            if ([doorbell.firmwareVersion containsString:@"RC68"]) {
Sezam/AGDoorbellOTASetupViewController.m:133:    UIAlertController *otaFailureAlert = [UIAlertController alertControllerWithTitle:@"This Is Taking a While!" message:@"Try taking the Doorbell Cam off the mounting plate and placing it directly next to your router. This should speed up the update process." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellOTASetupViewController.m:134:    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok, I’ve placed the Doorbell Cam next to my router"
Sezam/AGDoorbellOTASetupViewController.m:138:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellOTASetupViewController.m:160:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellOTASetupViewController.m:197:        segueIdentifier = @"DoorbellOTAToDoorbellDiagnostics";
Sezam/AGDoorbellOTASetupViewController.m:199:        segueIdentifier = @"DoorbellOTAToSetupSuccess";
Sezam/AGDoorbellOTASetupViewController.m:206:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellOTASetupViewController.m:207:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellOTASetupViewController.m:211:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellOTASetupViewController.m:229:    if ([segue.identifier isEqualToString:@"DoorbellOTAToDoorbellDiagnostics"]) {
Sezam/AGDoorbellOTASetupViewController.m:234:    if ([segue.identifier isEqualToString:@"DoorbellOTAToSetupSuccess"]) {
Sezam/AGManualCalibrateViewController.m:137:    self.locationLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:153:        [self.actionButton setTitle:[@"Continue" uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:157:        [self.actionButton setTitle:[@"Ok" uppercaseString] forState:UIControlStateNormal];
Sezam/AGManualCalibrateViewController.m:221:    self.infoLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:293:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGManualCalibrateViewController.m:328:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGManualCalibrateViewController.m:329:            AGHomeKitSetupNavController *hkSetup = [storyboard instantiateViewControllerWithIdentifier:@"HomeKitNav"];
Sezam/AGManualCalibrateViewController.m:332:            ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:hkSetup];
Sezam/AGManualCalibrateViewController.m:339:            self.finalChecksAlertView = [[UIAlertView alloc] initWithTitle:@"Performing final checks..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGManualCalibrateViewController.m:410:    self.locationLabel.text = @"";
Sezam/AGManualCalibrateViewController.m:482:                    targetCCW.group =  @"CCW";
Sezam/AGManualCalibrateViewController.m:483:                    stallCCW.group = @"CCW";
Sezam/AGManualCalibrateViewController.m:492:            setTargetCW.group = @"CW";
Sezam/AGManualCalibrateViewController.m:493:            setStall.group = @"CW";
Sezam/AGManualCalibrateViewController.m:529:            errorTitle = @"Lock Overheated";
Sezam/AGManualCalibrateViewController.m:530:            errorMessage = @"Your lock has overheated.";
Sezam/AGManualCalibrateViewController.m:534:            errorTitle = @"Low Batteries";
Sezam/AGManualCalibrateViewController.m:535:            errorMessage = @"Your lock batteries are low. Please replace the batteries and recalibrate.";
Sezam/AGManualCalibrateViewController.m:539:            errorTitle = @"Lock Jammed";
Sezam/AGManualCalibrateViewController.m:540:            errorMessage = @"Your lock is jammed. It may be obstructed and need to be recalibrated.";
Sezam/AGManualCalibrateViewController.m:544:            errorTitle = @"Calibration Error";
Sezam/AGManualCalibrateViewController.m:545:            errorMessage = @"Calibration Error\n\n1. Make sure that your deadbolt is not obstructed and can easily slide in to your door jamb.\n2. Tap settings and calibrate your lock.";
Sezam/AGManualCalibrateViewController.m:549:            errorTitle = @"Calibration Error";
Sezam/AGManualCalibrateViewController.m:568:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"Recalibrate"
Sezam/AGManualCalibrateViewController.m:574:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"Quit Calibration" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGManualCalibrateViewController.m:681:        [self performSegueWithIdentifier:@"BackToLockSettings" sender:self];
Sezam/AGManualCalibrateViewController.m:686:            if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGOnboardingChecklistViewController"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:39:        self.headerTitleLabel.text = @"SETUP DOORBELL";
Sezam/AGDoorbellRunDiagnosticsViewController.m:101:    if (messageData[@"telemetry"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:102:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellRunDiagnosticsViewController.m:108:    if ([[messageData objectForKey:@"status"] isEqualToString:@"download_speed_test_completed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:109:        float downloadSpeedfloat = [[messageData objectForKey:@"speed_mbps"] floatValue];
Sezam/AGDoorbellRunDiagnosticsViewController.m:115:    if ([[messageData objectForKey:@"status"] isEqualToString:@"upload_speed_test_completed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:116:        float uploadSpeedfloat = [[messageData objectForKey:@"speed_mbps"] floatValue];
Sezam/AGDoorbellRunDiagnosticsViewController.m:122:    if ([[messageData objectForKey:@"status"] isEqualToString:@"speed_test_failed"]) {
Sezam/AGDoorbellRunDiagnosticsViewController.m:146:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:152:    NSDictionary *downloadTestCommand = @{@"status":@"speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:158:    NSDictionary *uploadTestCommand = @{@"status":@"upload_speed_test", @"origin":@"iOS"};
Sezam/AGDoorbellRunDiagnosticsViewController.m:169:            self.progressLabel.text = @"Checking voltage and Wi-Fi signal…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:175:            self.progressLabel.text = @"Running Download speed test…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:181:            self.progressLabel.text = @"Running speed test…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:187:                self.progressLabel.text = @"Checking lock connection…";
Sezam/AGDoorbellRunDiagnosticsViewController.m:203:            [self performSegueWithIdentifier:@"RunDiagnosticsToResults" sender:nil];
Sezam/AGDoorbellRunDiagnosticsViewController.m:212:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRunDiagnosticsViewController.m:213:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellRunDiagnosticsViewController.m:217:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellRunDiagnosticsViewController.m:235:    if ([segue.identifier isEqualToString:@"RunDiagnosticsToResults"]) {
Sezam/AGSmartAlertListController.m:94:            self.view.centerLabel.text = @"Let’s add some Smart Alerts! Tap the button below to get started.";
Sezam/AGSmartAlertListController.m:104:            self.view.ctaLabel.text = @"You will not receive some Smart Alerts without a Wi-Fi bridge.";
Sezam/AGSmartAlertListController.m:105:            [self.view.ctaButton setTitle:@"LEARN\nMORE" forState:UIControlStateNormal];
Sezam/AGSmartAlertListController.m:113:            self.view.ctaLabel.text = @"Your Wi-Fi bridge is currently offline. You will not receive some Smart Alerts until it is back online.";
Sezam/AGSmartAlertListController.m:133:            [self showErrorAlertWithMessage:@"There was an error loading smart alerts. Please try again later."];
Sezam/AGSmartAlertListController.m:205:    NSArray *doorUserIDs = @[@"onetouchlock", @"manuallock", @"autorelock", @"door_open"];
Sezam/AGSmartAlertListController.m:216:        BOOL shouldDisplayNotification = notificationRuleIsDisplayable || [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];//In debug mode, show the notification even if it can't be parsed
Sezam/AGSmartAlertListController.m:223:        alertDescription = alertDescription ? alertDescription : @"Error parsing SmartAlert. Please try again later.";
Sezam/AGSmartAlertListController.m:238:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertListController.m:239:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGUtilityTests.m:33:    lock.objectId = @"0";
Sezam/AGUtilityTests.m:36:    user1.objectId = @"1";
Sezam/AGUtilityTests.m:37:    user1.type = @"superuser";
Sezam/AGUtilityTests.m:40:    user2.objectId = @"2";
Sezam/AGUtilityTests.m:41:    user2.type = @"superuser";
Sezam/AGUtilityTests.m:44:    user3.objectId = @"3";
Sezam/AGUtilityTests.m:45:    user3.type = @"user";
Sezam/AGUtilityTests.m:47:    lock.users = @{@"1":user1, @"2":user2, @"3":user3};
Sezam/AGUtilityTests.m:50:    pinEntry1.userID = @"4";
Sezam/AGUtilityTests.m:51:    pinEntry1.firstName = @"User";
Sezam/AGUtilityTests.m:52:    pinEntry1.lastName = @"Four";
Sezam/AGUtilityTests.m:64:    XCTAssert([((AGUser *)owners[0]).objectId isEqual:@"1"], @"Expected user 1 to be an owner");
Sezam/AGUtilityTests.m:65:    XCTAssert([((AGUser *)owners[1]).objectId isEqual:@"2"], @"Expected user 2 to be an owner");
Sezam/AGUtilityTests.m:66:    XCTAssert([((AGUser *)guests[0]).objectId isEqual:@"3"], @"Expected user 3 to be a guest");
Sezam/AGUtilityTests.m:67:    XCTAssert([((AGUser *)pinOnlyUsers[0]).objectId isEqual:@"4"], @"Expected user 4 to be a pin only user");
Sezam/AGUtilityTests.m:75:    NSSet *expectedAllUsersObjectIDs =  [NSSet setWithArray:@[@"1", @"2", @"3", @"4"]];
Sezam/AGUtilityTests.m:78:    XCTAssert([allUserObjectIDs isEqual:expectedAllUsersObjectIDs], @"All users should equal the expected users");
Sezam/AGVideoPlayerViewController.m:21:    ///    NSURL *streamURL = [NSURL URLWithString:@"https://storage.googleapis.com/aug-bucket-test/20160714002752_proglist.m3u8"];
Sezam/AGVideoPlayerViewController.m:22:    NSURL *streamURL = [NSURL URLWithString:@"http://10.0.29.59:8000/20160714224745_playlist.m3u8"];
Sezam/AGVideoPlayerViewController.m:67:    self.videoPlayer = [[IVVideoPlayerViewController alloc] initWithURL:@"http://10.0.29.59:8000/20160714224745_playlist.m3u8"
Sezam/AGDoorbellBrightnessPopoverView.m:45:    self.floodBrightnessLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13.0];
Sezam/AGDoorbellBrightnessPopoverView.m:47:    self.floodBrightnessLabel.text = @"FLOOD LIGHT BRIGHTNESS";
Sezam/AGDoorbellBrightnessPopoverView.m:62:    [self.offButton setTitle:@"OFF" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:65:    [self.lowButton setTitle:@"LOW" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:68:    [self.mediumButton setTitle:@"MED" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:71:    [self.highButton setTitle:@"HIGH" forState:UIControlStateNormal];
Sezam/AGDoorbellBrightnessPopoverView.m:231:    button.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13.0];
Sezam/AGDoorbellBrightnessPopoverView.m:250:    NSAssert(false, @"Buttons sent to userBrightnessForButton: should be a button of AGDoorbellBrightnessPopoverView");
Sezam/AGGeoRegionDurationTracker.m:26:    return @"regionID";
Sezam/AGGeoRegionDurationTracker.m:147:    return [NSString stringWithFormat:@"AGGeoRegionDurationTracker-%@", self.region.identifier];
Sezam/AGKeypadSettingsViewController.m:86:    [identifiers addObject:@"KeypadTitleCell"];
Sezam/AGKeypadSettingsViewController.m:88:    [identifiers addObject:@"KeypadEnabled"];
Sezam/AGKeypadSettingsViewController.m:95:        EDSemver *minFirmwareVersion = [[EDSemver alloc] initWithString:@"2.1.99"]; // 2.2.0 and above supports power savings mode
Sezam/AGKeypadSettingsViewController.m:101:    [identifiers addObject:@"KeypadOneTouch"];
Sezam/AGKeypadSettingsViewController.m:105:        [identifiers addObject:@"KeypadOneTouchNotifications"];
Sezam/AGKeypadSettingsViewController.m:112:        [identifiers addObject:@"KeypadPowerSaving"];
Sezam/AGKeypadSettingsViewController.m:118:    [identifiers addObject:@"KeypadBattery"];
Sezam/AGKeypadSettingsViewController.m:120:    [identifiers addObject:@"KeypadSerial"];
Sezam/AGKeypadSettingsViewController.m:122:    [identifiers addObject:@"KeypadTroubleshooting"];
Sezam/AGKeypadSettingsViewController.m:124:    [identifiers addObject:@"KeypadDisconnect"];
Sezam/AGKeypadSettingsViewController.m:126:    [identifiers addObject:@"KeypadFirmware"];
Sezam/AGKeypadSettingsViewController.m:231:        cell.label.text = [NSString stringWithFormat:@"FW Version %@", self.agLock.associatedKeypad.currentFirmwareVersion];
Sezam/AGKeypadSettingsViewController.m:255:                    UIAlertView *keypadEnabledAlert = [[UIAlertView alloc] initWithTitle:@"Keypad Disabled" message:@"Toggling \"Keypad Enabled\" off temporarily disables all entry codes." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:295:                    UIAlertView *keypadEnabledAlert = [[UIAlertView alloc] initWithTitle:@"Power Saving Enabled" message:@"Toggling Power Saving Mode on will disable your keypad’s motion triggered backlight in order to preserve battery life." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:331:    NSString *newStateStr = newState ? @"both" : @"neither";
Sezam/AGKeypadSettingsViewController.m:335:    user.objectId = @"onetouchlock";
Sezam/AGKeypadSettingsViewController.m:367:            AGKeypadDisconnectViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"KeypadDisconnect"];
Sezam/AGKeypadSettingsViewController.m:374:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"You must be connected to the lock to disconnect your keypad." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGKeypadSettingsViewController.m:414:    [AGLock getNotificationStateForLock:self.agLock.objectId user:@"onetouchlock" responseBlock:^(AGNotificationState state) {
Sezam/AGKeypadSettingsViewController.m:469:            oper.label = @"Clear data";
Sezam/AGKeypadSettingsViewController.m:482:        oper.label = @"Get Keypad Enabled";
Sezam/AGKeypadSettingsViewController.m:492:        oper.label = @"Get Backlight";
Sezam/AGKeypadSettingsViewController.m:502:        oper.label = @"Get One Touch";
Sezam/AGRemoteLock.m:33:static NSString* kAGAnalyticsDiaryCategory = @"AmazonReview";
Sezam/AGRemoteLock.m:35:static NSString* kRemoteEventKey = @"remoteEvent";
Sezam/AGRemoteLock.m:54:    if ([bridge.model isEqualToString:@"august-connect"]) {
Sezam/AGRemoteLock.m:56:    } else if ([bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGRemoteLock.m:100:    NSDictionary *responseDetails = @{@"AppResignedActive":[NSNumber numberWithBool:YES]};
Sezam/AGRemoteLock.m:223:            bridgeType =  @"UnknownBridge";
Sezam/AGRemoteLock.m:226:            bridgeType = @"ConnectBridge";
Sezam/AGRemoteLock.m:229:            bridgeType = @"DoorbellBridge";
Sezam/AGRemoteLock.m:232:            bridgeType = @"HomekitBridge";
Sezam/AGRemoteLock.m:235:            bridgeType = @"UnknownBridge";
Sezam/AGRemoteLock.m:247:            requestType = @"StartRequestStatus";
Sezam/AGRemoteLock.m:250:            requestType = @"StartRequestLock";
Sezam/AGRemoteLock.m:253:            requestType = @"StartRequestUnlock";
Sezam/AGRemoteLock.m:256:            requestType = @"UnknownRequest";
Sezam/AGRemoteLock.m:269:            requestSuccessType = @"RequestStatusSuccess";
Sezam/AGRemoteLock.m:272:            requestSuccessType = @"RequestLockSuccess";
Sezam/AGRemoteLock.m:275:            requestSuccessType = @"RequestUnlockSuccess";
Sezam/AGRemoteLock.m:278:            requestSuccessType = @"RequestUnknownSuccess";
Sezam/AGRemoteLock.m:291:            requestFailureType = @"RequestStatusFailed";
Sezam/AGRemoteLock.m:294:            requestFailureType = @"RequestLockFailed";
Sezam/AGRemoteLock.m:297:            requestFailureType = @"RequestUnlockFailed";
Sezam/AGRemoteLock.m:300:            requestFailureType = @"RequestUnknownFailed";
Sezam/AGRemoteLock.m:313:            bridgeModeString = @"BridgeModeNone";
Sezam/AGRemoteLock.m:316:            bridgeModeString = @"BridgeModeSlow";
Sezam/AGRemoteLock.m:319:            bridgeModeString = @"BridgeModeFast";
Sezam/AGRemoteLock.m:322:            bridgeModeString = @"BridgeModeHyper";
Sezam/AGRemoteLock.m:325:            bridgeModeString = @"BridgeModeHomeKit";
Sezam/AGRemoteLock.m:343:    NSString *logMessage = [NSString stringWithFormat:@"%@, Remote status = '%@'", bridgeType, status];
Sezam/AGRemoteLock.m:353:        bleConnectedString = @"YES";
Sezam/AGRemoteLock.m:355:        bleConnectedString = @"NO";
Sezam/AGRemoteLock.m:362:    NSString *logMessage = [NSString stringWithFormat:@"%@, BLEConnected = '%@'", bridgeType, [self bleConnectedString]];
Sezam/AGRemoteLock.m:421:    NSNumber *homekitDelay =[AGUtility getAppFeatureNumber:@"homekitDelay"];
Sezam/AGRemoteLock.m:534:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:554:    NSString *status = [response treatNSNullAsNilObjectForKey:@"status"];
Sezam/AGRemoteLock.m:555:    if ([status isEqual:@"none"]) { // Logic for Homekit Response Failure
Sezam/AGRemoteLock.m:568:                if ([error.userInfo objectForKey:@"pubnubError"]) {
Sezam/AGRemoteLock.m:569:                    NSDictionary *pubnubError = (NSDictionary *)[error.userInfo objectForKey:@"pubnubError"];
Sezam/AGRemoteLock.m:570:                    httpErrorCode = [[pubnubError objectForKey:@"statusCode"] longValue];
Sezam/AGRemoteLock.m:572:                    NSHTTPURLResponse *httpResponse = [error.userInfo objectForKey:@"response"];
Sezam/AGRemoteLock.m:578:        responseDetails = @{@"ErrorCode":[NSNumber numberWithLong:httpErrorCode]};
Sezam/AGRemoteLock.m:586:        if ([response objectForKey:@"info"]) {
Sezam/AGRemoteLock.m:587:            NSDictionary *info = (NSDictionary *)[response objectForKey:@"info"];
Sezam/AGRemoteLock.m:588:            if ([info objectForKey:@"context"]) {
Sezam/AGRemoteLock.m:589:                NSDictionary *context = (NSDictionary *)[info objectForKey:@"context"];
Sezam/AGRemoteLock.m:590:                if ([context objectForKey:@"transactionID"]) {
Sezam/AGRemoteLock.m:591:                    [responseDetails setObject:[context objectForKey:@"transactionID"] forKey:@"transactionID"];
Sezam/AGRemoteLock.m:594:            if ([info objectForKey:@"action"]) {
Sezam/AGRemoteLock.m:595:                [responseDetails setObject:[info objectForKey:@"action"] forKey:@"action"];
Sezam/AGRemoteLock.m:598:        if ([response objectForKey:@"totalTime"]) {
Sezam/AGRemoteLock.m:599:            float totalTimeFloat = [[response objectForKey:@"totalTime"] floatValue];
Sezam/AGRemoteLock.m:601:            [responseDetails setObject:totalTime forKey:@"TotalTimeByACS"];
Sezam/AGRemoteLock.m:605:            if ([[responseDetails objectForKey:@"action"] isEqualToString:@"status"]) {
Sezam/AGRemoteLock.m:618:            if ([doorState isEqual:@"kAugDoorState_Init"]) {
Sezam/AGRemoteLock.m:620:            }else if ([doorState isEqual:@"kAugDoorState_Closed"]) {
Sezam/AGRemoteLock.m:622:            }else if ([doorState isEqual:@"kAugDoorState_Ajar"]) {
Sezam/AGRemoteLock.m:624:            }else if ([doorState isEqual:@"kAugDoorState_Open"]) {
Sezam/AGRemoteLock.m:626:            }else if ([doorState isEqual:@"kAugDoorState_Unknown"]) {
Sezam/AGRemoteLock.m:641:        else if ([status isEqual:@"DoorStateChanged"]) {
Sezam/AGRemoteLock.m:646:            NSAssert(false, @"Remote Status '%@' is not recognized by RemoteOperateController.startStatusRequest", status);
Sezam/AGRemoteLock.m:673:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:700:    BOOL isAsync = [AGUtility disableWithAppFeature:@"disableRemoteAsync"];
Sezam/AGRemoteLock.m:868:        status = @"none";
Sezam/AGRemoteLock.m:870:    NSDictionary *response = @{@"status":status};
Sezam/AGRemoteLock.m:891:        if ([messageData objectForKey:@"error"]) {
Sezam/AGRemoteLock.m:892:            NSDictionary *pubnubError = (NSDictionary *)[messageData objectForKey:@"error"];
Sezam/AGRemoteLock.m:893:            NSDictionary *userInfo = @{@"pubnubError":pubnubError};
Sezam/AGRemoteLock.m:910:    if ([callingUserIdString isEqualToString:@"manuallock"] || [callingUserIdString isEqualToString:@"manualunlock"] || [lockStatusString isEqualToString:kRemoteLockedKey] || [lockStatusString isEqualToString:kRemoteUnLockedKey] || [lockStatusString isEqualToString:kRemoteLockingKey] || [lockStatusString isEqualToString:kRemoteUnLockingKey]) {
Sezam/AGRemoteLock.m:922:        if ([messageData objectForKey:@"error"]) {
Sezam/AGRemoteLock.m:923:            NSDictionary *error = (NSDictionary *)[messageData objectForKey:@"error"];
Sezam/AGRemoteLock.m:924:            if ([error objectForKey:@"code"]) {
Sezam/AGRemoteLock.m:925:                errorCode = [[error objectForKey:@"code"] longValue];
Sezam/AGRemoteLock.m:943:    BOOL permitAsyncTimeout = [AGUtility disableWithAppFeature:@"disableAsyncTimeOutForRemoteOps"];
Sezam/AGRemoteLock.m:964:                               @"pubnubError": @{
Sezam/AGRemoteLock.m:965:                                                @"statusCode": @402
Sezam/AGRemoteLock.m:979:    if (([callingUserId isEqualToString:@"manuallock"]) || ([callingUserId isEqualToString:@"manualunlock"])) {
Sezam/AGRemoteLock.m:980:        if ([callingUserId isEqualToString:@"manuallock"]) {
Sezam/AGRemoteLock.m:983:        if ([callingUserId isEqualToString:@"manualunlock"]) {
Sezam/AGRemoteLock.m:1225:    NSString *agDiaryEvent = [NSString stringWithFormat:@"Request%@Failed",actionType];
Sezam/AGRemoteLock.m:1228:        errorCode = @"000";
Sezam/AGRemoteLock.m:1230:        errorCode = [NSString stringWithFormat:@"%lu",httpErrorCode];
Sezam/AGRemoteLock.m:1236:        bridgeFirmwareVersion = @"NA";
Sezam/AGRemoteLock.m:1240:    NSString *failureCodeWithBridgeModelAndFirmWareVersion = [NSString stringWithFormat:@"%@+%@+%@", errorCode, bridgeModel, bridgeFirmwareVersion];
Sezam/AGRemoteLock.m:1243:    NSString *mergedDiaryEventForGoogleAnalytics = [NSString stringWithFormat:@"%@+%@",agDiaryEvent, failureCodeWithBridgeModelAndFirmWareVersion];
Sezam/AGRemoteLock.m:1245:    mergedDiaryEventForGoogleAnalytics = [mergedDiaryEventForGoogleAnalytics stringByReplacingOccurrencesOfString:@"." withString:@"+"];
Sezam/AGRemoteLock.m:1246:    mergedDiaryEventForGoogleAnalytics = [mergedDiaryEventForGoogleAnalytics stringByReplacingOccurrencesOfString:@"-" withString:@"+"];
Sezam/AGRemoteLock.m:1254:    BOOL showRBSError = [AGUtility checkForAppFeature:@"showrbserror"];
Sezam/AGRemoteLock.m:1261:            label.text = [NSString stringWithFormat:@"RBS TIMED OUT on %@", doorName];
Sezam/AGRemoteLock.m:1263:            label.text = [NSString stringWithFormat:@"RBS ERRROR %d on %@", errorCode, doorName];
Sezam/AGRemoteLock.m:1267:        label.font = [UIFont fontWithName:@"ProximaNova" size:30.0];
Sezam/AGRemoteLock.m:1283:    NSDictionary *connectSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"ConnectSuccessMetics"];
Sezam/AGRemoteLock.m:1285:        NSNumber *successCount = (NSNumber *)connectSuccessMetrics[@"successCount"];
Sezam/AGRemoteLock.m:1286:        NSNumber *failureCount = (NSNumber *)connectSuccessMetrics[@"failureCount"];
Sezam/AGRemoteLock.m:1300:    NSDictionary *updatedSuccessMetrics = [NSDictionary dictionaryWithObjectsAndKeys:successCount, @"successCount", failureCount, @"failureCount", nil];
Sezam/AGRemoteLock.m:1301:    [[NSUserDefaults standardUserDefaults] setObject:updatedSuccessMetrics forKey:@"ConnectSuccessMetics"];
Sezam/AGRemoteLock.m:1316:    [remoteOperationDetails setObject:[NSNumber numberWithBool:self.connectedByBLE] forKey:@"ConnectedByBLE"];
Sezam/AGRemoteLock.m:1318:    [remoteOperationDetails setObject:bridgeMode forKey:@"BridgeMode"];
Sezam/AGRemoteLock.m:1325:        if ([responseDetails objectForKey:@"action"]) {
Sezam/AGRemoteLock.m:1326:            if ([[responseDetails objectForKey:@"action"] isEqualToString:@"status"]) {
Sezam/AGRemoteLock.m:1352:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGRemoteLock.m:1355:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGRemoteLock.m:1362:                AGAnalyticsDiaryInfo(@"ConnectEvaluateSuccessRate", [NSString stringWithFormat:@"%f", connectSuccessRate]);
Sezam/AGRemoteLock.m:1370:                    AGAnalyticsDiaryInfo(@"ConnectShowAlertMessage", @"No");
Sezam/AGWeeklyRecurrenceSchedule.m:39:    iCalSchedule = [iCalSchedule stringByReplacingOccurrencesOfString:@"TZID=/" withString:@"TZID="];
Sezam/AGWeeklyRecurrenceSchedule.m:52:    NSAssert(mxlIsSynchronouslyParsing, @"MXL is no longer synchrously parsing and this logic needs to be updated");
Sezam/AGWeeklyRecurrenceSchedule.m:64:        NSDateFormatter *dateFormatter = [event valueForKey:@"dateFormatter"];
Sezam/AGWeeklyRecurrenceSchedule.m:124:                                             @"SU":@(AGDay_Sunday),
Sezam/AGWeeklyRecurrenceSchedule.m:125:                                             @"MO":@(AGDay_Monday),
Sezam/AGWeeklyRecurrenceSchedule.m:126:                                             @"TU":@(AGDay_Tuesday),
Sezam/AGWeeklyRecurrenceSchedule.m:127:                                             @"WE":@(AGDay_Wednesday),
Sezam/AGWeeklyRecurrenceSchedule.m:128:                                             @"TH":@(AGDay_Thursday),
Sezam/AGWeeklyRecurrenceSchedule.m:129:                                             @"FR":@(AGDay_Friday),
Sezam/AGWeeklyRecurrenceSchedule.m:130:                                             @"SA":@(AGDay_Saturday),
Sezam/AGTestCodeViewController.m:53:    CABasicAnimation *scaleAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
Sezam/AGTestCodeViewController.m:60:    [self.codeTextLabel.layer addAnimation:scaleAnimation forKey:@"scaleAnimation"];
Sezam/AGTestCodeViewController.m:94:        UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadGiveEntryCodes"];
Sezam/AGHomeKitPrimaryHomeViewController.m:75:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"HKHouseCell"];
Sezam/AGSecretSupportViewController.m:33:    [AGUtility sendLogs:self toEmail:@"support@august.com"];
Sezam/AGAddLockSelectLockViewController.m:148:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:160:        NSString *typeCheck = [advertisementData objectForKey:@"kCBAdvDataLocalName"];
Sezam/AGAddLockSelectLockViewController.m:163:            lockType = @"Unknown";
Sezam/AGAddLockSelectLockViewController.m:164:        } else if ([typeCheck isEqualToString:@"Aug"]) {
Sezam/AGAddLockSelectLockViewController.m:165:            lockType = @"Helios/Jupiter";
Sezam/AGAddLockSelectLockViewController.m:166:        } else if ([typeCheck hasPrefix:@"L3"]) {
Sezam/AGAddLockSelectLockViewController.m:167:            lockType = @"Europa";
Sezam/AGAddLockSelectLockViewController.m:168:        } else if ([typeCheck hasPrefix:@"L4"]) {
Sezam/AGAddLockSelectLockViewController.m:169:            lockType = @"Callisto";
Sezam/AGAddLockSelectLockViewController.m:171:            lockType = @"Unknown";
Sezam/AGAddLockSelectLockViewController.m:173:        NSDictionary *lockDictionary = @{@"lockId":lock.name, @"lockType":lockType};
Sezam/AGAddLockSelectLockViewController.m:194:    self.bluetoothError = [error.userInfo objectForKey:@"Error"];
Sezam/AGAddLockSelectLockViewController.m:214:        NSString *lockID = [lockDictionary objectForKey:@"lockId"];
Sezam/AGAddLockSelectLockViewController.m:215:        NSString *lockType = [lockDictionary objectForKey:@"lockType"];
Sezam/AGAddLockSelectLockViewController.m:223:                if ((error != nil) && ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGAddLockSelectLockViewController.m:242:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGAddLockSelectLockViewController.m:245:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Server Timed Out"
Sezam/AGAddLockSelectLockViewController.m:246:                                                                                message:[NSString stringWithFormat:@"The server timed out on at least one request.\n\nBTLE visible locks: %ld\nPaired locks: %ld\nUnpaired locks: %ld\nLocks with server timeout: %ld", (long)self.numberOfLocksLoaded, (long)self.numberOfPairedLocks, (long)self.unpairedLocks.count, (long)self.numberOfLockRefreshTimeouts]
Sezam/AGAddLockSelectLockViewController.m:248:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:266:        [self performSegueWithIdentifier:@"selectLockToDebugSelectLock" sender:sortedVisibleLocksArray];
Sezam/AGAddLockSelectLockViewController.m:283:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:290:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:291:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"Call August" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGAddLockSelectLockViewController.m:292:            NSURL *augustSupportURL = [NSURL URLWithString:@"tel://8442848781"];
Sezam/AGAddLockSelectLockViewController.m:302:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:309:        [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:343:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGAddLockSelectLockViewController.m:372:                        [self performSegueWithIdentifier:@"selectLockToNoHouse" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:380:                        [self performSegueWithIdentifier:@"selectLockToNoHouse" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:387:                        [self performSegueWithIdentifier:@"selectLockToAddLockName" sender:[self.unpairedLocks objectAtIndex:0]];
Sezam/AGAddLockSelectLockViewController.m:395:                [AGUtility showError:@"Unable to load Houses." inViewController:self];
Sezam/AGAddLockSelectLockViewController.m:409:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAddLockSelectLockViewController.m:417:    self.scanningLabel.text = @"Selecting Lock...";
Sezam/AGAddLockSelectLockViewController.m:434:    if ([segue.identifier isEqualToString:@"selectLockToNoHouse"]) {
Sezam/AGAddLockSelectLockViewController.m:438:        [lockSetupAddHouseViewController setLockName:@""];
Sezam/AGAddLockSelectLockViewController.m:439:    } else if ([segue.identifier isEqualToString:@"selectLockToAddLockName"]) {
Sezam/AGAddLockSelectLockViewController.m:443:    } else if ([segue.identifier isEqualToString:@"selectLockToBuyLock"]) {
Sezam/AGAddLockSelectLockViewController.m:444:        [segue.destinationViewController setUrlToLoad:[NSURL URLWithString:@"http://www.august.com/?reserve=true"]];
Sezam/AGAddLockSelectLockViewController.m:445:    } else if ([segue.identifier isEqualToString:@"selectLockToDebugSelectLock"]){
Sezam/AGUtilityCommon.m:19:    return [environment objectForKey:@"TESTING"] != nil;
Sezam/AGUtilityCommon.m:85:        [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGUtilityCommon.m:88:    [dateFormatter setDateFormat:@"h:mm a"];
Sezam/AGUtilityCommon.m:91:    NSString *finalStr = [NSString stringWithFormat:@"%@ %@", dateStr, timeStr];
Sezam/AGUtilityCommon.m:93:    if ([dateStr.uppercaseString isEqual:@"TODAY"]||[dateStr.uppercaseString isEqual:@"YESTERDAY"]) {
Sezam/AGUtilityCommon.m:94:        finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:103:        [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGUtilityCommon.m:106:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:109:    NSString *finalStr = [NSString stringWithFormat:@"%@ %@", dateStr, timeStr];
Sezam/AGUtilityCommon.m:119:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:122:    NSString *finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:130:    [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGUtilityCommon.m:133:    NSString *finalStr = [NSString stringWithFormat:@"%@", timeStr];
Sezam/AGUtilityCommon.m:139:    [dateFormatter setDateFormat:@"yyyy-MM-dd"];
Sezam/AGUtilityCommon.m:146:        return @"Today";
Sezam/AGUtilityCommon.m:149:        return @"Tomorrow";
Sezam/AGUtilityCommon.m:152:        return @"Yesterday";
Sezam/AGUtilityCommon.m:191:            statusLabelString = @"";
Sezam/AGUtilityCommon.m:194:            statusLabelString = @"Connecting...";
Sezam/AGUtilityCommon.m:197:            statusLabelString = @"Discovered";
Sezam/AGUtilityCommon.m:200:            statusLabelString = @"Connected";
Sezam/AGUtilityCommon.m:203:            statusLabelString = @"Lock Not Calibrated";
Sezam/AGUtilityCommon.m:206:            statusLabelString = @"Locked";
Sezam/AGUtilityCommon.m:209:            statusLabelString = @"Closed | Locked";
Sezam/AGUtilityCommon.m:212:            statusLabelString = @"Open | Locked";
Sezam/AGUtilityCommon.m:215:            statusLabelString = @"Unlocked";
Sezam/AGUtilityCommon.m:218:            statusLabelString = @"Closed | Unlocked";
Sezam/AGUtilityCommon.m:221:            statusLabelString = @"Open | Unlocked";
Sezam/AGUtilityCommon.m:224:            statusLabelString = @"Connecting Remotely...";
Sezam/AGUtilityCommon.m:227:            statusLabelString = @"Locking...";
Sezam/AGUtilityCommon.m:230:            statusLabelString = @"Unlocking...";
Sezam/AGUtilityCommon.m:248:            statusLabelString = @""; // We no longer show scanning for lock UI
Sezam/AGUtilityCommon.m:252:            statusLabelString = @"";
Sezam/AGUtilityCommon.m:318:            statusLabelString = @"";
Sezam/AGTemporaryAccessTableViewCell.m:27:    [dateFormatter setDateFormat:@"M/d/yy"];
Sezam/AGTemporaryAccessTableViewCell.m:35:    [timeOfDayFormatter setDateFormat:@"h:mm a"];
Sezam/AGAutoUnlockSetupBaseController.m:32:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Cancel Auto-Unlock Setup?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockSetupBaseController.m:33:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel Setup" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockSetupBaseController.m:37:    [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Setup" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeychainViewController.m:66:	if ([identifier isEqualToString:@"locksToHouses"])
Sezam/AGKeychainViewController.m:68:		ZoomOutSegue * zoomOutSegue = [[ZoomOutSegue alloc] initWithIdentifier:@"customUnwind" source:fromViewController destination:toViewController];
Sezam/AGKeychainViewController.m:119:            if ([error.domain isEqualToString:@"AGAuthError"]) {
Sezam/AGKeychainViewController.m:153:                    NSString *displayTemperature = @"";
Sezam/AGKeychainViewController.m:158:                        displayTemperature = [NSString stringWithFormat:@"%@°", [objects objectAtIndex:0]];
Sezam/AGKeychainViewController.m:164:                            displayTemperature = [NSString stringWithFormat:@"%@°", [objects objectAtIndex:0]];
Sezam/AGKeychainViewController.m:170:                            displayTemperature = [NSString stringWithFormat:@"%@°-%@°", [sortedTemps objectAtIndex:0], [sortedTemps objectAtIndex:(objects.count-1)]];
Sezam/AGKeychainViewController.m:208:    BOOL debugMode = [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
Sezam/AGKeychainViewController.m:212:        if ([baseURL isEqualToString:@"https://production.august.com"] || [baseURL isEqualToString:@"https://api-production.august.com"]) {
Sezam/AGKeychainViewController.m:213:            serverLabelText = @"Prod";
Sezam/AGKeychainViewController.m:215:        } else if ([baseURL isEqualToString:@"https://staging.august.com"]) {
Sezam/AGKeychainViewController.m:216:            serverLabelText = @"Staging";
Sezam/AGKeychainViewController.m:218:        } else if ([baseURL isEqualToString:@"https://api-dev-aws.august.com"]) {
Sezam/AGKeychainViewController.m:219:            serverLabelText = @"Api-Dev-AWS";
Sezam/AGKeychainViewController.m:221:        } else if ([baseURL isEqualToString:@"https://dev-jonathan.august.com"]) {
Sezam/AGKeychainViewController.m:222:            serverLabelText = @"Jonathan";
Sezam/AGKeychainViewController.m:224:        } else if ([baseURL isEqualToString:@"https://dev-justin.august.com"]) {
Sezam/AGKeychainViewController.m:225:            serverLabelText = @"Justin";
Sezam/AGKeychainViewController.m:227:        } else if ([baseURL isEqualToString:@"https://dev-dan.august.com"]) {
Sezam/AGKeychainViewController.m:228:            serverLabelText = @"Dan";
Sezam/AGKeychainViewController.m:230:        } else if ([baseURL isEqualToString:@"https://dev-ingo.august.com"]) {
Sezam/AGKeychainViewController.m:231:            serverLabelText = @"Ingo";
Sezam/AGKeychainViewController.m:233:        } else if ([baseURL isEqualToString:@"https://dev-phil.august.com"]) {
Sezam/AGKeychainViewController.m:234:            serverLabelText = @"Phil";
Sezam/AGKeychainViewController.m:236:        } else if ([baseURL isEqualToString:@"https://dev-ipalibo.august.com"]) {
Sezam/AGKeychainViewController.m:237:            serverLabelText = @"Ipalibo";
Sezam/AGKeychainViewController.m:239:        } else if ([baseURL isEqualToString:@"https://dev-etienne.august.com"]) {
Sezam/AGKeychainViewController.m:240:            serverLabelText = @"Etienne";
Sezam/AGKeychainViewController.m:242:        } else if ([baseURL isEqualToString:@"https://dev-sean.august.com"]) {
Sezam/AGKeychainViewController.m:243:            serverLabelText = @"Sean";
Sezam/AGKeychainViewController.m:246:            serverLabelText = @"Custom";
Sezam/AGKeychainViewController.m:290:            houseCell.label2.text = @"";
Sezam/AGKeychainViewController.m:324:                        //[self performSegueWithIdentifier:@"mainToKeyRing" sender:nil];
Sezam/AGKeychainViewController.m:387:    AGCollectionViewCell *cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGKeychainViewController.m:407:        cell.label.accessibilityIdentifier = @"house name";
Sezam/AGKeychainViewController.m:416:            cell.label2.text = @"";
Sezam/AGKeychainViewController.m:467:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGKeychainViewController.m:468:    UIViewController *vc = [storyboard instantiateViewControllerWithIdentifier:@"AddDeviceViewController"];
Sezam/AGKeychainViewController.m:480:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGKeychainViewController.m:481:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGKeychainViewController.m:521:    NSAssert(house, @"House=nil inside showHouse");
Sezam/AGKeychainViewController.m:525:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGKeychainViewController.m:526:        AGHouseTabBarViewController *houseTabBar =  [storyboard instantiateViewControllerWithIdentifier: @"TabBarWithNavHeader"];
Sezam/AGAutoUnlockSetupCompleteController.m:42:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupCompleteController.m:44:    NSString *title = @"Auto-Unlock Activated";
Sezam/AGAutoUnlockSetupCompleteController.m:45:    NSString *paragraph1 = @"You’re good to go! We’ll see you the next time you return home.";
Sezam/AGAutoUnlockSetupCompleteController.m:46:    NSString *paragraph2Part1 = @"Pro Tip: for best location detection, ";
Sezam/AGAutoUnlockSetupCompleteController.m:47:    NSString *paragraph2Part2 = @"please leave Wi-Fi turned on at all times.";
Sezam/AGAutoUnlockSetupCompleteController.m:50:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@\n\n%@%@", title, paragraph1, paragraph2Part1, paragraph2Part2];
Sezam/AGAutoUnlockSetupCompleteController.m:58:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupCompleteController.m:73:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupCompleteController.m:81:    [paragraph2Part2Attributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupCompleteController.m:89:    [self.view.actionButton setTitle:@"OK, GOT IT" forState:UIControlStateNormal];
Sezam/AGAutoUnlockPersistenceManager.m:28:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:31:    [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] setObject:updatedDict forKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:39:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:50:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:62:    NSDictionary *storedDict = [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] objectForKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:65:    [[AGAutoUnlockPersistenceUtility autoUnlockUserDefaults] setObject:updatedDict forKey:@"AGAutoUnlockPersistenceManagerStorage"];
Sezam/AGAutoUnlockPersistenceManager.m:73:                                                                                      @"lockID":record.lockID,
Sezam/AGAutoUnlockPersistenceManager.m:74:                                                                                      @"state":[NSNumber numberWithInteger:record.state],
Sezam/AGAutoUnlockPersistenceManager.m:76:                                                                                      @"enabled":[NSNumber numberWithInteger:record.enabled],
Sezam/AGAutoUnlockPersistenceManager.m:77:                                                                                      @"region":@{
Sezam/AGAutoUnlockPersistenceManager.m:78:                                                                                              @"lat":[NSString stringWithFormat:@"%f", record.region.center.latitude],
Sezam/AGAutoUnlockPersistenceManager.m:79:                                                                                              @"lon":[NSString stringWithFormat:@"%f", record.region.center.longitude],
Sezam/AGAutoUnlockPersistenceManager.m:80:                                                                                              @"radius":[NSString stringWithFormat:@"%f", record.region.radius]
Sezam/AGAutoUnlockPersistenceManager.m:82:                                                                                      @"shouldNotifyUserOfAutoUnlockRegionExit":@(record.shouldNotifyUserOfAutoUnlockRegionExit),
Sezam/AGAutoUnlockPersistenceManager.m:83:                                                                                      @"shouldNotifyUserOfSuccessfulUnlock":@(record.shouldNotifyUserOfSuccessfulUnlock)
Sezam/AGAutoUnlockPersistenceManager.m:87:        [dictionary setObject:record.lastRegionExitDate forKey:@"lastRegionExitDate"];
Sezam/AGAutoUnlockPersistenceManager.m:91:        [dictionary setObject:record.lastRegionExitDate forKey:@"lastSpuriousExitDate"];
Sezam/AGAutoUnlockPersistenceManager.m:101:    record.lockID = dict[@"lockID"];
Sezam/AGAutoUnlockPersistenceManager.m:103:    record.state = ((NSNumber *)dict[@"state"]).integerValue;
Sezam/AGAutoUnlockPersistenceManager.m:104:    record.lastRegionExitDate = ((NSDate *)dict[@"lastRegionExitDate"]);
Sezam/AGAutoUnlockPersistenceManager.m:105:    record.lastSpuriousExitDate = ((NSDate *)dict[@"lastSpuriousExitDate"]);
Sezam/AGAutoUnlockPersistenceManager.m:106:    record.enabled = ((NSNumber *)dict[@"enabled"]).integerValue;
Sezam/AGAutoUnlockPersistenceManager.m:108:    AGCircularGeoRegion *geoRegion = [[AGCircularGeoRegion alloc] initWithCenter:CLLocationCoordinate2DMake(((NSNumber *)dict[@"region"][@"lat"]).doubleValue, ((NSNumber *)dict[@"region"][@"lon"]).doubleValue) radius:((NSNumber *)dict[@"region"][@"radius"]).doubleValue identifier:record.lockID];
Sezam/AGAutoUnlockPersistenceManager.m:111:    record.shouldNotifyUserOfAutoUnlockRegionExit = ((NSNumber *)dict[@"shouldNotifyUserOfAutoUnlockRegionExit"]).boolValue;
Sezam/AGAutoUnlockPersistenceManager.m:112:    record.shouldNotifyUserOfSuccessfulUnlock = ((NSNumber *)dict[@"shouldNotifyUserOfSuccessfulUnlock"]).boolValue;
Sezam/AGDoorbellLockAssociationResultsViewController.m:24:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellLockAssociationResultsViewController.m:28:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellLockAssociationResultsViewController.m:34:        self.heroMessage.text = @"Congratulations! Your Doorbell Cam and Smart Lock have been synced.";
Sezam/AGDoorbellLockAssociationResultsViewController.m:38:        self.heroMessage.text = @"Your Doorbell Cam and Smart Lock have been synced, but we couldn’t connect to your lock.";
Sezam/AGActiveMonitoringUtilityTests.m:37:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:43:    XCTAssert([alertDescription isEqualToString:@"Alert me when the door is locked or unlocked manually between 6:00AM-9:00AM on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:47:    AGWeeklyRecurrenceSchedule *schedule = [[AGWeeklyRecurrenceSchedule alloc] initWithDays:[NSSet setWithArray:@[@(AGDay_Wednesday), @(AGDay_Friday)]] startTime:21600 endTime:32400 timeZone:[NSTimeZone timeZoneWithAbbreviation:@"EST"]];//6am-9am
Sezam/AGActiveMonitoringUtilityTests.m:50:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:56:    XCTAssert([alertDescription isEqualToString:@"Alert me when the door is locked or unlocked manually between 6:00AM-9:00AM EDT on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:62:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:66:    XCTAssert([alertDescription isEqualToString:@"Alert me any time the door is locked or unlocked manually"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:70:    AGWeeklyRecurrenceSchedule *schedule = [[AGWeeklyRecurrenceSchedule alloc] initWithDays:[NSSet setWithArray:@[@(AGDay_Wednesday), @(AGDay_Friday)]] startTime:21600 endTime:32400 timeZone:[NSTimeZone timeZoneWithAbbreviation:@"EST"]];//6am-9am
Sezam/AGActiveMonitoringUtilityTests.m:73:    user.objectId = @"1234";
Sezam/AGActiveMonitoringUtilityTests.m:74:    user.firstName = @"Maya";
Sezam/AGActiveMonitoringUtilityTests.m:75:    user.lastName = @"Warner";
Sezam/AGActiveMonitoringUtilityTests.m:84:    XCTAssert([alertDescription isEqualToString:@"Alert me when Maya Warner locks or unlocks the door between 6:00AM-9:00AM EDT on W F"], @"The actual alert description should match the expected alert description");
Sezam/AGActiveMonitoringUtilityTests.m:93:    notificationRule.userID = @"manuallock";
Sezam/AGActiveMonitoringUtilityTests.m:97:    XCTAssert([alertDescription isEqualToString:@"The door is locked or unlocked manually"], @"The actual action description should match the expected action description");
Sezam/AGActiveMonitoringUtilityTests.m:103:    user.objectId = @"1234";
Sezam/AGActiveMonitoringUtilityTests.m:104:    user.firstName = @"Maya";
Sezam/AGActiveMonitoringUtilityTests.m:105:    user.lastName = @"Warner";
Sezam/AGActiveMonitoringUtilityTests.m:112:    XCTAssert([alertDescription isEqualToString:@"The door is locked or unlocked by Maya Warner"], @"The actual action description should match the expected action description");
Sezam/AGUnityModuleInstallationViewController.m:48:    self.titles = @[@"INSTALL LOCK", @"INSTALL MODULE", @"INSTALL DOORSENSE"];
Sezam/AGUnityModuleInstallationViewController.m:49:    self.heroImgNames = @[@"unity_header_lock_on_door", @"unity_header_module_in_lock", @"doorsenseSettingsImage"];
Sezam/AGUnityModuleInstallationViewController.m:53:            @"Make sure your Yale lock is installed and set up on your door, then continue.",
Sezam/AGUnityModuleInstallationViewController.m:54:            @"Make sure your August module is installed in your lock, then continue.",
Sezam/AGUnityModuleInstallationViewController.m:55:            @"DoorSense gives your August Smart Lock the ability to detect if your door is open or closed.\n If wish to use DoorSense, make sure it is installed, then continue."];
Sezam/AGUnityModuleInstallationViewController.m:56:    self.primaryBtnTitles = @[@"CONTINUE", @"CONTINUE", @"CONTINUE"];
Sezam/AGUnityModuleInstallationViewController.m:57:    self.secondBtnTitles = @[@"INSTALLATION INSTRUCTIONS", @"INSTALLATION INSTRUCTIONS", @"INSTALLATION INSTRUCTIONS"];
Sezam/AGUnityModuleInstallationViewController.m:118:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGUnityModuleInstallationViewController.m:119:    AGInstallGuideWebViewController *guideWebVC = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGCreatePasswordViewController.m:103:    if ([segue.identifier isEqualToString:@"CreatePasswordToAddProfilePhoto"]) {
Sezam/AGCreatePasswordViewController.m:214:                        [self performSegueWithIdentifier:@"CreatePasswordToAddProfilePhoto" sender:nil];
Sezam/AGCreatePasswordViewController.m:285:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:286:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:287:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreatePasswordViewController.m:288:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGDoorbellPubSubPollTests.m:102://                    XCTAssert(false, @"Second phase(get new proxy info) of reconnect test failed");
Sezam/AGDoorbellPubSubPollTests.m:108://            XCTAssert(false, @"First phase(get initial proxy info) of reconnect test failed");
Sezam/AGIconListPickerView.m:73:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGIconListPickerView.m:96:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGIconListPickerView.m:102:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGIconListPickerView.m:134:    NSString *reuseID = @"AGIconListPickerViewCellID";
Sezam/AGCropViewController.m:80:    [_acceptButton.titleLabel setFont:[UIFont fontWithName:@"Helvetica" size:16.0]];
Sezam/AGCropViewController.m:94:    [_cancelButton.titleLabel setFont:[UIFont fontWithName:@"Helvetica" size:16.0]];
Sezam/AGWeeklyRecurrenceWidgetView.m:49:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:161:    self.startTimeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:162:    self.startTimeDescriptionLabel.text = @"START";
Sezam/AGWeeklyRecurrenceWidgetView.m:169:    self.endTimeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrenceWidgetView.m:170:    self.endTimeDescriptionLabel.text = @"END";
Sezam/AGWeeklyRecurrenceWidgetView.m:180:    self.startTimeLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:24];
Sezam/AGWeeklyRecurrenceWidgetView.m:189:    self.endTimeLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:24];
Sezam/AGWeeklyRecurrenceWidgetView.m:250:    [dayViews addObject:[self defaultDayViewWithDayText:@"SU"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:253:    [dayViews addObject:[self defaultDayViewWithDayText:@"MO"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:256:    [dayViews addObject:[self defaultDayViewWithDayText:@"TU"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:259:    [dayViews addObject:[self defaultDayViewWithDayText:@"WE"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:262:    [dayViews addObject:[self defaultDayViewWithDayText:@"TH"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:265:    [dayViews addObject:[self defaultDayViewWithDayText:@"FR"]];
Sezam/AGWeeklyRecurrenceWidgetView.m:268:    [dayViews addObject:[self defaultDayViewWithDayText:@"SA"]];
Sezam/AGNewPasswordViewController.m:57:                                                                                                NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Regular" size:17.0]}];
Sezam/AGNewPasswordViewController.m:62:                                                                                                      NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Regular" size:17.0]}];
Sezam/AGNewPasswordViewController.m:122:                UIAlertController *passwordUpdatedAlertController = [UIAlertController alertControllerWithTitle:@"Password Updated" message:@"Your password has been changed." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGNewPasswordViewController.m:123:                [passwordUpdatedAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGNewPasswordViewController.m:142:                if ((error != nil) && ([error.localizedDescription rangeOfString:@"409"].location != NSNotFound)) {
Sezam/AGNewPasswordViewController.m:148:                    [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGNewPasswordViewController.m:158:                    [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGNewPasswordViewController.m:247:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:248:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:249:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGNewPasswordViewController.m:250:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGSignupPickLockViewController.m:73:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"LockTypeCell"];
Sezam/AGSignupPickLockViewController.m:78:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGSignupPickLockViewController.m:79:        cell.label3.text = @"3RD GENERATION";
Sezam/AGSignupPickLockViewController.m:84:        cell.label2.text = @"AUGUST SMART LOCK PRO";
Sezam/AGSignupPickLockViewController.m:85:        cell.label3.text = @"3RD GENERATION";
Sezam/AGSignupPickLockViewController.m:90:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGSignupPickLockViewController.m:91:        cell.label3.text = @"1ST OR 2ND GENERATION";
Sezam/AGSignupPickLockViewController.m:104:        [self performSegueWithIdentifier:@"signupPickLockTypeToThreeStateChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:107:        [self performSegueWithIdentifier:@"signupPickLockTypeToThreeStateChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:110:        [self performSegueWithIdentifier:@"signupPickLockTypeToTwoStepChecklist" sender:nil];
Sezam/AGSignupPickLockViewController.m:125:    if ([segue.identifier isEqualToString:@"signupPickLockTypeToThreeStateChecklist"]) {
Sezam/AGSignupPickLockViewController.m:130:    } else if ([segue.identifier isEqualToString:@"signupPickLockTypeToTwoStepChecklist"]) {
Sezam/AGDoorbellSettingsViewController.m:147:    if (self.doorbell.doorbellCapability.canControlIndoorChime == YES && ([AGUtility checkForAppFeature:@"disableDoorbellChimeControl"] == NO)) {
Sezam/AGDoorbellSettingsViewController.m:157:    if ([AGUtility checkForAppFeature:@"doorbellmotion"]) {_motionDoorbellSettingRow = _numRowsSection1++;}
Sezam/AGDoorbellSettingsViewController.m:179:    if ([AGUtility checkForAppFeature:@"doorbelldiagnostics"]) {_diagnosticsRow = _numRowsSection1++;}
Sezam/AGDoorbellSettingsViewController.m:210:     self.showVideoQuality = [AGUtility checkForAppFeature:@"mars_video_quality"];
Sezam/AGDoorbellSettingsViewController.m:230:            self.firmwareVersion.text = [NSString stringWithFormat:@"FW Version %@", self.doorbell.firmwareVersion];
Sezam/AGDoorbellSettingsViewController.m:232:            self.firmwareVersion.text = @"FW Version Unknown";
Sezam/AGDoorbellSettingsViewController.m:276:        title = @"YOUR NOTIFICATIONS";
Sezam/AGDoorbellSettingsViewController.m:278:        title = @"DEVICE SETTINGS";
Sezam/AGDoorbellSettingsViewController.m:286:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGDoorbellSettingsViewController.m:307:            cell =  [tableView dequeueReusableCellWithIdentifier:@"OfflineNotification"];
Sezam/AGDoorbellSettingsViewController.m:313:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MotionNotifications"];
Sezam/AGDoorbellSettingsViewController.m:319:            cell =  [tableView dequeueReusableCellWithIdentifier:@"CallNotifications"];
Sezam/AGDoorbellSettingsViewController.m:327:            cell =  [tableView dequeueReusableCellWithIdentifier:@"DoorbellName"];
Sezam/AGDoorbellSettingsViewController.m:329:                cell.label2.text = @"Lock Connection";
Sezam/AGDoorbellSettingsViewController.m:338:                cell.label2.text = @"Doorbell Name";
Sezam/AGDoorbellSettingsViewController.m:343:            cell =  [tableView dequeueReusableCellWithIdentifier:@"LockBluetoothSignal"];
Sezam/AGDoorbellSettingsViewController.m:346:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"PowerSlider"];
Sezam/AGDoorbellSettingsViewController.m:364:            cell =  [tableView dequeueReusableCellWithIdentifier:@"DoorbellSounds"];
Sezam/AGDoorbellSettingsViewController.m:376:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"SpeakerVolume"];
Sezam/AGDoorbellSettingsViewController.m:377:            sliderCell.label2.text = [NSString stringWithFormat:@"%i",self.doorbell.speakerVolume];
Sezam/AGDoorbellSettingsViewController.m:394:            cell =  [tableView dequeueReusableCellWithIdentifier:@"MotionDoorbellSetting"];
Sezam/AGDoorbellSettingsViewController.m:400:            AGTableViewWithSliderCell *sliderCell =  (AGTableViewWithSliderCell *)[tableView dequeueReusableCellWithIdentifier:@"MotionSensitivity"];
Sezam/AGDoorbellSettingsViewController.m:402:            sliderCell.label2.text = [NSString stringWithFormat:@"%i%%",motionSliderValue];
Sezam/AGDoorbellSettingsViewController.m:418:            cell =  [tableView dequeueReusableCellWithIdentifier:@"LiveVideoQuality"];
Sezam/AGDoorbellSettingsViewController.m:423:            cell =  [tableView dequeueReusableCellWithIdentifier:@"Diagnostics"];
Sezam/AGDoorbellSettingsViewController.m:426:            cell =  [tableView dequeueReusableCellWithIdentifier:@"ImageQuality"];
Sezam/AGDoorbellSettingsViewController.m:429:            cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGDoorbellSettingsViewController.m:432:            cell =  [tableView dequeueReusableCellWithIdentifier:@"WiFiSetup"];
Sezam/AGDoorbellSettingsViewController.m:435:            cell =  [tableView dequeueReusableCellWithIdentifier:@"AssociateDoorbellToLock"];
Sezam/AGDoorbellSettingsViewController.m:438:            cell =  [tableView dequeueReusableCellWithIdentifier:@"PowerAndBattery"];
Sezam/AGDoorbellSettingsViewController.m:441:            cell = [tableView dequeueReusableCellWithIdentifier:@"VideoSpeedTest"];
Sezam/AGDoorbellSettingsViewController.m:444:            cell =  [tableView dequeueReusableCellWithIdentifier:@"FactoryReset"];
Sezam/AGDoorbellSettingsViewController.m:447:            cell =  [tableView dequeueReusableCellWithIdentifier:@"InstallationInstructions"];
Sezam/AGDoorbellSettingsViewController.m:450:            cell =  [tableView dequeueReusableCellWithIdentifier:@"Troubleshooting"];
Sezam/AGDoorbellSettingsViewController.m:453:            cell =  [tableView dequeueReusableCellWithIdentifier:@"SerialNumber"];
Sezam/AGDoorbellSettingsViewController.m:458:                cell.label2.text = @"SN Unknown";
Sezam/AGDoorbellSettingsViewController.m:462:            cell =  [tableView dequeueReusableCellWithIdentifier:@"FirmwareVersion"];
Sezam/AGDoorbellSettingsViewController.m:464:                cell.label.text = [NSString stringWithFormat:@"Firmware %@",self.doorbell.firmwareVersion.uppercaseString];
Sezam/AGDoorbellSettingsViewController.m:467:                cell.label.text = @"FW Unknown";
Sezam/AGDoorbellSettingsViewController.m:521:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Doorbell Rebooted" message:@"Your doorbell was successfully rebooted." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:525:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Doorbell Reboot Error" message:[NSString stringWithFormat:@"There was a problem rebooting your doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:581:                [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellChangeName" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:584:                [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellFactoryReset" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:587:            [self performSegueWithIdentifier:@"DoorbellSettingsToLockSignalStrength" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:603:            [self performSegueWithIdentifier:@"doorbellSettingsToVideoQuality" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:606:            [self performSegueWithIdentifier:@"doorbellSettingsToDiagnostics" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:609:            [self performSegueWithIdentifier:@"DoorbellSettingsToImageQuality" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:612:            [self performSegueWithIdentifier:@"doorbellSettingsToSignalStrength" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:615:            [self performSegueWithIdentifier:@"doorbellSettingToWiFiSetup" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:618:            [self performSegueWithIdentifier:@"DoorbellSettingsToAssociateLock" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:621:            [self performSegueWithIdentifier:@"doorbellSettingsToPowerAndBattery" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:624:            [self performSegueWithIdentifier:@"doorbellSettingsToVideoSpeedTest" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:628:            [self performSegueWithIdentifier:@"doorbellSettingsToDoorbellFactoryReset" sender:nil];
Sezam/AGDoorbellSettingsViewController.m:653:            self.associatedLockName = @"N/A";
Sezam/AGDoorbellSettingsViewController.m:663:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGDoorbellSettingsViewController.m:664:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGDoorbellSettingsViewController.m:666:        installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/dbc2"];
Sezam/AGDoorbellSettingsViewController.m:678:            self.powerSliderLabel.text = @"Low";
Sezam/AGDoorbellSettingsViewController.m:682:            self.powerSliderLabel.text = @"Medium";
Sezam/AGDoorbellSettingsViewController.m:686:            self.powerSliderLabel.text = @"High";
Sezam/AGDoorbellSettingsViewController.m:697:        self.powerSliderLabel.text = @"Low";
Sezam/AGDoorbellSettingsViewController.m:699:        self.powerSliderLabel.text = @"Medium";
Sezam/AGDoorbellSettingsViewController.m:701:        self.powerSliderLabel.text = @"High";
Sezam/AGDoorbellSettingsViewController.m:726:    self.powerSliderLabel.text = @"Updating...";
Sezam/AGDoorbellSettingsViewController.m:729:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Power Mode: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:744:    self.speakerVolumeValue.text = [NSString stringWithFormat:@"%.0f", self.speakerVolumeSlider.value];
Sezam/AGDoorbellSettingsViewController.m:756:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Speaker Volume" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:759:            self.speakerVolumeValue.text = [NSString stringWithFormat:@"%i",self.doorbell.speakerVolume];
Sezam/AGDoorbellSettingsViewController.m:784:    self.motionValueLabel.text = [NSString stringWithFormat:@"%.0f%%", self.motionValueSlider.value];
Sezam/AGDoorbellSettingsViewController.m:798:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Motion Sensitivity" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:802:            self.motionValueLabel.text = [NSString stringWithFormat:@"%i%%",motionSliderValue];
Sezam/AGDoorbellSettingsViewController.m:864:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars2MotionSensitivityLowerBound"];
Sezam/AGDoorbellSettingsViewController.m:868:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars1MotionSensitivityLowerBound"];
Sezam/AGDoorbellSettingsViewController.m:884:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars2MotionSensitivityUpperBound"];
Sezam/AGDoorbellSettingsViewController.m:888:        NSNumber *motionSensitivityNum = [AGUtility getAppFeatureNumber:@"Mars1MotionSensitivityUpperBound"];
Sezam/AGDoorbellSettingsViewController.m:914:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting sound: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:923:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting motion: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:935:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Doorbell motion: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:945:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting offline notification: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:958:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error setting Call notification: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellSettingsViewController.m:968:    if ([segue.identifier isEqualToString:@"doorbellSettingsToDoorbellChangeName"]) {
Sezam/AGDoorbellSettingsViewController.m:972:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToDoorbellFactoryReset"]) {
Sezam/AGDoorbellSettingsViewController.m:976:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToDiagnostics"]) {
Sezam/AGDoorbellSettingsViewController.m:981:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToSignalStrength"]) {
Sezam/AGDoorbellSettingsViewController.m:985:    else if ([segue.identifier isEqualToString:@"doorbellSettingToWiFiSetup"]) {
Sezam/AGDoorbellSettingsViewController.m:989:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToPowerAndBattery"]) {
Sezam/AGDoorbellSettingsViewController.m:993:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToVideoSpeedTest"]) {
Sezam/AGDoorbellSettingsViewController.m:997:    else if ([segue.identifier isEqualToString:@"doorbellSettingsToVideoQuality"]) {
Sezam/AGDoorbellSettingsViewController.m:1002:    else if ([segue.identifier isEqualToString:@"DoorbellSettingsToAssociateLock"]) {
Sezam/AGDoorbellSettingsViewController.m:1006:    else if ([segue.identifier isEqualToString:@"DoorbellSettingsToLockSignalStrength"]) {
Sezam/AGDoorbellSettingsViewController.m:1009:    } else if ([segue.identifier isEqualToString:@"DoorbellSettingsToImageQuality"]) {
Sezam/AGDoorbellSettingsViewController.m:1027:    self.motionBrightnessCell =  [self.settingsTableView dequeueReusableCellWithIdentifier:@"MotionBrightness"];
Sezam/AGDoorbellSettingsViewController.m:1041:    doorbellBrightnessPickerController.title = @"MOTION LIGHT";
Sezam/AGDoorbellSettingsViewController.m:1042:    doorbellBrightnessPickerController.listItemTitles = @[@"Off", @"Low Brightness", @"Medium Brightness"];
Sezam/AGDoorbellSettingsViewController.m:1099:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellSettingsViewController.m:1100:                                                                                message:[NSString stringWithFormat:@"Error updating Motion Light Brightness: %@", error.localizedDescription]
Sezam/AGDoorbellSettingsViewController.m:1102:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellSettingsViewController.m:1113:    self.indoorChimeEnabledCell = [self.settingsTableView dequeueReusableCellWithIdentifier:@"IndoorChimeEnabledCell"];
Sezam/AGDoorbellSettingsViewController.m:1114:    self.indoorChimeEnabledCell.titleLabel.text = @"Indoor Chime";
Sezam/AGDoorbellSettingsViewController.m:1115:    self.indoorChimeEnabledCell.descriptionLabel.text = @"You can turn this OFF to disable the doorbell chime you hear inside your house.";
Sezam/AGDoorbellSettingsViewController.m:1126:    NSDictionary *settingsChanges = @{@"bellTimerConfig":[self indoorChimeDelayForChimeEnabled:chimeEnabled]};
Sezam/AGDoorbellSettingsViewController.m:1135:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGDoorbellSettingsViewController.m:1136:                                                                                message:[NSString stringWithFormat:@"Error updating Indoor Chime setting: %@", error.localizedDescription]
Sezam/AGDoorbellSettingsViewController.m:1138:            [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGDoorbellSettingsViewController.m:1150:    NSNumber *indoorChimeDelay = [self.doorbell.settings treatNSNullAsNilObjectForKey:@"bellTimerConfig"];
Sezam/DateRangeView.m:70:    self.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:16];
Sezam/DateRangeView.m:197:    [_startDateTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:198:    [_endDateTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:199:    [_timeTableView addObserver:self forKeyPath:@"visible" options:0 context:NULL];
Sezam/DateRangeView.m:236:    CGSize maxDateTextSize = [@"MMM MMM MM" sizeWithAttributes:
Sezam/DateRangeView.m:239:    CGSize maxTimeTextSize = [@"MM MM" sizeWithAttributes:
Sezam/DateRangeView.m:257:    CGRect endTitleTextRect = [self drawText:@"END"
Sezam/DateRangeView.m:267:    CGRect timeTitleTextRect = [self drawText:@"TIME"
Sezam/DateRangeView.m:374:        timeStr = @"NEVER";
Sezam/DateRangeView.m:377:        timeStr = @"12 AM";
Sezam/DateRangeView.m:380:        timeStr = @"12 PM";
Sezam/DateRangeView.m:383:        timeStr = [NSString stringWithFormat:@"%ld PM", (long)time-12];
Sezam/DateRangeView.m:386:        timeStr = [NSString stringWithFormat:@"%ld AM", (long)time];
Sezam/DateRangeView.m:487:        return @"NEVER";
Sezam/DateRangeView.m:492:        return @"TODAY";
Sezam/DateRangeView.m:495:    NSString *week = @"ERR";
Sezam/DateRangeView.m:497:        case 1: week = @"SUN"; break;
Sezam/DateRangeView.m:498:        case 2: week = @"MON"; break;
Sezam/DateRangeView.m:499:        case 3: week = @"TUE"; break;
Sezam/DateRangeView.m:500:        case 4: week = @"WED"; break;
Sezam/DateRangeView.m:501:        case 5: week = @"THU"; break;
Sezam/DateRangeView.m:502:        case 6: week = @"FRI"; break;
Sezam/DateRangeView.m:503:        case 7: week = @"SAT"; break;
Sezam/DateRangeView.m:507:    NSString *month = @"ERR";
Sezam/DateRangeView.m:509:        case 1: month = @"JAN"; break;
Sezam/DateRangeView.m:510:        case 2: month = @"FEB"; break;
Sezam/DateRangeView.m:511:        case 3: month = @"MAR"; break;
Sezam/DateRangeView.m:512:        case 4: month = @"APR"; break;
Sezam/DateRangeView.m:513:        case 5: month = @"MAY"; break;
Sezam/DateRangeView.m:514:        case 6: month = @"JUN"; break;
Sezam/DateRangeView.m:515:        case 7: month = @"JUL"; break;
Sezam/DateRangeView.m:516:        case 8: month = @"AUG"; break;
Sezam/DateRangeView.m:517:        case 9: month = @"SEP"; break;
Sezam/DateRangeView.m:518:        case 10: month = @"OCT"; break;
Sezam/DateRangeView.m:519:        case 11: month = @"NOV"; break;
Sezam/DateRangeView.m:520:        case 12: month = @"DEC"; break;
Sezam/DateRangeView.m:524:    return [NSString stringWithFormat:@"%@ %@ %d", week, month, (int)dateComponents.day];
Sezam/DateRangeView.m:837:    if ( [keyPath isEqualToString:@"visible"] ) {
Sezam/DateRangeView.m:870:    [_startDateTableView removeObserver:self forKeyPath:@"visible"];
Sezam/DateRangeView.m:871:    [_endDateTableView removeObserver:self forKeyPath:@"visible"];
Sezam/DateRangeView.m:872:    [_timeTableView removeObserver:self forKeyPath:@"visible"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:32:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:36:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellLockAssociationValidationViewController.m:58:        doorbellModel = @"Doorbell v1.0";
Sezam/AGDoorbellLockAssociationValidationViewController.m:59:        doorbellType = @"mars";
Sezam/AGDoorbellLockAssociationValidationViewController.m:61:        doorbellModel = @"Doorbell v2.0";
Sezam/AGDoorbellLockAssociationValidationViewController.m:62:        doorbellType = @"mars2";
Sezam/AGDoorbellLockAssociationValidationViewController.m:69:            if ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound) {
Sezam/AGDoorbellLockAssociationValidationViewController.m:70:                errorMessage = @"Doorbell Serial Number is not Valid";
Sezam/AGDoorbellLockAssociationValidationViewController.m:73:            if ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound) {
Sezam/AGDoorbellLockAssociationValidationViewController.m:74:                errorMessage = @"Doorbell is already Registered. Please contact August support.";
Sezam/AGDoorbellLockAssociationValidationViewController.m:76:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:77:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:97:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"We were unable to associate your Lock and Doorbell. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:98:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:116:                UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"We were unable to enable your Doorbell for Lock operation over WiFi." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:117:                UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationValidationViewController.m:196:        self.progressLabel.text = @"Testing Remote Lock Connection...";
Sezam/AGDoorbellLockAssociationValidationViewController.m:205:                        [self performSegueWithIdentifier:@"ValidationToResults" sender:nil];
Sezam/AGDoorbellLockAssociationValidationViewController.m:213:                    [self performSegueWithIdentifier:@"ValidationToResults" sender:nil];
Sezam/AGDoorbellLockAssociationValidationViewController.m:233:    self.progressLabel.text = @"Updating Lock and Doorbell...";
Sezam/AGDoorbellLockAssociationValidationViewController.m:243:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationValidationViewController.m:244:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationValidationViewController.m:248:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationValidationViewController.m:268:    if ([segue.identifier isEqualToString:@"ValidationToResults"]) {
Sezam/AGAmazonReviews.m:19:static NSString* kAGAnalyticsDiaryCategory = @"AmazonReviews";
Sezam/AGAmazonReviews.m:36:    NSDictionary *doorbellReviewDictionary = @{kProductName:@"August Doorbell Cam", kProductImage:@"DoorbellD1ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Doorbell", kProductAsin: @"B0168IXNLA", kAppFeatureAsinKey:@"doorbell-asin", kReviewType:@"DoorbellReview", kProductFamily:@"Doorbell", kProductModel:@"D1"};
Sezam/AGAmazonReviews.m:37:    NSDictionary *lockReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Lock", kProductAsin: @"B0168IXNZQ", kAppFeatureAsinKey:@"smartlock-asin", kReviewType:@"LockReview", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:38:    NSDictionary *keypadReviewDictionary = @{kProductName:@"August Smart Keypad", kProductImage:@"KeypadForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Keypad", kProductAsin: @"B015SLMR1U", kAppFeatureAsinKey:@"mercury-asin", kReviewType:@"KeypadReview", kProductFamily:@"Keypad", kProductModel:@"K2"};
Sezam/AGAmazonReviews.m:39:    NSDictionary *connectReviewDictionary = @{kProductName:@"August Connect Wi-Fi Bridge", kProductImage:@"ConnectForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-Connect", kProductAsin: @"B0168IXNFQ", kAppFeatureAsinKey:@"venus-asin", kReviewType:@"ConnectReview", kProductFamily:@"Connect", kProductModel:@"C3"};
Sezam/AGAmazonReviews.m:41:    NSDictionary *doorbellD2ReviewDictionary = @{kProductName:@"August Doorbell Cam", kProductImage:@"DoorbellD2ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-DoorbellD2", kProductAsin: @"B075SY59M9", kAppFeatureAsinKey:@"doorbell2-asin", kReviewType:@"DoorbellReviewD2", kProductFamily:@"Doorbell", kProductModel:@"D2"};
Sezam/AGAmazonReviews.m:42:    NSDictionary *lockL3EuropaReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL3", kProductAsin: @"B0765JNS2D", kAppFeatureAsinKey:@"smartlock3-europa-asin", kReviewType:@"LockReviewL3Europa", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:43:    NSDictionary *lockL3GalileoReviewDictionary = @{kProductName:@"August Smart Lock", kProductImage:@"LockL3ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL3", kProductAsin: @"B0752V8D8D", kAppFeatureAsinKey:@"smartlock3-galileo-asin", kReviewType:@"LockReviewL3Galileo", kProductFamily:@"Lock", kProductModel:@"L3"};
Sezam/AGAmazonReviews.m:44:    NSDictionary *lockL4ReviewDictionary= @{kProductName:@"August Smart Lock", kProductImage:@"LockL4ForReview", kNoFeedbackReviewKey:@"NoFeedBackReview-LockL4", kProductAsin: @"B0752XNC8M", kAppFeatureAsinKey:@"smartlock4-asin", kReviewType:@"LockReviewL4", kProductFamily:@"Lock", kProductModel:@"L4"};
Sezam/AGAmazonReviews.m:83:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGAmazonReviews.m:85:    NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily] ?: @"";
Sezam/AGAmazonReviews.m:86:    NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel]  ?: @"";
Sezam/AGAmazonReviews.m:87:    NSDate *mostRecentReviewPopupDate = [[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@",reviewType]];
Sezam/AGAmazonReviews.m:104:        AGAnalyticsDiaryInfo(@"AmazonReviewFeedbackShowAlert", reviewType);
Sezam/AGAmazonReviews.m:105:        [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@",reviewType]];
Sezam/AGAmazonReviews.m:110:        [howsEverythingGoingAlertController addActionWithTitle:@"It’s Great!" andActionBlock:^{
Sezam/AGAmazonReviews.m:112:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Positive", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:116:        [howsEverythingGoingAlertController addActionWithTitle:@"Not So Great" andActionBlock:^{
Sezam/AGAmazonReviews.m:118:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Negative", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:122:        [howsEverythingGoingAlertController addActionWithTitle:@"Don’t Ask Again" andActionBlock:^{
Sezam/AGAmazonReviews.m:126:            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Close", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:142:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGAmazonReviews.m:149:        NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily]  ?: @"";
Sezam/AGAmazonReviews.m:150:        NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel] ?: @"";
Sezam/AGAmazonReviews.m:154:        NSString *reviewUrlString = [NSString stringWithFormat:@"https://www.amazon.com/review/create-review?asin=%@", asin];
Sezam/AGAmazonReviews.m:155:        UIAlertController *reviewAlertController  = [UIAlertController alertControllerWithTitle:@"Rate us on Amazon?"
Sezam/AGAmazonReviews.m:156:                                                                                        message:@"That’s good to hear! Can you help us spread the word by rating us on Amazon? It'll take 30 seconds, and mean the world to us."
Sezam/AGAmazonReviews.m:158:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAmazonReviews.m:162:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"ProceededToReview", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:164:                                                                    AGAnalyticsDiaryInfo(reviewType, @"DeepLinkingToAmazaon");
Sezam/AGAmazonReviews.m:167:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me Later"
Sezam/AGAmazonReviews.m:171:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"RemindLater", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:174:        [reviewAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks"
Sezam/AGAmazonReviews.m:180:                                                                    [[Mixpanel sharedInstance] track:@"Feedback Leave Review" properties:@{@"response":@"DeclinedToReview", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:199:    NSString *productFamily = [self returnStringForReviewType:amazonReviewType andKey:kProductFamily] ?: @"";
Sezam/AGAmazonReviews.m:200:    NSString *productModel = [self returnStringForReviewType:amazonReviewType andKey:kProductModel] ?: @"";
Sezam/AGAmazonReviews.m:201:    UIAlertController *feedbackAlertController  = [UIAlertController alertControllerWithTitle:@"Send Feedback?"
Sezam/AGAmazonReviews.m:202:                                                                                      message:[NSString stringWithFormat:@"We’re sorry you’re having problems with your %@. Would you like to send us feedback on what we could be doing better?", productName]
Sezam/AGAmazonReviews.m:204:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAmazonReviews.m:209:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"ProceededToProvideEmailFeedback", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:212:                                                                  AGAnalyticsDiaryInfo(reviewType, @"DeepLinkingToEmailFeedback");
Sezam/AGAmazonReviews.m:213:                                                                  NSString *toEmail = @"feedback@august.com";
Sezam/AGAmazonReviews.m:214:                                                                  NSString *subject = [NSString stringWithFormat:@"In-app Feedback - %@", productName];
Sezam/AGAmazonReviews.m:217:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me Later"
Sezam/AGAmazonReviews.m:221:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"RemindLater", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGAmazonReviews.m:224:    [feedbackAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks"
Sezam/AGAmazonReviews.m:230:                                                                  [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"DeclinedToProvideEmailFeedback", @"product family":productFamily, @"product model":productModel, @"store":@"Amazon"}];
Sezam/AGFancyTutorialViewer.m:104:        if ([self.optionsToUse objectForKey:@"Image Size"]) {
Sezam/AGFancyTutorialViewer.m:105:            frame.size = [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue];
Sezam/AGFancyTutorialViewer.m:111:        if ([self.optionsToUse objectForKey:@"Image Content Mode"]) {
Sezam/AGFancyTutorialViewer.m:112:            imageView.contentMode = [[self.optionsToUse objectForKey:@"Image Content Mode"] doubleValue];
Sezam/AGFancyTutorialViewer.m:127:        if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Auto-Unlock Explanation"]) {
Sezam/AGFancyTutorialViewer.m:130:            [label setFrame:CGRectMake(self.frame.size.width * i+30, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+49.5, self.frame.size.width-60, 75)];
Sezam/AGFancyTutorialViewer.m:132:                [label setFrame:CGRectMake(self.frame.size.width * i+20, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+33, self.frame.size.width-40, 78)];
Sezam/AGFancyTutorialViewer.m:134:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:136:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Small Style"]) {
Sezam/AGFancyTutorialViewer.m:138:            [label setValue:@"BodyWhite" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:140:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"August Access Style"]) {
Sezam/AGFancyTutorialViewer.m:143:            [label setValue:@"BodyWhite" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:145:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Setup OTA Style"]) {
Sezam/AGFancyTutorialViewer.m:146:            [label setFrame:CGRectMake(self.frame.size.width * i+20, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+49, self.frame.size.width-40, 75)];
Sezam/AGFancyTutorialViewer.m:147:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:149:        else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Motion And Video Explain Style"]) {
Sezam/AGFancyTutorialViewer.m:152:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:156:            [label setValue:@"Body" forKey:@"nuiClass"];
Sezam/AGFancyTutorialViewer.m:165:    if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Auto-Unlock Explanation"]) {
Sezam/AGFancyTutorialViewer.m:166:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:168:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Small Style"]) {
Sezam/AGFancyTutorialViewer.m:169:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height-20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:171:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"August Access Style"]) {
Sezam/AGFancyTutorialViewer.m:172:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-50, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height-20, 100, 9)];
Sezam/AGFancyTutorialViewer.m:174:    else if ([[self.optionsToUse objectForKey:@"Tutorial View Style"] isEqualToString:@"Setup OTA Style"]) {
Sezam/AGFancyTutorialViewer.m:175:        self.pageControl = [[UIPageControl alloc] initWithFrame:CGRectMake(self.frame.size.width/2.0-28.5, [[self.optionsToUse objectForKey:@"Image Size"] CGSizeValue].height+20, 57, 9)];
Sezam/AGFancyTutorialViewer.m:183:    if ([[self.optionsToUse objectForKey:@"Current Page Indicator Color"] isEqualToString:@"White"]) {
Sezam/AGAugustAccessViewController.m:66:    [AGUtility logEventToFabric:@"August Access - Main Page" attributes:@{}];
Sezam/AGAugustAccessViewController.m:75:                        forCellWithReuseIdentifier:@"CategoryMenuCell"];
Sezam/AGAugustAccessViewController.m:90:    NSArray *stringsArray = @[@"August has partnered with top service providers to make your busy life easier.",
Sezam/AGAugustAccessViewController.m:91:                              @"Imagine coming home to a sparkling-fresh house, dry cleaning hung, packages picked up, and freshly arranged flowers - all with the peace of mind that things can still get done, even when you can’t be there.",
Sezam/AGAugustAccessViewController.m:92:                              @"While you’re at work or away, grant secure access to your home for deliveries and in-home services.",
Sezam/AGAugustAccessViewController.m:93:                              @"To participate, tap one of the services you are interested in and learn more about the beta program. Or, go to www.august.com/august-access"];
Sezam/AGAugustAccessViewController.m:101:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize], [NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"August Access Style", @"White"]
Sezam/AGAugustAccessViewController.m:102:                                                                              forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style", @"Current Page Indicator Color"]];
Sezam/AGAugustAccessViewController.m:141:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error"
Sezam/AGAugustAccessViewController.m:142:                                                                message:[NSString stringWithFormat:@"Error loading data: %@", error.localizedDescription]
Sezam/AGAugustAccessViewController.m:144:                                                      cancelButtonTitle:@"Ok"
Sezam/AGAugustAccessViewController.m:147:            self.dataNotLoadedLabel.text = @"Failed to download data.";
Sezam/AGAugustAccessViewController.m:208:    AGPartnerCell *cell = [tableView dequeueReusableCellWithIdentifier:@"partnerCell"];
Sezam/AGAugustAccessViewController.m:215:    if ([partner.logoURL isEqualToString:@""]) {
Sezam/AGAugustAccessViewController.m:238:        if ([[[connectedApp objectForKey:@"name"] lowercaseString] isEqualToString:partnerName.lowercaseString]) {
Sezam/AGAugustAccessViewController.m:247:    if ([currentPartner.type isEqualToString:@"works with"]) {
Sezam/AGAugustAccessViewController.m:248:        if ([currentPartner.name isEqualToString:@"Airbnb"]) {
Sezam/AGAugustAccessViewController.m:250:                [self performSegueWithIdentifier:@"augustAccessToAirbnbMapping" sender:nil];
Sezam/AGAugustAccessViewController.m:252:                [self performSegueWithIdentifier:@"augustAccessToAirbnbConnect" sender:nil];
Sezam/AGAugustAccessViewController.m:254:        } else if ([currentPartner.name isEqualToString:@"Nest"]) {
Sezam/AGAugustAccessViewController.m:255:            if ([self partnerDictionary:@"nest"] != nil) {
Sezam/AGAugustAccessViewController.m:256:                [self performSegueWithIdentifier:@"augustAccessToNestCameraToLock" sender:nil];
Sezam/AGAugustAccessViewController.m:258:                [self performSegueWithIdentifier:@"augustAccessToNestConnect" sender:nil];
Sezam/AGAugustAccessViewController.m:262:            [self performSegueWithIdentifier:@"augustAccessToConnectedAppDetail" sender:[NSNumber numberWithInteger:indexPath.item]];
Sezam/AGAugustAccessViewController.m:265:        [self performSegueWithIdentifier:@"augustAccessToAugustAccessDetail" sender:nil];
Sezam/AGAugustAccessViewController.m:287:    if ([segue.identifier isEqualToString:@"augustAccessToAugustAccessDetail"]) {
Sezam/AGAugustAccessViewController.m:290:    } else if ([segue.identifier isEqualToString:@"augustAccessToConnectedAppDetail"]) {
Sezam/AGAugustAccessViewController.m:292:        if ([selectedPartner.name isEqualToString:@"Harmony"]) {
Sezam/AGAugustAccessViewController.m:294:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"harmony control"];
Sezam/AGAugustAccessViewController.m:296:            connectedAppDetailViewController.connectedAppName = @"harmony control";
Sezam/AGAugustAccessViewController.m:297:        } else if ([selectedPartner.name isEqualToString:@"Xfinity Home"]) {
Sezam/AGAugustAccessViewController.m:299:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"comcast"];
Sezam/AGAugustAccessViewController.m:301:            connectedAppDetailViewController.connectedAppName = @"comcast";
Sezam/AGAugustAccessViewController.m:302:        } else if ([selectedPartner.name isEqualToString:@"Honeywell"]) {
Sezam/AGAugustAccessViewController.m:304:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"honeywell"];
Sezam/AGAugustAccessViewController.m:306:            connectedAppDetailViewController.connectedAppName = @"honeywell";
Sezam/AGAugustAccessViewController.m:307:        } else if ([selectedPartner.name isEqualToString:@"IFTTT"]) {
Sezam/AGAugustAccessViewController.m:309:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"ifttt"];
Sezam/AGAugustAccessViewController.m:311:            connectedAppDetailViewController.connectedAppName = @"ifttt";
Sezam/AGAugustAccessViewController.m:312:        } else if ([selectedPartner.name isEqualToString:@"Amazon Alexa"]) {
Sezam/AGAugustAccessViewController.m:314:            NSDictionary *connectedAppDictionary = [self partnerDictionary:@"alexa"];
Sezam/AGAugustAccessViewController.m:316:            connectedAppDetailViewController.connectedAppName = @"alexa";
Sezam/AGAugustAccessViewController.m:318:    } else if ([segue.identifier isEqualToString:@"augustAccessToAirbnbConnect"]) {
Sezam/AGAugustAccessViewController.m:321:    } else if ([segue.identifier isEqualToString:@"augustAccessToNestConnect"]) {
Sezam/AGAugustAccessViewController.m:335:    AGAugustAccessCategoryMenuCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@"CategoryMenuCell" forIndexPath:indexPath];
Sezam/AGAugustAccessViewController.m:338:    cell.categoryLabel.nuiClass = @"StandardLabel";
Sezam/AGAugustAccessViewController.m:360:    CGSize labelSize = [currentCategoryLabelText sizeWithAttributes:@{ NSFontAttributeName : [UIFont fontWithName:@"ProximaNova-Semibold" size:13]}];       // determine size of this text
Sezam/AGShareWithAugustExplainViewController.m:36:    [self performSegueWithIdentifier:@"ExplainToCompose" sender:nil];
Sezam/AGDoorbellVideoStreamView.m:118:    self.loadingDescriptionLabel.nuiClass = @"body_small_regular_white_v2";
Sezam/AGDoorbellVideoStreamView.m:119:    self.loadingDescriptionLabel.text = @"Connecting to Camera...";
Sezam/AGDoorbellVideoStreamView.m:146:    self.closeButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:155:    self.speakButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:156:    self.speakButtonDescriptionLabel.text = @"SPEAK";
Sezam/AGDoorbellVideoStreamView.m:176:    self.speakButtonDescriptionLabel.nuiClass = @"label_allcaps_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:181:    self.speakOverlayLabel.nuiClass = @"label_allcaps_white_semibold_v2";
Sezam/AGDoorbellVideoStreamView.m:182:    self.speakOverlayLabel.text = @"SPEAK NOW";
Sezam/AGDoorbellVideoStreamView.m:405:    UIFont *font = [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGLoginViewController.m:81:    self.backButton.accessibilityLabel = @"back";
Sezam/AGLoginViewController.m:106:    NSURL *url = [NSURL URLWithString:@"http://www.august.com/lostphone"];
Sezam/AGLoginViewController.m:190:        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"AugustInternal"];
Sezam/AGLoginViewController.m:193:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLoginViewController.m:194:        AGDebugModeViewController* debugModeController = (AGDebugModeViewController*)[storyboard instantiateViewControllerWithIdentifier:@"DebugMode"];
Sezam/AGLoginViewController.m:200:            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLoginViewController.m:201:            UIViewController *secretSupport = [storyboard instantiateViewControllerWithIdentifier:@"AGSecretSupportViewController"];
Sezam/AGLoginViewController.m:255:                                [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:268:                                            [self performSegueWithIdentifier:@"LoginToVerifyEmail" sender:nil];
Sezam/AGLoginViewController.m:274:                                            [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:287:                                            [self performSegueWithIdentifier:@"LoginToVerifyPhone" sender:nil];
Sezam/AGLoginViewController.m:293:                                            [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:305:                        [loginErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGLoginViewController.m:329:    if ([segue.identifier isEqualToString:@"LoginToVerifyEmail"]) {
Sezam/AGLoginViewController.m:335:    else if ([segue.identifier isEqualToString:@"LoginToVerifyPhone"]) {
Sezam/AGLoginViewController.m:341:    else if ([segue.identifier isEqualToString:@"LoginToPasswordInstructions"]) {
Sezam/AGTimedBackgroundTaskManagerTests.m:31:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:2 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:39:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:4 identifier:@"task2" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:55:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:5 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:59:            XCTFail(@"Did not cancel the task!");
Sezam/AGTimedBackgroundTaskManagerTests.m:72:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:20 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:76:                XCTFail(@"Task ended with incorrect expiration type");
Sezam/AGTimedBackgroundTaskManagerTests.m:87:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:5 identifier:@"task2" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:95:                XCTFail(@"Task ended with incorrect expiration type");
Sezam/AGTimedBackgroundTaskManagerTests.m:115:    AGTimedBackgroundTask *task1 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:4 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:119:            XCTFail(@"Unexpected task completion!");
Sezam/AGTimedBackgroundTaskManagerTests.m:127:    AGTimedBackgroundTask *task2 = [[AGTimedBackgroundTask alloc] initWithTaskDuration:2 identifier:@"task1" expirationBlock:^(AGTimedBackgroundTaskExpirationType expirationType) {
Sezam/AGTimedBackgroundTaskManagerTests.m:131:            XCTFail(@"Unexpected task completion!");
Sezam/AGDoorbellSetupDebugPickerViewController.m:39:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PickerCell"];
Sezam/AGDataItemStore.m:20:    NSAssert(uploadItem.fileName, @"An upload item cannot be saved if there is no file name");
Sezam/AGDataItemStore.m:26:    NSString *itemFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems/%@", self.storedItemsPath, uploadItem.fileName];
Sezam/AGDataItemStore.m:38:    NSString *logsFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGDataItemStore.m:48:        NSDictionary* file1Properties  = [[NSFileManager defaultManager] attributesOfItemAtPath:[NSString stringWithFormat:@"%@/%@", logsFilePath, obj1] error:nil];
Sezam/AGDataItemStore.m:51:        NSDictionary* file2Properties  = [[NSFileManager defaultManager] attributesOfItemAtPath:[NSString stringWithFormat:@"%@/%@", logsFilePath, obj2] error:nil];
Sezam/AGDataItemStore.m:59:        NSString *curFullPathFileName = [NSString stringWithFormat:@"%@/%@", logsFilePath, curLogFileName];
Sezam/AGDataItemStore.m:82:    NSAssert(uploadItem.fileName, @"An upload item cannot be deleted if there is no file name");
Sezam/AGDataItemStore.m:87:    NSString *itemFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems/%@", self.storedItemsPath, uploadItem.fileName];
Sezam/AGDataItemStore.m:100:    NSString *logsFilePath = [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGDataItemStore.m:115:        NSString *curFullPathFileName = [NSString stringWithFormat:@"%@/%@", logsFilePath, curLogFileName];
Sezam/AGDataItemStore.m:129:        BOOL fileCreated = [[NSFileManager defaultManager] createFileAtPath:storedItemsLockFile contents:[NSData dataFromHexString:@"00000000"] attributes:nil];
Sezam/AGDataItemStore.m:172:    return [NSString stringWithFormat:@"%@/DataUploader.lock", self.storedItemsPath];
Sezam/AGDataItemStore.m:181:    return [NSString stringWithFormat:@"%@/DataUploaderItems", self.storedItemsPath];
Sezam/AGLeftImageAndRightLabelCell.m:46:    self.rightLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGActivityShareWithAugust.m:25:    return @"UIActivityShareWithAugustType";
Sezam/AGActivityShareWithAugust.m:28:    return @"Share with August";
Sezam/AGActivityShareWithAugust.m:46:    UIStoryboard *videoSharingStoryboard = [UIStoryboard storyboardWithName:@"VideoSharing" bundle:nil];
Sezam/AGActivityShareWithAugust.m:47:    AGShareWithAugustExplainViewController *vc = [videoSharingStoryboard instantiateViewControllerWithIdentifier:@"ShareWithAugustExplainVC"];
Sezam/AGAutoUnlockSettingsView.m:60:    self.enableAutoUnlockCell.label.text = @"Enable Auto-Unlock";
Sezam/AGAutoUnlockSettingsView.m:64:    self.successfulAutoUnlockNotificationsCell.label.text = @"Auto-Unlock attempted";
Sezam/AGAutoUnlockSettingsView.m:68:    self.awayModeActivatedNotificationsAutoUnlockCell.label.text = @"You left your neighborhood";
Sezam/AGAutoUnlockSettingsView.m:80:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockSettingsView.m:81:    self.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSettingsView.m:99:    self.reportProblemButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockSettingsView.m:100:    [self.reportProblemButton setTitle:@"REPORT A PROBLEM" forState:UIControlStateNormal];
Sezam/AGAutoUnlockSettingsView.m:157:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockSettingsView.m:161:        label.text = @"SETTINGS";
Sezam/AGAutoUnlockSettingsView.m:165:        label.text = @"NOTIFICATIONS";
Sezam/AGAutoUnlockSettingsView.m:193:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockSettingsView.m:195:        cell.textLabel.text = @"About Auto-Unlock";
Sezam/AGAutoUnlockSettingsView.m:201:        cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockSettingsView.m:203:        cell.textLabel.text = @"Advanced Settings";
Sezam/AGSubscriptionPromoViewController.m:52:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com"]];
Sezam/AGSubscriptionPromoViewController.m:63:    UIAlertController *cancelFreeTrialAlert = [UIAlertController alertControllerWithTitle:@"Cancel Free Trial?"
Sezam/AGSubscriptionPromoViewController.m:64:                                                                                     message:@"Are you sure you want to cancel your August Premium free trial?\n\nTo get access to the features of August Premium you’ll need to subscribe."
Sezam/AGSubscriptionPromoViewController.m:66:    [cancelFreeTrialAlert addAction:[UIAlertAction actionWithTitle:@"Don't Cancel"
Sezam/AGSubscriptionPromoViewController.m:71:    [cancelFreeTrialAlert addAction:[UIAlertAction actionWithTitle:@"Cancel Free Trial"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:34:    [self performSegueWithIdentifier:@"ExistingConnectToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:40:    [self performSegueWithIdentifier:@"ExistingConnectToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:51:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell-Lock Association Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:52:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:56:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellLockAssociationExistingConnectViewController.m:74:    if ([segue.identifier isEqualToString:@"ExistingConnectToValidation"]) {
Sezam/AGVerificationCodeSegmentedTextField.m:54:        textField.text = @"";
Sezam/AGVerificationCodeSegmentedTextField.m:65:    if ([string isEqualToString:@""]) {
Sezam/AGVerificationCodeSegmentedTextField.m:66:        [textField setText:@""];
Sezam/AGLockViewController.m:155:    [self performSegueWithIdentifier:@"LockViewToLockSelector" sender:nil];
Sezam/AGLockViewController.m:185:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"ShowOTAStatusLabel"]) {
Sezam/AGLockViewController.m:197:    self.lockAndDoorStateLabel.accessibilityIdentifier = @"Lock and Door State Label";
Sezam/AGLockViewController.m:213:                                                                       delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGLockViewController.m:279:    if (([AGUtility isConnectedToAirbnb]) && (![[NSUserDefaults standardUserDefaults] boolForKey:@"ShownHowItWorksScreen"]) && ([AGUtility clientDeviceTypeBasedOnScreenSize] != AGiPhone4)) {
Sezam/AGLockViewController.m:350:    if ([segue.identifier isEqualToString:@"lockToRateApp"]) {
Sezam/AGLockViewController.m:354:    if ([segue.identifier isEqualToString:@"LockViewToLockSelector"]) {
Sezam/AGLockViewController.m:474:            NSAssert(false, @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:508:            NSAssert(false, @"Unrecognized operation mode %u", operationMode);
Sezam/AGLockViewController.m:520:        case AGOperationMode_Disabled:      return @"Disabled";
Sezam/AGLockViewController.m:521:        case AGOperationMode_Bluetooth:     return @"Bluetooth";
Sezam/AGLockViewController.m:522:        case AGOperationMode_Remote:        return @"Remote";
Sezam/AGLockViewController.m:523:        case AGOperationMode_Seamless:      return @"Seamless";
Sezam/AGLockViewController.m:526:            NSAssert(false, @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:527:            return [NSString stringWithFormat:@"Unrecognized-%u", self.operationMode];
Sezam/AGLockViewController.m:587:                UIAlertController *noInternetConnectionAlert = [UIAlertController alertControllerWithTitle:@"No Internet Connection" message:@"Remote Lock operations require an internet connection." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:588:                UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:605:            NSAssert(false, @"Unrecognized operation mode %u", self.operationMode);
Sezam/AGLockViewController.m:647:            NSAssert(false, @"Unhandled operation mode %u inside valueChanged:(AGDialView)", self.operationMode);
Sezam/AGLockViewController.m:677:    } else if ([lockOperationType isEqualToString:@"lock"]) {
Sezam/AGLockViewController.m:679:    } else if ([lockOperationType isEqualToString:@"unlock"]) {
Sezam/AGLockViewController.m:718:            if (([[AGUtility userFacingDescriptionFromError:error] rangeOfString:@"session token" options:NSCaseInsensitiveSearch].location != NSNotFound) || ([[AGUtility userFacingDescriptionFromError:error] rangeOfString:@"not verified" options:NSCaseInsensitiveSearch].location != NSNotFound)) {
Sezam/AGLockViewController.m:729:                if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound)  || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGLockViewController.m:764:                    NSString *nestAwayStatus = [dict objectForKey:@"away"];
Sezam/AGLockViewController.m:765:                    if ([nestAwayStatus isEqualToString:@"home"]) {
Sezam/AGLockViewController.m:791:    BOOL doesNeedSetupOTA = [[NSUserDefaults standardUserDefaults] boolForKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGLockViewController.m:879:            NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId, @"batteryLevel":self.agLock.batteryPercentageNumber};
Sezam/AGLockViewController.m:932:    [self performSelector:@selector(takeLockActionViaRemoteController:) withObject:doLock?@"lock":@"unlock" afterDelay:REMOTE_ACTION_DELAY_TIMER ];
Sezam/AGLockViewController.m:948:    if (![user.type.lowercaseString isEqualToString:@"limited"]) {
Sezam/AGLockViewController.m:962:            [ruleScanner scanUpToString:@"BYDAY=" intoString:nil];
Sezam/AGLockViewController.m:963:            [ruleScanner scanUpToString:@";" intoString:&dayStr];
Sezam/AGLockViewController.m:964:            dayStr = [dayStr stringByReplacingOccurrencesOfString:@"BYDAY=" withString:@""];
Sezam/AGLockViewController.m:965:            NSArray* daysSplit = [dayStr componentsSeparatedByString: @","];
Sezam/AGLockViewController.m:968:            [myFormatter setDateFormat:@"c"]; // day number, like 7 for saturday
Sezam/AGLockViewController.m:972:            NSArray* daysOfTheWeek = [[NSArray alloc] initWithObjects: @"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA", nil];
Sezam/AGLockViewController.m:996:            NSString * joinedDaysString = [[[setToOrder array] valueForKey:@"description"] componentsJoinedByString:@", "];
Sezam/AGLockViewController.m:999:            NSString *baseStr = @"NEXT ACCESS";
Sezam/AGLockViewController.m:1003:            NSString *thirdLineStr = [NSString stringWithFormat:@"%@ TO %@", startTimeStr, endTimeStr];
Sezam/AGLockViewController.m:1004:            NSString *showText = [NSString stringWithFormat:@"%@\n %@\n %@ %@", baseStr, joinedDaysString, thirdLineStr, timeZoneOrNot];
Sezam/AGLockViewController.m:1010:            NSString *expiredText = @"your access to this lock has expired";
Sezam/AGLockViewController.m:1022:            NSString* baseStr = @"NEXT ACCESS";
Sezam/AGLockViewController.m:1027:            NSString *showText = [NSString stringWithFormat:@"%@: %@ - %@ %@", baseStr, starTimeStr, endTimeStr, timeZoneOrNot];
Sezam/AGLockViewController.m:1055:    NSString *timeZoneAbbreviation = @"";
Sezam/AGLockViewController.m:1212:    if ([AGUtility checkForAppFeature:@"disableForceToKeychain"]) {
Sezam/AGLockViewController.m:1331:            [self performSegueWithIdentifier:@"lockToRateApp" sender:nil];
Sezam/AGLockViewController.m:1335:            [self performSegueWithIdentifier:@"lockToRateApp" sender:nil];
Sezam/AGLockViewController.m:1356:            UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockViewController.m:1357:            AGSetupOTAViewController* setupOTAViewController = (AGSetupOTAViewController*)[storyboard instantiateViewControllerWithIdentifier:@"SetupOTAViewController"];
Sezam/AGLockViewController.m:1376:        NSNumber *terminationType = (NSNumber *)[notification.userInfo objectForKey:@"terminationType"];
Sezam/AGLockViewController.m:1427:    NSString *title = @"Unable To Get Status";
Sezam/AGLockViewController.m:1428:    NSString *message = @"There’s an issue determining the state of your lock. If this persists, please call August Support at 844-284-8781. \n\nWould you like to unlock your door without knowing the state?";
Sezam/AGLockViewController.m:1431:    UIAlertAction *unlockMyDoorAction = [UIAlertAction actionWithTitle:@"Unlock My Door" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1438:    UIAlertAction *doNothingAction = [UIAlertAction actionWithTitle:@"Don't Do Anything" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1451:    UIAlertController *longConnectionAlert = [UIAlertController alertControllerWithTitle:@"Connecting to Lock?"
Sezam/AGLockViewController.m:1452:                                                                                 message:[NSString stringWithFormat:@"Are you trying to connect to %@?", self.agLock.name]
Sezam/AGLockViewController.m:1454:    [longConnectionAlert addAction:[UIAlertAction actionWithTitle:@"No"
Sezam/AGLockViewController.m:1457:                                                              [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"TryingToConnectResponse"];
Sezam/AGLockViewController.m:1460:    [longConnectionAlert addAction:[UIAlertAction actionWithTitle:@"Yes"
Sezam/AGLockViewController.m:1464:                                                              [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"TryingToConnectResponse"];
Sezam/AGLockViewController.m:1469:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedTryingToConnectPopup"];
Sezam/AGLockViewController.m:1479:    UIAlertController *rangeExplainerAlert = [UIAlertController alertControllerWithTitle:@"Out of Bluetooth Range"
Sezam/AGLockViewController.m:1480:                                                                                 message:@"In order to connect to the lock, you must be within 30 feet or less of the door. Please try again when you are closer to the lock."
Sezam/AGLockViewController.m:1482:    [rangeExplainerAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGLockViewController.m:1484:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedBluetoothRangePopup"];
Sezam/AGLockViewController.m:1496:    UIAlertController *seamlessExplainerAlert = [UIAlertController alertControllerWithTitle:@"Automatic Connection"
Sezam/AGLockViewController.m:1497:                                                                                 message:@"The August app seamlessly uses the best connection, automatically switching between Wi-Fi and Bluetooth."
Sezam/AGLockViewController.m:1499:    UIAlertAction *learnMoreAction = [UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1500:        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/kb-remote-connect"]];
Sezam/AGLockViewController.m:1503:    UIAlertAction *gotItAction = [UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:1512:     UIAlertController *getConnectAlert = [UIAlertController alertControllerWithTitle:@"Control your Lock Remotely With August Connect"
Sezam/AGLockViewController.m:1513:                                                                              message:@"Get $20 off a Connect Wi-Fi Bridge, discount applied at checkout, available in app ONLY."
Sezam/AGLockViewController.m:1515:     [getConnectAlert addAction:[UIAlertAction actionWithTitle:@"Exit" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1516:         [self.lockOperationLog updateLongLockConnectionUserResponse:@"Exit" forMetric:@"ConnectPromoPopupResponse"];
Sezam/AGLockViewController.m:1519:     [getConnectAlert addAction:[UIAlertAction actionWithTitle:@"$20 Off Connect"
Sezam/AGLockViewController.m:1522:                                                           NSString *storeURL =  @"https://store.august.com/discount/fromanywhere20?redirect=%2Fproducts%2Faugust-connect&utm_source=august_app&utm_medium=iossidemenu";
Sezam/AGLockViewController.m:1524:                                                           [self.lockOperationLog updateLongLockConnectionUserResponse:@"LearnMore" forMetric:@"ConnectPromoPopupResponse"];
Sezam/AGLockViewController.m:1527:     [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedConnectPromoPopup"];
Sezam/AGLockViewController.m:1535:    UIAlertController *getHelpAlert = [UIAlertController alertControllerWithTitle:@"Get Connection Help"
Sezam/AGLockViewController.m:1536:                                                                          message:@"There may be a bluetooth issue with your phone or a problem with the lock. Would you like help wih improving your lock connection?"
Sezam/AGLockViewController.m:1538:    [getHelpAlert addAction:[UIAlertAction actionWithTitle:@"No Thanks" style:UIAlertActionStyleCancel handler:^(UIAlertAction *action){
Sezam/AGLockViewController.m:1539:        [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"GetConnectionHelpResponse"];
Sezam/AGLockViewController.m:1542:    [getHelpAlert addAction:[UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGLockViewController.m:1545:                                                       [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"GetConnectionHelpResponse"];
Sezam/AGLockViewController.m:1549:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedGetConnectionHelpPopup"];
Sezam/AGLockViewController.m:1557:    UIAlertController *standingNextToLockAlert = [UIAlertController alertControllerWithTitle:@"Standing Next to Door?"
Sezam/AGLockViewController.m:1558:                                                                                      message:[NSString stringWithFormat:@"Are you standing next to %@?", self.agLock.name]
Sezam/AGLockViewController.m:1560:    [standingNextToLockAlert addAction:[UIAlertAction actionWithTitle:@"No"
Sezam/AGLockViewController.m:1563:                                                                   [self.lockOperationLog updateLongLockConnectionUserResponse:@"No" forMetric:@"NextToLockResponse"];
Sezam/AGLockViewController.m:1573:                                                                                                                               tooltipText:@"Tap here to access your lock over Wi-Fi."
Sezam/AGLockViewController.m:1576:                                                                       self.bridgeTooltip.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGLockViewController.m:1580:                                                                       [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedRemoteConnectTooltip"];
Sezam/AGLockViewController.m:1595:    [standingNextToLockAlert addAction:[UIAlertAction actionWithTitle:@"Yes"
Sezam/AGLockViewController.m:1598:                                                                   [self.lockOperationLog updateLongLockConnectionUserResponse:@"Yes" forMetric:@"NextToLockResponse"];
Sezam/AGLockViewController.m:1603:    [self.lockOperationLog updateLongLockConnectionUserResponse:@"True" forMetric:@"ShowedNextToLockPopup"];
Sezam/AGLockViewController.m:1649:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockViewController.m:1650:    AGStoreWebViewController *vc = (AGStoreWebViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"StoreWebViewController"];
Sezam/AGLockViewController.m:1660:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockViewController.m:1747:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGLockViewController.m:1749:    UINavigationController *keypadSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"KeypadOTANavigationController"];
Sezam/AGLockViewController.m:1797:        NSString *findString = @"3.0.29";
Sezam/AGLockViewController.m:1800:            userString = [userString stringByAppendingString:@"\n\nBecause this is a major update, you may need to set up any HomeKit triggers and scenes you have again."];
Sezam/AGLockViewController.m:1888:    NSString *title = @"Module Communication Error";
Sezam/AGLockViewController.m:1889:    NSString *msg = @"Your August module is unable to communicate with your lock. Let's fix this!";
Sezam/AGLockViewController.m:1894:    [alertVC addAction:[UIAlertAction actionWithTitle:@"Fix This Now" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1902:    [alertVC addAction:[UIAlertAction actionWithTitle:@"Do Nothing" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1932:    NSString *title = @"Calibration Needed";
Sezam/AGLockViewController.m:1933:    NSString *message = @"This lock must be calibrated before it can be operated from the August app.";
Sezam/AGLockViewController.m:1935:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:1936:    UIAlertAction *calibrateNowAction = [UIAlertAction actionWithTitle:@"Calibrate Now" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:1937:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGLockViewController.m:1938:        AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGLockViewController.m:1965:    NSDictionary *batteryDictionary = @{@"lockId":self.agLock.objectId, @"batteryLevel":self.agLock.batteryPercentageNumber};
Sezam/AGLockViewController.m:1995:        NSString *awayMessage = [NSString stringWithFormat:@"\n%@ is set to Home.\n\nDo you want to set to Away?", self.agLock.house.name];
Sezam/AGLockViewController.m:1996:        UIAlertController *nestSetAwayAlertController = [UIAlertController alertControllerWithTitle:@"Nest: Set to Away?" message:awayMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:1997:        UIAlertAction *setToAwayAction = [UIAlertAction actionWithTitle:@"Set to Away" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:2000:        UIAlertAction *remainHomeAction = [UIAlertAction actionWithTitle:@"Remain Home" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockViewController.m:2007:        NSString *homeMessage = [NSString stringWithFormat:@"\n%@ is set to Away\n\nDo you want to end Away?", self.agLock.house.name];
Sezam/AGLockViewController.m:2008:        UIAlertController *nestSetHomeAlertController = [UIAlertController alertControllerWithTitle:@"Nest: Set to Home?" message:homeMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockViewController.m:2009:        UIAlertAction *setToHomeAction = [UIAlertAction actionWithTitle:@"Set to Home" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockViewController.m:2012:        UIAlertAction *remainAwayAction = [UIAlertAction actionWithTitle:@"Remain Away" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGHomeKitPickRoomViewController.m:36:            AGHomeKitCreateRoomViewController *createRoom = (AGHomeKitCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateRoom"];
Sezam/AGHomeKitPickRoomViewController.m:45:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitPickRoomViewController.m:52:            UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGHomeKitPickRoomViewController.m:63:    self.instructionLabel.text = [NSString stringWithFormat:@"Choose which room in %@ you want to add this lock to.", [self navController].selectedHome.name];
Sezam/AGHomeKitPickRoomViewController.m:98:    AGTableViewCell *cell = (AGTableViewCell *)[self.roomsTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitPickRoomViewController.m:100:        cell.label.text = @"Add a New Room";
Sezam/AGHomeKitPickRoomViewController.m:103:        cell.label.text = @"None";
Sezam/AGFancyProgressSpinner.m:98:    rotationAnimation = [CABasicAnimation animationWithKeyPath:@"transform"];
Sezam/AGFancyProgressSpinner.m:113:    [self.layer addAnimation:rotationAnimation forKey:@"rotationAnimation"];
Sezam/AGBridgeSetupScanViewController.m:110:        self.scanTitle.text = @"SET UP CONNECT";
Sezam/AGBridgeSetupScanViewController.m:111:        self.scanMessage.text = @"Let’s set up your August Connect!\n\nBefore you begin, make sure this phone is connected to your home Wi-Fi network.";
Sezam/AGBridgeSetupScanViewController.m:151:    self.scanMessage.text = @"Unplug your Connect, then plug it into an outlet as close to your router as possible.\n\n This will help us get Connect onto your network.";
Sezam/AGBridgeSetupScanViewController.m:152:    [self.actionButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:180:    self.scanMessage.text = @"Unfortunately, we failed to get August Connect onto your network. Let’s see if we can help.";
Sezam/AGBridgeSetupScanViewController.m:197:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:227:            self.scanMessage.text = @"Plug Connect into an outlet as close to your door as possible.\n\nFor best performance, make sure there is a strong Wi-Fi signal at your door.";
Sezam/AGBridgeSetupScanViewController.m:228:            [self.actionButton setTitle:@"OK, CONNECT IS PLUGGED IN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:240:            CABasicAnimation *flash = [CABasicAnimation animationWithKeyPath:@"opacity"];
Sezam/AGBridgeSetupScanViewController.m:251:            /// [self.blinkyOverlayView.layer addAnimation:flash forKey:@"flashAnimation"];
Sezam/AGBridgeSetupScanViewController.m:253:            self.scanMessage.text = @"Next, press and hold the front button on your Connect for 5 seconds, then wait a moment for the green light to begin blinking slowly.";
Sezam/AGBridgeSetupScanViewController.m:254:            [self.actionButton setTitle:@"OK, LIGHT IS BLINKING GREEN" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:324:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name == 'August Connect'"];
Sezam/AGBridgeSetupScanViewController.m:356:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Scanning for Venus or Mars found %ld bridges", numBridges];
Sezam/AGBridgeSetupScanViewController.m:358:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:374:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:383:        BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGBridgeSetupScanViewController.m:393:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGBridgeSetupScanViewController.m:410:    self.scanMessage.text = @"We found your Connect! \n\nNow let’s get Connect onto your Wi-Fi network.";
Sezam/AGBridgeSetupScanViewController.m:412:    [self.actionButton setTitle:@"BEGIN ACCESSORY SETUP" forState:UIControlStateNormal];
Sezam/AGBridgeSetupScanViewController.m:419:    UIStoryboard *bridgeSetupStoryboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGBridgeSetupScanViewController.m:420:    AGBridgeSetupSelectViewController* selectViewController = [bridgeSetupStoryboard instantiateViewControllerWithIdentifier:@"bridgeSetupSelect"];
Sezam/AGBridgeSetupScanViewController.m:454:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupScanViewController.m:473:    regex = [NSRegularExpression regularExpressionWithPattern:@"August Connect-([0-9A-Z]+)-WAC"
Sezam/AGBridgeSetupScanViewController.m:521:    NSString *bridgeModel = bridgeModel = @"august-connect";
Sezam/AGBridgeSetupScanViewController.m:563:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Found %d unconfigured accessories", (int)accessories.count];
Sezam/AGBridgeSetupScanViewController.m:565:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:572:    NSMutableString* logMessage = [NSMutableString stringWithFormat:@"Removed %d unconfigured accessories", (int)accessories.count];
Sezam/AGBridgeSetupScanViewController.m:574:        [logMessage appendFormat:@"\n '%@' %@", accessory.name, accessory.macAddress];
Sezam/AGBridgeSetupScanViewController.m:611:            NSString *wifiChangeAlertMessage = [NSString stringWithFormat:@"Please be aware that your August Device has joined a different Wi-Fi Network named \"%@\". This may be due to incompatibilities between your original network and your August Device. For example, Connect does not support 5 GHz networks or 40 MHz channel width.", [AGUtility getWiFiSSID]];
Sezam/AGBridgeSetupScanViewController.m:613:            UIAlertController *wifiChangedAlertController = [UIAlertController alertControllerWithTitle:@"Warning: Wi-Fi Network has Changed" message:wifiChangeAlertMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGBridgeSetupScanViewController.m:614:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGBridgeSetupScanViewController.m:627:        BOOL disableConnectOnlineCheckByPubNub = [AGUtility checkForAppFeature:@"disableConnectOnlineCheckByPubNub"];
Sezam/AGBridgeSetupScanViewController.m:629:            AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:697:    NSString *status = [messageData objectForKey:@"status"];
Sezam/AGBridgeSetupScanViewController.m:699:        if ([status isEqualToString:@"associated_bridge_online"]) {
Sezam/AGBridgeSetupScanViewController.m:724:    BOOL disableConnectOnlineCheckByPubNub = [AGUtility checkForAppFeature:@"disableConnectOnlineCheckByPubNub"];
Sezam/AGBridgeSetupScanViewController.m:733:        AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGBridgeSetupScanViewController.m:748:    AGBridgeSetupProgressViewController* progressViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupProgress"];
Sezam/AGAddContactBaseViewController.m:43:    AGTableViewCell *selectionCell = [tableView dequeueReusableCellWithIdentifier:@"SelectionCell"];
Sezam/AGAddContactBaseViewController.m:109:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:114:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:120:        UIStoryboard *guestListStoryboard = [UIStoryboard storyboardWithName:@"GuestList" bundle:nil];
Sezam/AGAddContactBaseViewController.m:121:        self.contactPersonView = [guestListStoryboard instantiateViewControllerWithIdentifier:@"Contact Person View Controller"];
Sezam/AGAddContactBaseViewController.m:123:        if ([self.firstName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:124:            if ([self.lastName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:125:                self.contactPersonView.contactNameString = @"";
Sezam/AGAddContactBaseViewController.m:129:        } else if ([self.lastName isEqualToString:@""]) {
Sezam/AGAddContactBaseViewController.m:132:            self.contactPersonView.contactNameString = [NSString stringWithFormat:@"%@ %@", self.firstName, self.lastName];
Sezam/AGAddContactBaseViewController.m:145:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:149:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:166:        self.firstName = @"";
Sezam/AGAddContactBaseViewController.m:170:        self.lastName = @"";
Sezam/AGAddContactBaseViewController.m:301:    NSString * message = @"This person is already a user of this doorbell";
Sezam/AGDoor.m:114:    if (self.bridge && [self.bridge.model isEqual:@"august-connect"]) {
Sezam/AGPubNubClient.m:94:        [[NSNotificationCenter defaultCenter] postNotificationName:@"PubSubServiceReconnection" object:nil];
Sezam/AGPubNubClient.m:105:    [payload setObject:[AGUtility getIdentifierForVendor] forKey: @"deviceID"];
Sezam/AGPubNubClient.m:106:    [payload setObject:[self getSequenceForDevice:[AGUtility getIdentifierForVendor]] forKey: @"sequence"];
Sezam/AGFeatureManager.m:68:        NSAssert(false, @"BOOL type features should be parseable to NSNumbers");
Sezam/AGFeatureManager.m:87:    NSArray *featureComponents = [featureCharacteristicsStr componentsSeparatedByString:@","];
Sezam/AGFeatureManager.m:90:        NSAssert(featureComponentsCountCorrect, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", featureCharacteristicsStr]));
Sezam/AGFeatureManager.m:99:    NSArray *populationRangeComponents = [populationRange componentsSeparatedByString:@"-"];
Sezam/AGFeatureManager.m:102:        NSAssert(populationRangeComponentsCountCorrect, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", populationRange]));
Sezam/AGFeatureManager.m:113:        NSAssert(populationLowerAndUpperValParseable, ([NSString stringWithFormat:@"Experimental feature has incorrect format: %@", populationRange]));
Sezam/AGFeatureManager.m:135:    NSString *populationIDInput = [NSString stringWithFormat:@"%@-%@", [AGUtility persistentDeviceID], feature.populationID];
Sezam/AGFeatureManager.m:154:    return [self.featureDictionary objectForKey:@"tests"];
Sezam/AGFeatureManager.m:182:    NSString *alreadyLoggedKey = [NSString stringWithFormat:@"LoggedFeatureUnparseable-(%@)",featureInfo];
Sezam/AGFeatureManager.m:188:        AGAnalyticsDiaryInfo(@"ExperimentalFeatureUnparseable", featureInfo);
Sezam/AGFeatureManager.m:218:        [hexString appendString:[NSString stringWithFormat:@"%02lx", (unsigned long)dataBuffer[i]]];
Sezam/AGUnityLostKeyExchangeDriver.m:55:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockView" bundle:nil];
Sezam/AGUnityLostKeyExchangeDriver.m:56:    AGUnityLostKeyViewController *beginVC = [storyboard instantiateViewControllerWithIdentifier:@"AGUnityLostKeyViewController"];
Sezam/AGUnityLostKeyExchangeDriver.m:83:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGUnityLostKeyExchangeDriver.m:84:        AGUnityModuleRegisterViewController *registerVC = [storyboard instantiateViewControllerWithIdentifier:@"AGUnityModuleRegisterViewController"];
Sezam/AGDoorbellChangeNameViewController.m:36:        UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Please enter a name." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellChangeNameViewController.m:49:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error updating doorbell name: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGAddDeviceLockPickerViewController.m:85:    AGTableViewCell *houseHeadercell = [self.housesAndLocksTableView dequeueReusableCellWithIdentifier: @"HouseSectionHeader"];
Sezam/AGAddDeviceLockPickerViewController.m:110:    AGTableViewCell *cell = [self.housesAndLocksTableView dequeueReusableCellWithIdentifier: @"LockPickerCell"];
Sezam/AGAddDeviceLockPickerViewController.m:157:        [self performSegueWithIdentifier:@"unwindToAddDeviceViewController" sender:nil];
Sezam/AGAutoUnlockReportProblemController.m:49:                                    @"My door unlocked too late.",
Sezam/AGAutoUnlockReportProblemController.m:50:                                    @"My door did not unlock when I expected it to.",
Sezam/AGAutoUnlockReportProblemController.m:51:                                    @"My door unlocked when I did not want it to.",
Sezam/AGAutoUnlockReportProblemController.m:52:                                    @"Home or Away mode changed when I didn’t expect it to.",
Sezam/AGAutoUnlockReportProblemController.m:53:                                    @"Other"
Sezam/AGAutoUnlockReportProblemController.m:58:                                        @(0):@"DelayedAutoUnlock",
Sezam/AGAutoUnlockReportProblemController.m:59:                                        @(1):@"FailedToUnlock",
Sezam/AGAutoUnlockReportProblemController.m:60:                                        @(2):@"UnexpectedUnlock",
Sezam/AGAutoUnlockReportProblemController.m:61:                                        @(3):@"UnexpectedChangeToAwayMode",
Sezam/AGAutoUnlockReportProblemController.m:62:                                        @(4):@"Other"
Sezam/AGAutoUnlockReportProblemController.m:84:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"We need a little more info" message:@"Please select the type of issue to send a report." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockReportProblemController.m:85:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockReportProblemController.m:96:                                                                                                 @"au_problem_category":self.indexToProblemCategoryDict[@(self.view.selectedProblemCategoryIndex)],
Sezam/AGAutoUnlockReportProblemController.m:99:        [reportProblemDataDict setObject:userDescription forKey:@"au_user_description"];
Sezam/AGAutoUnlockReportProblemController.m:102:    AGAnalyticsDiaryInfoData(@"AutoUnlockReportProblem", reportProblemDataDict);
Sezam/AGAutoUnlockManager.m:90:        self.unlockAttemptSessionID = @"";
Sezam/AGAutoUnlockManager.m:91:        self.bleRegionDetector = [[AGBLERegionDetector alloc] initWithID:@"autounlock_ble_region_detector"];
Sezam/AGAutoUnlockManager.m:326:    NSNumber *radius = [fencePrefs objectForKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:331:    double latitude = [[fencePrefs objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:332:    double longitude = [[fencePrefs objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:358:    NSNumber *radius = [fencePrefs objectForKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:362:    double latitude = [[fencePrefs objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:363:    double longitude = [[fencePrefs objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:401:        NSString *uuid = [curExitFence objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:402:        NSMutableDictionary *exitRegionEventDetail = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"]];
Sezam/AGAutoUnlockManager.m:407:            [detail setObject:@1 forKey:@"gpsexitverifysuccess"];
Sezam/AGAutoUnlockManager.m:412:            [detail setObject:@1 forKey:@"gpsexitverifyfailed"];
Sezam/AGAutoUnlockManager.m:416:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetail forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:437:        [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Geofence relaunch, locationManager: %@, delegate: %@", self.locationManager, self.locationManager.delegate] isDebugMessage:YES logWithEvent:@"geofenceRelaunch" lockID:nil];
Sezam/AGAutoUnlockManager.m:468:    NSString *kHasWarnedUserKey = @"WarnedUserAutoUnlockWifi";
Sezam/AGAutoUnlockManager.m:469:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:478:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Auto-Unlock Location" message:@"Enabling Wi-Fi in Settings will improve your location accuracy. Auto-Unlock may not perform reliably if Wi-Fi remains off." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGAutoUnlockManager.m:518:    NSDictionary *exitRegionEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:523:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:551:        returnBlock([NSDictionary dictionaryWithObject:@"1" forKey:@"deprecatedenable"]);
Sezam/AGAutoUnlockManager.m:554:    if ([outDict objectForKey:@"time"])
Sezam/AGAutoUnlockManager.m:556:        NSTimeInterval timeExited = [(NSNumber *)[outDict objectForKey:@"time"] doubleValue];
Sezam/AGAutoUnlockManager.m:564:        [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Time elapsed was %@ seconds", [NSNumber numberWithInt:(int)timeElapsed]] isDebugMessage:YES  logWithEvent:@"enteredLockRegion" lockID:uuid];
Sezam/AGAutoUnlockManager.m:565:        [outDict setObject:[NSNumber numberWithFloat:timeElapsed] forKey:@"outsideseconds"];
Sezam/AGAutoUnlockManager.m:567:        NSTimeInterval exit1 = [(NSNumber *)[outDict objectForKey:@"exit1"] doubleValue];
Sezam/AGAutoUnlockManager.m:568:        NSTimeInterval exit2 = [(NSNumber *)[outDict objectForKey:@"exit2"] doubleValue];
Sezam/AGAutoUnlockManager.m:574:            [outDict setObject:[NSNumber numberWithFloat:exitDiff] forKey:@"exitdiff"];
Sezam/AGAutoUnlockManager.m:579:        [outDict setObject:[NSNumber numberWithFloat:timeOfDay] forKey:@"hour24enter"];
Sezam/AGAutoUnlockManager.m:583:        [outDict setObject:[NSNumber numberWithFloat:timeOfDay] forKey:@"hour24exit"];
Sezam/AGAutoUnlockManager.m:611:                        [outDict setObject:[NSNumber numberWithFloat:1.0] forKey:@"queriedactivity"];
Sezam/AGAutoUnlockManager.m:615:                            [outDict setObject:[NSNumber numberWithFloat: [self timeDoingMovingActivity:activities startingFrom:startDate computeWalkingOnly:TRUE]] forKey:@"walkseconds" ];
Sezam/AGAutoUnlockManager.m:616:                            [outDict setObject:[NSNumber numberWithFloat:  [self timeDoingMovingActivity:activities startingFrom:startDate computeWalkingOnly:FALSE]] forKey:@"othertransseconds" ];
Sezam/AGAutoUnlockManager.m:639:    if ([attributes objectForKey:@"deprecatedenable"] != nil) {
Sezam/AGAutoUnlockManager.m:645:    if ([preferences objectForKey:@"debounce"] != nil)
Sezam/AGAutoUnlockManager.m:646:        debounceInterval = [[preferences objectForKey:@"debounce"] floatValue];
Sezam/AGAutoUnlockManager.m:648:    NSNumber *outsideseconds = (NSNumber *) [attributes objectForKey:@"outsideseconds"];
Sezam/AGAutoUnlockManager.m:685:        BOOL isEnteringOuterFence = ([region.identifier rangeOfString:@":OUTER"].location !=  NSNotFound);
Sezam/AGAutoUnlockManager.m:691:            NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:692:            NSString *lockUUID = [regionsDictionary objectForKey:lockID][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:700:            AGAnalyticsDiaryInfoData(@"BLERegionDetectionInnerGeofenceFired", [self autoUnlockEnvironmentFactorsForLogging]);
Sezam/AGAutoUnlockManager.m:725:    NSString *uuid = [autoUnlockPrefs objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:728:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Entered region radius:%d lock:%@", (int)((CLCircularRegion *)region).radius, uuid] isDebugMessage:YES  logWithEvent:@"enteredLockRegion" lockID:[self lockIDFromRegionIdentifier:region.identifier]];
Sezam/AGAutoUnlockManager.m:730:    NSArray *exitRegionLockUUIDs = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockUUIDs"];     // Deprecated storage method. Remove in future version of the app
Sezam/AGAutoUnlockManager.m:735:        NSNumber *timeExitedNum = (NSNumber *)[exitEventDetail objectForKey:@"time"];
Sezam/AGAutoUnlockManager.m:743:                AGAnalyticsDiaryInfoData(@"CancelAutoUnlockForImmediateFenceReentry", (@{@"timeElapsed":[NSString stringWithFormat:@"%f", timeElapsed]}));
Sezam/AGAutoUnlockManager.m:753:        NSString *exitingFence = [self.curExitingFence objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:771:            [normalizedAttributes setValue:lockID forKey:@"lockid"];
Sezam/AGAutoUnlockManager.m:795:            [normalizedAttributes setValue:self.unlockAttemptSessionID forKey:@"AASID"]; // This is our session ID for tracking results of our autounlock
Sezam/AGAutoUnlockManager.m:796:            AGAnalyticsDiaryInfoData(@"DetectInputSuccess", normalizedAttributes);
Sezam/AGAutoUnlockManager.m:800:                [self doAutoUnlockLockID:[self lockIDFromRegionIdentifier:region.identifier] uuid:uuid timeElapsed:[((NSNumber *)[normalizedAttributes objectForKey:@"outsideseconds"]) floatValue]];
Sezam/AGAutoUnlockManager.m:809:            AGAnalyticsDiaryInfoData(@"DetectInputFail", normalizedAttributes);
Sezam/AGAutoUnlockManager.m:824:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Start scan for lock %@", uuid] isDebugMessage:YES logWithEvent:@"retrieveLock" lockID:lockID];
Sezam/AGAutoUnlockManager.m:847:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:849:    NSString *uuid = [coordinateDict objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:857:    NSString *wifiStatus = wifiOn ? @"yes":@"no";
Sezam/AGAutoUnlockManager.m:858:    NSString *msgForLog = [NSString stringWithFormat:@"Left region radius:%d wifi:%@ lock:%@",(int)((CLCircularRegion *)region).radius, wifiStatus, uuid];
Sezam/AGAutoUnlockManager.m:859:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:msgForLog isDebugMessage:YES  logWithEvent:@"exitLockRegion" lockID:[self lockIDFromRegionIdentifier:region.identifier]];
Sezam/AGAutoUnlockManager.m:862:    NSMutableDictionary *exitRegionEventDetails = [NSMutableDictionary dictionaryWithDictionary:[[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"]];
Sezam/AGAutoUnlockManager.m:873:    BOOL exitingOuterRadius = ([((CLCircularRegion *)region).identifier rangeOfString:@":OUTER"].location !=  NSNotFound); // Check id to see if this is an outer geofence
Sezam/AGAutoUnlockManager.m:877:    if ((exitingOuterRadius)  && ([eventDetail objectForKey:@"time"] != nil))
Sezam/AGAutoUnlockManager.m:883:        [eventDetail setObject:timeNumber forKey:@"time"];
Sezam/AGAutoUnlockManager.m:887:        [eventDetail setObject:timeNumber forKey:@"exit2"];
Sezam/AGAutoUnlockManager.m:889:        [eventDetail setObject:timeNumber forKey:@"exit1"];
Sezam/AGAutoUnlockManager.m:891:    [eventDetail setObject: (wifiOn?@1:@0) forKey:@"wifionexit"];
Sezam/AGAutoUnlockManager.m:896:    [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetails forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:911:        if ([coordinateDict objectForKey:@"radius"] != nil) {
Sezam/AGAutoUnlockManager.m:912:            userSetRadius = [((NSNumber *)[coordinateDict objectForKey:@"radius"]) floatValue];
Sezam/AGAutoUnlockManager.m:925:                  [self.curExitingFence setObject: [NSNumber numberWithInt:((CLCircularRegion *)region).radius] forKey:@"crossedradius"];
Sezam/AGAutoUnlockManager.m:964:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:966:        NSString *uuid = [regionsDictionary objectForKey:curKey][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:992:                NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:993:                NSString *curRegionLockUUID = [regionsDictionary objectForKey:curRegionLockID][@"lockUUID"];
Sezam/AGAutoUnlockManager.m:997:                        AGAnalyticsDiaryInfoData(@"BLERegionDetectionSucceededWhenGeofencesFailed", [self autoUnlockEnvironmentFactorsForLogging]);
Sezam/AGAutoUnlockManager.m:1037:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1039:    NSString *uuid = [coordinateDict objectForKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:1064://Used for analytics to see what kind of impact disabling wifi has on geofence success. This may change over time and become unreliable as it is based on @"awdl0" presence which apple could change at anytime.
Sezam/AGAutoUnlockManager.m:1079:    return [cset countForObject:@"awdl0"] > 1 ? YES : NO;
Sezam/AGAutoUnlockManager.m:1086:        [observations setObject:(lowPowerModeEnabled ? @"true": @"false") forKey:@"low_power_mode_enabled"];
Sezam/AGAutoUnlockManager.m:1088:    [observations setObject:([self isWiFiEnabled] ? @"true": @"false") forKey:@"wifi_enabled"];
Sezam/AGAutoUnlockManager.m:1098:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1106:            NSDictionary *exitRegionEventDetail = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1163:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1172:    NSString *versionID = [geofenceRegion objectForKey:@"version"];
Sezam/AGAutoUnlockManager.m:1174:        versionID = @"oldtodelete";
Sezam/AGAutoUnlockManager.m:1180:        [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1191:    [[NSUserDefaults standardUserDefaults] setObject:featureList forKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1199:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1203:    NSNumber *motionDisabled = [dict objectForKey:@"disablemotiondata"];
Sezam/AGAutoUnlockManager.m:1214:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1218:    return [[dict objectForKey:@"forcemotionupdate"] boolValue];
Sezam/AGAutoUnlockManager.m:1223:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1227:        return [[dict objectForKey:@"askedmotionpermissions"] boolValue];
Sezam/AGAutoUnlockManager.m:1235:    NSMutableDictionary *dict =  [NSMutableDictionary dictionaryWithDictionary: [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"]];
Sezam/AGAutoUnlockManager.m:1238:    [dict setObject:[NSNumber numberWithBool:TRUE] forKey:@"askedmotionpermissions"];
Sezam/AGAutoUnlockManager.m:1239:    [[NSUserDefaults standardUserDefaults] setObject:dict forKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1244:    NSMutableDictionary *regionsToRemoveDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1252:        if ([lock.type isEqualToString:@"superuser"]) {
Sezam/AGAutoUnlockManager.m:1275:    NSDictionary *dict =  [[NSUserDefaults standardUserDefaults]  objectForKey:@"autounlockfeatures"];
Sezam/AGAutoUnlockManager.m:1279:    return [[dict objectForKey:@"backgroundgps"] boolValue];
Sezam/AGAutoUnlockManager.m:1284:    [geofenceRegion setValue:geo.versionID forKey:@"version"];
Sezam/AGAutoUnlockManager.m:1285:    [geofenceRegion setValue:[NSString stringWithFormat:@"%f", geo.debounceInterval] forKey:@"debounce"];
Sezam/AGAutoUnlockManager.m:1287:        [geofenceRegion setValue:geo.thresholds forKey:@"thresholds"];
Sezam/AGAutoUnlockManager.m:1289:        [geofenceRegion removeObjectForKey:@"thresholds"];
Sezam/AGAutoUnlockManager.m:1293:        [geofenceRegion setValue:geo.probabilities forKey:@"probabilities"];
Sezam/AGAutoUnlockManager.m:1295:        [geofenceRegion removeObjectForKey:@"probabilities"];
Sezam/AGAutoUnlockManager.m:1309:    NSString *latitude = [NSString stringWithFormat:@"%f", lockLocation.latitude];
Sezam/AGAutoUnlockManager.m:1310:    NSString *longitude = [NSString stringWithFormat:@"%f", lockLocation.longitude];
Sezam/AGAutoUnlockManager.m:1311:    NSString *radiusString = [NSString stringWithFormat:@"%f", radius];
Sezam/AGAutoUnlockManager.m:1313:    NSMutableDictionary *coordinateDict = [NSMutableDictionary dictionaryWithDictionary: @{@"latitude": latitude, @"longitude": longitude, @"radius":radiusString, @"lockUUID":lockIdentifier}];
Sezam/AGAutoUnlockManager.m:1318:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1320:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1329:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1337:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1340:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1349:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1357:        [coordinateDict setObject:lockIdentifier forKey:@"lockUUID"];
Sezam/AGAutoUnlockManager.m:1360:        [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1367:    NSMutableDictionary *regionsDictionary = [NSMutableDictionary dictionaryWithDictionary:[AGUtility readDictionaryFromFile:@"AutoUnlockRegions"]];
Sezam/AGAutoUnlockManager.m:1378:    [AGUtility writeDictionaryToFile:regionsDictionary fileName:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1397:    NSDictionary *regionsDictionary = [AGUtility readDictionaryFromFile:@"AutoUnlockRegions"];
Sezam/AGAutoUnlockManager.m:1403:        double latitude = [[coordinateDict objectForKey:@"latitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:1404:        double longitude = [[coordinateDict objectForKey:@"longitude"] doubleValue];
Sezam/AGAutoUnlockManager.m:1405:        float radius = [[coordinateDict objectForKey:@"radius"] floatValue];
Sezam/AGAutoUnlockManager.m:1412:            CLCircularRegion *lockMonitoringRegionOuter = [[CLCircularRegion alloc] initWithCenter:CLLocationCoordinate2DMake(latitude, longitude) radius:LOCK_MONITORING_OUTER_RADIUS identifier:[NSString stringWithFormat:@"%@:OUTER", lockID]];
Sezam/AGAutoUnlockManager.m:1429:        if(![region.identifier containsString:@"ExitDetector"]){//It would be nice if we could positively identify which regions this class is responsible for but for now this is the easiest thing. After the old autounlock system has been completely migrated away from we should remove this class.
Sezam/AGAutoUnlockManager.m:1447:    NSArray *legacyLockInfo = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockUUIDs"];
Sezam/AGAutoUnlockManager.m:1451:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionLockUUIDs forKey:@"ExitRegionLockUUIDs"];
Sezam/AGAutoUnlockManager.m:1456:    NSDictionary *exitRegionEventDetailOriginal = [[NSUserDefaults standardUserDefaults] objectForKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1460:        [[NSUserDefaults standardUserDefaults] setObject:exitRegionEventDetail forKey:@"ExitRegionLockEventDetail"];
Sezam/AGAutoUnlockManager.m:1483:    NSString *lockID = @"unknown";
Sezam/AGAutoUnlockManager.m:1499:        AGAnalyticsDiaryInfo(@"AppActivatedToForeground", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1510:    [[AGAppDelegate app] displayLocalNotifiationWithMessage:@"Lock Fully Connected" isDebugMessage:YES logWithEvent:@"connectedLock" lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1514:        AGAnalyticsDiaryInfo(@"AuthorizedInitial", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1541:            [[AGAppDelegate app] displayLocalNotifiationWithMessage:[NSString stringWithFormat:@"Auto-Unlocking %@. Welcome back to %@.", lockName, houseName] isDebugMessage:NO logWithEvent:kSendUnlockCommandEvent lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1543:            [[AGAppDelegate app] displayLocalNotifiationWithMessage:@"Auto-Unlocking August" isDebugMessage:NO logWithEvent:kSendUnlockCommandEvent lockID:agLock.objectId];
Sezam/AGAutoUnlockManager.m:1554:            AGAnalyticsDiaryInfo(@"AutoUnlockPerformSuccess", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1558:            AGAnalyticsDiaryInfo(@"AutoUnlockPerformFail", @"%@ AASID:%@", agLock.objectId, self.unlockAttemptSessionID);
Sezam/AGAutoUnlockManager.m:1572:    NSString *errorMessage =  [error.userInfo objectForKey:@"Error"];
Sezam/AGAutoUnlockManager.m:1574:    if ([errorMessage isEqualToString:@"Connection soft timeout"])
Sezam/AGAutoUnlockManager.m:1583:    NSUInteger endOfIdIndex = [regionIdentifier rangeOfString:@":OUTER"].location;
Sezam/AGUnitySettingModel.m:17:            return @"English";
Sezam/AGUnitySettingModel.m:19:            return @"Spanish";
Sezam/AGUnitySettingModel.m:21:            return @"French";
Sezam/AGUnitySettingModel.m:23:            return @"English";
Sezam/AGUnitySettingModel.m:30:            return @"High Volume";
Sezam/AGUnitySettingModel.m:32:            return @"Low Volume";
Sezam/AGUnitySettingModel.m:34:            return @"Silent";
Sezam/AGUnitySettingModel.m:36:            return @"Low Volume";
Sezam/AGUnitySettingModel.m:43:            return @"Normal";
Sezam/AGUnitySettingModel.m:45:            return @"Privacy";
Sezam/AGUnitySettingModel.m:47:            return @"Vacation";
Sezam/AGUnitySettingModel.m:49:            return @"Normal";
Sezam/AGUnitySettingModel.m:55:    return [NSString stringWithFormat:@"showIndicator: %d, allowOneTouch: %d, languagStr: %@, volumeStr: %@, operatingStr: %@",
Sezam/AGPinEnableViewController.m:109:    NSString *currentStateString = (currentState)?[AGUserPinEntry pinStateStringFromEnum:currentState.curState] : @"none";
Sezam/AGPinEnableViewController.m:111:    NSString *futureStateString = (futureState)? [AGUserPinEntry pinStateStringFromEnum:futureStateEnum] : @"none";
Sezam/AGPinEnableViewController.m:115:                                       @"none|none":[NSNull null],
Sezam/AGPinEnableViewController.m:116:                                       @"none|created":[[AGPinServerAction alloc] initWithState:AGPinActionLoad action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:117:                                       @"none|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:118:                                       @"none|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:119:                                       @"none|deleting":[NSNull null], // PIN is already off device
Sezam/AGPinEnableViewController.m:121:                                       @"deleting|none":[NSNull null],
Sezam/AGPinEnableViewController.m:122:                                       @"deleting|created":[[AGPinServerAction alloc] initWithState:AGPinActionLoad action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:123:                                       @"deleting|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:124:                                       @"deleting|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:125:                                       @"deleting|deleting":[NSNull null],
Sezam/AGPinEnableViewController.m:127:                                       @"disabled|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:128:                                       @"disabled|created":[[AGPinServerAction alloc] initWithState:AGPinActionEnable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:129:                                       @"disabled|disabled":[NSNull null],
Sezam/AGPinEnableViewController.m:130:                                       @"disabled|disabling":[NSNull null],
Sezam/AGPinEnableViewController.m:131:                                       @"disabled|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:133:                                       @"created|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:134:                                       @"created|created":[NSNull null],
Sezam/AGPinEnableViewController.m:135:                                       @"created|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:136:                                       @"created|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:137:                                       @"created|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:139:                                       @"loaded|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:140:                                       @"loaded|created":[NSNull null],
Sezam/AGPinEnableViewController.m:141:                                       @"loaded|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:142:                                       @"loaded|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:143:                                       @"loaded|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:145:                                       @"enabling|none":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent] ,
Sezam/AGPinEnableViewController.m:146:                                       @"enabling|created":[NSNull null],
Sezam/AGPinEnableViewController.m:147:                                       @"enabling|disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDisable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:148:                                       @"enabling|disabling":[[AGPinServerAction alloc] initWithState:AGPinActionEnable action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:149:                                       @"enabling|deleting":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit]
Sezam/AGPinEnableViewController.m:152:    NSString *stateTransitionText = [NSString stringWithFormat:@"%@|%@", currentStateString, futureStateString];
Sezam/AGPinEnableViewController.m:154:    NSObject *objectAction = [stateTransitions objectForKey:[NSString stringWithFormat:@"%@|%@", currentStateString, futureStateString]];
Sezam/AGPinEnableViewController.m:169:                NSNumber *reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:206:    NSString *oldStateString = (oldState)?[AGUserPinEntry pinStateStringFromEnum:oldState.curState] : @"none";
Sezam/AGPinEnableViewController.m:210:    NSDictionary *stateTransitions = @{@"loaded":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:211:                                       @"deleting":[NSNull null],
Sezam/AGPinEnableViewController.m:212:                                       @"disabled":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:213:                                       @"disabling":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionIntent],
Sezam/AGPinEnableViewController.m:214:                                       @"enabling":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit],
Sezam/AGPinEnableViewController.m:215:                                       @"created":[[AGPinServerAction alloc] initWithState:AGPinActionDelete action: AGPinActionCommit] };
Sezam/AGPinEnableViewController.m:235:        NSAssert(([serverActions count] == 2), @"Only two state transitions are supported at a time to disable a PIN");
Sezam/AGPinEnableViewController.m:284:                NSString *channel = [dict objectForKey:@"channelID"];
Sezam/AGPinEnableViewController.m:285:                NSNumber *numRecords = [dict objectForKey:@"numRecords"];
Sezam/AGPinEnableViewController.m:324:        NSString *messageText = [d objectForKey:@"message"];
Sezam/AGPinEnableViewController.m:325:        if ([messageText isEqualToString:@"PinSyncComplete"])
Sezam/AGPinEnableViewController.m:335:        if ([messageText isEqualToString:@"PinSyncFail"])
Sezam/AGPinEnableViewController.m:369:                self.pinUserID = [dict objectForKey:@"id"];
Sezam/AGPinEnableViewController.m:389:        self.settingPinAlert = [[UIAlertView alloc] initWithTitle:@"Updating Entry Codes" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGPinEnableViewController.m:582:    [self.view.enableDisableButton setType:@"Secondary"];
Sezam/AGPinEnableViewController.m:585:        [self.view.enableDisableButton setTitle:@"DEACTIVATE ENTRY CODE" forState:UIControlStateNormal];
Sezam/AGPinEnableViewController.m:592:        [self.view.enableDisableButton setTitle:@"REACTIVATE ENTRY CODE" forState:UIControlStateNormal];
Sezam/AGPinEnableViewController.m:593:        [self.view.enableDisableButton setType:@"Primary"];
Sezam/AGPinEnableViewController.m:653:            self.reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:678:        NSString *pinCode = responseDict[@"pin"];
Sezam/AGPinEnableViewController.m:679:        self.reservedSlot = responseDict[@"slot"];
Sezam/AGPinEnableViewController.m:761:    UIAlertView *notConnectedAlert = [[UIAlertView alloc] initWithTitle:@"Not Connected" message:@"Cannot update the entry codes because we are not connected to the lock. We will update them the next time you connect to the lock." delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGPinEnableViewController.m:862:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle: [NSString stringWithFormat:@"Entry code must be between %d and %d digits.", REQUIRED_MIN_PIN_LENGTH, REQUIRED_MAX_PIN_LENGTH] message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:@"OK", nil];
Sezam/AGPinEnableViewController.m:933:                                             otherButtonTitles:@"Ok", nil];
Sezam/AGContactPersonViewController.m:73:    static NSString *contactTableCellIdentifier = @"NumberCell";
Sezam/AGContactPersonViewController.m:76:    cell.textLabel.text = [NSString stringWithFormat:@"%@ (%@)", currentNumber, cleanedNumberTypeString];
Sezam/AGPasswordInstructionsViewController.m:65:    if ([segue.identifier isEqualToString:@"PasswordInstructionsToResetPassword"]) {
Sezam/AGChooseUserController.m:48:    self.view.titleLabel.text = @"CHOOSE USER";
Sezam/AGRegionExitEvent.m:27:    return @[@"location"];
Sezam/AGLockAndDoorCalibrationViewController.m:144:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockAndDoorCalibrationViewController.m:145:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:147:    installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/dev/installation/doorsense-asl4/"];
Sezam/AGLockAndDoorCalibrationViewController.m:191:            if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGTristepOnboardingChecklistViewController"]) {
Sezam/AGLockAndDoorCalibrationViewController.m:223:        NSString *alertMsg = @"“Lock Only” calibration will disable DoorSense. \n\n Without DoorSense you will lose the ability to detect if your door is open, use Instant Auto-Lock, or receive Door Ajar notifications.";
Sezam/AGLockAndDoorCalibrationViewController.m:225:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Disable DoorSense?"
Sezam/AGLockAndDoorCalibrationViewController.m:228:        [alert addAction:[UIAlertAction actionWithTitle:@"Continue, Disable DoorSense"
Sezam/AGLockAndDoorCalibrationViewController.m:235:        [alert addAction:[UIAlertAction actionWithTitle:@"Go Back"
Sezam/AGLockAndDoorCalibrationViewController.m:315:            UIAlertController *instantLockWillNotWorkAlert = [UIAlertController alertControllerWithTitle:@"Warning" message:@"Instant Auto-Lock is enabled, but will not function, as you are not Calibrating DoorSense. We are updating your AutoLock settings to On a Timer with an auto relock at 2 minutes." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:316:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:514:        [self showErrorAlertWithMessage:@"There was a lock communication error while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:517:    } else if ([responseDict objectForKey:@"error"]) {
Sezam/AGLockAndDoorCalibrationViewController.m:518:        NSNumber *errorResponse = [responseDict objectForKey:@"error"];
Sezam/AGLockAndDoorCalibrationViewController.m:523:            [self showErrorAlertWithMessage:@"There was an error determining Door State while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:528:            [self showErrorAlertWithMessage:@"Make sure your DoorSense is placed close enough to the lock and restart calibration."];
Sezam/AGLockAndDoorCalibrationViewController.m:533:            [self showErrorAlertWithMessage:@"There was a lock calibration error while calibrating. Start again."];
Sezam/AGLockAndDoorCalibrationViewController.m:580:                    targetCCW.group =  @"CCW";
Sezam/AGLockAndDoorCalibrationViewController.m:581:                    stallCCW.group = @"CCW";
Sezam/AGLockAndDoorCalibrationViewController.m:590:            setTargetCW.group = @"CW";
Sezam/AGLockAndDoorCalibrationViewController.m:591:            setStall.group = @"CW";
Sezam/AGLockAndDoorCalibrationViewController.m:605:            [self showErrorAlertWithMessage:@"There was an error while calibrating. Try again."];
Sezam/AGLockAndDoorCalibrationViewController.m:651:            [self showErrorAlertWithMessage:@"There was an error while calibrating. Try again."];
Sezam/AGLockAndDoorCalibrationViewController.m:684:            message = @"Would you like to calibrate both the smart lock and DoorSense?";
Sezam/AGLockAndDoorCalibrationViewController.m:685:            primaryButtonLabelText = @"LOCK AND DOORSENSE";
Sezam/AGLockAndDoorCalibrationViewController.m:690:            message = @"First, close your door, and leave the door unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:691:            primaryButtonLabelText = @"OK, DOOR IS CLOSED AND UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:696:            message = @"Next, turn the August Smart Lock by hand until the door is fully locked.";
Sezam/AGLockAndDoorCalibrationViewController.m:697:            primaryButtonLabelText = @"OK, DOOR IS LOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:702:            message = @"Next, turn the August Smart Lock by hand until the door is fully unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:703:            primaryButtonLabelText = @"OK, DOOR IS UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:708:            message = @"Next, open the door until it is “wide open” (enough to walk through the door).";
Sezam/AGLockAndDoorCalibrationViewController.m:709:            primaryButtonLabelText = @"OK, DOOR IS WIDE OPEN";
Sezam/AGLockAndDoorCalibrationViewController.m:714:            message = @"Next, hold the door so that it is slightly ajar (just far enough for the deadbolt to clear the door frame).";
Sezam/AGLockAndDoorCalibrationViewController.m:715:            primaryButtonLabelText = @"OK, DOOR IS AJAR";
Sezam/AGLockAndDoorCalibrationViewController.m:720:            message = @"Finally, close the door one more time, leaving the door unlocked.";
Sezam/AGLockAndDoorCalibrationViewController.m:721:            primaryButtonLabelText = @"OK, DOOR IS CLOSED AND UNLOCKED";
Sezam/AGLockAndDoorCalibrationViewController.m:727:            message = @"Your lock has been successfully calibrated.";
Sezam/AGLockAndDoorCalibrationViewController.m:728:            primaryButtonLabelText = @"DONE";
Sezam/AGLockAndDoorCalibrationViewController.m:764:                UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:765:                AGHomeKitSetupNavController *hkSetup = [storyboard instantiateViewControllerWithIdentifier:@"HomeKitNav"];
Sezam/AGLockAndDoorCalibrationViewController.m:768:                ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:hkSetup];
Sezam/AGLockAndDoorCalibrationViewController.m:774:                    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockAndDoorCalibrationViewController.m:775:                    AGLockSetupSuccessViewController *lockSetupSuccessViewController = (AGLockSetupSuccessViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"LockSetupSuccessViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:790:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Calibration Failed" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:791:    UIAlertAction *restartCalibrationAction = [UIAlertAction actionWithTitle:@"Restart Calibration" style:UIAlertActionStyleCancel
Sezam/AGLockAndDoorCalibrationViewController.m:797:        UIAlertAction *viewGuideAction = [UIAlertAction actionWithTitle:@"View Installation Guide"
Sezam/AGLockAndDoorCalibrationViewController.m:800:                    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockAndDoorCalibrationViewController.m:801:                    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockAndDoorCalibrationViewController.m:802:                    if ((self.lock.lockCapability.doorSenseInstallationInstructionURL != nil) && ([self.lock.lockCapability.doorSenseInstallationInstructionURL isEqual:@""] == NO)) {
Sezam/AGLockAndDoorCalibrationViewController.m:844:                self.hasDoorSenseEnabled = ![doorStateStr isEqualToString:@"kAugDoorState_Init"];
Sezam/AGLockAndDoorCalibrationViewController.m:866:    [self showErrorAlertWithMessage:@"Lock Connection Error"];
Sezam/AGLockAndDoorCalibrationViewController.m:875:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning" message:@"AutoLock was disabled during Calibration and has not been re-enabled. You can re-enable this feature under Lock Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockAndDoorCalibrationViewController.m:876:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditSection.m:141:        if ([self.rule.user.type isEqualToString:@"superuser"]) {
Sezam/AGInviteEditSection.m:145:            if ([self.rule.user.type isEqualToString:@"pinonly"]) {
Sezam/AGInviteEditSection.m:435:            UIAlertView * alert = [[UIAlertView alloc] initWithTitle: @"Error" message:@"The start time is after the end time." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:444:                UIAlertView * alert = [[UIAlertView alloc] initWithTitle: @"Error" message:@"The selected time frame has already past." delegate:self cancelButtonTitle:@"OK"   otherButtonTitles:nil, nil];
Sezam/AGInviteEditSection.m:537:        self.timeFrameString = @"Always";
Sezam/AGInviteEditSection.m:539:        self.timeFrameString = [NSString stringWithFormat:@"Recurring"];
Sezam/AGInviteEditSection.m:541:        self.timeFrameString = [NSString stringWithFormat:@"Temporary"];
Sezam/AGInviteEditSection.m:588:        if (([self.delegate getInviteControllerMode] == inviteModeOwnerInvitingUser) && (self.invitedUserStatus != AGUserStatusPinOnly) && ([AGUtility checkForAppFeature:@"merc-pinappinvite"] == false)) {
Sezam/AGInviteEditSection.m:671:        return  (self.optimisticPinForUser)?self.optimisticPinForUser:@"Off";
Sezam/AGInviteEditSection.m:680:            return @"Off";
Sezam/AGInviteEditSection.m:685:                return @"Pending Off";
Sezam/AGInviteEditSection.m:689:                    return @"Pending On";
Sezam/AGInviteEditSection.m:696:                    return @"Disabled";
Sezam/AGInviteEditSection.m:704:    return @"";
Sezam/AGInviteEditSection.m:749:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessLevel"];
Sezam/AGInviteEditSection.m:786:        cell.accessibilityLabel = [NSString stringWithFormat:@"Access Level, %@", cell.label2.text];
Sezam/AGInviteEditSection.m:794:            cell = [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessSchedule"];
Sezam/AGInviteEditSection.m:845:                AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleRecurring1"];
Sezam/AGInviteEditSection.m:855:                AGTemporaryAccessTableViewCell *tempCell = [tableView dequeueReusableCellWithIdentifier:@"MyAccessScheduleTemporary1"];
Sezam/AGInviteEditSection.m:863:                cell = [tableView dequeueReusableCellWithIdentifier:@"GuestEditAccessSchedule"];
Sezam/AGInviteEditSection.m:877:            accessLabel.text = @"PIN Access";
Sezam/AGInviteEditSection.m:893:        cell =  [tableView dequeueReusableCellWithIdentifier:@"ManageSiri"];
Sezam/AGInviteEditSection.m:898:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditPIN"];
Sezam/AGInviteEditSection.m:922:        AGGuestNotificationCell *cell = [tableView dequeueReusableCellWithIdentifier:@"AGGuestNotificationCell"];
Sezam/AGInviteEditSection.m:924:            NSArray *topLevelObjects = [[NSBundle mainBundle] loadNibNamed:@"AGGuestNotificationCell" owner:self options:nil];
Sezam/AGInviteEditSection.m:936:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditTextPin"];
Sezam/AGInviteEditSection.m:954:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbellStatic"];
Sezam/AGInviteEditSection.m:956:            cell.label2.text = @"On";
Sezam/AGInviteEditSection.m:968:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbellStatic"];
Sezam/AGInviteEditSection.m:970:            cell.label2.text = ((self.invitedUserStatus==AGUserStatusOwner)||(isOwnerViewingSelf))? @"On":@"Off";
Sezam/AGInviteEditSection.m:974:            cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestEditDoorbell"];
Sezam/AGInviteEditSection.m:1225:        self.invitedUser.lastName = @"";
Sezam/AGInviteEditSection.m:1230:        NSRange spaceRange = [self.invitedUser.firstName rangeOfString:@" "];
Sezam/AGInviteEditSection.m:1279:            self.invitedUser.objectId = [dict objectForKey:@"id"];
Sezam/AGInviteEditSection.m:1280:            self.pinEnableController.pinUserID = [dict objectForKey:@"id"];
Sezam/AGInviteEditSection.m:1400:            [self addUnrestrictedUser: self.lock.objectId userType:@"superuser"];
Sezam/AGInviteEditSection.m:1404:                [self addUnrestrictedUser: self.lock.objectId userType:@"user"];
Sezam/AGInviteEditSection.m:1443:        self.pinEnableController =  [((UIViewController *)self.delegate).storyboard instantiateViewControllerWithIdentifier:@"PinEnableViewController"];
Sezam/AGInviteEditSection.m:1556:    if ([identifier isEqualToString:@"ToSchedule"]) {
Sezam/AGInviteEditSection.m:1561:                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Change Access Schedule?"
Sezam/AGInviteEditSection.m:1562:                                                                                         message:@"Entry codes can only have an \"always\" schedule. Changing this guest's app access will mean the guest's app access will not match their entry code access."
Sezam/AGInviteEditSection.m:1564:                [alertController addAction:[UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGInviteEditSection.m:1569:                [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGDataItemUploader.m:48:    NSString *httpBodyDataBase64 = dict[@"httpBodyDataBase64"];
Sezam/AGDataItemUploader.m:49:    NSString *url = dict[@"url"];
Sezam/AGDataItemUploader.m:50:    NSString *httpMethod = dict[@"httpMethod"];
Sezam/AGDataItemUploader.m:51:    NSNumber *uploadAttemptsRemaining = dict[@"uploadAttemptsRemaining"];
Sezam/AGDataItemUploader.m:68:    dict[@"httpBodyDataBase64"] = [self.httpBodyData base64EncodedStringWithOptions:kNilOptions];    
Sezam/AGDataItemUploader.m:69:    dict[@"url"] = self.url;
Sezam/AGDataItemUploader.m:70:    dict[@"httpMethod"] = self.httpMethod;
Sezam/AGDataItemUploader.m:71:    dict[@"uploadAttemptsRemaining"] = @(self.uploadAttemptsRemaining);
Sezam/AGHowLockWorksViewController.m:45:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"ShownHowItWorksScreen"];
Sezam/AGChooseTieredUserController.m:76:    self.view.titleLabel.text = @"CHOOSE A USER";
Sezam/AGChooseTieredUserController.m:145:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"OWNERS" diplayItems:displayItems]];
Sezam/AGChooseTieredUserController.m:158:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"GUESTS" diplayItems:displayItems]];
Sezam/AGChooseTieredUserController.m:171:        [displaySections addObject:[[AGSectionedIconListPickerDisplaySection alloc] initWithTitle:@"ENTRY CODE ONLY" diplayItems:displayItems]];
Sezam/AGDoorbellSuccessSetupViewController.m:39:        [self.headerTitleLabel setNuiClass:@"Title"];
Sezam/AGDoorbellSuccessSetupViewController.m:42:        NSString *numberOfLocksWithoutDoorbellBridgesAndUserIsOwner = [NSString stringWithFormat:@"Count=%lu", locksWithoutDoorbellBridgesAndUserIsOwner.count];
Sezam/AGDoorbellSuccessSetupViewController.m:54:        [self.headerTitleLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellSuccessSetupViewController.m:68:    [self performSegueWithIdentifier:@"DoorbellSetupSuccessToAssociateToLock" sender:nil];
Sezam/AGDoorbellSuccessSetupViewController.m:79:        if ([NSStringFromClass([vc class]) isEqualToString:@"AGTwoStepChecklistViewController"]) {
Sezam/AGDoorbellSuccessSetupViewController.m:107:    if ([segue.identifier isEqualToString:@"DoorbellSetupSuccessToAssociateToLock"]) {
Sezam/AGAutoUnlockAdvancedSettingsView.m:59:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockAdvancedSettingsView.m:60:    self.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockAdvancedSettingsView.m:67:    self.modeTitleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:74:    self.modeDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:78:    self.homeModeSegmentedControl = [[UISegmentedControl alloc] initWithItems:@[@"Home", @"Away"]];
Sezam/AGAutoUnlockAdvancedSettingsView.m:87:    self.howModeChangesWorkLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:88:    self.howModeChangesWorkLabel.text = @"The mode will change automatically when you leave and return home. You can change it manually if you wish to override the current behavior.";
Sezam/AGAutoUnlockAdvancedSettingsView.m:150:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockAdvancedSettingsView.m:154:        label.text = @"HOME LOCATION";
Sezam/AGAutoUnlockAdvancedSettingsView.m:181:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockAdvancedSettingsView.m:193:        cell.textLabel.text = @"Edit Your Home Location";
Sezam/AGAutoUnlockAdvancedSettingsView.m:198:        cell.textLabel.text = @"View History";
Sezam/AGAutoUnlockAdvancedSettingsView.m:228:        self.modeTitleLabel.text = @"HOME MODE";
Sezam/AGAutoUnlockAdvancedSettingsView.m:229:        self.modeDescriptionLabel.text = @"Nothing will happen until you leave home.";
Sezam/AGAutoUnlockAdvancedSettingsView.m:234:        self.modeTitleLabel.text = @"AWAY MODE";
Sezam/AGAutoUnlockAdvancedSettingsView.m:235:        self.modeDescriptionLabel.text = @"Your door will unlock when you return home.";
Sezam/TimeRangeView.m:72:    _sliderLayer.actions = @{@"strokeStart" : [NSNull null], @"strokeEnd" : [NSNull null]}; // Disable animation for position
Sezam/TimeRangeView.m:77:    _sliderPinLayer.actions = @{@"position" : [NSNull null]}; // Disable animation for position
Sezam/TimeRangeView.m:102:    CGSize maxTextSize = [@"MMM" sizeWithAttributes:
Sezam/TimeRangeView.m:272:        return @"12a";
Sezam/TimeRangeView.m:274:        return [NSString stringWithFormat:@"%lua", (unsigned long)time];
Sezam/TimeRangeView.m:276:        return [NSString stringWithFormat:@"%dp", (int)((time > 12 ) ? time - 12 : time) ];
Sezam/TimeRangeView.m:310:        _rangeTimeLabel.text = @"ALL DAY";
Sezam/TimeRangeView.m:314:        _rangeTimeLabel.text = [NSString stringWithFormat:@"%d HOUR%@", (int)time, (time > 1) ? @"S" : @""];
Sezam/AGSubscriptionListViewController.m:46:    NSString *baseURL = @"d3iulgjhbi47gi.cloudfront.net";
Sezam/AGSubscriptionListViewController.m:47:    if ([AGUtility getAppFeature:@"subscription-domain"]) {
Sezam/AGSubscriptionListViewController.m:48:        baseURL = [AGUtility getAppFeature:@"subscription-domain"];
Sezam/AGSubscriptionListViewController.m:53:        if ([apiRoot rangeOfString:@"staging.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:54:            baseURL = @"subscriptions-ui-staging.august.com";
Sezam/AGSubscriptionListViewController.m:55:        } else  if ([apiRoot rangeOfString:@"qa-pre.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:56:            baseURL = @"subscriptions-ui-qa-pre.august.com";
Sezam/AGSubscriptionListViewController.m:57:        } else  if ([apiRoot rangeOfString:@"qa.august.com"].length > 0) {
Sezam/AGSubscriptionListViewController.m:58:            baseURL = @"subscriptions-ui-qa.august.com";
Sezam/AGSubscriptionListViewController.m:61:            baseURL = @"subscriptions-ui.august.com";
Sezam/AGSubscriptionListViewController.m:65:    return  [NSString stringWithFormat:@"%@%@/#/",  isSecure?@"https://":@"http://" , baseURL];
Sezam/AGSubscriptionListViewController.m:71:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGSubscriptionListViewController.m:72:        AGWebSubscriptionViewController *webTest = (AGWebSubscriptionViewController *)[storyboard instantiateViewControllerWithIdentifier:@"WebSubscriptionViewController"];
Sezam/AGSubscriptionListViewController.m:76:                NSString *urlString = [NSString stringWithFormat: @"%@change-payment?manageToken=%@", [self buildBaseURL], theToken];
Sezam/AGSubscriptionListViewController.m:104:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize], [NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"Small Style", @"White"] forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style", @"Current Page Indicator Color"]];
Sezam/AGSubscriptionListViewController.m:132:                if ([subItem.type isEqualToString:@"doorbellDvr"]) {
Sezam/AGSubscriptionListViewController.m:154:                if ([subItem.type isEqualToString:@"lockAam"]) {
Sezam/AGSubscriptionListViewController.m:171:                    BOOL showAamLockSubscriptions = [AGUtility checkForAppFeature:@"showAamLockSubscriptions"];
Sezam/AGSubscriptionListViewController.m:210:    AGSubscriptionCellTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SubscriptionCell"];
Sezam/AGSubscriptionListViewController.m:220:        NSArray *lockSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"lock"]];
Sezam/AGSubscriptionListViewController.m:234:            cell.houseNameLabel.text = @"Unknown House";
Sezam/AGSubscriptionListViewController.m:235:            cell.doorNameLabel.text = @"Unknown Lock";
Sezam/AGSubscriptionListViewController.m:243:        NSArray *doorbellSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"doorbellDvr"]];
Sezam/AGSubscriptionListViewController.m:258:            cell.houseNameLabel.text = @"Unknown House";
Sezam/AGSubscriptionListViewController.m:259:            cell.doorNameLabel.text = @"Unknown Doorbell";
Sezam/AGSubscriptionListViewController.m:274:        subItem.userID = @"3sdfsdf";
Sezam/AGSubscriptionListViewController.m:305:            cell.daysLeftLabel.text = @"MANAGED BY YOU";
Sezam/AGSubscriptionListViewController.m:329:                cell.daysLeftLabel.text = [NSString stringWithFormat:@"MANAGED BY %@ %@", subscribedUser.firstName, subscribedUser.lastName];
Sezam/AGSubscriptionListViewController.m:331:                cell.daysLeftLabel.text = @"MANAGED BY ANOTHER USER";
Sezam/AGSubscriptionListViewController.m:343:        cell.daysLeftLabel.text = @"UPGRADE NOW";
Sezam/AGSubscriptionListViewController.m:349:        cell.statusLabelCenter.text = @"Beta\t";
Sezam/AGSubscriptionListViewController.m:351:        cell.statusTopLabel.text  = @"";
Sezam/AGSubscriptionListViewController.m:352:        cell.daysLeftLabel.text = @"";
Sezam/AGSubscriptionListViewController.m:370:        NSArray *lockSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"lock"]];
Sezam/AGSubscriptionListViewController.m:384:        NSArray *doorbellSubscriptions = [self.subscriptions filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self.type contains[c] %@", @"doorbellDvr"]];
Sezam/AGSubscriptionListViewController.m:413:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGSubscriptionListViewController.m:414:        AGWebSubscriptionViewController *webTest = (AGWebSubscriptionViewController *)[storyboard instantiateViewControllerWithIdentifier:@"WebSubscriptionViewController"];
Sezam/AGSubscriptionListViewController.m:421:                    urlString = [NSString stringWithFormat: @"%@manage-subscription?manageToken=%@&subscriptionID=%@", [self buildBaseURL], theToken, subItem.objectId];
Sezam/AGSubscriptionListViewController.m:425:                    urlString = [NSString stringWithFormat: @"%@select-plan?manageToken=%@&subscriptionID=%@", [self buildBaseURL], theToken, subItem.objectId];
Sezam/AGSubscriptionListViewController.m:475:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSubscriptionListViewController.m:480:        label.text = @"YOUR LOCKS";
Sezam/AGSubscriptionListViewController.m:484:        label.text = @"YOUR DOORBELLS";
Sezam/AGSubscriptionListViewController.m:503:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Wi-Fi Bridge Recommended" message:@"This device does not have a Wi-Fi bridge. We recommend using an August Connect to get the full benefit of the Active Monitoring service." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSubscriptionListViewController.m:505:    [alertController addAction:[UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSubscriptionListViewController.m:506:        NSURL *url = [NSURL URLWithString:@"http://august.com/products/august-connect/"];
Sezam/AGSubscriptionListViewController.m:510:    [alertController addAction:[UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSubscriptionListViewController.m:514:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGPhoneVerifyViewController.m:68:    if ([[formattedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGPhoneVerifyViewController.m:71:            formattedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formattedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formattedNumberNoCode substringWithRange:NSMakeRange(6, (formattedNumberNoCode.length-6))]];
Sezam/AGPhoneVerifyViewController.m:109:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:120:                            [self performSegueWithIdentifier:@"PhoneVerifyToNewPassword" sender:nil];
Sezam/AGPhoneVerifyViewController.m:139:                                [self performSegueWithIdentifier:@"PhoneVerifyToEmailVerify" sender:nil];
Sezam/AGPhoneVerifyViewController.m:145:                                [self performSegueWithIdentifier:@"PhoneVerifyToEmailVerify" sender:nil];
Sezam/AGPhoneVerifyViewController.m:180:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:189:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGPhoneVerifyViewController.m:212:    if (([segue.identifier isEqualToString:@"PhoneVerifyToAddEmail"]) || ([segue.identifier isEqualToString:@"PhoneVerifyToEmailVerify"])) {
Sezam/AGPhoneVerifyViewController.m:218:    }else if ([segue.identifier isEqualToString:@"PhoneVerifyToNewPassword"])
Sezam/AGPhoneVerifyViewController.m:236:            UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGFormField.m:34:    self.formTextFont = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGFormField.m:46:    if ([self.size isEqualToString:@"Standard"]) {
Sezam/AGFormField.m:48:    } else if ([self.size isEqualToString:@"Small"]) {
Sezam/AGFormField.m:50:    } else if ([self.size isEqualToString:@"CCC"]) {
Sezam/AGFormField.m:60:    if ([self.alignment isEqualToString:@"Left"]) {
Sezam/AGFormField.m:68:    if ([self.alignment isEqualToString:@"Left"]) {
Sezam/AGWelcomeViewController.m:64:    [self performSegueWithIdentifier:@"WelcomeToReceivedInvite" sender:nil];
Sezam/AGWelcomeViewController.m:68:    [self performSegueWithIdentifier:@"WelcomeVCtoCreateAccountVC" sender:nil];
Sezam/AGWelcomeViewController.m:72:    [self performSegueWithIdentifier:@"WelcomeToLogin" sender:nil];
Sezam/AGSliderTableCell.m:37:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSliderTableCell.m:43:    self.detailLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSliderTableCell.m:54:    self.sliderDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGWebViewController.m:59:    if ([request.URL.absoluteString containsString:@"installation-complete"]) {
Sezam/AGWebViewController.m:78:    self.titleLabel.text = [self.webView stringByEvaluatingJavaScriptFromString:@"document.title"];
Sezam/AGAutoUnlockReportProblemCompletedView.m:47:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockReportProblemCompletedView.m:48:    self.titleLabel.text = @"THANK YOU";
Sezam/AGAutoUnlockReportProblemCompletedView.m:61:    self.descriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockReportProblemCompletedView.m:62:    self.descriptionLabel.text = @"We value your feedback. Reporting issues helps us to improve Auto-Unlock over time.\n\nIf you’d like to learn more about Auto-Unlock, the link below contains additional information about how Auto-Unlock works, and may help in preventing certain problems from occurring.";
Sezam/AGAutoUnlockReportProblemCompletedView.m:70:    self.learnMoreAboutAutoUnlockButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemCompletedView.m:71:    [self.learnMoreAboutAutoUnlockButton setTitle:@"LEARN MORE ABOUT AUTO-UNLOCK" forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemCompletedView.m:81:    self.exitButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemCompletedView.m:82:    [self.exitButton setTitle:@"EXIT" forState:UIControlStateNormal];
Sezam/RangeTableView.m:45:    [[self visibleCells] setValue:@(0.0f) forKey:@"alpha"];
Sezam/RangeTableView.m:104:        [[self visibleCells] setValue:@(0.0f) forKey:@"alpha"];
Sezam/AGAddProfilePhotoViewController.m:60:    self.imageButton.accessibilityLabel = @"Add Profile Photo";
Sezam/AGAddProfilePhotoViewController.m:147:    [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGAddProfilePhotoViewController.m:154:    self.imageButton.accessibilityLabel = @"Your Profile Photo"; // for accessibility/UI Testing
Sezam/AGAddProfilePhotoViewController.m:179:    if ([segue.identifier isEqualToString:@"AddProfilePhotoToVerifyPhone"]) {
Sezam/AGAddProfilePhotoViewController.m:194:            [self performSegueWithIdentifier:@"AddProfilePhotoToVerifyPhone" sender:nil];
Sezam/AGHomeKitCompleteViewController.m:42:    self.instructionsLabel.text = @"";
Sezam/AGHomeKitCompleteViewController.m:99:    [self.closeSetupBigButton setTitle:@"OK" forState:UIControlStateNormal];
Sezam/AGHomeKitCompleteViewController.m:121:        self.instructionsLabel.text = [NSString stringWithFormat:@"\"%@\" has now been added to %@.\n\nYou can now use Siri and third party HomeKit apps to operate your lock.", [self navController].agLock.name, [self navController].selectedHome.name];
Sezam/AGHomeKitCompleteViewController.m:124:        [self.closeSetupBigButton setTitle:@"Create an Account" forState:UIControlStateNormal];
Sezam/AGHomeKitCompleteViewController.m:125:        self.instructionsLabel.text = [NSString stringWithFormat:@"HomeKit has now been enabled for this lock. To start using your August Smart Lock, create an August account and then set up your new lock."];
Sezam/AGHomeKitCompleteViewController.m:148:                    NSString *homeKitKey = [result objectForKey:@"key"];
Sezam/AGHomeKitCompleteViewController.m:149:                    NSNumber *homeKitKeySlot = [result objectForKey:@"slot"];
Sezam/AGHomeKitCompleteViewController.m:151:                    combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitCompleteViewController.m:163:                        inactivityTimeoutCommand.label = @"BLETimeoutChange";
Sezam/AGHomeKitCompleteViewController.m:168:                        setHomeKitAdvtState.label = @"HomeKitAdvtInterleaved";
Sezam/AGHomeKitCompleteViewController.m:190:                        [self failWithError:@"Error connecting to your to lock."];
Sezam/AGHomeKitCompleteViewController.m:212:            [self failWithError:[NSString stringWithFormat:@"An error occurred. Please try again.\n\n %@", [AGHomeKitManager homeKitErrorMessage:error], nil]];
Sezam/AGHomeKitCompleteViewController.m:220:                        [self failWithError:[NSString stringWithFormat:@"An error occurred. Please try again.\n\n %@", [AGHomeKitManager homeKitErrorMessage:error], nil]];
Sezam/AGHomeKitChangeRoomViewController.m:34:    self.changeRoomLabel.text = [NSString stringWithFormat:@"Choose which room in %@ you want to move this lock to.", self.theHome.name];
Sezam/AGHomeKitChangeRoomViewController.m:85:    AGTableViewCell *cell = (AGTableViewCell *)[self.roomsTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitChangeRoomViewController.m:87:        cell.label.text = @"Add a New Room";
Sezam/AGHomeKitChangeRoomViewController.m:96:        cell.label.text = @"None";
Sezam/AGHomeKitChangeRoomViewController.m:120:        AGHomeKitManagerCreateRoomViewController *addRoom = (AGHomeKitManagerCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateRoom"];
Sezam/AGStatusControl.m:43:    [self.collectionView registerClass:[AGCollectionViewCell class] forCellWithReuseIdentifier:@"StatusCell"];
Sezam/AGStatusControl.m:85:    AGCollectionViewCell *cell = (AGCollectionViewCell*)[collectionView dequeueReusableCellWithReuseIdentifier:@"StatusCell" forIndexPath:indexPath];
Sezam/AGStatusControl.m:86://    cell.label.nuiClass = @"none"; // Needed to prevent NUI for overriding our font choice below.
Sezam/AGStatusControl.m:91:    NSString * num = [NSString stringWithFormat:@"%d",((int)[indexPath row]+1)];
Sezam/AGStatusControl.m:96:    [[cell label] setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:16]];
Sezam/AGAirbnbListingSetupViewController.m:94:    self.topMessage.text = [NSString stringWithFormat:@"Select the August locks you wish to associate with the Airbnb listing %@.", self.airbnbListing.name];
Sezam/AGAirbnbListingSetupViewController.m:152:                                                                                                andAccessType:@"appAccess"
Sezam/AGAirbnbListingSetupViewController.m:184:                                                                                                andAccessName:[NSString stringWithFormat:@"%@ - Keypad",lock.name]
Sezam/AGAirbnbListingSetupViewController.m:185:                                                                                                andAccessType:@"keypadAccess"
Sezam/AGAirbnbListingSetupViewController.m:216:        houseDictionary[@"houseName"] = house.name;
Sezam/AGAirbnbListingSetupViewController.m:225:        houseDictionary[@"listingAccessDisplayInfoArrayInHouse"] = listingAccessDisplayInfoInHouse;
Sezam/AGAirbnbListingSetupViewController.m:261:    NSString *sectionTitle = houseListingForSection[@"houseName"];
Sezam/AGAirbnbListingSetupViewController.m:271:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAirbnbListingSetupViewController.m:298:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:301:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"ListItemCell"];
Sezam/AGAirbnbListingSetupViewController.m:308:    if ([airbnbListingDisplayInfo.accessType isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:329:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:345:    NSArray <AGAirbnbListingDisplayInfo *> *accessListingArrayForHouse = houseListingForSection[@"listingAccessDisplayInfoArrayInHouse"];
Sezam/AGAirbnbListingSetupViewController.m:359:    UIAlertController *disableAccessAlert = [UIAlertController alertControllerWithTitle:@"Remove Access?" message:@"Future Airbnb guests will not be given access to this lock. Current Airbnb guests will keep the access they already have." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:360:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:362:    UIAlertAction *removeAction = [UIAlertAction actionWithTitle:@"Remove" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * action) {
Sezam/AGAirbnbListingSetupViewController.m:382:            if ([lock.objectId isEqual:listingAccessDisplayInfo.lockId] && [listingAccessDisplayInfo.accessType isEqual:@"appAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:387:            if ([lock.objectId isEqual:listingAccessDisplayInfo.lockId] && [listingAccessDisplayInfo.accessType isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbListingSetupViewController.m:413:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was a problem updating your AirBnB information." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:414:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:427:    UIAlertController *keypadEntryCodeHelpAlert = [UIAlertController alertControllerWithTitle:@"Keypad Entry Codes" message:@"If checked, guests will receive automatically generated entry codes to unlock the door to your listing by using your August Keypad." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:428:    UIAlertAction *gotItAction = [UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbListingSetupViewController.m:436:    UIAlertController *keypadRequirementsAlert = [UIAlertController alertControllerWithTitle:@"Keypad Requirements" message:@"To use your Keypad with Airbnb, it must be paired to a 2nd Gen Smart Lock or newer with a Wi-Fi bridge, like August Connect." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbListingSetupViewController.m:438:    NSString *airbnbConnectPromoURL =  @"https://store.august.com/discount/fromanywhere20?redirect=%2Fproducts%2Faugust-connect&utm_source=august_app&utm_medium=iosairbnbconnect";
Sezam/AGAirbnbListingSetupViewController.m:440:    UIAlertAction *buyConnectAction = [UIAlertAction actionWithTitle:@"$20 off August Connect" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAirbnbListingSetupViewController.m:446:    UIAlertAction *getHelpAction = [UIAlertAction actionWithTitle:@"Get More Help" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAirbnbListingSetupViewController.m:452:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Dismiss" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGWeeklyRecurrencePickerView.m:50:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGWeeklyRecurrencePickerView.m:52:    self.label.text = @"Within a time range";
Sezam/AGWeeklyRecurrencePickerView.m:133:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGWeeklyRecurrencePickerView.m:134:    self.titleLabel.text = @"CHOOSE A TIME";
Sezam/AGWeeklyRecurrencePickerView.m:150:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGWeeklyRecurrencePickerView.m:156:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGWeeklyRecurrencePickerView.m:189:        leftImageAndRightLabelcell.rightLabel.text = @"Any time it occurs";
Sezam/AGBridgeSetupTuneViewController.m:108:    [self.setupNavController.agLock sendRemoteOperateCommandDetail:@"status" isDoingSetup:YES block:
Sezam/AGBridgeSetupTuneViewController.m:134:             NSDictionary *info = [dict objectForKey:@"info"];
Sezam/AGBridgeSetupTuneViewController.m:137:                 int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSetupTuneViewController.m:138:                 int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSetupTuneViewController.m:139:                 int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGBridgeSetupTuneViewController.m:154:    if ([strength isEqualToString:@"Great"]) {
Sezam/AGBridgeSetupTuneViewController.m:157:    if ([strength isEqualToString:@"Bad"]) {
Sezam/AGBridgeSetupTuneViewController.m:160:    if ([strength isEqualToString:@"Good"]) {
Sezam/AGBridgeSetupTuneViewController.m:163:    if ([strength isEqualToString:@"Poor"]) {
Sezam/AGBridgeSetupTuneViewController.m:173:    NSString *btVal = [NSString stringWithFormat:@"%@ (%d)",btQualString, btRSSI];
Sezam/AGBridgeSetupTuneViewController.m:174:    NSString *wlanVal = [NSString stringWithFormat:@"%@ (%d)",wifiQualString, wlanRSSI];
Sezam/AGBridgeSetupTuneViewController.m:178:        btVal = @"?";
Sezam/AGBridgeSetupTuneViewController.m:181:        wlanVal = @"?";
Sezam/AGBridgeSetupTuneViewController.m:214:    AGBridgeSetupCompleteViewController* setupComplete = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupComplete"];
Sezam/AGBridgeSetupTuneViewController.m:224:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupTuneViewController.m:235:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGBridgeSetupTuneViewController.m:250:    AGBridgeSetupFailedViewController* setupFailed = [self.storyboard instantiateViewControllerWithIdentifier:@"bridgeSetupFailed"];
Sezam/AGDoorbellHighPowerModeViewController.m:49:    self.messageLabel.text = @"Your Doorbell Cam is now running in high power mode! \n\nThe increased power draw can cause vibration in some doorbell chimes. If this occurs, tap the button below to learn what you can do to fix it.";
Sezam/AGGenericSetupFlowView.m:61:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGGenericSetupFlowView.m:80:    self.actionButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGGenericSetupFlowView.m:88:    [self.textView setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:17]];
Sezam/AGHomeKitSelectLockViewController.m:80:        cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockHeaderCell"];
Sezam/AGHomeKitSelectLockViewController.m:82:        cell.label.text = [[NSString stringWithFormat:@"August Lock %@", theLockSelected.name] uppercaseString];
Sezam/AGHomeKitSelectLockViewController.m:85:            cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockSelectCell"];
Sezam/AGHomeKitSelectLockViewController.m:89:        cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier: @"HKLockIdentifyCell"];
Sezam/AGHouseSettingsTabViewController.m:52:    self.updatingLabel.text = @"Updating Devices...";
Sezam/AGHouseSettingsTabViewController.m:67:    self.updatingLabel.text = @"Error Updating House Details.";
Sezam/AGHouseSettingsTabViewController.m:110:            if ((bridge !=nil) && [bridge.model isEqual:@"august-connect"]) {
Sezam/AGHouseSettingsTabViewController.m:138:        titleLabel.text = @"HOUSE SETTINGS";
Sezam/AGHouseSettingsTabViewController.m:144:    [titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGHouseSettingsTabViewController.m:196:        AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"NavigateToDetailCell"];
Sezam/AGHouseSettingsTabViewController.m:198:            cell.label2.text = @"House Name and Photo";
Sezam/AGHouseSettingsTabViewController.m:200:            cell.label2.text = @"Edit House Owners";
Sezam/AGHouseSettingsTabViewController.m:207:        AGTableViewDoorCell *cell = [tableView dequeueReusableCellWithIdentifier:@"DoorCell"];
Sezam/AGHouseSettingsTabViewController.m:224:                doorbellImageNamed = @"Doorbellv2SettingsIcon";
Sezam/AGHouseSettingsTabViewController.m:226:                doorbellImageNamed = @"DoorbellSettingsIcon";
Sezam/AGHouseSettingsTabViewController.m:292:            [self performSegueWithIdentifier:@"HouseSettingsTabToHouseNameAndPhoto" sender:self];
Sezam/AGHouseSettingsTabViewController.m:294:            [self performSegueWithIdentifier:@"HouseSettingsTabToEditHouseOwners" sender:self];
Sezam/AGHouseSettingsTabViewController.m:302:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:303:    UINavigationController *lockSettingsNavController = (UINavigationController*)[lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"LockSettingsNavController"];
Sezam/AGHouseSettingsTabViewController.m:313:    UIStoryboard *doorbellSettingsStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:314:    UINavigationController *doorbellNav = (UINavigationController *)[doorbellSettingsStoryboard instantiateViewControllerWithIdentifier:@"DoorbellSettingsNav"];
Sezam/AGHouseSettingsTabViewController.m:325:    UIStoryboard *lockSettingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:nil];
Sezam/AGHouseSettingsTabViewController.m:326:    AGBridgeSettingsViewController *bridgeSettingsViewController = (AGBridgeSettingsViewController*)[lockSettingsStoryboard instantiateViewControllerWithIdentifier:@"BridgeSettings"];
Sezam/AGHouseSettingsTabViewController.m:336:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGHouseSettingsTabViewController.m:337:    UINavigationController *keypadSettingsNav = [storyboard instantiateViewControllerWithIdentifier:@"KeypadSettingsNavController"];
Sezam/AGHouseSettingsTabViewController.m:350:    if ([segue.identifier isEqualToString:@"HouseSettingsTabToHouseNameAndPhoto"]) {
Sezam/AGHouseSettingsTabViewController.m:353:    } else if ([segue.identifier isEqualToString:@"HouseSettingsTabToEditHouseOwners"]) {
Sezam/AGEventLogView.m:46:    self.leftLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGEventLogView.m:53:    self.rightLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGEventLogView.m:143:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGEventLogView.m:195:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGEventLogView.m:216:    NSString *cellID = @"LogEventCell";
Sezam/AGDoorbellWiFiSetupViewController.m:44:    self.titleBarLabel.text = @"SET UP DOORBELL";
Sezam/AGDoorbellWiFiSetupViewController.m:45:    self.message.text = @"Follow the directions on the next screen to get Doorbell Cam onto your Wi-Fi network.";
Sezam/AGDoorbellWiFiSetupViewController.m:55:        [self.titleBarLabel setNuiClass:@"Title"];
Sezam/AGDoorbellWiFiSetupViewController.m:58:        [self.titleBarLabel setNuiClass:@"TitleWhite"];
Sezam/AGDoorbellWiFiSetupViewController.m:85:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:86:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellWiFiSetupViewController.m:90:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellWiFiSetupViewController.m:107:        UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn Wi-Fi On" message:@"Mobile Wi-Fi connectivity is required to setup Doorbell Wi-Fi." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:108:        [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDoorbellWiFiSetupViewController.m:117:        NSDictionary *putDoorbellIntoProvisioningMode = @{@"doorbellID":self.doorbell.objectId, @"status":@"doorbell_factory_reset", @"origin": @"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:129:            NSString *alertTitle = @"Press the “Reset” Button";
Sezam/AGDoorbellWiFiSetupViewController.m:130:            NSString *alertMessage = @"Please press the small “reset” button on the back of your Doorbell Cam for 10 seconds, then place it back on the wall.\n\nThis will allow us to connect to your Doorbell Cam.";
Sezam/AGDoorbellWiFiSetupViewController.m:131:            NSString *alertDismissButtonTitle = @"OK";
Sezam/AGDoorbellWiFiSetupViewController.m:135:                alertTitle = @"Prepare for Connection";
Sezam/AGDoorbellWiFiSetupViewController.m:136:                alertMessage = @"1. Press and release the “Reset” button on the back of your Doorbell Cam.\n\n2. Immediately after, hold down the large doorbell button until the green light blinks once.\n\n3. Reconnect to power, and wait until the white light begins to pulse.";
Sezam/AGDoorbellWiFiSetupViewController.m:137:                alertDismissButtonTitle = @"The Light is Pulsing";
Sezam/AGDoorbellWiFiSetupViewController.m:158:    self.spinnerMessageLabel.text = @"Scanning for Doorbell...";
Sezam/AGDoorbellWiFiSetupViewController.m:163:    NSString *match = [NSString stringWithFormat:@"*%@", self.doorbell.serialNumber];
Sezam/AGDoorbellWiFiSetupViewController.m:164:    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellWiFiSetupViewController.m:187:        UIAlertController *multipleDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Multiple Doorbells Found" message:@"We found multiple unconfigured doorbells. Please power off any doorbells you are not trying to set up." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellWiFiSetupViewController.m:188:        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellWiFiSetupViewController.m:192:        UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellWiFiSetupViewController.m:195:                                                                NSString *match = [NSString stringWithFormat:@"*%@", self.doorbell.serialNumber];
Sezam/AGDoorbellWiFiSetupViewController.m:196:                                                                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellWiFiSetupViewController.m:229:            NSString *wifiChangeAlertMessage = [NSString stringWithFormat:@"Please be aware that your August Device has joined a different Wi-Fi Network named \"%@\". This may be due to incompatibilities between your original network and your August Device.", [AGUtility getWiFiSSID]];
Sezam/AGDoorbellWiFiSetupViewController.m:230:            NSString *title = @"Warning: Wi-Fi Network has Changed";
Sezam/AGDoorbellWiFiSetupViewController.m:235:            [wiFiNetworkChangedAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:252:        [wacCancelledAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:271:        return @"YES";
Sezam/AGDoorbellWiFiSetupViewController.m:273:        return @"NO";
Sezam/AGDoorbellWiFiSetupViewController.m:282:    if (messageData[@"status"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:283:        NSString *status = messageData[@"status"];
Sezam/AGDoorbellWiFiSetupViewController.m:284:        if ([status isEqual:@"doorbell_pong"] || [status isEqual:@"doorbell_call_status_online"] || [status isEqual:@"doorbell_back_online"] || [status isEqual:@"online"] || [status isEqual:@"awake"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:292:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:296:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToOTA" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:321:    self.message.text = @"Please wait while we finalize Wi-Fi setup.";
Sezam/AGDoorbellWiFiSetupViewController.m:324:    self.spinnerMessageLabel.text = @"Waiting for doorbell to come online…";
Sezam/AGDoorbellWiFiSetupViewController.m:364:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:385:        NSDictionary *wakeUpDoorbell = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellWiFiSetupViewController.m:387:        UIAlertController *wiFiNetworkChangedAlertController = [UIAlertController alertControllerWithTitle:@"Check Internet Connection"
Sezam/AGDoorbellWiFiSetupViewController.m:388:                                                                                                   message:@"The final Wi-Fi steps are taking a long time to complete.\n\n As a precaution, please check that your router and outside internet connection are working properly."
Sezam/AGDoorbellWiFiSetupViewController.m:390:        [wiFiNetworkChangedAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellWiFiSetupViewController.m:424:    UIAlertController *remountDoorbellAlertController = [UIAlertController alertControllerWithTitle:@"Re-Mount Doorbell"
Sezam/AGDoorbellWiFiSetupViewController.m:425:                                                                                               message:@"If you took your Doorbell Cam off the wall earlier, please re-mount it to power now."
Sezam/AGDoorbellWiFiSetupViewController.m:427:    [remountDoorbellAlertController addAction:[UIAlertAction actionWithTitle:@"Ok, Doorbell Cam is connected to power" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {}]];
Sezam/AGDoorbellWiFiSetupViewController.m:456:    self.message.text = [NSString stringWithFormat:@"Doorbell Cam has been added to %@", [AGUtility getWiFiSSID]];
Sezam/AGDoorbellWiFiSetupViewController.m:468:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToRunDiagnostics" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:470:            [self performSegueWithIdentifier:@"DoorbellWiFiSetupToSetupSuccess" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:474:        [self performSegueWithIdentifier:@"unwindToDoorbellSettingsFromWiFiSetup" sender:self];
Sezam/AGDoorbellWiFiSetupViewController.m:484:    self.titleBarLabel.text = @"Wi-Fi HELP";
Sezam/AGDoorbellWiFiSetupViewController.m:509:        [self performSegueWithIdentifier:@"DoorbellWiFiSetupToDoorbellSetupSimpleHelp" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:511:        [self performSegueWithIdentifier:@"DoorbellWiFiSetupToDoorbellSetupHelp" sender:nil];
Sezam/AGDoorbellWiFiSetupViewController.m:531:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToOTA"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:536:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToRunDiagnostics"]) {
Sezam/AGDoorbellWiFiSetupViewController.m:541:    if ([segue.identifier isEqualToString:@"DoorbellWiFiSetupToSetupSuccess"]) {
Sezam/VideoLogging/AGVideoCallEvent.m:47:    details[@"status"] = status;
Sezam/VideoLogging/AGVideoCallEvent.m:49:        details[@"urlPath"] = videoCallEvent.urlPath;
Sezam/VideoLogging/AGVideoCallEvent.m:62:    log[@"name"] = self.name;
Sezam/VideoLogging/AGVideoCallEvent.m:63:    log[@"doorbellID"] = self.doorbell.objectId;
Sezam/VideoLogging/AGVideoCallEvent.m:64:    log[@"source"] = self.source;
Sezam/VideoLogging/AGVideoCallEvent.m:65:    log[@"platform"] = self.platform;
Sezam/VideoLogging/AGVideoCallEvent.m:66:    [log setValue:self.my_timestamp forKey:@"my_timestamp"];
Sezam/VideoLogging/AGVideoCallEvent.m:67:    log[@"callID"] = self.call_id;
Sezam/VideoLogging/AGVideoCallEvent.m:68:    log[@"manufacturer"] = self.manufacturer;
Sezam/VideoLogging/AGVideoCallEvent.m:69:    log[@"client_version"] = self.client_version;
Sezam/VideoLogging/AGVideoCallEvent.m:70:    log[@"app_version"] = self.app_version;
Sezam/VideoLogging/AGVideoCallEvent.m:71:    log[@"installToken"] = self.installToken;
Sezam/VideoLogging/AGVideoCallEvent.m:72:    log[@"event"] = self.event;
Sezam/VideoLogging/AGVideoCallEvent.m:73:    log[@"error"] = self.error;
Sezam/VideoLogging/AGVideoCallEvent.m:74:    log[@"details"] = self.details;
Sezam/VideoLogging/AGVideoCallEvent.m:75:    log[@"device_uuid"] = self.device_uuid;
Sezam/VideoLogging/AGVideoCallEvent.m:77:    if ([AGUtility checkForAppFeature:@"marslogging"]) {
Sezam/VideoLogging/AGVideoCallEvent.m:105:    log[@"name"] = @"doorbell_call_event";
Sezam/VideoLogging/AGVideoCallEvent.m:106:    log[@"doorbellID"] = doorbell.objectId;
Sezam/VideoLogging/AGVideoCallEvent.m:107:    log[@"source"] = @"iOS";
Sezam/VideoLogging/AGVideoCallEvent.m:108:    log[@"platform"] = @"iOS";
Sezam/VideoLogging/AGVideoCallEvent.m:109:    [log setValue:my_timestamp forKey:@"my_timestamp"];
Sezam/VideoLogging/AGVideoCallEvent.m:110:    log[@"callID"] = @"None";
Sezam/VideoLogging/AGVideoCallEvent.m:111:    log[@"manufacturer"] = @"Apple";
Sezam/VideoLogging/AGVideoCallEvent.m:112:    log[@"event"] = event;
Sezam/VideoLogging/AGVideoCallEvent.m:113:    log[@"error"] = error;
Sezam/VideoLogging/AGVideoCallEvent.m:115:    log[@"client_version"] = [[NSProcessInfo processInfo] operatingSystemVersionString];
Sezam/VideoLogging/AGVideoCallEvent.m:116:    log[@"app_version"] = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"];
Sezam/VideoLogging/AGVideoCallEvent.m:117:    log[@"installToken"] = [AGUser getInstallToken];
Sezam/VideoLogging/AGVideoCallEvent.m:118:    log[@"device_uuid"] = [AGUtility getIdentifierForVendor];
Sezam/VideoLogging/AGVideoCallEvent.m:121:    details[@"status"] = status;
Sezam/VideoLogging/AGVideoCallEvent.m:122:    log[@"details"] = details;
Sezam/VideoLogging/AGVideoCallEvent.m:124:    if ([AGUtility checkForAppFeature:@"marslogging"]) {
Sezam/AGCallToActionBannerView.m:42:    self.label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGCallToActionBannerView.m:51:    self.button.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockEditHomeLocationView.m:47:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockEditHomeLocationView.m:48:    self.titleLabel.text = @"EDIT LOCATION";
Sezam/AGAutoUnlockEditHomeLocationView.m:68:    mapDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockEditHomeLocationView.m:69:    mapDescriptionLabel.text = @"Drag the map to position the house icon on your home.";
Sezam/AGAutoUnlockEditHomeLocationView.m:78:    self.saveLocationButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockEditHomeLocationView.m:79:    [self.saveLocationButton setTitle:@"SAVE LOCATION" forState:UIControlStateNormal];
Sezam/AGRecurringDaysTableViewCell.m:29:    self.daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGRecurringDaysTableViewCell.m:76:    AGDayOfWeekCell *cell = (AGDayOfWeekCell *)[collectionView dequeueReusableCellWithReuseIdentifier:@"DayCell" forIndexPath:indexPath];
Sezam/AGDoorAjarTimingView.m:50:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGDoorAjarTimingView.m:51:    self.titleLabel.text = @"DOOR AJAR TIMING";
Sezam/AGDoorAjarTimingView.m:58:    self.doorAjarDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGDoorAjarTimingView.m:60:    self.doorAjarDescriptionLabel.text = @"You can receive notifications when your door is left open for the specified amount of time.";
Sezam/AGDoorAjarTimingView.m:92:    self.doorAjarTimingCell.sliderDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGDoorAjarTimingView.m:93:    self.doorAjarTimingCell.titleLabel.text = @"Door Ajar Timing";
Sezam/AGRTCRecordedMediaStream.m:97:        [self addObserver:self forKeyPath:@"state" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGRTCRecordedMediaStream.m:184:    return [NSString stringWithFormat:@"%ul", [self.client sessionID]];
Sezam/AGRTCRecordedMediaStream.m:189:    return @"webrtc";
Sezam/AGRTCRecordedMediaStream.m:202:    return @"None Detected :)";
Sezam/AGRTCRecordedMediaStream.m:332:    if([keyPath isEqualToString:@"state"]){
Sezam/AGRTCRecordedMediaStream.m:339:                NSAssert(old == AGVideoStreamStateUnknown, @"Unknown state transition!");
Sezam/AGRTCRecordedMediaStream.m:343:                NSAssert(old == AGVideoStreamStateUnknown || old == AGVideoStreamStateRestarting, @"Initialized twice!");
Sezam/AGRTCRecordedMediaStream.m:350:                , @"Preparing after prepared!");
Sezam/AGRTCRecordedMediaStream.m:354:                NSAssert(old == AGVideoStreamStatePreparing, @"Prepared without preparing!");
Sezam/AGRTCRecordedMediaStream.m:360:                      || old == AGVideoStreamStateError, @"Stable, but not prepared?");
Sezam/AGRTCRecordedMediaStream.m:365:                NSAssert(old == AGVideoStreamStateClosing, @"Closed without notifying of closing!");
Sezam/AGRTCRecordedMediaStream.m:372:                        || old == AGVideoStreamStatePrepared, @"Buffering without prepared!");
Sezam/AGRTCRecordedMediaStream.m:379:                NSAssert(old == AGVideoStreamStateRestarting, @"We should try until we reach our limit.");
Sezam/AGRTCRecordedMediaStream.m:391:        NSString * step = [NSString stringWithFormat:@"(%d) %@ -> %@", _stepCount++, [NSString stringFromVideoState:old],[NSString stringFromVideoState:new]];
Sezam/AGAppStoreReviewController.m:20:    NSDate *appReviewDate = (NSDate *)[[NSUserDefaults standardUserDefaults] objectForKey:@"AppReviewDate"];
Sezam/AGAppStoreReviewController.m:30:        NSString *currentReviewString = [AGAmazonReviews returnStringForReviewType:reviewType andKey:@"reviewType"];
Sezam/AGAppStoreReviewController.m:31:        NSDate *mostRecentReviewPopupDate = [[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"MostRecentReviewPopupDate%@", currentReviewString]];
Sezam/AGAppStoreReviewController.m:46:        NSInteger numberOfSuccessfulOperations = [[NSUserDefaults standardUserDefaults] integerForKey:@"NumberOfSuccessfulOperations"];
Sezam/AGAppStoreReviewController.m:47:        NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGAppStoreReviewController.m:60:    UIAlertController *howsEverythingGoingAlertController = [UIAlertController alertControllerWithTitle:@"How’s Everything Going?"
Sezam/AGAppStoreReviewController.m:61:                                                                                                message:@"How are things going with the August Home app?"
Sezam/AGAppStoreReviewController.m:64:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"It’s Great!"
Sezam/AGAppStoreReviewController.m:68:                                                                            [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Positive", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:71:                                                                            if (NSClassFromString(@"SKStoreReviewController")) {
Sezam/AGAppStoreReviewController.m:77:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"Not So Great"
Sezam/AGAppStoreReviewController.m:81:                                                                             [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Negative", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:84:                                                                             UIAlertController *sendFeedbackAlertController = [UIAlertController alertControllerWithTitle:@"Send Feedback?"
Sezam/AGAppStoreReviewController.m:85:                                                                                                                                                                  message:@"We’re sorry you’re having problems with the August Home app. Would you like to send us feedback on what we could be doing better?"
Sezam/AGAppStoreReviewController.m:87:                                                                             [sendFeedbackAlertController addAction:[UIAlertAction actionWithTitle:@"Sure"
Sezam/AGAppStoreReviewController.m:92:                                                                                                                                               [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"ProceededToProvideEmailFeedback", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:95:                                                                                                                                               NSString *toEmail = @"feedback@august.com";
Sezam/AGAppStoreReviewController.m:96:                                                                                                                                               NSString *subject = [NSString stringWithFormat:@"In-app Feedback - August iOS app"];
Sezam/AGAppStoreReviewController.m:99:                                                                             [sendFeedbackAlertController addAction:[UIAlertAction actionWithTitle:@"No Thanks" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppStoreReviewController.m:102:                                                                                 [[Mixpanel sharedInstance] track:@"Feedback Leave Feedback" properties:@{@"response":@"DeclinedToProvideEmailFeedback", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:109:    [howsEverythingGoingAlertController addAction:[UIAlertAction actionWithTitle:@"Close" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAppStoreReviewController.m:110:        [[Mixpanel sharedInstance] track:@"Feedback Requested" properties:@{@"response":@"Close", @"store":@"AppStore"}];
Sezam/AGAppStoreReviewController.m:115:    [[NSUserDefaults standardUserDefaults] setObject:[NSDate date] forKey:@"AppReviewDate"];
Sezam/AGInviteEditViewController.m:152:    titleLabel.nuiClass = @"StandardLabel";
Sezam/AGInviteEditViewController.m:218:            cell = [tableView dequeueReusableCellWithIdentifier:@"ProfileCellHK"];
Sezam/AGInviteEditViewController.m:220:            cell = [tableView dequeueReusableCellWithIdentifier:@"ProfileCell"];
Sezam/AGInviteEditViewController.m:224:        if ((![self.user.firstName isEqualToString:@""] && self.user.firstName)||(![self.user.lastName isEqualToString:@""] && self.user.lastName)) {
Sezam/AGInviteEditViewController.m:246:            if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"]) {
Sezam/AGInviteEditViewController.m:248:                formatedNumber = [NSString stringWithFormat:@"+1 (%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGInviteEditViewController.m:258:       UITableViewCell *cell =  [self.tableView dequeueReusableCellWithIdentifier:@"GuestEditName"];
Sezam/AGInviteEditViewController.m:295:    [self performSegueWithIdentifier:@"ToEditName" sender:self];
Sezam/AGInviteEditViewController.m:374:    if ((![[[self user]  firstName] isEqualToString:@""] && [[self user]  firstName])||(![[[self user]  lastName] isEqualToString:@""] && [[self user]  lastName])) {
Sezam/AGInviteEditViewController.m:430:                [self.inviteButton setTitle:@"SAVE CODE" forState:UIControlStateNormal];
Sezam/AGInviteEditViewController.m:451:    if (!([lockUser.type.lowercaseString isEqualToString:@"limited"] || [lockUser.type.lowercaseString isEqualToString:@"user"])) {
Sezam/AGInviteEditViewController.m:458:            if ([ruleID isEqualToString:@"always"]) {
Sezam/AGInviteEditViewController.m:486:        if (([lock.type isEqualToString:@"user"]) && ([invitedUser.objectId isEqualToString: AGUser.currentUser.objectId]==false)) {
Sezam/AGInviteEditViewController.m:498:            if (([lockUser.objectId isEqualToString:currentUser.objectId] == false) && ([lockUser.type.lowercaseString isEqualToString:@"superuser"])) {
Sezam/AGInviteEditViewController.m:509:                if ([lockUser.type.lowercaseString isEqualToString:@"superuser"]) {
Sezam/AGInviteEditViewController.m:511:                } else if (([lockUser.type.lowercaseString isEqualToString:@"user"]) || ([lockUser.type.lowercaseString isEqualToString:@"limited"])){
Sezam/AGInviteEditViewController.m:524:                    userDeviceMap.userHasDoorbellAccess = [invitation.type isEqualToString:@"user"]?AGUserStatusGuest:AGUserStatusOwner;
Sezam/AGInviteEditViewController.m:828:                AGHomeKitSiriInviteQuestionViewController *siriVC = [self.storyboard instantiateViewControllerWithIdentifier:@"SiriInviteQuestion"];
Sezam/AGInviteEditViewController.m:861:        messageController.body =[NSString stringWithFormat: @"You are invited to use my August Smart Lock. Your personal entry code is %@", pinSection.pinToTextUser];
Sezam/AGInviteEditViewController.m:950:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:errorMsg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGInviteEditViewController.m:990:    if ([segue.identifier isEqualToString:@"ToEditName"]) {
Sezam/AGInviteEditViewController.m:996:    if ([segue.identifier isEqualToString:@"ToAccessLevel"]) {
Sezam/AGInviteEditViewController.m:1007:    if ([segue.identifier isEqualToString:@"InviteEditToAddNumber"]) {
Sezam/AGInviteEditViewController.m:1013:    if ([segue.identifier isEqualToString:@"ToSchedule"]) {
Sezam/AGInviteEditViewController.m:1037:    if ([segue.identifier isEqualToString:@"InviteEditViewToDatePicker"]) {
Sezam/AGInviteEditViewController.m:1039:    } else if ([segue.identifier isEqualToString:@"InviteEditToUpdateStatus"]){
Sezam/AGInviteEditViewController.m:1112:                UIAlertController *dvrCancelAlert = [UIAlertController alertControllerWithTitle:@"August Video Recording Subscription Will Be Canceled"
Sezam/AGInviteEditViewController.m:1113:                                                                                        message:@"This person is the owner of the August Video Recording subscription for this doorbell. Removing this person's access will cancel the subscription and the paying user will receive a prorated refund."
Sezam/AGInviteEditViewController.m:1209:                BOOL allowEditSelf = [AGUtility checkForAppFeature:@"editself"];
Sezam/AGInviteEditViewController.m:1322:    [UITableView beginAnimations:@"reload" context:nil];
Sezam/AGDebugSelectLockViewController.m:34:    static NSString *CellIdentifier = @"NEW_LOCK_CELL";
Sezam/AGUnityLostKeyViewController.m:57:    self.titles = @[@"MODULE SYNC ERROR LOCK", @"NEW LOCK", @"SYNC ENTRY CODES", @"", @"NEW LOCK"];
Sezam/AGUnityLostKeyViewController.m:58:    self.heroImgNames = @[@"unity_header_lock_on_door", @"unity_header_module_in_lock", @"unity_doorsense_closeup", @"unity_doorsense_closeup", @"unity_doorsense_closeup"];
Sezam/AGUnityLostKeyViewController.m:61:            @"Is the module in the same lock as before, or a different lock?",
Sezam/AGUnityLostKeyViewController.m:62:            @"Would you like to factory reset the August module for use with this lock, or use it as it is and sync your entry codes with this lock?",
Sezam/AGUnityLostKeyViewController.m:63:            @"",
Sezam/AGUnityLostKeyViewController.m:64:            @"",
Sezam/AGUnityLostKeyViewController.m:65:            @"Your August module and lock are now communicating properly.",
Sezam/AGUnityLostKeyViewController.m:68:    self.primaryBtnTitles = @[@"SAME LOCK", @"RESET THE MODULE", @"", @"", @"DONE"];
Sezam/AGUnityLostKeyViewController.m:69:    self.secondBtnTitles = @[@"DIFFERENT LOCK", @"SYNC ENTRY CODES", @"", @"", @""];
Sezam/AGUnityLostKeyViewController.m:125:    __block UIAlertController *alertVC = [AGAlertHelper alertViewWithTitle:@"Restoring Factory Settings..."
Sezam/AGUnityLostKeyViewController.m:132:            NSString *errorTitle = @"Factory reset failed!";
Sezam/AGUnityLostKeyViewController.m:134:            UIAlertAction *alertAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertChooseEventController.m:63:        [curEventUserIDs addObject:@"manuallock"];
Sezam/AGSmartAlertChooseEventController.m:67:    [curEventUserIDs addObject:@"select_user"];
Sezam/AGSmartAlertChooseEventController.m:71:        [curEventUserIDs addObject:@"door_open"];
Sezam/AGSmartAlertChooseEventController.m:76:        [curEventUserIDs addObject:@"autorelock"];
Sezam/AGSmartAlertChooseEventController.m:81:        [curEventUserIDs addObject:@"onetouchlock"];
Sezam/AGSmartAlertChooseEventController.m:98:        self.view.selectedIndex = [self.eventUserIDs indexOfObject:@"select_user"];
Sezam/AGSmartAlertChooseEventController.m:112:    if ([selectedUserID isEqualToString:@"select_user"]) {
Sezam/AGRootContainerViewController.m:18:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"preferences"];
Sezam/AGRootContainerViewController.m:21:        vc = [self.storyboard instantiateViewControllerWithIdentifier:@"keychain"];
Sezam/AGViewController.m:29:		ZoomOutSegue * zoomOutSegue = [[ZoomOutSegue alloc] initWithIdentifier:@"" source:self destination:viewController];
Sezam/AGViewController.m:57:	UIFont *myFont = [UIFont fontWithName:@"ProximaNova-Semibold" size:14];
Sezam/AGChooseDoorbellViewController.m:39:       [self performSegueWithIdentifier:@"chooseDoorbellToMars2Checklist" sender:sender];
Sezam/AGChooseDoorbellViewController.m:43:       [self performSegueWithIdentifier:@"chooseDoorbellToDoorbellScanSetup" sender:sender];
Sezam/AGChooseDoorbellViewController.m:66:    if ([segue.identifier isEqualToString:@"chooseDoorbellToDoorbellScanSetup"]) {
Sezam/AGChooseDoorbellViewController.m:70:    if ([segue.identifier isEqualToString:@"chooseDoorbellToMars2Checklist"]) {
Sezam/AGBridgeSetupSelectViewController.m:29:    NSAssert(self.setupNavController.accessoryBrowser != nil, @"Accessory browser is not yet initialized");
Sezam/AGBridgeSetupSelectViewController.m:76:    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"bridge_table_cell"];
Sezam/AGBridgeSetupSelectViewController.m:84:        NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"August Doorbell Cam ([0-9A-Z]+)"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:57:            UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Setup Error" message:@"Unable to update Lock and Doorbell. Please attempt association setup again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:58:            UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:113:    AGTableViewCell *cell = [self.ownersListTable dequeueReusableCellWithIdentifier: @"OwnerCell"];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:114:    cell.label.text = [NSString stringWithFormat:@"%@ %@", owner.firstName, owner.lastName];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:136:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Cancel Lock/Doorbell Sync?" message:@"If you cancel this sync, access to your lock and doorbell will be managed separately, and there will be no lock/unlock button on your live call screen." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:137:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Continue With Sync"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:141:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Cancel Sync"
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:154:    if ([self.lock.bridge.model isEqualToString:@"august-connect"]) {
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:155:        [self performSegueWithIdentifier:@"DevicePermissionsToExistingConnect" sender:nil];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:157:        [self performSegueWithIdentifier:@"DevicePermissionsToValidation" sender:nil];
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:174:    if ([segue.identifier isEqualToString:@"DevicePermissionsToExistingConnect"]) {
Sezam/AGDoorbellLockAssociationDevicePermissionsViewController.m:182:    } else if ([segue.identifier isEqualToString:@"DevicePermissionsToValidation"]) {
Sezam/AGConnectedAppDetailViewController.m:44:        if ([self.connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:47:            self.subTitleLabel1.text = @"WHAT IS XFINITY HOME?";
Sezam/AGConnectedAppDetailViewController.m:48:            self.bodyLabel1.text = @"Get 24/7 professional monitoring and look after your home, family and valuables from anywhere on any device.";
Sezam/AGConnectedAppDetailViewController.m:49:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:50:            self.bodyLabel2.text = @"Syncing your August account with XFINITY lets you operate your lock using the XFINITY Home app.";
Sezam/AGConnectedAppDetailViewController.m:51:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:52:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:55:            self.subTitleLabel1.text = @"WHAT IS LOGITECH HARMONY?";
Sezam/AGConnectedAppDetailViewController.m:56:            self.bodyLabel1.text = @"Logitech Harmony lets you control your home from your iOS or Android smartphone.";
Sezam/AGConnectedAppDetailViewController.m:57:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:58:            self.bodyLabel2.text = @"Syncing your August account with Harmony lets you operate your lock using the Harmony Control app.";
Sezam/AGConnectedAppDetailViewController.m:59:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:60:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"honeywell"]) {
Sezam/AGConnectedAppDetailViewController.m:63:            self.subTitleLabel1.text = @"WHAT IS HONEYWELL?";
Sezam/AGConnectedAppDetailViewController.m:64:            self.bodyLabel1.text = @"The Honeywell Total Connect 2.0 Remote Services Platform allows homeowners to control their security systems, receive alerts, view live video, locate vehicles or assets, control thermostats and lighting on iOS and Android devices.";
Sezam/AGConnectedAppDetailViewController.m:65:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:66:            self.bodyLabel2.text = @"The August Smart Lock integration will allow customers to manage their front door and home security for a single mobile app.";
Sezam/AGConnectedAppDetailViewController.m:67:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:68:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"ifttt"]) {
Sezam/AGConnectedAppDetailViewController.m:71:            self.subTitleLabel1.text = @"WHAT IS IFTTT?";
Sezam/AGConnectedAppDetailViewController.m:72:            self.bodyLabel1.text = @"IFTTT (If This, Then That) gives you creative control over the products and apps you love.";
Sezam/AGConnectedAppDetailViewController.m:73:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:74:            self.bodyLabel2.text = @"IFTTT allows people to create \"recipes\" that connect the services, devices, and apps they love and use every day. When a user locks/unlocks their August Smart Lock, the action can trigger a recipe that automates the task.";
Sezam/AGConnectedAppDetailViewController.m:75:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:76:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"alexa"]) {
Sezam/AGConnectedAppDetailViewController.m:79:            self.subTitleLabel1.text = @"WHAT IS AMAZON ALEXA?";
Sezam/AGConnectedAppDetailViewController.m:80:            self.bodyLabel1.text = @"Alexa is Amazon's voice assistant for Amazon Echo speaker.";
Sezam/AGConnectedAppDetailViewController.m:81:            self.subTitleLabel2.text = @"HOW DOES IT WORK WITH AUGUST?";
Sezam/AGConnectedAppDetailViewController.m:82:            self.bodyLabel2.text = @"August users can use Alexa to lock and unlock your August Smart Lock(s) and check the status of your August Smart Lock(s).";
Sezam/AGConnectedAppDetailViewController.m:83:            self.bodyLabel3.text = @"Requires August Smart Lock and August Connect.";
Sezam/AGConnectedAppDetailViewController.m:86:        [self.actionButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGConnectedAppDetailViewController.m:91:        NSString *connectedAppName = [self.connectedAppDictionary objectForKey:@"name"];
Sezam/AGConnectedAppDetailViewController.m:92:        if ([connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:95:            self.bodyLabel1.text = @"XFINITY is synced to your August account. Manage your settings in the XFINITY Home app, or tap the button below to disconnect.";
Sezam/AGConnectedAppDetailViewController.m:97:        else if ([connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:99:            self.bodyLabel1.text = @"Logitech Harmony is synced to your August account. You can manage your settings in the Harmony Connect app, or tap the button below to disconnect.";
Sezam/AGConnectedAppDetailViewController.m:106:        [self.actionButton setTitle:@"DISCONNECT" forState:UIControlStateNormal];
Sezam/AGConnectedAppDetailViewController.m:138:        if ([self.connectedAppName.lowercaseString isEqualToString:@"comcast"]) {
Sezam/AGConnectedAppDetailViewController.m:139:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.august.com/2015/05/05/august-announces-partnership-with-comcast/"]];
Sezam/AGConnectedAppDetailViewController.m:140:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"harmony control"]) {
Sezam/AGConnectedAppDetailViewController.m:141:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://www.august.com/2014/09/17/august-integrates-with-logitech-harmony/"]];
Sezam/AGConnectedAppDetailViewController.m:142:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"ifttt"]) {
Sezam/AGConnectedAppDetailViewController.m:144:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"honeywell"]) {
Sezam/AGConnectedAppDetailViewController.m:145:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms://itunes.apple.com/us/app/total-connect-2.0/id439763870?mt=8"]];
Sezam/AGConnectedAppDetailViewController.m:146:        } else if ([self.connectedAppName.lowercaseString isEqualToString:@"alexa"]) {
Sezam/AGConnectedAppDetailViewController.m:147:            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms://itunes.apple.com/us/app/amazon-alexa/id944011620?mt=8"]];
Sezam/AGConnectedAppDetailViewController.m:152:        NSString *connectedAppID = [self.connectedAppDictionary objectForKey:@"id"];
Sezam/AGConnectedAppDetailViewController.m:154:            self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGConnectedAppDetailViewController.m:160:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to disconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGConnectedAppDetailViewController.m:169:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Unable to disconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGDoorbellActivityViewController.m:114:    if ([self.logEntry.doorbellUserId isEqualToString:@"self"]) {
Sezam/AGDoorbellActivityViewController.m:119:    self.activityDetailLabelWithCTA.text = @"";                    // clear placeholder text so it doesn't appear briefly before actual text loads
Sezam/AGDoorbellActivityViewController.m:120:    self.activityDetailLabelWithOutCTA.text = @"";                    // clear placeholder text so it doesn't appear briefly before actual text loads
Sezam/AGDoorbellActivityViewController.m:127:            self.actionTitleLabel.text = @"CALL MISSED";
Sezam/AGDoorbellActivityViewController.m:130:            self.actionTitleLabel.text = @"CALL DECLINED";
Sezam/AGDoorbellActivityViewController.m:133:            self.actionTitleLabel.text = @"CALL ANSWERED";
Sezam/AGDoorbellActivityViewController.m:136:            self.actionTitleLabel.text = @"LIVE STREAM";
Sezam/AGDoorbellActivityViewController.m:139:            self.actionTitleLabel.text = @"MOTION DETECTED";
Sezam/AGDoorbellActivityViewController.m:278:            waitStatus = @"Processing Video";
Sezam/AGDoorbellActivityViewController.m:281:            waitStatus = @"Downloading File";
Sezam/AGDoorbellActivityViewController.m:284:            waitStatus = @"Downloading Video";
Sezam/AGDoorbellActivityViewController.m:287:            waitStatus = @"Storing Video";
Sezam/AGDoorbellActivityViewController.m:293:            waitStatus = @"Video processing failed. Please try again later.";
Sezam/AGDoorbellActivityViewController.m:307:    NSString *errorString = [[notification userInfo] valueForKey:@"Error"];
Sezam/AGDoorbellActivityViewController.m:327:                NSString *videoURL = [dict objectForKey:@"url"];
Sezam/AGDoorbellActivityViewController.m:339:                    [self.playerItem addObserver:self forKeyPath:@"status" options:0 context:&ItemStatusContext1];   // listen for when the video is ready to play
Sezam/AGDoorbellActivityViewController.m:340:                    [self.playerItem addObserver:self forKeyPath:@"rate" options:0 context:&ItemStatusContext2];   // listen for when the video is ready to play
Sezam/AGDoorbellActivityViewController.m:349:                        NSString *uploadStateString = [dict objectForKey:@"videoUploadProgress"];
Sezam/AGDoorbellActivityViewController.m:355:                                [self updateWaitStatus:@"Your video is currently being processed.\nIt should be available soon." hasCancelButton:false hasCompleted:false];
Sezam/AGDoorbellActivityViewController.m:368:                            [self updateWaitStatus:@"An error occured and your video is not available.\nWe’re sorry for the inconvenience." hasCancelButton:false hasCompleted:true];
Sezam/AGDoorbellActivityViewController.m:371:                            [self updateWaitStatus:@"" hasCancelButton:false hasCompleted:true];
Sezam/AGDoorbellActivityViewController.m:386:            self.upgradeToPremiumExpiredVideoLabel.text = @"This video has expired.";
Sezam/AGDoorbellActivityViewController.m:402:                self.upgradeToPremiumActiveVideoLabel.text = [NSString stringWithFormat:@"This video expires in %luh %lum! Upgrade to August Premium Video Recording for a 30 day history.", hours, minutes];
Sezam/AGDoorbellActivityViewController.m:422:    if ([videoUploadString isEqualToString:@"not_started"]) {
Sezam/AGDoorbellActivityViewController.m:424:    } else if ([videoUploadString isEqualToString:@"in_progress"]) {
Sezam/AGDoorbellActivityViewController.m:426:    } else if ([videoUploadString isEqualToString:@"deleted"]) {
Sezam/AGDoorbellActivityViewController.m:428:    } else if ([videoUploadString isEqualToString:@"error"]) {
Sezam/AGDoorbellActivityViewController.m:430:    } else if ([videoUploadString isEqualToString:@"completed"]) {
Sezam/AGDoorbellActivityViewController.m:466:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ missed call from %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:469:            self.activityDetailLabelWithOutCTA.text =  [NSString stringWithFormat:@"%@ declined call from %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:472:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ answered %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:475:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"%@ viewed live stream at %@ at %@", firstName, doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:478:            self.activityDetailLabelWithOutCTA.text = [NSString stringWithFormat:@"Motion detected at %@ at %@", doorbellName, timeStamp];
Sezam/AGDoorbellActivityViewController.m:543:    [self.playerItem removeObserver:self forKeyPath:@"status" context:&ItemStatusContext1];
Sezam/AGDoorbellActivityViewController.m:544:    [self.playerItem removeObserver:self forKeyPath:@"rate" context:&ItemStatusContext2];
Sezam/AGDoorbellActivityViewController.m:564:        [self updateWaitStatus: @"Contacting Server" hasCancelButton:true hasCompleted:false];
Sezam/AGDoorbellActivityViewController.m:579:    UIStoryboard *subsStoryboard = [UIStoryboard storyboardWithName:@"AGSubscriptions" bundle:nil];
Sezam/AGDoorbellActivityViewController.m:580:    UIViewController *subscriptionListVC = [subsStoryboard instantiateViewControllerWithIdentifier: @"SubscriptionList"];
Sezam/AGDoorbellActivityViewController.m:589:    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:[NSString stringWithFormat:@"DoorbellPowerModeAlertDoNotShow%@", self.doorbell.objectId]];
Sezam/AGDoorbellActivityViewController.m:596:    [self performSegueWithIdentifier:@"DoorbellActivityToHighPowerMode" sender:nil];
Sezam/AGDoorbellActivityViewController.m:607:    if ([segue.identifier isEqualToString:@"DoorbellActivityToHighPowerMode"]) {
Sezam/AGVideoStreamImageCapturer.m:45:    NSDate *creationDate = self.doorbell.doorbellImageDictionary[@"date"];
Sezam/AGVideoStreamImageCapturer.m:46:    NSString *imageURL = self.doorbell.doorbellImageDictionary[@"url"];
Sezam/AGVideoStreamImageCapturer.m:56:        NSDate *creationDate = doorbell.doorbellImageDictionary[@"date"];
Sezam/AGVideoStreamImageCapturer.m:57:        NSString *imageURL = doorbell.doorbellImageDictionary[@"url"];
Sezam/AGVideoStreamImageCapturer.m:67:    [recentImageDateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss'Z"];
Sezam/AGVideoStreamImageCapturer.m:78:        if ([imageURL isKindOfClass:[NSString class]] && ![imageURL isEqualToString:@""]) {
Sezam/AGVideoStreamImageCapturer.m:120:    if ([[messageData objectForKey:@"status"] isEqual:@"imagecapture"]) {
Sezam/AGVideoStreamImageCapturer.m:121:        NSDictionary *dataDict = [messageData objectForKey:@"data"];
Sezam/AGVideoStreamImageCapturer.m:122:        NSDictionary *imageDict = [dataDict objectForKey:@"cloudinaryResult"];
Sezam/AGVideoStreamImageCapturer.m:123:        NSString *imageURL = [imageDict objectForKey:@"secure_url"];
Sezam/AGVideoStreamImageCapturer.m:124:        NSString *creationDate = [imageDict objectForKey:@"created_at"];
Sezam/IV-SDK/include/IVSDK/IVEventManagementFacade.h:125: *  @param cameraEventsInfo cameraEventsInfo. Ex. {@"cameraID0",{EventType0,EventType1...},@"cameraID1",{EventType1,EventType2...}}
Sezam/IV-SDK/include/IVSDK/IVEventManagementFacade.h:150: *  @param cameraEventsInfo cameraEventsInfo. Ex. {@"cameraID0",{EventType0,EventType1...},@"cameraID1",{EventType1,EventType2...}}
Sezam/AGKeypadOTAManager.m:378:    NSArray *nameTokens = [advertisedName componentsSeparatedByString:@" "];
Sezam/AGKeypadOTAManager.m:379:    if (([nameTokens count] > 1) &&  [[nameTokens objectAtIndex:0] isEqualToString:@"August"]) {
Sezam/AGKeypadOTAManager.m:504:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
Sezam/AGKeypadOTAManager.m:560:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
Sezam/AGAutoUnlockDetector.m:51:        NSString *varName = [rule objectForKey:@"val"];
Sezam/AGAutoUnlockDetector.m:60:        NSNumber *min = [rule objectForKey:@"min"];
Sezam/AGAutoUnlockDetector.m:61:        NSNumber *max = [rule objectForKey:@"max"];
Sezam/AGAutoUnlockDetector.m:93:        NSNumber *p  = (NSNumber *)[entry objectForKey:@"p"];
Sezam/AGAutoUnlockDetector.m:94:        NSArray *orArray = [entry objectForKey:@"or"];
Sezam/AGAutoUnlockDetector.m:95:        NSArray *andArray = [entry objectForKey:@"and"];
Sezam/AGAutoUnlockDetector.m:142:                        @{@"isspam":@TRUE,@"label":@"no-motion-data", @"time":@1440412959.616937, @"wifionexit":@0, @"hour24exit":@6.05, @"hour24enter":@5.7,  @"outsideseconds": @1238.627
Sezam/AGAutoUnlockDetector.m:144:                        @{@"isspam":@TRUE,@"label":@"no-motion-data-2", @"time":@1440417460.184488 , @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:145:                        @{@"isspam":@TRUE,@"label":@"min-motion-data", @"time":@1440417460.184488 , @"walkseconds":@0, @"othertransseconds":@0, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:146:                        @{@"isspam":@TRUE,@"label":@"min-motion-data", @"time":@1440417460.184488 , @"walkseconds":@45.0, @"othertransseconds":@10.2, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:147:                        @{@"isspam":@FALSE,@"label":@"mucho-motion", @"time":@1440417460.184488 , @"walkseconds":@0.0, @"othertransseconds":@2497.2, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:148:                        @{@"isspam":@TRUE,@"label":@"tiny-motion", @"time":@1440417460.184488 , @"walkseconds":@261.0, @"othertransseconds":@2.5, @"wifionexit":@0, @"hour24exit":@6.95, @"hour24enter":@7.333333,  @"outsideseconds": @11389.121 },
Sezam/AGAutoUnlockDetector.m:156:                        @{@"isspam":@TRUE, @"label":@"HELIOS-3760", @"exitdiff":@300.0, @"hour24exit":@11.5, @"outsideseconds": @900.0, @"wifionexit":@1},
Sezam/AGAutoUnlockDetector.m:158:                           @{@"isspam":@TRUE,@"label":@"HELIOS-3760", @"exitdiff":@0.3, @"hour24exit":@0.1,  @"outsideseconds": @900.0, @"wifionexit":@1
Sezam/AGAutoUnlockDetector.m:160:                           @{@"isspam":@TRUE,@"label":@"HELIOS-3505", @"exitdiff":@0.3, @"hour24exit":@16.0,  @"outsideseconds": @900.0
Sezam/AGAutoUnlockDetector.m:162:                           @{@"isspam":@FALSE,@"label":@"DowHome", @"exitdiff":@300.0, @"hour24exit":@16.0,  @"outsideseconds": @9000.0
Sezam/AGAutoUnlockDetector.m:164:                           @{@"isspam":@FALSE,@"label":@"ShortExit", @"exitdiff":@1.0, @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:166:                           @{@"isspam":@FALSE,@"label":@"ShortExitFail", @"exitdiff":@0.1, @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:168:                           @{@"isspam":@TRUE,@"label":@"ShortFailMidnight", @"exitdiff":@0.1, @"hour24exit":@1.0, @"hour24enter":@1.1, @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:170:                          @{@"isspam":@FALSE,@"label":@"AMWalk", @"hour24exit":@5.9, @"hour24enter":@6.1, @"outsideseconds": @(18*60)
Sezam/AGAutoUnlockDetector.m:172:                          @{@"isspam":@FALSE,@"label":@"AMRun", @"exitdiff":@0.1, @"hour24exit":@5.5, @"hour24enter":@5.9, @"outsideseconds": @2000, @"othertransseconds":@300.0
Sezam/AGAutoUnlockDetector.m:174:                            @{@"isspam":@FALSE,@"label":@"ShortWalk", @"exitdiff":@0.1, @"hour24exit":@1.0,  @"outsideseconds": @300.0, @"walkseconds":@300
Sezam/AGAutoUnlockDetector.m:176:                           @{@"isspam":@FALSE, @"label":@"MissingOrBigFence", @"hour24exit":@16.0,  @"outsideseconds": @200.0
Sezam/AGAutoUnlockDetector.m:178:                        @{@"isspam":@FALSE,@"label":@"SidLunchApril17", @"hour24exit":@11.0,  @"outsideseconds": @3487.0  // Sid going to lunch. Crossed only 100m geofence.
Sezam/AGAutoUnlockDetector.m:180:                        @{@"isspam":@TRUE,@"label":@"JasonAM",  @"hour24exit":@6.5,  @"outsideseconds": @80 // one fence
Sezam/AGAutoUnlockDetector.m:182:                        @{@"isspam":@TRUE,@"label":@"JasonPM", @"exitdiff":@0.25, @"hour24exit":@17.21,  @"outsideseconds": @10 // one fence
Sezam/AGAutoUnlockDetector.m:184:                        @{@"isspam":@FALSE,@"label":@"5AMToWorkDude_HELIOS-5378", @"wifionexit":@0, @"exitdiff":@26.00498, @"hour24exit":@4.55, @"hour24enter":@13.85,  @"outsideseconds": @33516.08
Sezam/AGAutoUnlockDetector.m:186:                        @{@"isspam":@FALSE,@"label":@"wifi_on_exit_but_gone_for_atleast_four_hours", @"wifionexit":@1, @"exitdiff":@30.0, @"hour24exit":@8.0, @"hour24enter":@16.0,  @"outsideseconds": @28800
Sezam/AGAutoUnlockDetector.m:203:        if (spamResult == [[test objectForKey:@"isspam"] boolValue]) {
Sezam/AGAutoUnlockDetector.m:234:    NSArray *probabilities = [self.storedLockPrefs objectForKey:@"probabilities"];
Sezam/AGAutoUnlockDetector.m:235:    NSDictionary *thresholds = [self.storedLockPrefs objectForKey:@"thresholds"];
Sezam/AGComprehensiveGeoRegionExitDetector.m:217:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-inner", self.region.identifier];
Sezam/AGComprehensiveGeoRegionExitDetector.m:221:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-middle", self.region.identifier];
Sezam/AGComprehensiveGeoRegionExitDetector.m:225:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-outer", self.region.identifier];
Sezam/AGConnectToZWaveViewController.m:158:            [self.primaryButton setTitle:@"ADD TO A Z-WAVE NETWORK" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:164:            [self.primaryButton setTitle:@"UPDATE FIRMWARE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:173:            [self.primaryButton setTitle:@"MY HUB IS IN INCLUSION MODE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:183:            [self.primaryButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGConnectToZWaveViewController.m:208:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:264:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:289:                        if ([zWaveVersion isEqualToString:@"0.30.0"]) {
Sezam/AGConnectToZWaveViewController.m:292:                        NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@", armGitHash, zWaveVersion,bleLock.bleFirmwareVersion];
Sezam/AGConnectToZWaveViewController.m:311:            NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGConnectToZWaveViewController.m:314:                    NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGConnectToZWaveViewController.m:315:                    if ([newChip isEqualToString:@"sd"]) {
Sezam/AGConnectToZWaveViewController.m:317:                        self.otaVersionRequired = [updateInfoDict objectForKey:@"version"];
Sezam/AGConnectToZWaveViewController.m:339:            [bleLock doOTAUpdate:self.lock.firmwareData chip:@"sd"];
Sezam/AGConnectToZWaveViewController.m:394:    NSString *progressValueString = [NSString stringWithFormat:@"%i", progressInt];
Sezam/AGConnectToZWaveViewController.m:396:        self.otaProgressLabel.text = [NSString stringWithFormat:@"Firmware Download Progress %@%%", progressValueString];
Sezam/AGConnectToZWaveViewController.m:405:        self.otaProgressLabel.text = @"Firmware Installation In Progress";
Sezam/AGConnectToZWaveViewController.m:429:        if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:449:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:467:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"ZWave Error" message:@"Unable to Enable ZWave. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGConnectToZWaveViewController.m:468:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGConnectToZWaveViewController.m:482:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGConnectToZWaveViewController.m:492:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGConnectToZWaveViewController.m:493:                    self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGConnectToZWaveViewController.m:530:        UIAlertController *zwaveSecurityAlert = [UIAlertController alertControllerWithTitle:@"Security Alert" message:@"You are connected to a Z-Wave hub that is using the S0 security protocol. August Smart Lock Pro supports the newer S2 protocol, which we recommend for the highest security." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGConnectToZWaveViewController.m:531:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGConnectToZWaveViewController.m:533:        UIAlertAction *learnMoreAction = [UIAlertAction actionWithTitle:@"Learn More" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
Sezam/AGLockNameViewController.m:40:        self.lockNameTextField.text = @"";
Sezam/AGHomeKitBaseViewController.m:33:                item1.label = @"DisableHomeKit";
Sezam/AGHomeKitBaseViewController.m:36:                item2.label = @"BLEInactivityTimeout";
Sezam/AGHomeKitBaseViewController.m:80:        UIViewController *createHouse = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitCreateHouse"];
Sezam/AGHomeKitBaseViewController.m:83:        UIViewController *pick = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitPickHouse"];
Sezam/AGHomeKitBaseViewController.m:102:        UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGHomeKitBaseViewController.m:103:        AGLockSetupSuccessViewController *lockSetupSuccessViewController = (AGLockSetupSuccessViewController *)[augustStoryboard instantiateViewControllerWithIdentifier:@"LockSetupSuccessViewController"];
Sezam/AGHomeKitBaseViewController.m:189:            block(false, @"HomeKit lock service not found.");
Sezam/AGHomeKitBaseViewController.m:213:                        block(false, @"Failed to set HomeKit Authorization.");
Sezam/AGHomeKitBaseViewController.m:223:        block(false, @"HomeKit lock service not found.");
Sezam/AGBluetoothLockController.m:120:        NSDictionary *lockStatusDictionary = @{@"status":@"locked"};
Sezam/AGBluetoothLockController.m:134:          NSDictionary *lockStatusDictionary = @{@"status":@"unlocked"};
Sezam/AGBluetoothLockController.m:142:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Locked"};
Sezam/AGBluetoothLockController.m:148:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Unlocked"};
Sezam/AGBluetoothLockController.m:155:                    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockStatus":@"Unknown"};
Sezam/AGBluetoothLockController.m:195:    if ([message isEqualToString:@"LOCK IN USE"]) {
Sezam/AGBluetoothLockController.m:217:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:224:        NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:235:        NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId};
Sezam/AGBluetoothLockController.m:264:    NSDictionary *errorDictionary = @{@"lockId":self.agLock.objectId,@"errorDetails":error};
Sezam/AGBluetoothLockController.m:275:    if ([error.domain isEqualToString:@"AGCoreBluetooth"]) {
Sezam/AGBluetoothLockController.m:291:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGBluetoothLockController.m:293:        NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
Sezam/AGBluetoothLockController.m:294:        if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
Sezam/AGBluetoothLockController.m:482:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockAction":@"Unlock"};
Sezam/AGBluetoothLockController.m:513:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockResponse":@"Success"};
Sezam/AGBluetoothLockController.m:540:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockAction":@"Lock"};
Sezam/AGBluetoothLockController.m:605:    [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:618:    if ([self.agLock.lockCapability.onboardCPUs containsObject:@"arm"] || [self.agLock.lockCapability.onboardCPUs containsObject:@"st"]) {
Sezam/AGBluetoothLockController.m:626:    } else if ([self.agLock.lockCapability.onboardCPUs containsObject:@"sd"]) {
Sezam/AGBluetoothLockController.m:641:                        if (([self.zWaveVersion isEqualToString:@"0"]) || ([self.zWaveVersion isEqualToString:@"0.0.0"])) {
Sezam/AGBluetoothLockController.m:661:            NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@",self.armGitHash, firmwareVersionSecondTriplet, self.bleFirmwareVersion];
Sezam/AGBluetoothLockController.m:678:                    BOOL lockLocked = [returnedValue isEqual:@"kAugLockState_Locked"];
Sezam/AGBluetoothLockController.m:679:                    BOOL lockUnlocked = [returnedValue isEqual:@"kAugLockState_Unlocked"];
Sezam/AGBluetoothLockController.m:806:        errorCode = @"UnknownError";
Sezam/AGBluetoothLockController.m:820:                errorTitle = @"Lock Overheated";
Sezam/AGBluetoothLockController.m:821:                errorMessage = @"Your lock has overheated.";
Sezam/AGBluetoothLockController.m:825:                errorTitle = @"Lock Batteries Low";
Sezam/AGBluetoothLockController.m:826:                errorMessage = @"Your lock batteries are low. Please replace the batteries.";
Sezam/AGBluetoothLockController.m:830:                errorTitle = @"Lock Jammed";
Sezam/AGBluetoothLockController.m:831:                errorMessage = @"Your lock is jammed. It may be obstructed or need to be recalibrated.";
Sezam/AGBluetoothLockController.m:835:                errorTitle = @"Lock Operation Error";
Sezam/AGBluetoothLockController.m:840:                errorTitle = @"Lock Operation Error";
Sezam/AGBluetoothLockController.m:854:    NSDictionary *userInfoDictionary = @{@"lockId":self.agLock.objectId,@"lockResponse":errorCode};
Sezam/AGBluetoothLockController.m:866:    [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:871:    NSString *onlineOrOfflineKey = @"OFF";
Sezam/AGBluetoothLockController.m:875:            onlineOrOfflineKey = @"ON";
Sezam/AGBluetoothLockController.m:879:    [self.delegate updateOTADebugLabel:[NSString stringWithFormat:@"[%@] %@", onlineOrOfflineKey, text]];
Sezam/AGBluetoothLockController.m:885:    if ([self.currentUpdatingChip isEqualToString:@"arm"]) {
Sezam/AGBluetoothLockController.m:900:    if (([self.currentUpdatingChip isEqualToString:@"ti"]) || ([self.currentUpdatingChip isEqualToString:@"bcm"]) || ([self.currentUpdatingChip isEqualToString:@"st"]) || ([self.currentUpdatingChip isEqualToString:@"arm"])) {
Sezam/AGBluetoothLockController.m:911:    if ([self.currentUpdatingChip isEqualToString:@"ti"]) {
Sezam/AGBluetoothLockController.m:916:        NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@", self.armGitHash, self.armFWVersion, self.tiVersionToUpdateTo];
Sezam/AGBluetoothLockController.m:925:    else if ([self.currentUpdatingChip isEqualToString:@"arm"]) {
Sezam/AGBluetoothLockController.m:933:    } else if ([self.currentUpdatingChip isEqualToString:@"dlg"] || [self.currentUpdatingChip isEqualToString:@"sd"]) { // Europa Chips
Sezam/AGBluetoothLockController.m:934:        if ([self.currentUpdatingChip isEqualToString:@"dlg"]) {
Sezam/AGBluetoothLockController.m:938:        if ([self.currentUpdatingChip isEqualToString:@"sd"]) {
Sezam/AGBluetoothLockController.m:957:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGBluetoothLockController.m:960:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGBluetoothLockController.m:961:                    AGZWaveState zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGBluetoothLockController.m:984:    NSString *otaLabelText = [NSString stringWithFormat:@"OTA cluster: %lu of %lu", (unsigned long)currentCluster, (unsigned long)totalClusters];
Sezam/AGBluetoothLockController.m:1013:        [self updateOTALabelText:@"OTA status"];
Sezam/AGBluetoothLockController.m:1020:        if([[NSUserDefaults standardUserDefaults] boolForKey:@"DisableOTA"])
Sezam/AGBluetoothLockController.m:1022:            [self updateOTALabelText:@"OTA disabled"];
Sezam/AGBluetoothLockController.m:1029:                NSString *fwUpdateFilePath = [[NSBundle mainBundle] pathForResource:@"europa_fw_patch_1.0.13_to_1.0.9" ofType:@"bin"];
Sezam/AGBluetoothLockController.m:1031:                self.currentUpdatingChip = @"dlg";
Sezam/AGBluetoothLockController.m:1034:                NSString *otaDetailsText = [NSString stringWithFormat:@"INSTALLING UPDATE %ld OF %ld", (unsigned long)self.currentOTAUpdate, (unsigned long)self.totalNumberOfOTAUpdates];
Sezam/AGBluetoothLockController.m:1045:                [self updateOTALabelText:[NSString stringWithFormat:@"Updating from: %@", fwVersionString]];
Sezam/AGBluetoothLockController.m:1049:                    NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGBluetoothLockController.m:1056:                        NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGBluetoothLockController.m:1063:                        if ([self.currentUpdatingChip isEqualToString:@"sd"] && self.isZWaveEnabled == NO) {
Sezam/AGBluetoothLockController.m:1065:                        } else if ([self.currentUpdatingChip isEqualToString:@"yale"]) {
Sezam/AGBluetoothLockController.m:1068:                            NSString *version = [updateInfoDict objectForKey:@"version"];
Sezam/AGBluetoothLockController.m:1079:                                    NSString *otaDetailsText = [NSString stringWithFormat:@"INSTALLING UPDATE %ld OF %ld", (unsigned long)self.currentOTAUpdate, (unsigned long)self.totalNumberOfOTAUpdates];
Sezam/AGBluetoothLockController.m:1086:                                    if ([self.currentUpdatingChip isEqualToString:@"ti"]) {
Sezam/AGBluetoothLockController.m:1110:    [self updateOTALabelText:@"No new firmware"];
Sezam/AGBluetoothLockController.m:1121:                if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DisableOTA"] == false) {
Sezam/AGNestCameraToLockViewController.m:88:    self.nestStructure1Label.text = self.nestStructureLabel.text = [[self.structure1 objectForKey:@"structureName"] uppercaseString];
Sezam/AGNestCameraToLockViewController.m:104:        self.nestStructure2Label.text = [[self.structure2 objectForKey:@"structureName"] uppercaseString];
Sezam/AGNestCameraToLockViewController.m:122:    self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Loading Nest Structures and Objects..." message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:131:            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading user's Locks: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:153:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {
Sezam/AGNestCameraToLockViewController.m:154:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"You have been logged out of Nest. Please reconnect." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:159:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest structures:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:171:                    [structureDict setObject:[structureDetails objectForKey:@"name"] forKey:@"structureName"];
Sezam/AGNestCameraToLockViewController.m:172:                    [structureDict setObject:[structureDetails objectForKey:@"structure_id"] forKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:184:            NSString *structure1ID = [self.structure1 objectForKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:185:            NSString *structure2ID = [self.structure2 objectForKey:@"structureID"];
Sezam/AGNestCameraToLockViewController.m:190:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:197:                        NSString *structureIDForHouse = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestCameraToLockViewController.m:249:                        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"You don't have any devices in %@.", self.house1.name] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:253:                        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"You don't have any devices in %@.", self.house2.name] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:259:                            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:280:                                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:291:                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:300:                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:311:                                                    if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:324:                                                            if (([camera.manufacturer isEqualToString:@"nest"]) && ([nestCamera.nestDeviceID isEqualToString:camera.manufacturerID])) {
Sezam/AGNestCameraToLockViewController.m:403:        cell = [tableView dequeueReusableCellWithIdentifier:@"PairedWithCell"];
Sezam/AGNestCameraToLockViewController.m:405:            cell.label2.text = @"None";
Sezam/AGNestCameraToLockViewController.m:413:        cell = [tableView dequeueReusableCellWithIdentifier:@"HeaderCell"];
Sezam/AGNestCameraToLockViewController.m:414:        cell.label.text = @"SHOW RELATED MOTION EVENTS";
Sezam/AGNestCameraToLockViewController.m:418:        cell = [tableView dequeueReusableCellWithIdentifier:@"ButtonCell"];
Sezam/AGNestCameraToLockViewController.m:440:            cell = [tableView dequeueReusableCellWithIdentifier:@"CameraWithLockHeaderCell"];
Sezam/AGNestCameraToLockViewController.m:442:                cell.label2.text = [NSString stringWithFormat:@"%@ - Lock", lock.name];
Sezam/AGNestCameraToLockViewController.m:444:                cell.label2.text = [NSString stringWithFormat:@"%@ - Doorbell",doorbell.name];
Sezam/AGNestCameraToLockViewController.m:449:            cell = [tableView dequeueReusableCellWithIdentifier:@"CameraCell"];
Sezam/AGNestCameraToLockViewController.m:458:            cellSwitch.userInfo = @{@"lock":lock, @"nestCamera":nestCamera};
Sezam/AGNestCameraToLockViewController.m:460:            cellSwitch.userInfo = @{@"doorbell":doorbell, @"nestCamera":nestCamera};
Sezam/AGNestCameraToLockViewController.m:565:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"This item cannot be paired" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGNestCameraToLockViewController.m:566:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGNestCameraToLockViewController.m:572:        [self performSegueWithIdentifier:@"nestCameraToLockToNestStructureMap" sender:nil];
Sezam/AGNestCameraToLockViewController.m:624:    AGNestCamera *nestCamera = [switchUserInfo objectForKey:@"nestCamera"];
Sezam/AGNestCameraToLockViewController.m:625:    AGLock *lock = [switchUserInfo objectForKey:@"lock"];
Sezam/AGNestCameraToLockViewController.m:626:    AGDoorbell *doorbell = [switchUserInfo objectForKey:@"doorbell"];
Sezam/AGNestCameraToLockViewController.m:646:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to add new camera to August: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:651:                            [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:662:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:674:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to remove camera from lock: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:693:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to add new camera to August: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:698:                            [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:709:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to associate camera and Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:721:                    [[[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Unable to remove camera from Doorbell: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil] show];
Sezam/AGNestCameraToLockViewController.m:734:    self.loadingDataAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting from Nest..." message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:739:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error disconnecting from Nest:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestCameraToLockViewController.m:765:    if ([segue.identifier isEqualToString:@"nestCameraToLockToNestStructureMap"]) {
Sezam/AGWebSubscriptionViewController.m:93:    if ([pathString rangeOfString:@"exit-web-view"].length != 0) { /// This causes a direct exit of the view
Sezam/AGWebSubscriptionViewController.m:100:    if ([pathString rangeOfString:@"order-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:103:    if ([pathString rangeOfString:@"cancel-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:106:    if ([pathString rangeOfString:@"change-plan-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:109:    if ([pathString rangeOfString:@"change-payment-confirmation"].length != 0) {
Sezam/AGWebSubscriptionViewController.m:132:    self.titleLabel.text = @"SUBSCRIPTION";
Sezam/AGWebSubscriptionViewController.m:138:            self.titleLabel.text = @"SUBSCRIPTION";
Sezam/AGVideoRecordingUpsellView.m:45:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGVideoRecordingUpsellView.m:46:    self.titleLabel.text = @"AUGUST VIDEO RECORDING";
Sezam/AGVideoRecordingUpsellView.m:65:    self.centerDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGVideoRecordingUpsellView.m:72:    self.learnMoreButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGVideoRecordingUpsellView.m:76:    [self.learnMoreButton setTitle:@"LEARN MORE" forState:UIControlStateNormal];
Sezam/AGVideoRecordingUpsellView.m:84:    self.notNowButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGVideoRecordingUpsellView.m:85:    [self.notNowButton setTitle:@"NOT NOW" forState:UIControlStateNormal];
Sezam/AGVideoRecordingUpsellView.m:122:    NSString *centerDescriptionText = @"Your Doorbell Cam comes with 24 hours of video recording.\n\nMake the most of your Doorbell Cam and upgrade to Premium to get 30 days of video history.";
Sezam/AGVideoRecordingUpsellView.m:131:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGFancySuccessAnimationView.m:76:    CABasicAnimation *scaleAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
Sezam/AGFancySuccessAnimationView.m:83:    [self.greenCircle.layer addAnimation:scaleAnimation forKey:@"scaleAnimation"];
Sezam/AGFancySuccessAnimationView.m:84:    [self.clearCircle.layer addAnimation:[scaleAnimation copy] forKey:@"scaleAnimation"];
Sezam/AGFancySuccessAnimationView.m:93:    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"opacity"];
Sezam/AGFancySuccessAnimationView.m:104:    translationAnimation = [CABasicAnimation animationWithKeyPath:@"transform.translation.y"];
Sezam/AGFancySuccessAnimationView.m:113:    [self.checkMark.layer addAnimation:translationAnimation forKey:@"moveUp"];
Sezam/AGFancySuccessAnimationView.m:115:    [self.checkMark.layer addAnimation:animation forKey:@"opacityIN"];
Sezam/AGAddEmailViewController.m:98:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAddEmailViewController.m:130:            [self performSegueWithIdentifier:@"AddEmailToEmailVerify" sender:nil];
Sezam/AGAddEmailViewController.m:133:             [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAddEmailViewController.m:158:    if ([segue.identifier isEqualToString:@"AddEmailToEmailVerify"]) {
Sezam/AGUnityModuleSettingsViewController.m:144:    NSArray *languages = @[@"English",@"French",@"Spanish"];
Sezam/AGUnityModuleSettingsViewController.m:146:    NSString *languageTitle = @"DEVICE AUDIO LANGUAGE";
Sezam/AGUnityModuleSettingsViewController.m:148:    NSArray *volumes = @[@"Silent",@"Low Volume",@"High Volume"];
Sezam/AGUnityModuleSettingsViewController.m:149:    NSString *volumeTitle = @"DEVICE SOUND VOLUME";
Sezam/AGUnityModuleSettingsViewController.m:152:    NSArray * operatings = @[@"Normal",@"Privacy",@"Vacation"];
Sezam/AGUnityModuleSettingsViewController.m:153:    NSString *operatingTitle = @"OPERATING MODE";
Sezam/AGUnityModuleSettingsViewController.m:249:    [self performSegueWithIdentifier:@"UnityModuleSettingsToKeypadSecurity" sender:nil];
Sezam/AGUnityModuleSettingsViewController.m:317:                                                          btnTitle:@"OK" btnPressedBlock:nil];
Sezam/AGUnityModuleSettingsViewController.m:327:    NSString *operationModeNormalString = @"Can lock and unlock door with August app \n\nMaster code will work \n\nUser codes will work";
Sezam/AGUnityModuleSettingsViewController.m:328:    NSString *operationModePrivacyString = @"Can lock and unlock door with August app \n\nMaster code will work \n\nUser codes will not work";
Sezam/AGUnityModuleSettingsViewController.m:329:    NSString *operationModeVacationString = @"Can lock and unlock door with August app \n\nMaster code will not work \n\nUser codes will not work \n\nAll Keypad codes disabled";
Sezam/AGUnityModuleSettingsViewController.m:334:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:13]
Sezam/AGUnityModuleSettingsViewController.m:377:                                                                  btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGUnityModuleSettingsViewController.m:400:    if ([segue.identifier isEqualToString:@"UnityModuleSettingsToKeypadSecurity"]) {
Sezam/AGHomeKitManager.m:53:        NSString *possibleA = [NSString stringWithFormat:@"Aug%@%@%@%@%@",
Sezam/AGHomeKitManager.m:60:        NSString *possibleB =  [NSString stringWithFormat:@"Aug%@%@%@%@",
Sezam/AGHomeKitManager.m:67:        NSString *possibleC =  [NSString stringWithFormat:@"%@%@",
Sezam/AGHomeKitManager.m:93:    [[AGHomeKitManager lockNamesDict] setObject:@{@"lock":lockName, @"house":houseName, @"date":[NSDate date]} forKey:shortSerial];
Sezam/AGHomeKitManager.m:173:    NSString *homeKitKey = [homeKitKeyDict objectForKey:@"key"];
Sezam/AGHomeKitManager.m:174:    NSNumber *homeKitKeySlot = [homeKitKeyDict objectForKey:@"slot"];
Sezam/AGHomeKitManager.m:175:    NSString *combinedString = [NSString stringWithFormat:@"%02x%02x%@", ([homeKitKeySlot intValue] & 0xFF), ([homeKitKeySlot intValue] >> 8) & 0xFF,  homeKitKey];
Sezam/AGHomeKitManager.m:199:                        block(false, @"Failed to set HomeKit Authorization.");
Sezam/AGHomeKitManager.m:208:        block(false, @"HomeKit lock service not found.");
Sezam/AGHomeKitManager.m:249:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitManager.m:278:                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitManager.m:299:                        if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitManager.m:314:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGHomeKitManager.m:343:                NSPredicate *predicate = [NSPredicate predicateWithFormat:@"%K like %@", @"characteristicType", HMCharacteristicTypeSerialNumber];
Sezam/AGHomeKitManager.m:364:                        if ([[accessory model] isEqualToString:@"ASL-02"]) {
Sezam/AGHomeKitManager.m:386:            NSDate *timeAddedToHomeKit = (NSDate *)[loopItem objectForKey:@"date"];
Sezam/AGHomeKitManager.m:399:                if (((NSDate *)[curLock objectForKey:@"date"]).timeIntervalSince1970 < timeAddedToHomeKit.timeIntervalSince1970) {
Sezam/AGDoorbellDiagnosticsResultsViewController.m:88:        self.wifiSignalStrength = [self.telemetry[@"signal_level"] floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:99:        self.acLevel = [self.telemetry[@"ac_in"] floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:139:        self.headerTitleLabel.text = @"SETUP DOORBELL";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:185:        self.topOfTableLabel.text = @"Congratulations! Your Doorbell Cam is set up and ready to go.";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:187:        self.topOfTableLabel.text = @"Doorbell Cam is set up, but we’re seeing some issues.";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:220:        cell = [tableView dequeueReusableCellWithIdentifier:@"WiFiSignalGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:222:        cell.label2.text = [NSString stringWithFormat:@"(%.0f) Good", self.wifiSignalStrength];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:224:        cell = [tableView dequeueReusableCellWithIdentifier:@"WiFiSignalBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:227:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:229:            cell.label2.text = [NSString stringWithFormat:@"(%.0f) Poor", self.wifiSignalStrength];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:233:        cell = [tableView dequeueReusableCellWithIdentifier:@"UploadSpeedGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:235:        cell.label2.text = [NSString stringWithFormat:@"%.1f Mbs - Good", self.uploadSpeed.floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:237:        cell = [tableView dequeueReusableCellWithIdentifier:@"UploadSpeedBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:240:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:242:            cell.label2.text = [NSString stringWithFormat:@"%.1f Mbs - Bad", self.uploadSpeed.floatValue];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:246:        cell = [tableView dequeueReusableCellWithIdentifier:@"ACVoltageGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:248:        cell.label2.text = [NSString stringWithFormat:@"%.1fv - Good", self.acLevel];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:250:        cell = [tableView dequeueReusableCellWithIdentifier:@"ACVoltageBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:253:            cell.label2.text = [NSString stringWithFormat:@"Error"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:255:            cell.label2.text = [NSString stringWithFormat:@"%.1fv - Too Low", self.acLevel];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:259:        cell = [tableView dequeueReusableCellWithIdentifier:@"LockConnectionGood"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:261:        cell.label2.text = @"Good";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:263:        cell = [tableView dequeueReusableCellWithIdentifier:@"LockConnectionBad"];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:265:        cell.label2.text = @"Not Found";
Sezam/AGDoorbellDiagnosticsResultsViewController.m:294:        [self performSegueWithIdentifier:@"DiagnosticsToSuccess" sender:nil];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:297:        [self performSegueWithIdentifier:@"unwindToDoorbellSettingsFromDiagnostics" sender:self];
Sezam/AGDoorbellDiagnosticsResultsViewController.m:323:    if ([segue.identifier isEqualToString:@"DiagnosticsToSuccess"]) {
Sezam/AGMotionActivityViewController.m:32:        self.logEntry.user.lastName = @"";
Sezam/AGMotionActivityViewController.m:42:                activityZonesList = [NSString stringWithFormat:@"%@, %@", activityZonesList, activityZone];
Sezam/AGMotionActivityViewController.m:46:        self.cameraLocationLabel.text = [NSString stringWithFormat:@"%@ %@ - %@", self.logEntry.user.firstName.uppercaseString, self.logEntry.user.lastName.uppercaseString, activityZonesList.uppercaseString];
Sezam/AGMotionActivityViewController.m:48:        self.cameraLocationLabel.text = [NSString stringWithFormat:@"%@ %@", self.logEntry.user.firstName.uppercaseString, self.logEntry.user.lastName.uppercaseString];
Sezam/AGMotionActivityViewController.m:50:    self.timeLabel.text = [NSString stringWithFormat:@"%@", [AGUtility displayLogEntryDateFromDate:self.logEntry.date]];
Sezam/AGLockSettingsListController.m:57:                    e.g. if (cellType == AGLockSettingsCellType_MyNewFeature) { cell.textLabel.text = @"My New Feature"; }
Sezam/AGLockSettingsListController.m:89:                            cell.textLabel.text = @"Lock Name";
Sezam/AGLockSettingsListController.m:96:                    if ([self.doorbell.type isEqualToString:@"mars2"])
Sezam/AGLockSettingsListController.m:109:static NSString* minimumLockVersionForManualNotification = @"1.1.4";      // This is the minimum Lock firmware Version for Manual Notification Operation
Sezam/AGLockSettingsListController.m:110:static NSString* minimumBridgeVersionForManualNotification = @"2.1.0";    // This is the minimum Bridge firmware Version for Manual Notification Operation
Sezam/AGLockSettingsListController.m:111:static NSString* kmanualNotification = @"manuallock";
Sezam/AGLockSettingsListController.m:112:static NSString* kautorelockNotification = @"autorelock";
Sezam/AGLockSettingsListController.m:243:    self.view.smartAlertsCTAText = [AGUtility activeMonitoringSubscriptionRequiredForLock:self.lock] ? @"Smart Alerts are part of Active Monitoring, currently in beta." : nil;
Sezam/AGLockSettingsListController.m:282:    BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"];
Sezam/AGLockSettingsListController.m:324:    oper.label = @"Get Sound State";
Sezam/AGLockSettingsListController.m:336:                            self.zWaveVersion = [responseDict objectForKey:@"version"];
Sezam/AGLockSettingsListController.m:337:                            if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGLockSettingsListController.m:338:                                self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGLockSettingsListController.m:361:        zWaveOper.label = @"Get ZWave State";
Sezam/AGLockSettingsListController.m:439:    [self performSegueWithIdentifier:@"lockSettingsToLockName" sender:nil];
Sezam/AGLockSettingsListController.m:481:        [self performSegueWithIdentifier:@"LockSettingsToDoorSense" sender:nil];
Sezam/AGLockSettingsListController.m:497:    [self performSegueWithIdentifier:@"ShowHomeKitSetup" sender:self];
Sezam/AGLockSettingsListController.m:512:    [self performSegueWithIdentifier:@"LockSettingsToAssociateDoorbell" sender:nil];
Sezam/AGLockSettingsListController.m:521:    AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGLockSettingsListController.m:536:        [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGLockSettingsListController.m:544:    [self performSegueWithIdentifier:@"lockSettingsToFactoryReset" sender:self];
Sezam/AGLockSettingsListController.m:549:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGLockSettingsListController.m:550:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGLockSettingsListController.m:557:    [self performSegueWithIdentifier:@"LockSettingsToDeviceInfo" sender:self];
Sezam/AGLockSettingsListController.m:567:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:@"Bluetooth chip reboot time in minutes. 0 for never reboot" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:568:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:578:                UIAlertController *alertControllerInner = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:@"An error occured" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:579:                    [alertControllerInner addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:583:                UIAlertController *alertControllerInner = [UIAlertController alertControllerWithTitle:@"Reboot Period" message:[NSString stringWithFormat: @"Successfully set reboot period to %@ seconds", [NSNumber numberWithInt:seconds]] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:584:                [alertControllerInner addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGLockSettingsListController.m:599:    AGHomeKitTestController *testController = (AGHomeKitTestController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitTestController"];
Sezam/AGLockSettingsListController.m:609:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Lock Connection Required" message:@"Changing this setting requires a Bluetooth connection to your lock. Make sure you are near your lock and try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:610:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGLockSettingsListController.m:648:        BOOL shouldAllowMultipleAutoUnlockersInSameHouse = [AGFeatureManager enabled:@"MultipleAutoUnlockersInSameHouse"];
Sezam/AGLockSettingsListController.m:670:        BOOL shouldAllowMultipleAutoUnlockersInSameHouse = [AGFeatureManager enabled:@"MultipleAutoUnlockersInSameHouse"];
Sezam/AGLockSettingsListController.m:684:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Unable to Set Up Auto-Unlock" message:@"Auto-Unlock can only be enabled on one lock per house. Please turn off Auto-Unlock for other locks before setting it up on this one." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:685:    [alertController addAction:[UIAlertAction actionWithTitle:@"Got It" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGLockSettingsListController.m:737:    if ((lockFirmwareVersion_ThreeParts != nil) || ([lockFirmwareVersion_ThreeParts rangeOfString:@"-"].location != NSNotFound)) {
Sezam/AGLockSettingsListController.m:738:        NSArray *lockFirmwareVersionComponentArray = [lockFirmwareVersion_ThreeParts componentsSeparatedByString:@"-"];
Sezam/AGLockSettingsListController.m:754:    if (([lock.bridge.model isEqualToString:@"august-connect"]) || ([lock.bridge.model isEqualToString:@"august-doorbell"])) {
Sezam/AGLockSettingsListController.m:830:        [self performSegueWithIdentifier:@"LockSettingsToDisconnectFromZWave" sender:self];
Sezam/AGLockSettingsListController.m:832:        [self performSegueWithIdentifier:@"LockSettingsToConnectToZWave" sender:self];
Sezam/AGLockSettingsListController.m:841:            if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGLockSettingsListController.m:842:                self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGLockSettingsListController.m:845:                    [self performSegueWithIdentifier:@"LockSettingsToDisconnectFromZWave" sender:self];
Sezam/AGLockSettingsListController.m:850:                    [self performSegueWithIdentifier:@"LockSettingsToConnectToZWave" sender:self];
Sezam/AGLockSettingsListController.m:861:    UIAlertController *zWaveOTAAlertController = [UIAlertController alertControllerWithTitle:@"Firmware Update In Progress" message:@"A ZWave Firmware Update is in progress. Please wait roughly 2 minutes for this to complete and then try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGLockSettingsListController.m:862:    UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGLockSettingsListController.m:872:    UIStoryboard *unitySettingsStoryboard = [UIStoryboard storyboardWithName:@"UnityModule" bundle:[NSBundle mainBundle]];
Sezam/AGLockSettingsListController.m:873:    AGUnityModuleSettingsViewController *unitySettingsViewController = (AGUnityModuleSettingsViewController *)[unitySettingsStoryboard instantiateViewControllerWithIdentifier: @"UnitySettingsViewController"];
Sezam/AGLockSettingsListController.m:882:    NSDictionary *uuidsToSerialNumbersDictionary = [[NSUserDefaults standardUserDefaults] objectForKey:@"UUIDsToSerialNumbersDictionary"];
Sezam/AGLockSettingsListController.m:884:    return lockSerial ? lockSerial : @"";
Sezam/AGLockSettingsListController.m:899:    if ([segue.identifier isEqualToString:@"ShowHomeKitSetup"]) {
Sezam/AGLockSettingsListController.m:907:    else if ([segue.identifier isEqualToString:@"lockSettingsToLockName"]) {
Sezam/AGLockSettingsListController.m:911:    else if ([segue.identifier isEqualToString:@"lockSettingsToFactoryReset"]) {
Sezam/AGLockSettingsListController.m:916:    else if ([segue.identifier isEqualToString:@"LockSettingsToAssociateDoorbell"]) {
Sezam/AGLockSettingsListController.m:919:    }else if ([segue.identifier isEqualToString:@"LockSettingsToDisconnectFromZWave"]) {
Sezam/AGLockSettingsListController.m:923:    else if ([segue.identifier isEqualToString:@"LockSettingsToConnectToZWave"]) {
Sezam/AGLockSettingsListController.m:927:    else if ([segue.identifier isEqualToString:@"LockSettingsToDoorSense"]) {
Sezam/AGLockSettingsListController.m:930:    } else if ([segue.identifier isEqualToString:@"LockSettingsToDeviceInfo"]) {
Sezam/AGLockSettingsListController.m:940:    return [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGAutoUnlockReportProblemView.m:58:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoUnlockReportProblemView.m:59:    self.titleLabel.text = @"WHAT HAPPENED?";
Sezam/AGAutoUnlockReportProblemView.m:71:    self.selectAnIssueLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoUnlockReportProblemView.m:72:    self.selectAnIssueLabel.text = @"Please select an issue below:";
Sezam/AGAutoUnlockReportProblemView.m:96:    self.additionalInfoDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemView.m:99:    self.additionalInfoDescriptionLabel.text = @"ADDITIONAL INFORMATION";
Sezam/AGAutoUnlockReportProblemView.m:108:    self.additionalInfoTextView.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoUnlockReportProblemView.m:118:    self.sendReportButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAutoUnlockReportProblemView.m:119:    [self.sendReportButton setTitle:@"SEND REPORT" forState:UIControlStateNormal];
Sezam/AGAutoUnlockReportProblemView.m:248:        textView.text = @"";
Sezam/AGAutoUnlockReportProblemView.m:272:    if([text isEqualToString:@"\n"]) {
Sezam/AGHomeKitSetupNavController.m:60:    if([accessory.name rangeOfString:@"Aug"].location == 0) {
Sezam/AGHomeKitSetupNavController.m:62:    } else if([accessory.name rangeOfString:@"L3"].location == 0 || [accessory.name hasPrefix:@"M1"]) {
Sezam/AGKeypadInviteUserCellTableViewCell.m:66:            self.pinCode.text = @"";
Sezam/AGKeypadInviteUserCellTableViewCell.m:68:            self.pinCode.text = [NSString stringWithFormat:@"#%@", pinEntry.pinCode];
Sezam/AGDoorbellVideoDownloadManager.m:105:            UIAlertController *downloadInProgressAlert = [UIAlertController alertControllerWithTitle:@"Download in Progress"
Sezam/AGDoorbellVideoDownloadManager.m:106:                                                                                            message:@"You already have a video download in progress. Please wait until your other download completes, then try again."
Sezam/AGDoorbellVideoDownloadManager.m:108:            [downloadInProgressAlert addAction:[UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellVideoDownloadManager.m:115:            [downloadInProgressAlert addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellVideoDownloadManager.m:187:            [[NSNotificationCenter defaultCenter] postNotificationName:AG_DOWNLOAD_MANAGER_ERROR object:nil userInfo:@{  @"Error" : @"There was an error downloading the video."}];
Sezam/AGDoorbellVideoDownloadManager.m:197:        [[NSNotificationCenter defaultCenter] postNotificationName:AG_DOWNLOAD_MANAGER_ERROR object:nil userInfo:@{  @"Error" : @"There was an error downloading the video."}];
Sezam/AGDoorbellVideoDownloadManager.m:255:    if ((self.doorbell.pubsubChannel != nil) && (![self.doorbell.pubsubChannel isEqualToString:@""])) {
Sezam/AGDoorbellVideoDownloadManager.m:270:        dict = dict[@"data"];
Sezam/AGDoorbellVideoDownloadManager.m:272:            NSString *transactionID = [dict objectForKey:@"transactionID"];
Sezam/AGDoorbellVideoDownloadManager.m:282:    NSString *state = dict[@"state"];
Sezam/AGDoorbellVideoDownloadManager.m:283:    if ([state isEqualToString:@"doorbell_video_ready"]) {
Sezam/AGDoorbellVideoDownloadManager.m:286:        NSString *videoURL = dict[@"mp4URL"];
Sezam/AGDoorbellVideoDownloadManager.m:295:        if ([state isEqualToString:@"doorbell_video_encoding_failed"]) {
Sezam/AGDoorbellVideoStreamController.m:92:        self.isDebugging = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellVideoStreamController.m:127:    NSAssert([self.videoStream conformsToProtocol:@protocol(AGVideoStream)], @"VideoStream must conform to AGVideoStream Protocol");
Sezam/AGDoorbellVideoStreamController.m:128:    NSAssert([self.audioStream conformsToProtocol:@protocol(AGAudioStream)], @"AudioStream must conform to AGAudioStream Protocol");
Sezam/AGDoorbellVideoStreamController.m:166:    self.view.closeButtonDescriptionLabel.text = @"END";
Sezam/AGDoorbellVideoStreamController.m:187:                UIAlertController *doorbellOfflineAlert = [UIAlertController alertControllerWithTitle:@"Doorbell Offline" message:@"Your doorbell is offline and unavailable. Please check your doorbell WiFi or restart your doorbell" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellVideoStreamController.m:188:                [doorbellOfflineAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellVideoStreamController.m:375:    updatedDoorbellSettings[@"flashBrightness"] = updatedDoorbellBrightnessNum;
Sezam/AGDoorbellVideoStreamController.m:377:    updatedDoorbellSettings[@"date"] = [AGDateUtils ISO8601UTCDateTimeStringFromDate:[NSDate date]];
Sezam/AGDoorbellVideoStreamController.m:378:    updatedDoorbellSettings[@"origin"] = @"iOS";
Sezam/AGDoorbellVideoStreamController.m:379:    [updatedDoorbellSettings nilSafeSetObject:self.doorbell.objectId forKey:@"doorbellID"];
Sezam/AGDoorbellVideoStreamController.m:380:    updatedDoorbellSettings[@"event"] = @"doorbell_settings_changed";
Sezam/AGDoorbellVideoStreamController.m:386:                                                                                                                @"status":@"doorbell_settings_changed",
Sezam/AGDoorbellVideoStreamController.m:387:                                                                                                                @"callID": [NSNull null],
Sezam/AGDoorbellVideoStreamController.m:388:                                                                                                                @"origin":@"iOS",
Sezam/AGDoorbellVideoStreamController.m:389:                                                                                                                @"data":updatedDoorbellSettings
Sezam/AGDoorbellVideoStreamController.m:391:    [doorbellSettingsChangedPubNubMessage nilSafeSetObject:self.doorbell.objectId forKey:@"doorbellID"];
Sezam/AGDoorbellVideoStreamController.m:558:    if  ([AGUtility checkTriggerTooltipForKey:@"UnlockButton" initialDefaultTriggerOn:true]) {
Sezam/AGDoorbellVideoStreamController.m:639:    BOOL forceAmazonReviews = [AGUtility checkForAppFeature:@"forceAmazonReviews"];
Sezam/AGDoorbellVideoStreamController.m:642:    NSDate *appInstallDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"AppInstallDate"];
Sezam/AGDoorbellVideoStreamController.m:644:        NSDictionary *doorbellSuccessMetrics = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"DoorbellSuccessMetics"];
Sezam/AGDoorbellVideoStreamController.m:646:            NSNumber *successCount = (NSNumber *)doorbellSuccessMetrics[@"successCount"];
Sezam/AGDoorbellVideoStreamController.m:647:            NSNumber *failureCount = (NSNumber *)doorbellSuccessMetrics[@"failureCount"];
Sezam/AGDoorbellVideoStreamController.m:656:                AGAnalyticsDiaryInfo(@"DoorbellEvaluateSuccessRate", [NSString stringWithFormat:@"%f", doorbellSuccessRate]);
Sezam/AGDoorbellVideoStreamController.m:664:                    AGAnalyticsDiaryInfo(@"DoorbellShowAlertMessage", @"No");
Sezam/AGDoorbellVideoStreamController.m:679:    BOOL doNotShowSlowCellularAlertAgain =  [[NSUserDefaults standardUserDefaults] boolForKey:@"DoNotShowSlowCellularAlert"];
Sezam/AGDoorbellVideoStreamController.m:681:        UIAlertController *slowCellularConnectionAlertController = [UIAlertController alertControllerWithTitle:@"Slow Cellular Connection"
Sezam/AGDoorbellVideoStreamController.m:682:                                                                                                       message:@"It appears you are using a lower-bandwidth 3G or Edge cellular connection. Please be advised that this can affect video streaming performance."
Sezam/AGDoorbellVideoStreamController.m:684:        [slowCellularConnectionAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellVideoStreamController.m:687:        [slowCellularConnectionAlertController addAction:[UIAlertAction actionWithTitle:@"Don't Show Again"
Sezam/AGDoorbellVideoStreamController.m:690:                                                                                    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"DoNotShowSlowCellularAlert"];
Sezam/AGDoorbellVideoStreamController.m:743:    metrics[@"oldState"] = [NSString stringFromVideoState:oldState];
Sezam/AGDoorbellVideoStreamController.m:744:    metrics[@"newState"] = [NSString stringFromVideoState:newState];
Sezam/AGDoorbellVideoStreamController.m:745:    metrics[@"split"] = @([[NSDate date] timeIntervalSinceDate:self.split]);
Sezam/AGDoorbellVideoStreamController.m:746:    metrics[@"cumulative"] = @([[NSDate date] timeIntervalSinceDate:self.startTime]);
Sezam/AGDoorbellVideoStreamController.m:747:    metrics[@"protocol"] = [self.videoStream protocolName];
Sezam/AGDoorbellVideoStreamController.m:749:    metrics[@"sessionID"] = [self.videoStream sessionID];
Sezam/AGDoorbellVideoStreamController.m:750:    metrics[@"doorbellID"] = [self.doorbell serialNumber];
Sezam/AGDoorbellVideoStreamController.m:751:    metrics[@"clientVersion"] = [[NSBundle mainBundle] infoDictionary][@"CFBundleVersion"];
Sezam/AGDoorbellVideoStreamController.m:752:    metrics[@"firmwareVersion"] = self.doorbell.firmwareVersion;
Sezam/AGDoorbellVideoStreamController.m:753:    metrics[@"connectivity"] = @"p2p";
Sezam/AGDoorbellVideoStreamController.m:754:    metrics[@"platform"]  = @"ios";
Sezam/AGDoorbellVideoStreamController.m:755:    metrics[@"attempt_number"] = @(self.connectionAttempt);
Sezam/AGDoorbellVideoStreamController.m:761:        network = @"wifi";
Sezam/AGDoorbellVideoStreamController.m:763:        network = @"lte";
Sezam/AGDoorbellVideoStreamController.m:765:    metrics[@"network"] = network;
Sezam/AGDoorbellVideoStreamController.m:771:    AGAnalyticsDiaryDebugData(@"VulcanCall", metrics);
Sezam/AGDoorbellVideoStreamController.m:779:        self.kibanaVideoCallLog.videoCallVersion = @"v2";
Sezam/AGInviteUserStatusViewController.m:79:        cell =  [tableView dequeueReusableCellWithIdentifier:@"GuestCell"];
Sezam/AGInviteUserStatusViewController.m:87:        cell = [tableView dequeueReusableCellWithIdentifier:@"OwnerCell"];
Sezam/AGInviteUserStatusViewController.m:96:        cell = [tableView dequeueReusableCellWithIdentifier:@"PinCell"];
Sezam/AGInviteUserStatusViewController.m:105:        cell = [tableView dequeueReusableCellWithIdentifier:@"NoneCell"];
Sezam/AGInviteUserStatusViewController.m:126:    cell.accessibilityLabel = [cell.textLabel.text stringByReplacingOccurrencesOfString:@" " withString:@""];
Sezam/AGNewDeviceSetupViewController.m:42:    if ([segue.identifier isEqualToString:@"newDeviceSetupToOnboardingChecklist"]) {
Sezam/AGNewDeviceSetupViewController.m:52:    [self performSegueWithIdentifier:@"newDeviceSetupToOnboardingChecklist" sender:sender];
Sezam/AGNewDeviceSetupViewController.m:57:    [self performSegueWithIdentifier:@"newDeviceSetupToOnboardingChecklist" sender:sender];
Sezam/AGBridgeSetupCompleteViewController.m:36:    //NSAssert(self.setupNavController.wifiSSID != nil, @"wifiSSID cannot be nil.  Fix this in the previous step");
Sezam/AGBridgeSetupCompleteViewController.m:38:    NSAssert(self.setupNavController.agLock != nil, @"Lock cannot be nil.  Fix this in the previous step");
Sezam/AGBridgeSetupCompleteViewController.m:44:    self.lockLabel.text = [NSString stringWithFormat:@"\"%@\"", self.setupNavController.agLock.name];
Sezam/AGBridgeSetupCompleteViewController.m:47:        wifiSSIDDisplayText = @"";
Sezam/AGBridgeSetupCompleteViewController.m:49:    self.wifiLabel.text = [NSString stringWithFormat:@"\"%@\".", wifiSSIDDisplayText];
Sezam/AGLockSettingsView.m:120:                                            @(AGLockSettingsSectionType_Sounds):@"SOUNDS",
Sezam/AGLockSettingsView.m:121:                                            @(AGLockSettingsSectionType_Notifications):@"NOTIFICATIONS",
Sezam/AGLockSettingsView.m:122:                                            @(AGLockSettingsSectionType_Automation):@"AUTOMATION",
Sezam/AGLockSettingsView.m:123:                                            @(AGLockSettingsSectionType_Doorsense):@"DOORSENSE",
Sezam/AGLockSettingsView.m:124:                                            @(AGLockSettingsSectionType_Platforms):@"PLATFORMS",
Sezam/AGLockSettingsView.m:125:                                            @(AGLockSettingsSectionType_Utilities):@"UTILITIES",
Sezam/AGLockSettingsView.m:126:                                            @(AGLockSettingsSectionType_Information):@"INFORMATION",
Sezam/AGLockSettingsView.m:127:                                            @(AGLockSettingsSectionType_Debug):@"DEBUG"
Sezam/AGLockSettingsView.m:133:    self.lockSoundsCell.textLabel.text = @"Lock Sounds";
Sezam/AGLockSettingsView.m:137:    self.manualLockNotificationsCell.textLabel.text = @"Manual Lock Notifications";
Sezam/AGLockSettingsView.m:142:    if (![curGlobalExclusions containsObject:@"AGLockSettingsViewCell"]) {
Sezam/AGLockSettingsView.m:144:        [updatedGlobalExclusions addObject:@"AGLockSettingsViewCell"];
Sezam/AGLockSettingsView.m:213:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGLockSettingsView.m:247:        cell.textLabel.text = @"Lock Name";
Sezam/AGLockSettingsView.m:258:        cell.textLabel.text = @"Manage Lock Sounds";
Sezam/AGLockSettingsView.m:268:        cell.textLabel.text = @"Smart Alerts";
Sezam/AGLockSettingsView.m:272:        cell = [self.tableView dequeueReusableCellWithIdentifier:@"SmartAlertsCTACell"];
Sezam/AGLockSettingsView.m:278:        cell.textLabel.text = @"Auto-Lock";
Sezam/AGLockSettingsView.m:285:        cell.textLabel.text = @"Auto-Unlock";
Sezam/AGLockSettingsView.m:286:        cell.detailTextLabel.text = self.autoUnlockEnabled ? @"On" : @"Off";
Sezam/AGLockSettingsView.m:294:        cell.textLabel.text = @"DoorSense";
Sezam/AGLockSettingsView.m:300:        cell.textLabel.text = @"Door Ajar Timing";
Sezam/AGLockSettingsView.m:304:        cell.textLabel.text = @"HomeKit Settings";
Sezam/AGLockSettingsView.m:310:        cell.textLabel.text = @"Z-Wave Settings";
Sezam/AGLockSettingsView.m:316:        cell.textLabel.text = @"Keypad Settings (Unity)";   // TODO: Update Label
Sezam/AGLockSettingsView.m:322:        cell.textLabel.text = @"Sync Lock to Doorbell";
Sezam/AGLockSettingsView.m:326:        cell.textLabel.text = @"Calibrate Lock";
Sezam/AGLockSettingsView.m:332:        cell.textLabel.text = @"Factory Reset";
Sezam/AGLockSettingsView.m:336:        cell.textLabel.text = @"Installation Instructions";
Sezam/AGLockSettingsView.m:340:        cell.textLabel.text = @"Troubleshooting Help";
Sezam/AGLockSettingsView.m:345:        cell.textLabel.text = @"Device Information";
Sezam/AGLockSettingsView.m:349:        cell.textLabel.text = @"BT Reboot Period";
Sezam/AGLockSettingsView.m:353:        cell.textLabel.text = @"HomeKit Test Tool";
Sezam/AGLockSettingsView.m:373:    cell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGLockSettingsView.m:376:    cell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:40:        self.inviteQuestionLabel.text = [NSString stringWithFormat:@"Your invitation has been sent to %@.\n\n Siri access for %@ can be enabled by the administrator of the HomeKit home." , [self.user displayName], [self.user firstName]];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:46:        self.inviteQuestionLabel.text = [NSString stringWithFormat:@"Your invitation has been sent to %@.\n\n Would you like give %@ the ability to use Siri to lock and unlock the door?" , [self.user displayName], [self.user firstName]];
Sezam/AGHomeKitSiriInviteQuestionViewController.m:77:        AGHomeKitSiriActivationViewController *activationVC = (AGHomeKitSiriActivationViewController *) [self.storyboard instantiateViewControllerWithIdentifier:@"SiriActivation"];
Sezam/AGRadioTableCell.m:33:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGSmartAlertEditorController.m:66:    self.view.titleLabel.text = self.mode == AGSmartAlertEditorControllerMode_Edit ? @"EDIT SMART ALERT" : @"NEW SMART ALERT";
Sezam/AGSmartAlertEditorController.m:73:    [self.view.destructiveActionButton setTitle:(self.mode == AGSmartAlertEditorControllerMode_Edit ? @"DELETE" : @"CANCEL") forState:UIControlStateNormal];
Sezam/AGSmartAlertEditorController.m:99:    self.view.eventActionDescriptionLabel.text = actionDescription ? actionDescription : @"Choose an event";
Sezam/AGSmartAlertEditorController.m:108:    self.view.eventTimeDescriptionLabel.text = timeNeedsToBeSelected ? @"Choose a time": timeDescription;
Sezam/AGSmartAlertEditorController.m:127:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Discard SmartAlert?" message:@"This alert will not saved." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:128:        [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Editing" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:129:        [alertController addAction:[UIAlertAction actionWithTitle:@"Discard" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:138:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Discard Changes?" message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:139:        [alertController addAction:[UIAlertAction actionWithTitle:@"Continue Editing" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:140:        [alertController addAction:[UIAlertAction actionWithTitle:@"Discard" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:189:        self.updatedNotificationRule.deviceType = @"lock";
Sezam/AGSmartAlertEditorController.m:192:                [self showErrorAlertWithMessage:@"SmartAlert could not be created. Please try again later."];
Sezam/AGSmartAlertEditorController.m:205:                [self showErrorAlertWithMessage:@"SmartAlert could not be updated. Please try again later."];
Sezam/AGSmartAlertEditorController.m:225:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Delete Smart Alert?" message:@"You will stop receiving notifications about this Smart Alert. This action cannot be undone." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:226:    [alertController addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGSmartAlertEditorController.m:227:    [alertController addAction:[UIAlertAction actionWithTitle:@"Delete" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGSmartAlertEditorController.m:238:            [self showErrorAlertWithMessage:@"SmartAlert could not be deleted. Please try again later."];
Sezam/AGSmartAlertEditorController.m:260:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:message preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGSmartAlertEditorController.m:261:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGShareWithAugustComposeViewController.m:52:        self.userMessageTextArea.text = @"";
Sezam/AGShareWithAugustComposeViewController.m:65:    if([text isEqualToString:@"\n"]) {
Sezam/AGShareWithAugustComposeViewController.m:76:    NSURL *augustTermsAndConditionsURL = [NSURL URLWithString:@"http://august.com/legal/terms-of-service/"];
Sezam/AGShareWithAugustComposeViewController.m:89:                                                       alertControllerWithTitle:@"Upload Error"
Sezam/AGShareWithAugustComposeViewController.m:90:                                                       message:@"Unable to upload your story. Please try again."
Sezam/AGShareWithAugustComposeViewController.m:101:    [self performSegueWithIdentifier:@"ComposeToConfirm" sender:nil];
Sezam/AGUpdateNameViewController.m:79:        [[NSNotificationCenter defaultCenter] postNotificationName:@"USER_REFRESHED" object:[AGUser currentUser]];
Sezam/AGAddHouseViewController.m:34:        self.houseNameTextField.text = [NSString stringWithFormat:@"%@'s House", currentUser.firstName];
Sezam/AGAddHouseViewController.m:54:        UIAlertController *noHouseNameAlert = [UIAlertController alertControllerWithTitle:@"No House Name" message:@"Please enter a House Name before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:55:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:63:        UIAlertController *noHouseImageAlert = [UIAlertController alertControllerWithTitle:@"No House Image" message:@"Please upload a House Image before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:64:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:141:    UIAlertController *addingHouseAlert = [UIAlertController alertControllerWithTitle:@"Creating New House..." message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:149:                    [self showErrorMessage:@"Unable to upload image for House"];
Sezam/AGAddHouseViewController.m:157:            [self showErrorMessage:@"Unable to add House"];
Sezam/AGAddHouseViewController.m:164:        UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:165:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGAddHouseViewController.m:179:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddHouseViewController.m:180:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGAddHouseViewController.m:184:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGBridgeSettingsViewController.m:55:static NSString* kOfflineNotificationUsername = @"offline";
Sezam/AGBridgeSettingsViewController.m:62:    NSAssert(self.lock != nil, @"You forgot to set the lock before launching the AGBridgeSettingsViewController");
Sezam/AGBridgeSettingsViewController.m:63:    NSAssert(self.lock.bridge != nil, @"You're trying to show the AGBridgeSettingsViewController for a lock that has no bridge");
Sezam/AGBridgeSettingsViewController.m:65:    self.settingsTableViewDescriptions = [@[@"Notify When Offline", @"Firmware Version", @"Serial Number", @"Wi-Fi SNR", @"Wi-Fi Signal", @"BLE Signal", @"Troubleshooting Help", @"Disconnect Lock"] mutableCopy];
Sezam/AGBridgeSettingsViewController.m:82:    if ([self.lock.bridge.model isEqualToString:kAGBridgeModelVenus] || [self.lock.bridge.model isEqualToString:@"august-doorbell"]) {
Sezam/AGBridgeSettingsViewController.m:124:        cell = [tableView dequeueReusableCellWithIdentifier:@"SwitchCell"];
Sezam/AGBridgeSettingsViewController.m:137:        cell = [tableView dequeueReusableCellWithIdentifier:@"DefaultCell"];
Sezam/AGBridgeSettingsViewController.m:144:                    cell.label2.text = @"N/A";
Sezam/AGBridgeSettingsViewController.m:151:                    cell.label2.text = @"N/A";
Sezam/AGBridgeSettingsViewController.m:155:                cell.label2.text = signalStrengthDictionary[@"WiFiSNR"];
Sezam/AGBridgeSettingsViewController.m:163:                cell.label2.text = signalStrengthDictionary[@"WiFiRSSI"];
Sezam/AGBridgeSettingsViewController.m:171:                cell.label2.text = signalStrengthDictionary[@"BLERSSI"];
Sezam/AGBridgeSettingsViewController.m:181:        cell = [tableView dequeueReusableCellWithIdentifier:@"SelectableCell"];
Sezam/AGBridgeSettingsViewController.m:206:        [self performSegueWithIdentifier:@"BridgeSettingsToDisconnect" sender:self];
Sezam/AGBridgeSettingsViewController.m:211:    if ([segue.identifier isEqualToString:@"BridgeSettingsToDisconnect"]) {
Sezam/AGBridgeSettingsViewController.m:266:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, wifiRSSI];
Sezam/AGBridgeSettingsViewController.m:271:    signalStrengthDictionary[@"WiFiRSSI"] = labelText;
Sezam/AGBridgeSettingsViewController.m:275:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, btRSSI];
Sezam/AGBridgeSettingsViewController.m:280:    signalStrengthDictionary[@"BLERSSI"] = labelText;
Sezam/AGBridgeSettingsViewController.m:284:        labelText = [NSString stringWithFormat:@"%@ (%d)", strengthString, wifiSNR];
Sezam/AGBridgeSettingsViewController.m:289:    signalStrengthDictionary[@"WiFiSNR"] = labelText;
Sezam/AGBridgeSettingsViewController.m:297:    signalStrengthDictionary[@"WiFiSNR"] = @"";
Sezam/AGBridgeSettingsViewController.m:298:    signalStrengthDictionary[@"BLERSSI"] = @"";
Sezam/AGBridgeSettingsViewController.m:299:    signalStrengthDictionary[@"WiFiRSSI"] = @"";
Sezam/AGBridgeSettingsViewController.m:306:    signalStrengthDictionary[@"WiFiSNR"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:307:    signalStrengthDictionary[@"BLERSSI"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:308:    signalStrengthDictionary[@"WiFiRSSI"] = @"Not Available";
Sezam/AGBridgeSettingsViewController.m:360:                 NSDictionary *info = [response objectForKey:@"info"];
Sezam/AGBridgeSettingsViewController.m:364:                     int wlanRSSI = [self signalStrengthFromObject: [info objectForKey:@"wlanRSSI"]];
Sezam/AGBridgeSettingsViewController.m:365:                     int wlanSNR = [self signalStrengthFromObject:[info objectForKey:@"wlanSNR"]];
Sezam/AGBridgeSettingsViewController.m:366:                     int btRSSI =  [self signalStrengthFromObject:[info objectForKey:@"rssi"]];
Sezam/AGDoorbellViewController.m:57:    self.debugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellViewController.m:65:        self.singleDoorbellDate.text = @"";
Sezam/AGDoorbellViewController.m:73:        NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:121:                NSDate *creationDate = doorbell.doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:122:                NSString *imageURL = doorbell.doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:163:        NSDate *existingDate = (NSDate *)existingDoorbellImage[@"date"];
Sezam/AGDoorbellViewController.m:164:        NSDate *newDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:174:    [[NSUserDefaults standardUserDefaults] setObject:doorbellImageDictionary forKey:[NSString stringWithFormat:@"doorbellImageDictionary_%@", doorbellID]];
Sezam/AGDoorbellViewController.m:185:        NSDictionary *doorbellImageDictionaryFromDisc = (NSDictionary *)[[NSUserDefaults standardUserDefaults] objectForKey:[NSString stringWithFormat:@"doorbellImageDictionary_%@", doorbellID]];
Sezam/AGDoorbellViewController.m:201:        NSDictionary *wakeupMessage = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:301:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" is disconnected from power. Please attach it to the mounting plate or turn the power back on.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:302:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:307:        NSString *doorbellLowBatteryKey = [NSString stringWithFormat:@"%@-lowbatterymessage", doorbell.objectId];
Sezam/AGDoorbellViewController.m:314:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" transformer has insufficient power to operate video.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:315:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:321:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Warning!" message:[NSString stringWithFormat:@"Your doorbell \"%@\" has a low battery and can not operate video.", doorbell.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellViewController.m:322:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellViewController.m:332:        NSDictionary *sendPing = @{@"status":@"doorbell_ping", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:367:    NSDictionary *simulateButtonPress = @{@"status":@"simulate_button_press", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:375:    NSDictionary *simulatePIR = @{@"status":@"simulate_pir", @"origin":@"iOS"};
Sezam/AGDoorbellViewController.m:414:        recentDateString = @"Recent Image Not Available";
Sezam/AGDoorbellViewController.m:417:        NSString *recentImageUrl = (NSString *)doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:434:        NSDate *recentImageDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:442:            [formatter setDateFormat:@"EEEE M/d/yy"];
Sezam/AGDoorbellViewController.m:444:            recentDateString = [NSString stringWithFormat:@"%@ %@", dateString, timeString];
Sezam/AGDoorbellViewController.m:446:            recentDateString = @"";
Sezam/AGDoorbellViewController.m:461:    [self.initiateDoorbellCallButton.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Regular" size:20]];
Sezam/AGDoorbellViewController.m:464:    [self.initiateDoorbellCallButton setTitle:@"WATCH LIVE" forState:UIControlStateNormal];
Sezam/AGDoorbellViewController.m:476:        self.otaProgressLabel.text = [NSString stringWithFormat:@"UPDATING %@%%", otaProgress.stringValue];
Sezam/AGDoorbellViewController.m:490:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGDoorbellViewController.m:491:    AGDoorbellWiFiSetupViewController *doorbellWiFiSetupViewController = [doorbellStoryboard instantiateViewControllerWithIdentifier:@"DoorbellWiFiSetup"];
Sezam/AGDoorbellViewController.m:506:    NSString *doorbellId = [messageData objectForKey:@"doorbellID"];
Sezam/AGDoorbellViewController.m:507:    NSString *status = messageData[@"status"];
Sezam/AGDoorbellViewController.m:509:        if ([status isEqual:@"imagecapture"]) {
Sezam/AGDoorbellViewController.m:512:        if ([status isEqual:@"doorbell_pong"] || [status isEqual:@"doorbell_call_status_online"] || [status isEqual:@"doorbell_back_online"] || [status isEqual:@"online"] || [status isEqual:@"awake"] || [status isEqual:@"offline"]) {
Sezam/AGDoorbellViewController.m:515:        if ([status isEqualToString:@"ota_update_initiate"] ||[status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellViewController.m:517:            if ([status isEqualToString:@"ota_update_initiate"]) {
Sezam/AGDoorbellViewController.m:519:            } else if ([status isEqualToString:@"ota_update_progress"]) {
Sezam/AGDoorbellViewController.m:520:                NSDictionary *data = (NSDictionary *)messageData[@"data"];
Sezam/AGDoorbellViewController.m:521:                NSString *progressString = (NSString *)data[@"progress"];
Sezam/AGDoorbellViewController.m:528:    if ([messageData objectForKey:@"telemetry"] && doorbellId) {
Sezam/AGDoorbellViewController.m:529:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellViewController.m:548:    NSDictionary *data = imageDictionary[@"data"];
Sezam/AGDoorbellViewController.m:550:        NSDictionary *cloudinaryResult = data[@"cloudinaryResult"];
Sezam/AGDoorbellViewController.m:563:    NSString *url = [cloudinaryResult objectForKey:@"secure_url"];
Sezam/AGDoorbellViewController.m:564:    NSNumber *height = [NSNumber numberWithInt:[[cloudinaryResult objectForKey:@"height"] intValue]];
Sezam/AGDoorbellViewController.m:565:    NSNumber *width = [NSNumber numberWithInt:[[cloudinaryResult objectForKey:@"width"] intValue]];
Sezam/AGDoorbellViewController.m:566:    NSString *dateString = [cloudinaryResult objectForKey:@"created_at"];
Sezam/AGDoorbellViewController.m:568:    if ((dateString != nil) && (![dateString isEqualToString:@""])) {
Sezam/AGDoorbellViewController.m:575:        if (url) {doorbellImageDictionary[@"url"] = url;}
Sezam/AGDoorbellViewController.m:576:        if (height) {doorbellImageDictionary[@"height"] = height;}
Sezam/AGDoorbellViewController.m:577:        if (width) {doorbellImageDictionary[@"width"] = width;}
Sezam/AGDoorbellViewController.m:578:        if (date) {doorbellImageDictionary[@"date"] = date;}
Sezam/AGDoorbellViewController.m:596:                if ([status isEqualToString:@"online"]) {
Sezam/AGDoorbellViewController.m:651:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"DoorbellCell"];
Sezam/AGDoorbellViewController.m:654:    [formatter setDateFormat:@"EEEE MM-dd' 'HH:mm"];
Sezam/AGDoorbellViewController.m:660:        recentDateString = @"No Image Available";
Sezam/AGDoorbellViewController.m:662:        NSString *recentImageUrl = (NSString *)doorbellImageDictionary[@"url"];
Sezam/AGDoorbellViewController.m:676:        NSDate *recentImageDate = (NSDate *)doorbellImageDictionary[@"date"];
Sezam/AGDoorbellViewController.m:680:            recentDateString = @"";
Sezam/AGDoorbellViewController.m:704:    cell.label3.font = [UIFont fontWithName:@"ProximaNova-Regular" size:20];
Sezam/AGDoorbellViewController.m:713:        cell.label3.text = [NSString stringWithFormat:@"UPDATING %@%%", otaProgress.stringValue];
Sezam/AGDoorbellViewController.m:718:        cell.label3.text = @"WATCH LIVE";
Sezam/AGPubSubMessageBrokerClient.m:27:        } else if ([messageProtocol isEqual:@"pubnub"]) {
Sezam/AGPubSubMessageBrokerClient.m:29:        } else if ([messageProtocol isEqual:@"mqtt"]) {
Sezam/AGPubSubMessageBrokerClient.m:32:                self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Sezam/AGPubSubMessageBrokerClient.m:33:                self.host = @"dev-mqtt.august.com";
Sezam/AGPubSubMessageBrokerClient.m:36:                NSArray* urlComponentsArray = [messagingURL componentsSeparatedByString: @":"];
Sezam/AGPubSubMessageBrokerClient.m:38:                    self.messagingURL = @"tcp://dev-mqtt.august.com:1883";
Sezam/AGPubSubMessageBrokerClient.m:39:                    self.host = @"dev-mqtt.august.com";
Sezam/AGPubSubMessageBrokerClient.m:44:                    self.host = [hostURLString stringByReplacingOccurrencesOfString:@"/" withString:@""];
Sezam/AGFactoryResetViewController.m:65:    NSString *resetDescription = @"Factory reset will restore your lock to its original settings. All current users will lose access to this lock.";
Sezam/AGFactoryResetViewController.m:66:    NSString *activeMonitoringResetDescription = @"If this lock is enrolled in an August Active Monitoring subscription, the subscription will be cancelled and the paying user will receive a prorated refund.";
Sezam/AGFactoryResetViewController.m:70://        self.resetDescriptionLabel.text = [NSString stringWithFormat:@"%@\n\n%@", resetDescription, activeMonitoringResetDescription];
Sezam/AGFactoryResetViewController.m:139:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGFactoryResetViewController.m:164:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"HomeKit Not Reset" message:@"Your lock has been factory reset and can be set up again, but you may not be able to set up HomeKit until the home's administrator removes the lock from HomeKit." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGFactoryResetViewController.m:187:            [[NSUserDefaults standardUserDefaults] removeObjectForKey:@"LastUsedLock"];
Sezam/AGFactoryResetViewController.m:191:            NSUserDefaults *wkSharedDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"group.com.august.watchkitextension"];
Sezam/AGFactoryResetViewController.m:193:            [wkSharedDefaults removeObjectForKey:@"LastUsedLock"];
Sezam/AGFactoryResetViewController.m:245:                resetOperation.label = @"FactoryReset";
Sezam/AGFactoryResetViewController.m:273:        resetOperation.label = @"FactoryReset";
Sezam/AGFactoryResetViewController.m:293:        UIAlertController *zWaveEnabledAlertController = [UIAlertController alertControllerWithTitle:@"Factory Reset" message:@"You must disconnect your lock from Z-Wave before you can factory reset it. Please tap Z-Wave Settings and select Remove Z-Wave Device." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGFactoryResetViewController.m:294:        UIAlertAction *continueAction = [UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGFactoryResetViewController.m:298:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGHomeKitEditHomeViewController.m:105:        AGTableViewCell *cell = (AGTableViewCell *)[self.roomTableView dequeueReusableCellWithIdentifier:@"HKRoomCell"];
Sezam/AGHomeKitEditHomeViewController.m:107:            cell.label.text = @"Add New Room...";
Sezam/AGHomeKitEditHomeViewController.m:119:        AGTableViewCell *cell = (AGTableViewCell *)[self.roomTableView dequeueReusableCellWithIdentifier:@"HKPrimaryHomeCell"];
Sezam/AGHomeKitEditHomeViewController.m:139:        AGHomeKitManagerCreateRoomViewController *vc = (AGHomeKitManagerCreateRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitManageCreateRoom"];
Sezam/AGHomeKitEditHomeViewController.m:152:        AGHomeKitEditRoomViewController *vc = (AGHomeKitEditRoomViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"HKEditRoom"];
Sezam/AGKeypadSetupFailedViewController.m:34:        self.failTitleLabel.text = @"Setup Incomplete";
Sezam/AGDataItemUploaderTests.m:41://        [self.requestSerializer setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
Sezam/AGDataItemUploaderTests.m:45://        NSString *authValue = [NSString stringWithFormat:@"Basic %@", [authData base64EncodedStringWithOptions:0]];
Sezam/AGDataItemUploaderTests.m:46://        [self.requestSerializer setValue:authValue forHTTPHeaderField:@"Authorization"];
Sezam/AGDataItemUploaderTests.m:49://        responseSerializer.acceptableContentTypes = [NSSet setWithArray:@[@"text/plain"]];
Sezam/AGDataItemUploaderTests.m:155:    AGDataUploadItem * uploadItem = [self testItem:@"test"];
Sezam/AGDataItemUploaderTests.m:171:        NSHTTPURLResponse * positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:172:                                                                   statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:186:    AGDataUploadItem *uploadItem = [self testItem:@"failed"];
Sezam/AGDataItemUploaderTests.m:204:        NSHTTPURLResponse *neg = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:205:                                                                  statusCode:0 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:223:    AGDataUploadItem *item2 = [self testItem:@"succeeded"];
Sezam/AGDataItemUploaderTests.m:238:        NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:239:                                                                  statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:249:        NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:250:                                                                  statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:265:    AGDataUploadItem *uploadItem = [self testItem:@"squatter" maxAttempts:attempts];
Sezam/AGDataItemUploaderTests.m:283:            NSHTTPURLResponse *neg = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:284:                                                                 statusCode:0 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:319:        AGDataUploadItem * item = [self testItem:[NSString stringWithFormat:@"%i", x]];
Sezam/AGDataItemUploaderTests.m:346:            NSHTTPURLResponse *positive = [[NSHTTPURLResponse alloc] initWithURL:[NSURL URLWithString:@"http://example.com"]
Sezam/AGDataItemUploaderTests.m:347:                                                                      statusCode:200 HTTPVersion:@"1.0" headerFields:nil];
Sezam/AGDataItemUploaderTests.m:367:            @"type":@"app-ios",
Sezam/AGDataItemUploaderTests.m:368:            @"unique" : uniqueString,
Sezam/AGDataItemUploaderTests.m:369:            @"mdata1":@{
Sezam/AGDataItemUploaderTests.m:370:                    @"AGDataItemUploaderTestKey":@"abc123"
Sezam/AGDataItemUploaderTests.m:374:    AGDataUploadItem *uploadItem = [[AGDataUploadItem alloc] initWithData:data url:@"test" httpMethod:@"POST" maxUploadAttempts:attempts];
Sezam/AGAutoLockViewController.m:72:        self.view.autoLockDescriptionLabel.text = @"";
Sezam/AGAutoLockViewController.m:81:    self.view.autoLockModeLabel.text = self.autoLockMode == AGAutoLockMode_Instant ? @"Instant" : @"On a timer";
Sezam/AGAutoLockViewController.m:83:    self.view.autoLockTimeTitleLabel.text = self.autoLockMode == AGAutoLockMode_Instant ? @"Re-Lock Timing" : @"Auto-Lock Timing";
Sezam/AGAutoLockViewController.m:107:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Auto-Lock Settings" message:@"Instant Auto-Lock is not available after removing DoorSense. How would you like Auto-Lock to operate?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoLockViewController.m:108:    [alertController addAction:[UIAlertAction actionWithTitle:@"On a Timer" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoLockViewController.m:114:    [alertController addAction:[UIAlertAction actionWithTitle:@"Disable Auto-Lock" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoLockViewController.m:126:        return @"Your door will not lock automatically.\n";
Sezam/AGAutoLockViewController.m:130:            return @"Your door will automatically lock shortly after it’s unlocked.\n";
Sezam/AGAutoLockViewController.m:134:            return @"Your door will lock as soon as it is closed. If it hasn’t been opened, it will re-lock shortly after it’s unlocked.";
Sezam/AGAutoLockViewController.m:138:            return @"Your door will automatically lock once it has been closed for the duration specified below.";
Sezam/AGAutoLockViewController.m:141:    return @"";
Sezam/AGAutoLockViewController.m:178:                self.lockIsDoorStateCalibrated = [doorStateStr isKindOfClass:[NSString class]] && doorStateStr.length > 0 && ![doorStateStr isEqualToString:@"kAugDoorState_Init"];
Sezam/AGAutoLockViewController.m:203:    oper.label = @"Get AutoLock State";
Sezam/AGAutoLockViewController.m:210:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error updating Auto-Lock settings. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoLockViewController.m:211:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGAutoLockViewController.m:266:    listPickerController.title = @"AUTO-LOCK WHEN";
Sezam/AGAutoLockViewController.m:267:    listPickerController.listItemTitles = @[@"Instant", @"On a timer"];
Sezam/AGAutoLockViewController.m:305:    NSString *minutesStr = shouldShowMinutes ? [NSString stringWithFormat:@"%lim", (long)minutes] : @"";
Sezam/AGAutoLockViewController.m:306:    NSString *secondsStr = shouldShowSeconds ? [NSString stringWithFormat:@"%lis", (long)remainingSeconds] : @"";
Sezam/AGAutoLockViewController.m:307:    NSString *separatorStr = shouldShowSeparator ? @" : " : @"";
Sezam/AGAutoLockViewController.m:309:    NSString *timeDescription = [NSString stringWithFormat:@"%@%@%@", minutesStr, separatorStr, secondsStr];
Sezam/AGWhatsNewViewController.m:38:    if ([segue.identifier isEqualToString:@"whatsNewToConnectedAppsNav"]) {
Sezam/AGWhatsNewViewController.m:51:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGWhatsNewViewController.m:52:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGDoorbellPubSubPoll.m:78:    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleMessagingHandlerReconnection) name:@"PubSubServiceReconnection" object:nil];
Sezam/AGDoorbellPubSubPoll.m:163:    NSDictionary *wakeupMessage = @{@"status":@"wakeup", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:182:    NSDictionary *proxyDict = messageData[@"proxy"];
Sezam/AGDoorbellPubSubPoll.m:185:    proxyInfo.sessionID = proxyDict[@"session"];
Sezam/AGDoorbellPubSubPoll.m:186:    proxyInfo.proxyIP = proxyDict[@"proxyIP"];
Sezam/AGDoorbellPubSubPoll.m:187:    proxyInfo.deviceIP = proxyDict[@"deviceIP"];
Sezam/AGDoorbellPubSubPoll.m:216:    NSDictionary *proxyDict = messageData[@"proxy"];
Sezam/AGDoorbellPubSubPoll.m:219:    proxyInfo.sessionID = proxyDict[@"session"];
Sezam/AGDoorbellPubSubPoll.m:220:    proxyInfo.proxyIP = proxyDict[@"proxyIP"];
Sezam/AGDoorbellPubSubPoll.m:221:    proxyInfo.deviceIP = proxyDict[@"deviceIP"];
Sezam/AGDoorbellPubSubPoll.m:347:    NSDictionary *reconnectMessage = @{@"status":@"reconnect", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:385:    NSDictionary *telemetryRequestMessage = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:395:    self.telemetryInfo = [[AGDoorbellTelemetryInfo alloc] initWithDictionary:messageData[@"telemetry"]];
Sezam/AGDoorbellPubSubPoll.m:438:    NSDictionary *pingDoorbellMessage = @{@"status":@"doorbell_ping", @"origin":@"iOS"};
Sezam/AGDoorbellPubSubPoll.m:512:    NSDictionary *hiFiveMessage = @{@"hiFive":@"hiFive", @"origin":@"iOS", @"doorbellID":self.doorbell.objectId, @"hiFiveID":hiFiveID};
Sezam/AGDoorbellPubSubPoll.m:536:    NSString *messageHiFiveID = messageData[@"hiFiveID"];
Sezam/AGDoorbellPubSubPoll.m:574:    NSString *status = messageData[@"status"];
Sezam/AGDoorbellPubSubPoll.m:576:    if ([status isEqual:@"awake"]) {
Sezam/AGDoorbellPubSubPoll.m:578:    }else if ([status isEqual:@"awake_no_proxy"]){
Sezam/AGDoorbellPubSubPoll.m:580:    }else if ([status isEqual:@"doorbell_low_battery"]){
Sezam/AGDoorbellPubSubPoll.m:582:    }else if ([status isEqual:@"sleep"]){
Sezam/AGDoorbellPubSubPoll.m:584:    }else if ([status isEqual:@"telemetry"]){
Sezam/AGDoorbellPubSubPoll.m:586:    }else if ([status isEqual:@"doorbell_pong"]){
Sezam/AGDoorbellPubSubPoll.m:588:    }else if ([messageData[@"hiFive"] isEqual:@"hiFive"]){
Sezam/AGDoorbellPubSubPoll.m:590:    }else if ([messageData[@"pubnub"] isEqual:@"reconnection"]) {
Sezam/AGDoorbellPubSubPoll.m:592:    }else if ([messageData[@"mqtt"] isEqual:@"reconnection"]) {
Sezam/AGAddContactViewController.m:51:    [self performSegueWithIdentifier:@"AddContactToAddPhoneNumber" sender:self];
Sezam/AGAddContactViewController.m:55:    [self performSegueWithIdentifier:@"AddContacttoInviteEdit" sender:self];
Sezam/AGAddContactViewController.m:59:    [self performSegueWithIdentifier:@"AddContacttoUserExists" sender:self];
Sezam/AGAddContactViewController.m:71:    if ([segue.identifier isEqualToString:@"AddContacttoInviteEdit"]) {
Sezam/AGAddContactViewController.m:76:    if ([segue.identifier isEqualToString:@"AddContactToAddPhoneNumber"]) {
Sezam/AGNestConnectViewController.m:63:    self.descriptionLabel.text = @"Set Nest to Home or Away, see your home's temperature, and view relevant Nest Cam video, even events captured in your Activity Zones - all from the August Home app.";
Sezam/AGNestConnectViewController.m:94:    if ([[[UIDevice currentDevice] systemVersion] compare:@"8.0" options:NSNumericSearch] == NSOrderedAscending) {
Sezam/AGNestConnectViewController.m:96:        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"iOS 8 or Later Required" message:@"In order to sync with Nest, you'll need iOS 8.0 or later." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:121:    [self performSegueWithIdentifier:@"nestConnectToLearnMore" sender:nil];
Sezam/AGNestConnectViewController.m:127:    self.connectingToNestAlertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting from Nest..." message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:132:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error disconnecting from Nest:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:151:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest structure data:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:160:                    NSString *structureName = [structureDetails objectForKey:@"name"];
Sezam/AGNestConnectViewController.m:162:                        structureName = @"Unknown";
Sezam/AGNestConnectViewController.m:164:                    NSString *structureId = [structureDetails objectForKey:@"structure_id"];
Sezam/AGNestConnectViewController.m:166:                        [structureDict setObject:structureName forKey:@"structureName"];
Sezam/AGNestConnectViewController.m:167:                        [structureDict setObject: structureId forKey:@"structureID"];
Sezam/AGNestConnectViewController.m:176:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:182:                        if ([house.houseType isEqualToString: @"superuser"]) {
Sezam/AGNestConnectViewController.m:190:                            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:212:        [self performSegueWithIdentifier:@"nestConnectToNestConfirm" sender:nil];
Sezam/AGNestConnectViewController.m:217:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestConnectViewController.m:218:        NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestConnectViewController.m:224:            [self performSegueWithIdentifier:@"nestConnectToNestStructureMap" sender:nil];
Sezam/AGNestConnectViewController.m:230:    self.linkingHouseToNestStructureAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Linking %@ to Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestConnectViewController.m:234:        [self performSegueWithIdentifier:@"nestConnectToNestConfirm" sender:nil];
Sezam/AGNestConnectViewController.m:240:    if ([segue.identifier isEqualToString:@"nestConnectToNestStructureMap"]) {
Sezam/AGNestConnectViewController.m:245:    else if ([segue.identifier isEqualToString:@"nestConnectToLearnMore"]) {
Sezam/AGNestConnectViewController.m:246:        [segue.destinationViewController setUrlToLoad:[NSURL URLWithString:@"http://www.nest.com/"]];
Sezam/AGAutoUnlockNotificationHandler.m:59:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:82:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:103:            AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockNotificationHandler.m:104:                                                                            @"au_source":@"AutoUnlockNotification",
Sezam/AGAutoUnlockNotificationHandler.m:105:                                                                            @"au_initiation_type":@"InNotificationResponse",
Sezam/AGAutoUnlockNotificationHandler.m:106:                                                                            @"au_info":@{@"notification_id":notificationBaseID}
Sezam/AGAutoUnlockNotificationHandler.m:114:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Away Mode Set" message:[NSString stringWithFormat:@"Away mode has been set for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:115:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:125:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:143:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockNotificationHandler.m:144:                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlockNotificationHandler.m:145:                                                                             @"au_cancel_type":@"UserManuallySwitchedToHomeMode",
Sezam/AGAutoUnlockNotificationHandler.m:146:                                                                             @"au_source":@"AutoUnlockInNotificationResponse",
Sezam/AGAutoUnlockNotificationHandler.m:147:                                                                             @"au_info": @{
Sezam/AGAutoUnlockNotificationHandler.m:158:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Home Mode Set" message:[NSString stringWithFormat:@"Home mode has been set for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:159:        [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:168:        NSString *lockID = response.notification.request.content.userInfo[@"lockID"];
Sezam/AGAutoUnlockNotificationHandler.m:186:        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Set To Away Mode?" message:response.notification.request.content.body preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:187:        [alertController addAction:[UIAlertAction actionWithTitle:@"Set To Away Mode" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGAutoUnlockNotificationHandler.m:193:                AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockNotificationHandler.m:194:                                                                                @"au_source":@"AutoUnlockNotification",
Sezam/AGAutoUnlockNotificationHandler.m:195:                                                                                @"au_initiation_type":@"InAppAlertResponse",
Sezam/AGAutoUnlockNotificationHandler.m:196:                                                                                @"au_info":@{@"notification_id":notificationBaseID}
Sezam/AGAutoUnlockNotificationHandler.m:205:        [alertController addAction:[UIAlertAction actionWithTitle:@"Ignore" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:215:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Enable Auto-Unlock" message:[NSString stringWithFormat:@"Auto-Unlock needs to be enabled for %@ at %@.", lock.name, lock.house.name] preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:216:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:224:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock has been activated for %@ at %@, and is now in Home mode. We’ll switch to Away mode the next time you leave your neighborhood.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:226:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:230:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockOnBoardingNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:241:    NSString *body = [NSString stringWithFormat:@"You’re now in Away mode for %@. We’ll unlock %@ when you return.", lock.house.name, lock.name];
Sezam/AGAutoUnlockNotificationHandler.m:243:    NSString *notificationID = [AGAutoUnlockNotificationHandler notificationIDWithBaseID:@"AutoUnlockExitNotification" uniqueID:lock.objectId];
Sezam/AGAutoUnlockNotificationHandler.m:245:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:255:        NSString *tmpFilePath = [NSString stringWithFormat:@"%@%@", tmpDir, @"autounlock_away_icon.png"];
Sezam/AGAutoUnlockNotificationHandler.m:261:        UNNotificationAttachment *attachment = [UNNotificationAttachment attachmentWithIdentifier:@"auto_unlock_icon" URL:[NSURL URLWithString:[NSString stringWithFormat:@"file://%@", tmpFilePath]] options:nil error:&attachmentError];
Sezam/AGAutoUnlockNotificationHandler.m:266:                                   @"lockID":lock.objectId,
Sezam/AGAutoUnlockNotificationHandler.m:267:                                   @"exit_description":body,
Sezam/AGAutoUnlockNotificationHandler.m:268:                                   @"should_show_map":(exitLocation ? @(YES) : @(NO)),
Sezam/AGAutoUnlockNotificationHandler.m:269:                                   @"user_exit_lat":@(exitLocation.coordinate.latitude),
Sezam/AGAutoUnlockNotificationHandler.m:270:                                   @"user_exit_lon":@(exitLocation.coordinate.longitude),
Sezam/AGAutoUnlockNotificationHandler.m:271:                                   @"user_home_lat":@(homeGeoRegion.center.latitude),
Sezam/AGAutoUnlockNotificationHandler.m:272:                                   @"user_home_lon":@(homeGeoRegion.center.longitude),
Sezam/AGAutoUnlockNotificationHandler.m:273:                                   @"user_home_geofence_radius":@(homeGeoRegion.radius),
Sezam/AGAutoUnlockNotificationHandler.m:274:                                   @"lockName":lock.name,
Sezam/AGAutoUnlockNotificationHandler.m:275:                                   @"houseName":lock.house.name
Sezam/AGAutoUnlockNotificationHandler.m:291:    NSString *body = [NSString stringWithFormat:@"Auto-Unlocking %@. Welcome back to %@.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:293:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:298:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:299:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:[AGAutoUnlockNotificationHandler notificationIDWithBaseID:@"AutoUnlockSuccessNotification" uniqueID:lock.objectId] content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:310:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:324:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock experienced an error for %@ at %@, and will not work this time. To fix it, please use the August app to unlock the door next time you arrive home.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:326:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:330:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockLockNotInBLECacheNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:338:    NSString *body = @"Please turn on Bluetooth to re-enable Auto-Unlock.";
Sezam/AGAutoUnlockNotificationHandler.m:340:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:344:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockBLEDisabledNotification" content:notificationContent trigger:[UNTimeIntervalNotificationTrigger triggerWithTimeInterval:0.5 repeats:NO]];
Sezam/AGAutoUnlockNotificationHandler.m:353:    NSString *body = [NSString stringWithFormat:@"Something seems wrong with your location reading. It looks like you may not have left home. Auto-Unlock was set back to Home mode for %@ at %@", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:355:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:359:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockCancelledForImmediateReentryNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:367:    NSString *body = [NSString stringWithFormat:@"Auto-Unlock failed for %@ at %@ due to a communication error with the lock. Auto-Unlock is now in Home mode. We will not try to unlock your door again until you’ve left your neighborhood.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:369:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:373:        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:@"AutoUnlockOperationFailureNotification" content:notificationContent trigger:nil];
Sezam/AGAutoUnlockNotificationHandler.m:383:    NSString *body = [NSString stringWithFormat:@"Looks like your phone was restarted. Since we’re not sure if you arrived home while the phone was off, we won’t try to Auto-Unlock %@ at %@ this time. Auto-Unlock is now reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:385:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:389:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:399:    NSString *body = [NSString stringWithFormat:@"Looks like you force quit the August Home app. Since we’re not sure if you arrived home while the app was closed, we won’t try to Auto-Unlock %@ at %@ this time. Auto-Unlock is now reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:401:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:405:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:414:    NSString *body = [NSString stringWithFormat:@"Looks like you've been home for awhile. Auto-Unlock for %@ at %@ has been reset to Home mode.", lock.name, lock.house.name];
Sezam/AGAutoUnlockNotificationHandler.m:416:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:420:        notificationContent.userInfo = @{@"lockID":lock.objectId};
Sezam/AGAutoUnlockNotificationHandler.m:430:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Turn on Wi-Fi" message:@"For best location accuracy, we strongly recommend leaving Wi-Fi turned on while using Auto-Unlock." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:431:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:437:    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Auto-Unlock Disabled" message:@"Auto-Unlock is disabled when signing out of the August app. It can be re-enabled in Lock Settings." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAutoUnlockNotificationHandler.m:438:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
Sezam/AGAutoUnlockNotificationHandler.m:451:    if (NSClassFromString(@"UNUserNotificationCenter")) {//iOS 10 and up
Sezam/AGAutoUnlockNotificationHandler.m:460:    return [NSString stringWithFormat:@"%@-%@", baseID, uniqueID];
Sezam/AGAutoUnlockNotificationHandler.m:464:    return [notificaitonID componentsSeparatedByString:@"-"][0];
Sezam/AGAutoUnlockNotificationHandler.m:473:    UNNotificationAction *setToHomeModeAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationSetToHomeModeAction title:@"Set to Home Mode" options:(UNNotificationActionOptionForeground)];
Sezam/AGAutoUnlockNotificationHandler.m:475:    UNNotificationAction *setToAwayModeAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationSetToAwayModeAction title:@"Set to Away Mode" options:(UNNotificationActionOptionForeground)];
Sezam/AGAutoUnlockNotificationHandler.m:477:    UNNotificationAction *reportProblemAction = [UNNotificationAction actionWithIdentifier:kAGAutoUnlockNotificationReportProblemAction title:@"Report a Problem" options:(UNNotificationActionOptionDestructive | UNNotificationActionOptionForeground)];
Sezam/AGWebRTCClient.m:136:        [self addObserver:self forKeyPath:@"state" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGWebRTCClient.m:137:        [self addObserver:self forKeyPath:@"streamState" options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:NULL];
Sezam/AGWebRTCClient.m:153:    NSAssert(_signalBroker != nil, @"Must provide a signal broker!");
Sezam/AGWebRTCClient.m:154:    NSAssert(_peerConnectionFactory != nil, @"Must provide an RTC Factory!");
Sezam/AGWebRTCClient.m:161:    if([keyPath isEqualToString:@"state"]){
Sezam/AGWebRTCClient.m:191:    } else if ([keyPath isEqualToString:@"streamState"]){
Sezam/AGWebRTCClient.m:208:    NSAssert(_signalBroker, @"Signal broker required to establish peer to peer connection!");
Sezam/AGWebRTCClient.m:213:    NSAssert(_peerConnection, @"Failed to create peer connection!"); /// This is usually caused by an invalid config
Sezam/AGWebRTCClient.m:265:    NSAssert(self.state == AGWebRTCState_ReadyForOffer, @"configureSession called in wrong state %d", self.state);
Sezam/AGWebRTCClient.m:292:    NSAssert(self.state == AGWebRTCState_ReceivedOffer, @"Sending an answer, but we have not received an offer!");
Sezam/AGWebRTCClient.m:298:        NSString * activeSetupSDP = [[sdp sdp] stringByReplacingOccurrencesOfString:@"setup:actpass" withString:@"setup:active"];
Sezam/AGWebRTCClient.m:348:    NSAssert(self.localStream, @"Need to create the local stream before transmitting audio!");
Sezam/AGWebRTCClient.m:384:    NSString * event = @"CheckStatus"; /// Logging event
Sezam/AGWebRTCClient.m:600:    NSDictionary *candidateDictionary = @{@"candidate":candidate.sdp, @"sdpMid": candidate.sdpMid, @"sdpMLineIndex": @(candidate.sdpMLineIndex)};
Sezam/AGWebRTCClient.m:621:    NSAssert(self.state == AGWebRTCState_ReadyForOffer, @"Received offer, but not ready to process it");
Sezam/AGWebRTCClient.m:625:    NSString * cleanOffer = [offer stringByReplacingOccurrencesOfString:@"profile-level-id=4D401E" withString:@"profile-level-id=4DE01E"];
Sezam/AGWebRTCClient.m:642:    NSAssert(self.state == AGWebRTCState_SentOffer, @"Received answer, but we are not in AGWebRTCState_SentOffer!");
Sezam/AGWebRTCClient.m:658:    NSString * sdp = candidate[@"candidate"];
Sezam/AGWebRTCClient.m:659:    NSNumber * sdpMLineIndex = candidate[@"sdpMLineIndex"];
Sezam/AGWebRTCClient.m:660:    NSString * sdpMid = candidate[@"sdpMid"];
Sezam/AGWebRTCClient.m:702:    id<AGRTCMediaStream> localStream = [_peerConnectionFactory mediaStream:@"ios_stream"];
Sezam/AGWebRTCClient.m:703:    self.audioTrack = [_peerConnectionFactory audioTrack:@"ios_audio_track"];
Sezam/AGWebRTCClient.m:721:    return @"None Detected :)";
Sezam/AGWebRTCClient.m:727:            @"latency_ms" : @(_latency),
Sezam/AGWebRTCClient.m:728:            @"avg_latency_ms" : @(_averageLatency),
Sezam/AGWebRTCClient.m:729:            @"inspected_frame_count" : @(_frameCount),
Sezam/AGWebRTCClient.m:730:            @"decoder_clock_ms" : @(_decoderClockTimeMs)
Sezam/AGWebRTCClient.m:742:        case RTCIceConnectionStateNew: return @"New";
Sezam/AGWebRTCClient.m:743:        case RTCIceConnectionStateChecking: return @"Checking";
Sezam/AGWebRTCClient.m:744:        case RTCIceConnectionStateConnected: return @"Connected";
Sezam/AGWebRTCClient.m:745:        case RTCIceConnectionStateCompleted: return @"Completed";
Sezam/AGWebRTCClient.m:746:        case RTCIceConnectionStateFailed: return @"Failed";
Sezam/AGWebRTCClient.m:747:        case RTCIceConnectionStateDisconnected: return @"Disconnected";
Sezam/AGWebRTCClient.m:748:        case RTCIceConnectionStateClosed: return @"Closed";
Sezam/AGWebRTCClient.m:762:        case AGRTCSignalingStateStable: return @"Stable";
Sezam/AGWebRTCClient.m:763:        case AGRTCSignalingStateHaveLocalOffer:return @"HaveLocalOffer";
Sezam/AGWebRTCClient.m:764:        case AGRTCSignalingStateHaveLocalPrAnswer:return @"HaveLocalPrAnswer";
Sezam/AGWebRTCClient.m:765:        case AGRTCSignalingStateHaveRemoteOffer:return @"HaveRemoteOffer";
Sezam/AGWebRTCClient.m:766:        case AGRTCSignalingStateHaveRemotePrAnswer:return @"HaveRemotePrAnswer";
Sezam/AGWebRTCClient.m:767:        case AGRTCSignalingStateClosed:return @"Closed";
Sezam/AGWebRTCClient.m:780:        case AGWebRTCState_Uninitialized:return @"Uninitialized";
Sezam/AGWebRTCClient.m:781:        case AGWebRTCState_Initialized:return @"Initialized";
Sezam/AGWebRTCClient.m:782:        case AGWebRTCState_ReadyForOffer:return @"ReadyForOffer";
Sezam/AGWebRTCClient.m:783:        case AGWebRTCState_ReceivedOffer:return @"ReceivedOffer";
Sezam/AGWebRTCClient.m:784:        case AGWebRTCState_SentAnswer:return @"SentAnswer";
Sezam/AGWebRTCClient.m:785:        case AGWebRTCState_SentOffer:return @"SentOffer";
Sezam/AGWebRTCClient.m:786:        case AGWebRTCState_ReceivedAnswer:return @"ReceivedAnswer";
Sezam/AGWebRTCClient.m:787:        case AGWebRTCState_Connected:return @"Connected";
Sezam/AGWebRTCClient.m:788:        case AGWebRTCState_Error:return @"Error";
Sezam/AGWebRTCClient.m:789:        case AGWebRTCState_Closed:return @"Closed";
Sezam/AGWebRTCClient.m:790:        case AGWebRTCState_Closing:return @"Closing";
Sezam/AGWebRTCClient.m:799:        case RTCSignalingStateStable:return @"Stable";
Sezam/AGWebRTCClient.m:800:        case RTCSignalingStateHaveLocalOffer:return @"Have Local Offer";
Sezam/AGWebRTCClient.m:801:        case RTCSignalingStateHaveLocalPrAnswer:return @"Have Local Answer";
Sezam/AGWebRTCClient.m:802:        case RTCSignalingStateHaveRemoteOffer:return @"Have Remote Offer";
Sezam/AGWebRTCClient.m:803:        case RTCSignalingStateHaveRemotePrAnswer:return @"Have Remote Answer";
Sezam/AGWebRTCClient.m:804:        case RTCSignalingStateClosed:return @"Closed";
Sezam/AGDoorbellRegisterSetupViewController.m:45:                if ([house.houseType isEqualToString:@"superuser"]) {
Sezam/AGDoorbellRegisterSetupViewController.m:53:                UIAlertController *noHousesAlert = [UIAlertController alertControllerWithTitle:@"No Houses"
Sezam/AGDoorbellRegisterSetupViewController.m:54:                                                                                                 message:@"You don't have any houses. Please add a house and then continue Doorbell setup."
Sezam/AGDoorbellRegisterSetupViewController.m:56:                [noHousesAlert addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGDoorbellRegisterSetupViewController.m:60:                [self performSegueWithIdentifier:@"DoorbellRegisterToAddHouse" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:88:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"HouseCell"];
Sezam/AGDoorbellRegisterSetupViewController.m:90:        cell.label2.text = @"Create a New House";
Sezam/AGDoorbellRegisterSetupViewController.m:128:        [self performSegueWithIdentifier:@"DoorbellRegisterToAddHouse" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:147:        doorbellModel = @"Doorbell v2.0";
Sezam/AGDoorbellRegisterSetupViewController.m:148:        doorbellType = @"mars2";
Sezam/AGDoorbellRegisterSetupViewController.m:150:        doorbellModel = @"Doorbell v1.0";
Sezam/AGDoorbellRegisterSetupViewController.m:151:        doorbellType = @"mars";
Sezam/AGDoorbellRegisterSetupViewController.m:161:            if ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound) {
Sezam/AGDoorbellRegisterSetupViewController.m:162:                errorMessage = @"Doorbell Serial Number is not Valid";
Sezam/AGDoorbellRegisterSetupViewController.m:165:            if ([error.localizedDescription rangeOfString:@"403"].location != NSNotFound) {
Sezam/AGDoorbellRegisterSetupViewController.m:166:                errorMessage = @"Doorbell is already Registered. Please contact August support.";
Sezam/AGDoorbellRegisterSetupViewController.m:168:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:errorMessage preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:169:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:185:                    [self performSegueWithIdentifier:@"DoorbellRegisterToWiFiSetup" sender:nil];
Sezam/AGDoorbellRegisterSetupViewController.m:197:        UIAlertController *noHouseAlert = [UIAlertController alertControllerWithTitle:@"No House Selected" message:@"Please selected a House before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:198:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:205:    if (self.doorbellName.text == nil || [self.doorbellName.text isEqualToString:@""]) {
Sezam/AGDoorbellRegisterSetupViewController.m:206:        UIAlertController *noDoorNameAlert = [UIAlertController alertControllerWithTitle:@"No Door Name" message:@"Please enter a Door Name before Continuing" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:207:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok"
Sezam/AGDoorbellRegisterSetupViewController.m:223:    UIAlertController *quitSetupAlert = [UIAlertController alertControllerWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellRegisterSetupViewController.m:224:    UIAlertAction *neverMindAction = [UIAlertAction actionWithTitle:@"Never Mind"
Sezam/AGDoorbellRegisterSetupViewController.m:228:    UIAlertAction *quitAction = [UIAlertAction actionWithTitle:@"Quit"
Sezam/AGDoorbellRegisterSetupViewController.m:247:    if ([segue.identifier isEqualToString:@"DoorbellRegisterToWiFiSetup"]) {
Sezam/AGHomeKitSiriActivationViewController.m:19:    self.completeLabel.text = [NSString stringWithFormat: @"If you completed a HomeKit invite, %@ should receive an iOS notification in the next several minutes.\n\nOnce the invite is complete, Siri access will be activated the first time %@ connects to the lock from within the August app.", self.user.firstName, self.user.firstName];
Sezam/AGLockPaginationViewController.m:35:    self.PageViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageViewController"];
Sezam/AGLockPaginationViewController.m:156:    AGLockViewController *lockViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"LockViewController"];
Sezam/AGRemoteLockOperationLog.m:33:        [remoteLockMetricsDictionary setObject:self.lockId forKey:@"lockId"];
Sezam/AGRemoteLockOperationLog.m:36:        [remoteLockMetricsDictionary setObject:self.bridgeType forKey:@"BridgeType"];
Sezam/AGRemoteLockOperationLog.m:39:        [remoteLockMetricsDictionary setObject:self.requestType forKey:@"RequestType"];
Sezam/AGRemoteLockOperationLog.m:45:        [remoteLockMetricsDictionary setObject:requestTimeNumber forKey:@"RequestTimeInterval"];
Sezam/AGRemoteLockOperationLog.m:46:        if ([remoteOperationDetails objectForKey:@"TotalTimeByACS"]) {
Sezam/AGRemoteLockOperationLog.m:47:            double totalTimeByACS = [[remoteOperationDetails objectForKey:@"TotalTimeByACS"] doubleValue];
Sezam/AGRemoteLockOperationLog.m:50:            [remoteLockMetricsDictionary setObject:requestVsACSTimeDeltaNumber forKey:@"RequestVsACSTimeDelta"];
Sezam/AGRemoteLockOperationLog.m:55:    [remoteLockMetricsDictionary setObject:[NSNumber numberWithBool:isSuccessful] forKey:@"Success"];
Sezam/AGRemoteLockOperationLog.m:61:    NSDictionary *completedRequest = @{@"CompletedRequest":remoteLockMetricsDictionary};
Sezam/AGSelectHouseViewController.m:36:        UIAlertView *quitAlert = [[UIAlertView alloc] initWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" delegate:self cancelButtonTitle:@"Never Mind" otherButtonTitles:@"Quit", nil];
Sezam/AGSelectHouseViewController.m:73:                if ([house.houseType isEqualToString:@"superuser"]) {
Sezam/AGSelectHouseViewController.m:116:	AGCollectionViewCell * cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGSelectHouseViewController.m:135:            [self performSegueWithIdentifier:@"PickaHouseToCreateaHouse" sender:nil];
Sezam/AGSelectHouseViewController.m:137:            [self performSegueWithIdentifier:@"SelectHouseToAddHouse" sender:nil];
Sezam/AGSelectHouseViewController.m:152:                [self performSegueWithIdentifier:@"PickHouseToDoorbellName" sender:nil];
Sezam/AGSelectHouseViewController.m:162:    if ([segue.identifier isEqualToString:@"SelectHouseToAddHouse"]) {
Sezam/AGSelectHouseViewController.m:169:    else if ([segue.identifier isEqualToString:@"selectHouseToSetupOTA"]) {
Sezam/AGSelectHouseViewController.m:173:    } else if ([segue.identifier isEqualToString:@"PickaHouseToCreateaHouse"]) {
Sezam/AGSelectHouseViewController.m:176:    } else if ([segue.identifier isEqualToString:@"AGUnityModuleRegisterViewController"]) {
Sezam/AGSelectHouseViewController.m:210:                    [self performSegueWithIdentifier:@"AGUnityModuleRegisterViewController" sender:nil];
Sezam/AGSelectHouseViewController.m:214:                [self performSegueWithIdentifier:@"selectHouseToSetupOTA" sender:nil];
Sezam/AGOnboardingChecklistViewController.m:70:    self.topTitleLabel.text = @"Create your August account";
Sezam/AGOnboardingChecklistViewController.m:71:    self.topDetailLabel.text = @"Your August account is the hub where you can access and control all of your August devices.";
Sezam/AGOnboardingChecklistViewController.m:94:                self.bottomTitleLabel.text = @"Sign in to Airbnb";
Sezam/AGOnboardingChecklistViewController.m:95:                self.bottomDetailLabel.text = @"Connect your August and Airbnb accounts so you can get access to your Airbnb rental.";
Sezam/AGOnboardingChecklistViewController.m:96:                self.completedLabel.text = @"You’re all set to go! You now have access to your Airbnb rental.";
Sezam/AGOnboardingChecklistViewController.m:97:                self.completedButton.titleLabel.text = @"GO TO MY RENTAL";
Sezam/AGOnboardingChecklistViewController.m:106:                self.bottomTitleLabel.text = @"Connect your Smart Lock";
Sezam/AGOnboardingChecklistViewController.m:107:                self.bottomDetailLabel.text = @"Let’s connect your August Smart Lock to your August account so you can start using it!";
Sezam/AGOnboardingChecklistViewController.m:108:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGOnboardingChecklistViewController.m:109:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGOnboardingChecklistViewController.m:114:                self.bottomTitleLabel.text = @"Connect your Doorbell Cam";
Sezam/AGOnboardingChecklistViewController.m:115:                self.bottomDetailLabel.text = @"Let’s connect your August Doorbell Cam to your home Wi-Fi network so you can start using it!";
Sezam/AGOnboardingChecklistViewController.m:116:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Doorbell Cam.";
Sezam/AGOnboardingChecklistViewController.m:117:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGOnboardingChecklistViewController.m:176:        self.topTitleLabel.text = @"Account created";
Sezam/AGOnboardingChecklistViewController.m:198:            self.bottomTitleLabel.text = @"Signed in to AirBnB";
Sezam/AGOnboardingChecklistViewController.m:202:            self.bottomTitleLabel.text = @"Smart Lock connected";
Sezam/AGOnboardingChecklistViewController.m:206:            self.bottomTitleLabel.text = @"Doorbell Cam connected";
Sezam/AGOnboardingChecklistViewController.m:259:    self.signUpNavController.currentOnboardingClassString = @"";
Sezam/AGOnboardingChecklistViewController.m:266:    [self performSegueWithIdentifier:@"onboardChecklistToLicenseAgree" sender:self];
Sezam/AGOnboardingChecklistViewController.m:306:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGOnboardingChecklistViewController.m:307:    AGAirbnbConnectViewController *airbnbConnectViewController = [storyboard instantiateViewControllerWithIdentifier:@"AirbnbConnect"];
Sezam/AGOnboardingChecklistViewController.m:315:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGOnboardingChecklistViewController.m:316:    UINavigationController *addLock = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGOnboardingChecklistViewController.m:317:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLock];
Sezam/AGOnboardingChecklistViewController.m:325:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGOnboardingChecklistViewController.m:327:        AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGOnboardingChecklistViewController.m:330:        UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGOnboardingChecklistViewController.m:331:        [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGTristepOnboardingChecklistViewController.m:171:            self.firstTitleLabel.text = @"Install Smart Lock";
Sezam/AGTristepOnboardingChecklistViewController.m:172:            self.firstDetailLabel.text = @"First, let’s get your lock installed on your door.";
Sezam/AGTristepOnboardingChecklistViewController.m:173:            self.secondTitleLabel.text = @"Create August account";
Sezam/AGTristepOnboardingChecklistViewController.m:174:            self.thirdTitleLabel.text = @"Connect Smart Lock";
Sezam/AGTristepOnboardingChecklistViewController.m:175:            self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGTristepOnboardingChecklistViewController.m:176:            self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTristepOnboardingChecklistViewController.m:206:            self.firstTitleLabel.text = @"Smart Lock installed";
Sezam/AGTristepOnboardingChecklistViewController.m:235:            self.secondTitleLabel.text = @"Account created";
Sezam/AGTristepOnboardingChecklistViewController.m:239:            self.secondTitleLabel.text = @"Account created";
Sezam/AGTristepOnboardingChecklistViewController.m:254:            self.thirdTitleLabel.text = @"Smart Lock connected";
Sezam/AGTristepOnboardingChecklistViewController.m:258:            self.thirdTitleLabel.text = @"";
Sezam/AGTristepOnboardingChecklistViewController.m:281:    if ([segue.identifier isEqualToString:@"tristepOnboardingChecklistToInstallGuide"]) {
Sezam/AGTristepOnboardingChecklistViewController.m:289:                deviceInstallGuideUrl = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/"];
Sezam/AGTristepOnboardingChecklistViewController.m:293:                deviceInstallGuideUrl = [NSURL URLWithString:@""];
Sezam/AGTristepOnboardingChecklistViewController.m:316:    self.signUpNavController.currentOnboardingClassString = @"";
Sezam/AGTristepOnboardingChecklistViewController.m:323:    [self performSegueWithIdentifier:@"tristepOnboardingChecklistToInstallGuide" sender:nil];
Sezam/AGTristepOnboardingChecklistViewController.m:347:    [self performSegueWithIdentifier:@"tristepOnboardingChecklistToLicenseAgree" sender:self];
Sezam/AGTristepOnboardingChecklistViewController.m:369:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGTristepOnboardingChecklistViewController.m:370:    UINavigationController *addLockNav = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGTristepOnboardingChecklistViewController.m:373:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLockNav];
Sezam/AGAddPhoneViewController.m:130:            [self performSegueWithIdentifier:@"AddPhoneToPhoneVerify" sender:nil];
Sezam/AGAddPhoneViewController.m:156:    if ([segue.identifier isEqualToString:@"AddPhoneToPhoneVerify"]) {
Sezam/AGTwoStepChecklistViewController.m:119:                self.topTitleLabel.text = @"Install Smart Lock";
Sezam/AGTwoStepChecklistViewController.m:120:                self.topDetailLabel.text = @"First, let’s get your lock installed on your door.";
Sezam/AGTwoStepChecklistViewController.m:121:                self.bottomTitleLabel.text = @"Connect your Smart Lock";
Sezam/AGTwoStepChecklistViewController.m:122:                self.bottomDetailLabel.text = @"Let’s connect your August Smart Lock to your August account so you can start using it!";
Sezam/AGTwoStepChecklistViewController.m:123:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Smart Lock.";
Sezam/AGTwoStepChecklistViewController.m:124:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTwoStepChecklistViewController.m:134:                self.topTitleLabel.text = @"Connect Doorbell Cam";
Sezam/AGTwoStepChecklistViewController.m:135:                self.topDetailLabel.text = @"Let’s connect your August Doorbell Cam to your August account so you can start using it!";
Sezam/AGTwoStepChecklistViewController.m:136:                self.bottomTitleLabel.text = @"Install Doorbell Cam";
Sezam/AGTwoStepChecklistViewController.m:137:                self.bottomDetailLabel.text = @"Let’s install your Doorbell Cam and get it connected to your wired doorbell system.";
Sezam/AGTwoStepChecklistViewController.m:138:                self.completedLabel.text = @"Setup is complete! You’re ready to start using your August Doorbell Cam Pro.";
Sezam/AGTwoStepChecklistViewController.m:139:                self.completedButton.titleLabel.text = @"COMPLETE";
Sezam/AGTwoStepChecklistViewController.m:209:            self.topTitleLabel.text = @"Smart Lock installed";
Sezam/AGTwoStepChecklistViewController.m:213:            self.topTitleLabel.text = @"Doorbell Cam connected";
Sezam/AGTwoStepChecklistViewController.m:236:                                self.bottomTitleLabel.text = @"Smart Lock connected";
Sezam/AGTwoStepChecklistViewController.m:240:                                self.bottomTitleLabel.text = @"Doorbell Cam installed";
Sezam/AGTwoStepChecklistViewController.m:293:            [self performSegueWithIdentifier:@"twoStepEuropaSetupToInstallGuide" sender:self];
Sezam/AGTwoStepChecklistViewController.m:297:            [self performSegueWithIdentifier:@"mars2ChecklistToDoorbellDockSetup" sender:sender];
Sezam/AGTwoStepChecklistViewController.m:301:            [self performSegueWithIdentifier:@"AGUnityModuleInstallationViewController" sender:sender];
Sezam/AGTwoStepChecklistViewController.m:336:            [self performSegueWithIdentifier:@"twoStepMars2SetupToInstallGuide" sender:self];
Sezam/AGTwoStepChecklistViewController.m:365:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGTwoStepChecklistViewController.m:366:    UINavigationController *addLockNavVC = [storyboard instantiateViewControllerWithIdentifier:@"AddLockNavController"];
Sezam/AGTwoStepChecklistViewController.m:378:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:addLockNavVC];
Sezam/AGTwoStepChecklistViewController.m:397:    if ([segue.identifier isEqualToString:@"twoStepEuropaSetupToInstallGuide"]) {
Sezam/AGTwoStepChecklistViewController.m:401:            installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl4/"];
Sezam/AGTwoStepChecklistViewController.m:403:            installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/asl3/"];
Sezam/AGTwoStepChecklistViewController.m:406:    if ([segue.identifier isEqualToString:@"twoStepMars2SetupToInstallGuide"]) {
Sezam/AGTwoStepChecklistViewController.m:409:        installGuideWebViewController.urlToLoad = [NSURL URLWithString:@"http://in-app-installation-guides.s3-website-us-west-2.amazonaws.com/prod/installation/dbc2/"];
Sezam/AGTwoStepChecklistViewController.m:411:    if ([segue.identifier isEqualToString:@"mars2ChecklistToDoorbellDockSetup"]) {
Sezam/AGTwoStepChecklistViewController.m:415:    if ([segue.identifier isEqualToString:@"AGUnityModuleInstallationViewController"]) {
Sezam/AGAutoUnlockSetupIntroController.m:43:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupIntroController.m:45:    NSString *title = @"Let’s Set Up Auto-Unlock";
Sezam/AGAutoUnlockSetupIntroController.m:46:    NSString *paragraph1 = @"Auto-Unlock is a feature that unlocks your door when you return home.";
Sezam/AGAutoUnlockSetupIntroController.m:48:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@", title, paragraph1];
Sezam/AGAutoUnlockSetupIntroController.m:56:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupIntroController.m:72:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupIntroController.m:82:    [self.view.actionButton setTitle:@"SEE HOW IT WORKS" forState:UIControlStateNormal];
Sezam/AGDoorbellPowerAndBatteryViewController.m:52:        self.powerTitleLabel.text = @"Checking Power Levels";
Sezam/AGDoorbellPowerAndBatteryViewController.m:53:        self.powerMessageLabel.text = @"";
Sezam/AGDoorbellPowerAndBatteryViewController.m:54:        self.acVoltageMessage = @"Updating";
Sezam/AGDoorbellPowerAndBatteryViewController.m:55:        self.batteryMessage = @"Updating";
Sezam/AGDoorbellPowerAndBatteryViewController.m:58:        float acLevel = [self.doorbellTelemetry[@"ac_in"] floatValue];
Sezam/AGDoorbellPowerAndBatteryViewController.m:62:            self.powerTitleLabel.text = @"LOW BATTERY";
Sezam/AGDoorbellPowerAndBatteryViewController.m:63:            self.powerMessageLabel.text = @"Your Doorbell Cam battery is critically low. Please allow a few hours for the battery to recharge before viewing the camera.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:64:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:65:            self.batteryMessage = @"Very Low";
Sezam/AGDoorbellPowerAndBatteryViewController.m:68:            self.powerTitleLabel.text = @"INCOMPATIBLE DOORBELL";
Sezam/AGDoorbellPowerAndBatteryViewController.m:69:            self.powerMessageLabel.text = @"Your Doorbell Cam appears to be connected to an incompatible doorbell system and will stop working once the battery is drained.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:70:            self.acVoltageMessage = [NSString stringWithFormat:@"Too Low (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:71:            self.batteryMessage = @"Not Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:74:            self.powerTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellPowerAndBatteryViewController.m:75:            self.powerMessageLabel.text = @"Your Doorbell Cam is connected to AC power.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:76:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:77:            self.batteryMessage = @"Charged";
Sezam/AGDoorbellPowerAndBatteryViewController.m:80:            self.powerTitleLabel.text = @"POWER DISCONNECTED";
Sezam/AGDoorbellPowerAndBatteryViewController.m:81:            self.powerMessageLabel.text = @"Please re-mount your Doorbell Cam and check that the power is turned on. Your Doorbell Cam  will stop working once the battery is drained.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:82:            self.acVoltageMessage = @"No Power (0.00 V)";
Sezam/AGDoorbellPowerAndBatteryViewController.m:83:            self.batteryMessage = @"Not Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:86:            self.powerTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGDoorbellPowerAndBatteryViewController.m:87:            self.powerMessageLabel.text = @"Your Doorbell Cam is connected to the USB dock.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:88:            self.acVoltageMessage = [NSString stringWithFormat:@"Good (%.2f V)", acLevel];
Sezam/AGDoorbellPowerAndBatteryViewController.m:89:            self.batteryMessage = @"Charging";
Sezam/AGDoorbellPowerAndBatteryViewController.m:101:    if ([self.doorbell.status isEqualToString:@"doorbell_low_battery"]) {
Sezam/AGDoorbellPowerAndBatteryViewController.m:137:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGDoorbellPowerAndBatteryViewController.m:166:    self.powerTitleLabel.text = @"DOORBELL OFFLINE";
Sezam/AGDoorbellPowerAndBatteryViewController.m:167:    self.powerMessageLabel.text = @"Your Doorbell Cam is offline. Power Levels refers to the last known levels.";
Sezam/AGDoorbellPowerAndBatteryViewController.m:175:    if ([messageData objectForKey:@"telemetry"]) {
Sezam/AGDoorbellPowerAndBatteryViewController.m:176:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:179:            self.doorbellLowBattery = [telemetry[@"doorbell_low_battery"] boolValue];
Sezam/AGDoorbellPowerAndBatteryViewController.m:218:         cell =  [tableView dequeueReusableCellWithIdentifier:@"ACVoltageRow"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:219:         NSString *acIn = [self.doorbellTelemetry objectForKey:@"ac_in"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:220:         cell.label2.text = [NSString stringWithFormat:@"%.2f V", [acIn floatValue]];
Sezam/AGDoorbellPowerAndBatteryViewController.m:222:         cell =  [tableView dequeueReusableCellWithIdentifier:@"BatteryRow"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:223:         NSString *battery = [self.doorbellTelemetry objectForKey:@"battery"];
Sezam/AGDoorbellPowerAndBatteryViewController.m:224:         cell.label2.text = [NSString stringWithFormat:@"%.2f V", [battery floatValue]];
Sezam/AGDoorbellPowerAndBatteryViewController.m:226:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGAutoUnlockAdvancedSettingsController.m:101:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockAdvancedSettingsController.m:102:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockAdvancedSettingsController.m:103:                                                                         @"au_cancel_type":@"UserManuallySwitchedToHomeMode",
Sezam/AGAutoUnlockAdvancedSettingsController.m:104:                                                                         @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockAdvancedSettingsController.m:105:                                                                         @"au_info": @{
Sezam/AGAutoUnlockAdvancedSettingsController.m:113:        AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlockAdvancedSettingsController.m:114:                                                                         @"au_initiation_type":@"UserManaullySwitchedToAwayMode",
Sezam/AGAutoUnlockAdvancedSettingsController.m:115:                                                                         @"au_source":@"AutoUnlockSettings"
Sezam/AGUtility.h:33:static NSString* kDisableHyperBridgeKey = @"disablehyperbridge";
Sezam/AGUtility.h:34:static NSString* kDisableFastBridgeKey = @"disablefastbridge";
Sezam/AGUtility.h:35:static NSString* kHyperBridgeKey = @"hyperbridge";
Sezam/AGUtility.h:36:static NSString* kFastBridgeKey = @"fastbridge";
Sezam/AGUtility.h:37:static NSString* kFastBridge_Helios = @"fastbridge-helios";
Sezam/AGUtility.h:38:static NSString* kFastBridge_Jupiter = @"fastbridge-jupiter";
Sezam/AGUtility.h:39:static NSString* kFastBridge_Europa = @"fastbridge-europa";
Sezam/AGUtility.h:40:static NSString* kFastBridge_Callisto = @"fastbridge-callisto";
Sezam/AGUtility.h:41:static NSString* kSeamlessKey = @"seamless";
Sezam/AGUtility.h:42:static NSString* kHouseStatusKey = @"housestatus";
Sezam/AGBLERegionMonitor.m:148:    return ![AGFeatureManager enabled:@"AutoUnlockDisableRegionMonitorDisconnectAfterDealloc"];
Sezam/AGDoorbellSetupHelpViewController.m:43:            self.messageLabel.text = @"First, make sure your Doorbell Cam has been connected to power for at least 15 minutes so that the internal battery is charged.";
Sezam/AGDoorbellSetupHelpViewController.m:50:            self.messageLabel.text = @"Next, press the button on the front of the doorbell again; wait a few seconds for the green blinking light to reappear.";
Sezam/AGDoorbellSetupHelpViewController.m:57:            self.messageLabel.text = @"Finally, remove Doorbell Cam from the mounting plate and place it directly next to your router. \n\nThis should dramatically improve Doorbell Cam’s Wi-Fi connection during setup.";
Sezam/AGDoorbellSetupHelpViewController.m:98:    UIAlertController *reminderAlertController = [UIAlertController alertControllerWithTitle:@"15 Minute Reminder"
Sezam/AGDoorbellSetupHelpViewController.m:99:                                                                                         message:@"August will send you a reminder in 15 minutes when your doorbell’s battery has charged."
Sezam/AGDoorbellSetupHelpViewController.m:101:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Remind Me In 15 Minutes"
Sezam/AGDoorbellSetupHelpViewController.m:106:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellSetupHelpViewController.m:116:    if (NSClassFromString(@"UNNotificationRequest")) {
Sezam/AGDoorbellSetupHelpViewController.m:118:        reminderNotificationContent.title = @"Continue Doorbell Setup";
Sezam/AGDoorbellSetupHelpViewController.m:119:        reminderNotificationContent.body = @"Your Doorbell Cam has been charging for 15 minutes and is ready to set up.";
Sezam/AGDoorbellSetupHelpViewController.m:120:        reminderNotificationContent.categoryIdentifier = @"doorbellSetupReminder";
Sezam/AGDoorbellSetupHelpViewController.m:122:        UNNotificationRequest *reminderNotification = [UNNotificationRequest requestWithIdentifier:@"doorbellSetupReminderNotification" content:reminderNotificationContent trigger:reminderNotificationTrigger];
Sezam/AGDoorbellSetupHelpViewController.m:126:    UIAlertController *reminderAlertController = [UIAlertController alertControllerWithTitle:@"Timer Set"
Sezam/AGDoorbellSetupHelpViewController.m:127:                                                                                     message:@"We’ll send a reminder to your phone in 15 minutes."
Sezam/AGDoorbellSetupHelpViewController.m:129:    [reminderAlertController addAction:[UIAlertAction actionWithTitle:@"Ok"
Sezam/AGKeypadCommManager.m:125:        [self selectDevice:@{@"peripheral": peripheral, @"serial": self.keypadSerial} ];
Sezam/AGKeypadCommManager.m:155:    CBPeripheral *peripheral = [deviceInfo objectForKey:@"peripheral"];
Sezam/AGKeypadCommManager.m:156:    NSString *serialNumber = [deviceInfo objectForKey:@"serial"];
Sezam/AGKeypadCommManager.m:161:        NSString *handshakeKey = [dict objectForKey:@"handshakeKey"];
Sezam/AGKeypadCommManager.m:163:        NSString *currentSetupKey =  [dict objectForKey:@"currentHandshakeKey"];
Sezam/AGKeypadCommManager.m:165:            currentSetupKey = [dict objectForKey:@"currentHanshakeKey"]; // Fix for misspelling in some endpoints
Sezam/AGKeypadCommManager.m:168:        self.paramsToSet = [dict objectForKey:@"keypadParams"];
Sezam/AGKeypadCommManager.m:174:        NSString *nextSetupKey = [dict objectForKey:@"nextHandshakeKey"];
Sezam/AGKeypadCommManager.m:417:    NSArray *nameTokens = [advertisedName componentsSeparatedByString:@" "];
Sezam/AGKeypadCommManager.m:418:    if (([nameTokens count] > 1) &&  [[nameTokens objectAtIndex:0] isEqualToString:@"August"]) {
Sezam/AGKeypadCommManager.m:422:    if (([keypadSerialNumber rangeOfString:@"K1"].location==0) || ([keypadSerialNumber rangeOfString:@"K2"].location==0)) {
Sezam/AGKeypadCommManager.m:433:        [self.foundDevicesWithScan addObject:@{@"peripheral":peripheral, @"serial":keypadSerialNumber}];
Sezam/AGKeypadCommManager.m:438:    NSAssert(self.internalStatus == AGKeypadGotOTAVersion, @"Approved before OTA version received");
Sezam/AGKeypadCommManager.m:439:    NSAssert(self.peripheral!=nil, @"Bad peripheral");
Sezam/AGKeypadCommManager.m:507:        NSString *errorMsg = [NSString stringWithFormat:@"Error discovering services: %@", error];
Sezam/AGKeypadCommManager.m:546:            NSString *errorMsg = [NSString stringWithFormat:@"Error discovering characteristics: %@", error];
Sezam/AGKeypadCommManager.m:633:    NSAssert(self.offlineKeyForLockAndKeypad != nil, @"No Offline Key Set");
Sezam/AGCreateAccountViewController.m:93:                           [[UIBarButtonItem alloc]initWithTitle:@"Cancel" style:UIBarButtonItemStylePlain target:self action:@selector(cancelNumberPad)],
Sezam/AGCreateAccountViewController.m:95:                           [[UIBarButtonItem alloc]initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(doneWithNumberPad)],
Sezam/AGCreateAccountViewController.m:120:    [disclaimerText addAttribute:NSFontAttributeName value:[UIFont fontWithName:@"ProximaNova-Bold" size:12] range:boldRange];
Sezam/AGCreateAccountViewController.m:121:    [disclaimerText addAttribute:NSFontAttributeName value:[UIFont fontWithName:@"ProximaNova-Regular" size:12] range:NSMakeRange(0, boldRange.location)];
Sezam/AGCreateAccountViewController.m:130:    NSURL *eulaLink = [NSURL URLWithString:@"http://august.com/legal/eula/"];
Sezam/AGCreateAccountViewController.m:151:    if ([segue.identifier isEqualToString:@"CreateAccountToAddProfilePhoto"]) {
Sezam/AGCreateAccountViewController.m:158:    NSString *emailRegExPattern = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
Sezam/AGCreateAccountViewController.m:159:    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegExPattern];
Sezam/AGCreateAccountViewController.m:164:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Invalid Email"
Sezam/AGCreateAccountViewController.m:165:                                                                       message:@"Please enter a valid email address."
Sezam/AGCreateAccountViewController.m:167:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:289:    self.countryCodeControl.inputTextField.text = @"";
Sezam/AGCreateAccountViewController.m:304:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:313:        UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGCreateAccountViewController.m:366:    NSString *phoneRegex = @"^((\\+)|(00))[0-9]{11,16}$";
Sezam/AGCreateAccountViewController.m:367:    NSPredicate *phoneTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", phoneRegex];
Sezam/AGCreateAccountViewController.m:405:        BOOL passwordContainsLowerCaseCharacters        = ([_password rangeOfString:@"\\p{Ll}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:406:        BOOL passwordContainsUpperCaseCharacters        = ([_password rangeOfString:@"\\p{Lu}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:407:        BOOL passwordContainsDecimalNumberCharacters    = ([_password rangeOfString:@"\\p{Nd}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:408:        BOOL passwordContainsSymbolCharacters           = ([_password rangeOfString:@"\\p{Pattern_Syntax}" options:NSRegularExpressionSearch].location == NSNotFound) ? NO : YES;
Sezam/AGCreateAccountViewController.m:502:        UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
Sezam/AGCreateAccountViewController.m:520:        UIAlertAction* defaultAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault
Sezam/AGCreateAccountViewController.m:546:                        [self performSegueWithIdentifier:@"CreateAccountToAddProfilePhoto" sender:nil];
Sezam/AGDoorbellTelemetryInfo.m:22:    self.bssid = [self valueForKey:@"BSSID" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:23:    self.ssid = [self valueForKey:@"SSID" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:24:    self.ipAddress = [self valueForKey:@"ip_addr" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:26:    self.linkQuality = [self intFromObject:[self valueForKey:@"link_quality" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:27:    self.wifiFrequency = [self intFromObject:[self valueForKey:@"wifi_freq" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:28:    self.signalLevel = [self valueForKey:@"signal_level" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:30:    self.steadyACInput = [self floatFromObject:[self valueForKey:@"steady_ac_in" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:31:    self.acInput = [self floatFromObject:[self valueForKey:@"ac_in" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:32:    self.batteryLevel = [self floatFromObject:[self valueForKey:@"battery" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:33:    self.doorbellHasLowBattery = [self intFromObject:[self valueForKey:@"doorbell_low_battery" fromDict:telemetryInfo]].boolValue;
Sezam/AGDoorbellTelemetryInfo.m:34:    self.loadAverage = [self valueForKey:@"load_average" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:35:    self.temperature = [self floatFromObject:[self valueForKey:@"temperature" fromDict:telemetryInfo]];
Sezam/AGDoorbellTelemetryInfo.m:37:    self.date = [self valueForKey:@"date" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:38:    self.updatedAt = [self valueForKey:@"updated_at" fromDict:telemetryInfo];
Sezam/AGDoorbellTelemetryInfo.m:39:    self.uptime = [self valueForKey:@"uptime" fromDict:telemetryInfo];
Sezam/AGSwitchTableCell.m:34:    self.label.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGPubSubSignaling.m:100:        NSAssert(_state == AGPSStateInitialized, @"Must be initialized before registering!");
Sezam/AGPubSubSignaling.m:119:        NSAssert(_state == AGPSStateRegistered || _state == AGPSStateAsleep, @"Must register before sending wakeup message!");
Sezam/AGPubSubSignaling.m:122:                @"status" : @"wakeup",
Sezam/AGPubSubSignaling.m:123:                @"origin" : @"iOS",
Sezam/AGPubSubSignaling.m:124:                @"webrtc" : @YES,
Sezam/AGPubSubSignaling.m:125:                @"tid" : transactionID
Sezam/AGPubSubSignaling.m:153:        NSAssert(_state == AGPSStateOfferReceived, @"Should not send an answer if an offer has not been received!");
Sezam/AGPubSubSignaling.m:156:                @"status" : @"answer",
Sezam/AGPubSubSignaling.m:157:                @"tid" : transactionID,
Sezam/AGPubSubSignaling.m:158:                @"session_id" : @(_sessionID),
Sezam/AGPubSubSignaling.m:159:                @"jsep" : @{@"type" : @"answer", @"sdp" : answer},
Sezam/AGPubSubSignaling.m:160:                @"origin" : @"iOS"
Sezam/AGPubSubSignaling.m:183:        NSAssert(_state != AGPSStateInitialized && _state != AGPSStateUninitialized, @"Must be registered before sending messages!");
Sezam/AGPubSubSignaling.m:193:                @"status" : @"trickle",
Sezam/AGPubSubSignaling.m:194:                @"tid" : transactionID,
Sezam/AGPubSubSignaling.m:195:                @"session_id" : @(_sessionID),
Sezam/AGPubSubSignaling.m:196:                @"origin" : @"iOS",
Sezam/AGPubSubSignaling.m:197:                @"candidates" : candidates
Sezam/AGPubSubSignaling.m:256:    NSNumber * tid = payload[@"tid"];
Sezam/AGPubSubSignaling.m:261:        if(![payload[@"status"] isEqual:@"trickle"] && ![payload[@"status"] isEqual:@"error"]){
Sezam/AGPubSubSignaling.m:272:    AGSignalingOperation responseType = [AGPubSubSignaling operationType:payload[@"status"]];
Sezam/AGPubSubSignaling.m:286:                    NSDictionary * jsep = payload[@"jsep"];
Sezam/AGPubSubSignaling.m:287:                    NSString * sdp = jsep[@"sdp"];
Sezam/AGPubSubSignaling.m:288:                    _sessionID = [payload[@"session_id"] unsignedIntegerValue];
Sezam/AGPubSubSignaling.m:316:            NSDictionary * jsep = payload[@"jsep"];
Sezam/AGPubSubSignaling.m:317:            [_delegate didReceiveAnswer:jsep[@"sdp"] from:_channel];
Sezam/AGPubSubSignaling.m:324:                [_delegate didReceiveResponse:@"ack" from:_channel];
Sezam/AGPubSubSignaling.m:335:                [_delegate didReceiveResponse:@"ack" from:_channel];
Sezam/AGPubSubSignaling.m:344:            NSAssert(false, @"We never send acknowledgement messages, how did this happen?");
Sezam/AGPubSubSignaling.m:351:                NSArray<NSDictionary *>* candidates = payload[@"candidates"];
Sezam/AGPubSubSignaling.m:365:    NSDictionary * errorData = errorBody[@"error"];
Sezam/AGPubSubSignaling.m:366:    NSNumber * code = errorData[@"code"];
Sezam/AGPubSubSignaling.m:367:    NSString * reason = errorData[@"reason"];
Sezam/AGPubSubSignaling.m:437:    if([value isEqualToString:@"ack"]){
Sezam/AGPubSubSignaling.m:439:    } else if([value isEqualToString:@"offer"]){
Sezam/AGPubSubSignaling.m:441:    } else if([value isEqualToString:@"answer"]){
Sezam/AGPubSubSignaling.m:443:    } else if([value isEqualToString:@"trickle"]){
Sezam/AGPubSubSignaling.m:445:    } else if([value isEqualToString:@"error"]){
Sezam/AGPubSubSignaling.m:447:    } else if([value isEqualToString:@"wakeup"]){
Sezam/AGPubSubSignaling.m:458:        case AGSignalingOperationWakeUp:return @"wakeup";
Sezam/AGPubSubSignaling.m:459:        case AGSignalingOperationOffer:return @"offer";
Sezam/AGPubSubSignaling.m:460:        case AGSignalingOperationAnswer:return @"answer";
Sezam/AGPubSubSignaling.m:461:        case AGSignalingOperationTrickle:return @"trickle";
Sezam/AGPubSubSignaling.m:462:        case AGSignalingOperationError:return @"error";
Sezam/AGPubSubSignaling.m:463:        case AGSignalingOperationAck:return @"ack";
Sezam/AGPubSubSignaling.m:464:        case AGSignalingOperationUnknown:return @"unknown";
Sezam/AGDoorSenseSettingsViewController.m:78:            if ([doorStateString isEqualToString:@"kAugDoorState_Init"]) {
Sezam/AGDoorSenseSettingsViewController.m:129:        UIAlertController *instantLockWillNotWorkAlert = [UIAlertController alertControllerWithTitle:@"Warning" message:@"Instant Auto-Lock is enabled, but will not function after disabling DoorSense. We are updating your AutoLock settings to On a Timer with an auto relock at 2 minutes." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorSenseSettingsViewController.m:130:        UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action){
Sezam/AGDoorSenseSettingsViewController.m:158:            self.mainMessageLabel.text = @"Checking DoorSense Status...";
Sezam/AGDoorSenseSettingsViewController.m:161:            self.mainMessageLabel.text = @"Your lock is currently using DoorSense, and is able to detect if your door is open or closed.";
Sezam/AGDoorSenseSettingsViewController.m:165:            self.mainMessageLabel.text = @"DoorSense enables your lock to detect if your door is open or closed.";
Sezam/AGDoorSenseSettingsViewController.m:181:    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGDoorSenseSettingsViewController.m:182:    AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = (AGLockAndDoorCalibrationViewController *)[storyboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGDoorSenseSettingsViewController.m:203:        if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDoorSenseSettingsViewController.m:204:            [self showAlertWithTitle:@"Error" andMessage:@"There was an error with Disabling Door Sense"];
Sezam/AGDoorSenseSettingsViewController.m:207:            [self showAlertWithTitle:@"Success" andMessage:@"Your DoorSense has been disabled. Your lock will not know if your door is open or closed. To enable DoorSense later, you will be guided through the calibration process. If Instant Auto-Lock was enabled, please reset it in lock settings."];
Sezam/AGDoorSenseSettingsViewController.m:219:    if ((self.lock.lockCapability.doorSenseInstallationInstructionURL != nil) && ([self.lock.lockCapability.doorSenseInstallationInstructionURL isEqual:@""] == NO)) {
Sezam/AGDoorSenseSettingsViewController.m:222:        [self showAlertWithTitle:@"Error" andMessage:@"This lock type does not support DoorSense."];
Sezam/AGDoorSenseSettingsViewController.m:225:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGDoorSenseSettingsViewController.m:226:    AGInstallGuideWebViewController *installGuideWebViewController = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGDoorSenseSettingsViewController.m:270:    [self showAlertWithTitle:@"Error" andMessage:@"Lock Connection Error"];
Sezam/AGDoorSenseSettingsViewController.m:276:    [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGVideoStreamDebugger.m:51:    [output appendFormat:@"Status: %@\n", self.stream.localizedStatus];
Sezam/AGVideoStreamDebugger.m:52:    [output appendFormat:@"PubSub Connection: %@\n", self.pubSubConnection];
Sezam/AGVideoStreamDebugger.m:53:    [output appendFormat:@"Internet Connection: %@\n", self.networkConnection];
Sezam/AGVideoStreamDebugger.m:54:    [output appendFormat:@"Error: %@\n", self.stream.localizedError];
Sezam/AGVideoStreamDebugger.m:55:    [output appendFormat:@"Performance Stats: %@\n", self.stream.performanceStats];
Sezam/AGVideoStreamDebugger.m:70:            self.networkConnection = @"✓";
Sezam/AGVideoStreamDebugger.m:74:            self.networkConnection = @"ⓧ";
Sezam/AGVideoStreamDebugger.m:85:            self.pubSubConnection = @"✓";
Sezam/AGVideoStreamDebugger.m:89:            self.pubSubConnection = @"ⓧ";
Sezam/AGVideoStreamDebugger.m:93:            self.pubSubConnection = @"?";
Sezam/AGUnityModuleKeypadSecurityViewController.m:55:        _shutdownLabel.text = [NSString stringWithFormat:@"%dm : %ds", min, sec];
Sezam/AGUnityModuleKeypadSecurityViewController.m:61:        _wrongCodeInputLabel.text = [NSString stringWithFormat:@"%d", value];
Sezam/AGUnityModuleKeypadSecurityViewController.m:116:    _shutdownLabel.text = [NSString stringWithFormat:@"%dm : %ds", min, sec];
Sezam/AGUnityModuleKeypadSecurityViewController.m:117:    _wrongCodeInputLabel.text = [NSString stringWithFormat:@"%d", (int)_unityManager.model.wrongCodeLimit];
Sezam/AGUnityModuleKeypadSecurityViewController.m:134:                                                                  btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGBodyLabel.m:18:            self.customFont = [UIFont fontWithName: @"ProximaNova-Regular" size:17];
Sezam/AGBodyLabel.m:21:            self.customBoldFont = [UIFont fontWithName: @"ProximaNova-Semibold" size:17];
Sezam/AGBodyLabel.m:36:    NSString *boldStart = @"<bold>";
Sezam/AGBodyLabel.m:37:    NSString *boldEnd = @"</bold>";
Sezam/AGBodyLabel.m:48:        [[string mutableString] replaceOccurrencesOfString:boldStart withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0, string.string.length)];
Sezam/AGBodyLabel.m:50:        [[string mutableString] replaceOccurrencesOfString:boldEnd withString:@"" options:NSCaseInsensitiveSearch range:NSMakeRange(0, string.string.length)];
Sezam/AGSectionedIconListPickerView.m:88:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGSectionedIconListPickerView.m:111:    self.doneButton.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSectionedIconListPickerView.m:117:    [self.doneButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGSectionedIconListPickerView.m:154:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGSectionedIconListPickerView.m:187:    NSString *reuseID = @"AGSectionedIconListPickerViewCellID";
Sezam/AGHomeKitManagerCreateRoomViewController.m:44:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Room. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitManagerCreateRoomViewController.m:47:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Room." inViewController:theSelf];
Sezam/AGLockSetupAddHouseViewController.m:61:        self.lockName = [infoFromLastAddedHomeKitLock objectForKey:@"lock"];
Sezam/AGLockSetupAddHouseViewController.m:65:        self.houseNameTextField.text = [infoFromLastAddedHomeKitLock objectForKey:@"house"];
Sezam/AGLockSetupAddHouseViewController.m:68:        self.homeKitFlowLabel.text = [NSString stringWithFormat:@"Adding lock %@ to house %@.",self.lockName, self.houseNameTextField.text];
Sezam/AGLockSetupAddHouseViewController.m:70:        self.houseNameTextField.hidden = true; // = [infoFromLastAddedHomeKitLock objectForKey:@"house"];
Sezam/AGLockSetupAddHouseViewController.m:71:        self.lockLocationTextField.hidden = true; // = [infoFromLastAddedHomeKitLock objectForKey:@"lock"];
Sezam/AGLockSetupAddHouseViewController.m:100:    UIAlertView *quitAlert = [[UIAlertView alloc] initWithTitle:@"Quit Setup?" message:@"Are you sure you'd like to quit Doorbell Setup?" delegate:self cancelButtonTitle:@"Never Mind" otherButtonTitles:@"Quit", nil];
Sezam/AGLockSetupAddHouseViewController.m:199:    if([segue.identifier isEqualToString:@"lockSetupToSetupOTA"])
Sezam/AGLockSetupAddHouseViewController.m:204:    } else if ([segue.identifier isEqualToString:@"AGUnityModuleRegisterViewController"]) {
Sezam/AGLockSetupAddHouseViewController.m:233:                    [self performSegueWithIdentifier:@"CreateHouseToDoorbellSetupScan" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:255:                        [self performSegueWithIdentifier:@"CreateHouseToDoorbellSetupScan" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:301:                    [self performSegueWithIdentifier:@"AGUnityModuleRegisterViewController" sender:nil];
Sezam/AGLockSetupAddHouseViewController.m:305:                [self performSegueWithIdentifier:@"lockSetupToSetupOTA" sender:nil];
Sezam/AGHouseOwnerPickViewController.m:31:            self.userDict = (NSDictionary *)[dict objectForKey:@"users"];
Sezam/AGHouseOwnerPickViewController.m:40:                if ([user.type isEqualToString:@"superuser"]) {
Sezam/AGHouseOwnerPickViewController.m:92:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"HouseOwnerCell"];
Sezam/AGNestConfirmViewController.m:32:        [self performSegueWithIdentifier:@"nestConfirmToNestStructureMap" sender:nil];
Sezam/AGNestConfirmViewController.m:35:        [self performSegueWithIdentifier:@"nestConfirmToNestCameraToLock" sender:nil];
Sezam/AGNestConfirmViewController.m:57:    if ([segue.identifier isEqualToString:@"nestConfirmToNestStructureMap"]) {
Sezam/AGNestConfirmViewController.m:62:    else if ([segue.identifier isEqualToString:@"nestConfirmToNestCameraToLock"]) {
Sezam/AGAirbnbMappingViewController.m:61:    self.airbnbGlobalStatusLabel.text = @"";
Sezam/AGAirbnbMappingViewController.m:65:            if (([error.localizedDescription rangeOfString:@"401"].location != NSNotFound) || ([error.localizedDescription rangeOfString:@"404"].location != NSNotFound)) {}
Sezam/AGAirbnbMappingViewController.m:67:            UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was a problem loading your AirBnB information." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbMappingViewController.m:68:            UIAlertAction *okAction = [UIAlertAction actionWithTitle:@"Ok" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbMappingViewController.m:85:        self.airbnbGlobalStatusLabel.text = @"Your August and Airbnb accounts are connected.";
Sezam/AGAirbnbMappingViewController.m:88:        self.airbnbGlobalStatusLabel.text = @"Your August and Airbnb accounts are connected. Airbnb guests, go to the Home Screen to view access information for your upcoming reservations.";
Sezam/AGAirbnbMappingViewController.m:103:                NSDictionary *listingItem = @{@"accessName":lock.name, @"houseName":house.name, @"accessType":@"appAccess"};
Sezam/AGAirbnbMappingViewController.m:107:                NSDictionary *listingItem = @{@"accessName":[NSString stringWithFormat:@"%@ - Keypad",lock.name], @"houseName":house.name, @"accessType":@"keypadAccess"};
Sezam/AGAirbnbMappingViewController.m:154:    label.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:13];
Sezam/AGAirbnbMappingViewController.m:187:        cell = [tableView dequeueReusableCellWithIdentifier:@"SelectLockCell"];
Sezam/AGAirbnbMappingViewController.m:190:        cell = [tableView dequeueReusableCellWithIdentifier:@"ItemAccessCell"];
Sezam/AGAirbnbMappingViewController.m:194:        cell.label.text = itemListing[@"accessName"];
Sezam/AGAirbnbMappingViewController.m:195:        cell.label2.text = itemListing[@"houseName"];
Sezam/AGAirbnbMappingViewController.m:196:        if ([itemListing[@"accessType"] isEqual:@"keypadAccess"]) {
Sezam/AGAirbnbMappingViewController.m:233:            [self performSegueWithIdentifier:@"AirBnBMapViewToListingSetupView" sender:nil];
Sezam/AGAirbnbMappingViewController.m:241:    UIAlertController *disconnectAlertController = [UIAlertController alertControllerWithTitle:@"Disconnect from Airbnb?" message:@"You’ll need to sign back in to Airbnb from the August app to reconnect. \n\nAny current Airbnb guests will keep the access they already have." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAirbnbMappingViewController.m:242:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleDefault handler:nil];
Sezam/AGAirbnbMappingViewController.m:244:    UIAlertAction *disconnectAction = [UIAlertAction actionWithTitle:@"Disconnect" style:UIAlertActionStyleDestructive handler:^(UIAlertAction *action) {
Sezam/AGAirbnbMappingViewController.m:259:            self.airbnbGlobalStatusLabel.text = @"There was an error Disconnecting your account.";
Sezam/AGAirbnbMappingViewController.m:300:    if ([segue.identifier isEqualToString:@"AirBnBMapViewToListingSetupView"]) {
Sezam/AGUnityFactoryResetManager.m:118:        self.completionBlock( @"Connection error!!");
Sezam/AGUnityFactoryResetManager.m:134:            self.completionBlock(@"Lock disConnected!!");
Sezam/AGUnityFactoryResetManager.m:194:        if (error || ![responseDict[@"error_code"] isEqualToNumber:@(0)] ) {
Sezam/AGUnityFactoryResetManager.m:199:                strongSelf.completionBlock(@"reset Lock host error!");
Sezam/AGUnityFactoryResetManager.m:208:    operation.label = @"Unity_host_factory_reset";
Sezam/AGUnityFactoryResetManager.m:224:                strongSelf.completionBlock(@"reset Lock host error!");
Sezam/AGUnityFactoryResetManager.m:234:    resetOperation.label = @"FactoryReset";
Sezam/AGUnityFactoryResetManager.m:244:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGUnityFactoryResetManager.m:247:                self.completionBlock(@"server factory reset failed!");
Sezam/AGUnityFactoryResetManager.m:270:        NSString *msg = @"Your lock has been factory reset and can be set up again, but you may not be able to set up HomeKit until the home's administrator removes the lock from HomeKit.";
Sezam/AGUnityFactoryResetManager.m:271:        UIAlertController *alertVC = [AGAlertHelper alertViewWithTitle:@"HomeKit Not Reset" msg:msg btnTitle:@"OK" btnPressedBlock:^{
Sezam/AGUtilityCommon.h:77:    AGDialView_StatusLabel_None,                        // @""
Sezam/AGUtilityCommon.h:78:    AGDialView_StatusLabel_Connecting,                  // @"Connecting..."
Sezam/AGUtilityCommon.h:79:    AGDialView_StatusLabel_Discovered,                  // @"Discovered"
Sezam/AGUtilityCommon.h:80:    AGDialView_StatusLabel_Connected,                   // @"Connected"
Sezam/AGUtilityCommon.h:81:    AGDialView_StatusLabel_NotCalibrated,               // @"Not Calibrated"
Sezam/AGUtilityCommon.h:82:    AGDialView_StatusLabel_Locked,                      // @"Locked"
Sezam/AGUtilityCommon.h:83:    AGDialView_StatusLabel_Closed_Locked,               // @"Closed | Locked"
Sezam/AGUtilityCommon.h:84:    AGDialView_StatusLabel_Open_Locked,                 // @"Open | Locked"
Sezam/AGUtilityCommon.h:85:    AGDialView_StatusLabel_Unlocked,                    // @"Unlocked"
Sezam/AGUtilityCommon.h:86:    AGDialView_StatusLabel_Closed_Unlocked,             // @"Closed | Unlocked"
Sezam/AGUtilityCommon.h:87:    AGDialView_StatusLabel_Open_Unlocked,               // @"Open | Unlocked"
Sezam/AGUtilityCommon.h:88:    AGDialView_StatusLabel_Connecting_Remotely,         // @"Connecting Remotely...
Sezam/AGUtilityCommon.h:89:    AGDialView_StatusLabel_Locking,                     // @"Locking..."
Sezam/AGUtilityCommon.h:90:    AGDialView_StatusLabel_Unlocking,                   // @"Unlocking..."
Sezam/AGUtilityCommon.h:119:    AGDialView_StatusLabel_Special_Text                 // @" ->Text set via Method parameter: specialText<- "
Sezam/AGAutoLockView.m:67:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Semibold" size:20];
Sezam/AGAutoLockView.m:68:    self.titleLabel.text = @"AUTO-LOCK";
Sezam/AGAutoLockView.m:75:    self.autoLockDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoLockView.m:120:    self.autoLockEnabledCell.label.text = @"Auto-Lock Enabled";
Sezam/AGAutoLockView.m:131:    self.autoLockModeCell.textLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockView.m:133:    self.autoLockModeCell.textLabel.text = @"Auto-Lock When";
Sezam/AGAutoLockView.m:134:    self.autoLockModeCell.detailTextLabel.font = [UIFont fontWithName:@"ProximaNova-Light" size:17];
Sezam/AGAutoLockView.m:142://    self.autoLockTimingCell.timingDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:76:    self.view.titleLabel.text = @"AUTO-UNLOCK";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:79:    NSString *title = @"Location Confirmed";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:80:    NSString *paragraphPart1 = @"Exiting the boundary will set Auto-Unlock to";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:81:    NSString *paragraphBoldPart1 = @" Away";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:82:    NSString *paragraphPart2 = @" mode, ready to unlock your door when you return home.";
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:85:    NSString *fullText = [NSString stringWithFormat:@"%@\n%@%@%@", title, paragraphPart1, paragraphBoldPart1, paragraphPart2];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:93:                                     NSFontAttributeName: [UIFont fontWithName:@"ProximaNova-Regular" size:17],
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:108:    [titleAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:116:    [boldParagraphAttributes setObject:[UIFont fontWithName:@"ProximaNova-Semibold" size:17] forKey:NSFontAttributeName];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:125:    [self.view.actionButton setTitle:@"CONTINUE" forState:UIControlStateNormal];
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:148:    AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:149:                                                                   @"au_source":@"AutoUnlockSetup",
Sezam/AGAutoUnlockSetupLocationConfirmedController.m:150:                                                                   @"au_info":@{@"enabled":@(YES)}
Sezam/AGTextField.m:33:    if ([[[UIDevice currentDevice] systemVersion] compare:@"7.0" options:NSNumericSearch] != NSOrderedAscending) {
Sezam/AGTextField.m:35:        [[self placeholder] drawInRect:finalRect withAttributes:@{ NSFontAttributeName:[UIFont fontWithName:@"ProximaNova-Semibold" size:16.0], NSForegroundColorAttributeName:[UIColor colorWithWhite:0.6 alpha:1.0]}];
Sezam/AGAutoUnlockSettingsController.m:83:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlockSettingsController.m:84:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlockSettingsController.m:85:                                                                         @"au_cancel_type":@"AutoUnlockDisabled",
Sezam/AGAutoUnlockSettingsController.m:86:                                                                         @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockSettingsController.m:87:                                                                         @"au_info": @{
Sezam/AGAutoUnlockSettingsController.m:91:        NSString *eventDescription = @"Auto-Unlock set to Home mode because it was disabled";
Sezam/AGAutoUnlockSettingsController.m:95:    AGAnalyticsDiaryInfoData(@"AutoUnlockEnabledStatusChanged", (@{
Sezam/AGAutoUnlockSettingsController.m:96:                                                                   @"au_source":@"AutoUnlockSettings",
Sezam/AGAutoUnlockSettingsController.m:97:                                                                   @"au_info":@{@"enabled":@(self.view.enableAutoUnlockSwitch.isOn)}
Sezam/AGAutoUnlockSettingsController.m:99:    NSString *eventDescription = [NSString stringWithFormat:@"Auto-Unlock %@", (self.view.enableAutoUnlockSwitch.isOn ? @"enabled" : @"disabled")];
Sezam/AGAddDeviceViewController.m:54:    if ([AGUtility checkForAppFeature:@"showunity"]) {
Sezam/AGAddDeviceViewController.m:127:    AGTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"AddDeviceCell"];
Sezam/AGAddDeviceViewController.m:130:    cell.label.text = @"SET UP AN";
Sezam/AGAddDeviceViewController.m:133:        cell.label2.text = @"AUGUST SMART LOCK";
Sezam/AGAddDeviceViewController.m:137:        cell.label2.text = @"AUGUST DOORBELL CAM";
Sezam/AGAddDeviceViewController.m:143:        cell.label2.text = @"AUGUST CONNECT";
Sezam/AGAddDeviceViewController.m:147:            cell.label3.text = @"AUGUST CONNECT";
Sezam/AGAddDeviceViewController.m:158:        cell.label2.text = @"AUGUST SMART KEYPAD";
Sezam/AGAddDeviceViewController.m:164:            cell.label3.text = @"AUGUST SMART KEYPAD";
Sezam/AGAddDeviceViewController.m:179:        cell.label.text = @"SET UP A";
Sezam/AGAddDeviceViewController.m:180:        cell.label2.text = @"YALE SMART LOCK";
Sezam/AGAddDeviceViewController.m:202:            UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGAddDeviceViewController.m:203:            AGDoorbellSetupNavController *doorbellSetupNav = [storyboard instantiateViewControllerWithIdentifier:@"DoorbellSetupNav_v2"];
Sezam/AGAddDeviceViewController.m:207:            UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Turn WiFi On" message:@"Setting up a Doorbell requires WiFi connectivity." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGAddDeviceViewController.m:208:            [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGAddDeviceViewController.m:221:            [self performSegueWithIdentifier:@"AddDeviceToPickLock" sender:nil];
Sezam/AGAddDeviceViewController.m:233:            [self performSegueWithIdentifier:@"AddDeviceToPickLock" sender:nil];
Sezam/AGAddDeviceViewController.m:251:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/products/august-connect/"]];
Sezam/AGAddDeviceViewController.m:255:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://august.com/products/august-keypad/"]];
Sezam/AGAddDeviceViewController.m:266:        UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGAddDeviceViewController.m:278:        ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:controller];
Sezam/AGAddDeviceViewController.m:284:        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"KeypadSetup" bundle:[NSBundle mainBundle]];
Sezam/AGAddDeviceViewController.m:285:        AGKeypadSetupNavController *keypadSetup = [storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupNavController"];
Sezam/AGAddDeviceViewController.m:287:        ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:keypadSetup];
Sezam/AGAddDeviceViewController.m:302:    if ([segue.identifier isEqualToString:@"AddDeviceToPickLock"]) {
Sezam/AGAddDeviceViewController.m:319:    if ([segue.identifier isEqualToString:@"unwindToAddDeviceViewController"]) {
Sezam/AGLockOperationLog.m:21:static NSString* kAGAnalyticsDiaryCategory = @"LockMetrics";
Sezam/AGLockOperationLog.m:43:        NSDictionary *defaultLongLockConnectionValues = @{@"ShowedTryingToConnectPopup" : @"False",
Sezam/AGLockOperationLog.m:44:                                                          @"TryingToConnectResponse"    : @"None",
Sezam/AGLockOperationLog.m:45:                                                          @"ShowedNextToLockPopup"      : @"False",
Sezam/AGLockOperationLog.m:46:                                                          @"NextToLockResponse"         : @"None",
Sezam/AGLockOperationLog.m:47:                                                          @"ShowedGetConnectionHelpPopup" : @"False",
Sezam/AGLockOperationLog.m:48:                                                          @"GetConnectionHelpResponse"  : @"None",
Sezam/AGLockOperationLog.m:49:                                                          @"ShowedRemoteConnectTooltip" : @"False",
Sezam/AGLockOperationLog.m:50:                                                          @"ShowedConnectPromoPopup"    : @"False",
Sezam/AGLockOperationLog.m:51:                                                          @"ConnectPromoPopupResponse"  : @"None",
Sezam/AGLockOperationLog.m:52:                                                          @"ShowedBluetoothRangePopup"  : @"False"};
Sezam/AGLockOperationLog.m:80:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:93:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:96:        NSString *keyType = @"Online";
Sezam/AGLockOperationLog.m:99:                keyType = @"Online";
Sezam/AGLockOperationLog.m:101:                keyType = @"Offline";
Sezam/AGLockOperationLog.m:113:        NSString *lockId = (NSString *)[notification.userInfo objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:123:        NSString *lockId = (NSString *)[notification.userInfo objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:124:        NSNumber *batteryLevel = (NSNumber *)[notification.userInfo objectForKey:@"batteryLevel"];
Sezam/AGLockOperationLog.m:136:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:137:    NSString *lockStatus = (NSString *)[userInfoDictionary objectForKey:@"lockStatus"];
Sezam/AGLockOperationLog.m:148:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:149:    NSString *lockAction = (NSString *)[userInfoDictionary objectForKey:@"lockAction"];
Sezam/AGLockOperationLog.m:161:    NSString *lockId = (NSString *)[userInfoDictionary objectForKey:@"lockId"];
Sezam/AGLockOperationLog.m:162:    NSString *lockResponse = (NSString *)[userInfoDictionary objectForKey:@"lockResponse"];
Sezam/AGLockOperationLog.m:190:            lockOperationTerminationString = @"Unknown";
Sezam/AGLockOperationLog.m:193:            lockOperationTerminationString = @"OtherLock";
Sezam/AGLockOperationLog.m:196:            lockOperationTerminationString = @"DoorbellTab";
Sezam/AGLockOperationLog.m:199:            lockOperationTerminationString = @"ActivityFeedTab";
Sezam/AGLockOperationLog.m:202:            lockOperationTerminationString = @"GuestListTab";
Sezam/AGLockOperationLog.m:205:            lockOperationTerminationString = @"HouseSettingsTab";
Sezam/AGLockOperationLog.m:208:            lockOperationTerminationString = @"MyAccessTab";
Sezam/AGLockOperationLog.m:211:            lockOperationTerminationString = @"SideMenu";
Sezam/AGLockOperationLog.m:214:            lockOperationTerminationString = @"SideMenuViewAccount";
Sezam/AGLockOperationLog.m:217:            lockOperationTerminationString = @"SideMenuHomeButton";
Sezam/AGLockOperationLog.m:220:            lockOperationTerminationString = @"SideMenuAugustStoreButton";
Sezam/AGLockOperationLog.m:223:            lockOperationTerminationString = @"SideMenuAugustActiveMonitoring";
Sezam/AGLockOperationLog.m:226:            lockOperationTerminationString = @"SideMenuAugustAccess";
Sezam/AGLockOperationLog.m:229:            lockOperationTerminationString = @"SideMenuHelp";
Sezam/AGLockOperationLog.m:232:            lockOperationTerminationString = @"SideMenuDeviceSetup";
Sezam/AGLockOperationLog.m:235:            lockOperationTerminationString = @"SideMenuSupportMenu";
Sezam/AGLockOperationLog.m:238:            lockOperationTerminationString = @"SideMenuDebugMenu";
Sezam/AGLockOperationLog.m:241:            lockOperationTerminationString = @"KeyChain";
Sezam/AGLockOperationLog.m:244:            lockOperationTerminationString = @"ToRemoteOperation";
Sezam/AGLockOperationLog.m:247:            lockOperationTerminationString = @"LockReorder";
Sezam/AGLockOperationLog.m:250:            lockOperationTerminationString = @"RemoteStatusBySeamless";
Sezam/AGLockOperationLog.m:253:            lockOperationTerminationString = @"Logout";
Sezam/AGLockOperationLog.m:256:            lockOperationTerminationString = @"NotAuthorized";
Sezam/AGLockOperationLog.m:259:            lockOperationTerminationString = @"AppToBackground";
Sezam/AGLockOperationLog.m:320:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ShowedForceUnlockPopUp"];
Sezam/AGLockOperationLog.m:323:            [self.forceUnlockEventDictionary setObject:@"USERCANCEL" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:326:            [self.forceUnlockEventDictionary setObject:@"AUTOCANCEL" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:329:            [self.forceUnlockEventDictionary setObject:@"UNLOCK" forKey:@"ForceUnlockPopUpAction"];
Sezam/AGLockOperationLog.m:332:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ForceUnlockSuccess"];
Sezam/AGLockOperationLog.m:335:            [self.forceUnlockEventDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"ForceUnlockSuccess"];
Sezam/AGLockOperationLog.m:352:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"BridgeAssociated"];
Sezam/AGLockOperationLog.m:356:                self.bridgeType = @"UnknownBridge";
Sezam/AGLockOperationLog.m:359:                self.bridgeType = @"ConnectBridge";
Sezam/AGLockOperationLog.m:362:                self.bridgeType = @"DoorbellBridge";
Sezam/AGLockOperationLog.m:365:                self.bridgeType = @"HomekitBridge";
Sezam/AGLockOperationLog.m:368:                self.bridgeType = @"UnknownBridge";
Sezam/AGLockOperationLog.m:372:        self.bridgeType = @"NoBridge";
Sezam/AGLockOperationLog.m:373:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"BridgeAssociated"];
Sezam/AGLockOperationLog.m:376:        [lockMetricsDictionary setObject:self.bridgeType forKey:@"BridgeType"];
Sezam/AGLockOperationLog.m:381:        [lockMetricsDictionary setObject:currentUser.objectId forKey:@"UserId"];
Sezam/AGLockOperationLog.m:384:        [lockMetricsDictionary setObject:self.lock.objectId forKey:@"LockId"];
Sezam/AGLockOperationLog.m:388:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"HomeKitEnabled"];
Sezam/AGLockOperationLog.m:390:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"HomeKitEnabled"];
Sezam/AGLockOperationLog.m:393:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"KeypadAssociated"];
Sezam/AGLockOperationLog.m:395:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"KeypadAssociated"];
Sezam/AGLockOperationLog.m:400:    [lockMetricsDictionary setObject:lockOperationTerminationString forKey:@"HowLeft"];
Sezam/AGLockOperationLog.m:402:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.hasBLEInsecureConnection] forKey:@"BLEInsecureConnection"];  // BLEInsecureConnection
Sezam/AGLockOperationLog.m:407:            [lockMetricsDictionary setObject:insecureConnectionValue forKey:@"BLEInsecureConnectionTime"];
Sezam/AGLockOperationLog.m:414:        [lockMetricsDictionary setObject:connectTime forKey:@"ConnectTime"];                     //  ConnectTime – Time in seconds to connect to the lock after launching the view, [Event1]->[Event2]
Sezam/AGLockOperationLog.m:417:        [lockMetricsDictionary setObject:connectToTerminateTime forKey:@"ConnectToTerminateTime"];
Sezam/AGLockOperationLog.m:418:        if ([self.keyType isEqualToString:@"Offline"]) {
Sezam/AGLockOperationLog.m:419:            [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"OfflineKey"]; //  OfflineKey
Sezam/AGLockOperationLog.m:420:        } else if ([self.keyType isEqualToString:@"Online"]){
Sezam/AGLockOperationLog.m:421:            [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"OfflineKey"];
Sezam/AGLockOperationLog.m:423:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"ConnectedToLock"];
Sezam/AGLockOperationLog.m:426:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"ConnectedToLock"];                 //  ConnectedToLock
Sezam/AGLockOperationLog.m:430:        [lockMetricsDictionary setObject:self.lockStatus forKey:@"LockStatus"];
Sezam/AGLockOperationLog.m:434:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:YES] forKey:@"OperateAttempt"];                   //  OperateAttempt
Sezam/AGLockOperationLog.m:435:        [lockMetricsDictionary setObject:self.operationRequested forKey:@"OperationType"];       //  OperationType
Sezam/AGLockOperationLog.m:440:        [lockMetricsDictionary setObject:arriveToOperate forKey:@"ArriveToOperate"];
Sezam/AGLockOperationLog.m:441:        [lockMetricsDictionary setObject:connectToOperate forKey:@"ConnectToOperateTime"];
Sezam/AGLockOperationLog.m:443:        [lockMetricsDictionary setValue:[NSNumber numberWithBool:NO] forKey:@"OperateAttempt"];                   //  OperateAttempt
Sezam/AGLockOperationLog.m:447:        [lockMetricsDictionary setObject:self.operationResponse forKey:@"OperationResult"];      //  OperationResult
Sezam/AGLockOperationLog.m:450:        [lockMetricsDictionary setObject:operateTime forKey:@"OperateTime"];
Sezam/AGLockOperationLog.m:456:        if ([value isEqualToString:@"True"]) {
Sezam/AGLockOperationLog.m:458:        } else if ([value isEqualToString:@"False"]) {
Sezam/AGLockOperationLog.m:465:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.longLockPopUpDismissedByStatusSuccess] forKey:@"longLockPopUpDismissedByStatusSuccess"];
Sezam/AGLockOperationLog.m:467:    NSString *userType = isOwnerOfLock?@"Owner":@"Guest";
Sezam/AGLockOperationLog.m:468:    [lockMetricsDictionary setObject:userType forKey:@"UserType"];                               //  UserType
Sezam/AGLockOperationLog.m:470:    [lockMetricsDictionary setObject:numberOperations forKey:@"NumberOperations"];
Sezam/AGLockOperationLog.m:473:    [lockMetricsDictionary setObject:totalTime forKey:@"TotalTime"];                            //  TotalTime - Total time on lock screen in seconds, [Event1]->[Event5]
Sezam/AGLockOperationLog.m:480:        [lockMetricsDictionary setObject:locksInHouse forKey:@"LocksInHouse"];
Sezam/AGLockOperationLog.m:483:    [lockMetricsDictionary setObject:totalLocks forKey:@"TotalLocks"];
Sezam/AGLockOperationLog.m:487:            [lockMetricsDictionary setObject:@"AGCoreBluetooth" forKey:@"LastError"];
Sezam/AGLockOperationLog.m:488:            [lockMetricsDictionary setObject:@"BluetoothErrorIsPoweredOff" forKey:@"ErrorDetails"];;
Sezam/AGLockOperationLog.m:492:            [lockMetricsDictionary setObject:self.bleError.domain forKey:@"LastError"];
Sezam/AGLockOperationLog.m:497:                errorDetails = @"BluetoothErrorIsPoweredOff";
Sezam/AGLockOperationLog.m:499:                errorDetails = @"BluetoothErrorIsTemporarilyDown";
Sezam/AGLockOperationLog.m:501:                errorDetails = @"LockConnectionErrorDiscoverServices";
Sezam/AGLockOperationLog.m:503:                errorDetails = @"LockConnectionErrorDiscoverCharacteristics";
Sezam/AGLockOperationLog.m:505:                errorDetails = @"LockConnectionErrorTimeout";
Sezam/AGLockOperationLog.m:507:                errorDetails = @"LockConnectionErrorDisconnects";
Sezam/AGLockOperationLog.m:509:                errorDetails = @"BluetoothErrorIsPoweredOff";
Sezam/AGLockOperationLog.m:511:                errorDetails = @"BluetoothErrorIsTemporarilyDown";
Sezam/AGLockOperationLog.m:513:                errorDetails = @"LockSecurityErrorLockRandsErrorGeneric";
Sezam/AGLockOperationLog.m:515:                errorDetails = @"LockSecurityErrorLockRandsErrorConflict";
Sezam/AGLockOperationLog.m:517:                errorDetails = @"LockSecurityErrorBadLockresponse";
Sezam/AGLockOperationLog.m:519:                errorDetails = @"LockSecurityErrorBadChecksum";
Sezam/AGLockOperationLog.m:521:                errorDetails = @"LockSecurityErrorInitiateCommunication";
Sezam/AGLockOperationLog.m:523:                errorDetails = @"LockSecurityErrorDeviceBlacklisted";
Sezam/AGLockOperationLog.m:525:                errorDetails = @"LockSecurityErrorKeyChanged";
Sezam/AGLockOperationLog.m:527:                errorDetails = @"LockSecurityErrorChecksumDoesntWork";
Sezam/AGLockOperationLog.m:529:                errorDetails = @"LockSecurityErrorKeyNotDefinedInTable";
Sezam/AGLockOperationLog.m:531:                errorDetails = @"kLockSecurityErrorBadMagic";
Sezam/AGLockOperationLog.m:533:                errorDetails = [NSString stringWithFormat:@"Code: %lu", self.bleError.code];
Sezam/AGLockOperationLog.m:535:            [lockMetricsDictionary setObject:errorDetails forKey:@"ErrorDetails"];
Sezam/AGLockOperationLog.m:540:    [lockMetricsDictionary setObject:[NSNumber numberWithBool:self.hasLowBattery] forKey:@"LowBattery"];
Sezam/AGLockOperationLog.m:543:        [lockMetricsDictionary setObject:self.batteryLevel forKey:@"BatteryLevel"];
Sezam/AGLockSetupSuccessViewController.m:44:    NSString *numberOfDoorbellsWithoutLockAssociation = [NSString stringWithFormat:@"Count=%lu", unassociatedDoorbells.count];
Sezam/AGLockSetupSuccessViewController.m:70:    UIStoryboard *doorbellStoryboard = [UIStoryboard storyboardWithName:@"Doorbell" bundle:nil];
Sezam/AGLockSetupSuccessViewController.m:71:    AGDoorbellLockAssociationPickDeviceViewController *doorbellLockAssociationPickDeviceViewController = (AGDoorbellLockAssociationPickDeviceViewController *)[doorbellStoryboard instantiateViewControllerWithIdentifier:@"SyncDoorbellAndLockPickDevice"];
Sezam/AGLockSetupSuccessViewController.m:80:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"BridgeSetup" bundle:nil];
Sezam/AGLockSetupSuccessViewController.m:84:    ZoomInSegue * zoomInSegue = [[ZoomInSegue alloc] initWithIdentifier:@"" source:self destination:controller];
Sezam/AGDoorAjarTimingController.m:56:            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Error" message:@"There was an error updating Door Ajar Timing. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorAjarTimingController.m:57:            [alertController addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorAjarTimingController.m:88:    NSString *minutesStr = shouldShowMinutes ? [NSString stringWithFormat:@"%lim", (long)minutes] : @"";
Sezam/AGDoorAjarTimingController.m:89:    NSString *secondsStr = shouldShowSeconds ? [NSString stringWithFormat:@"%lis", (long)remainingSeconds] : @"";
Sezam/AGDoorAjarTimingController.m:90:    NSString *separatorStr = shouldShowSeparator ? @" : " : @"";
Sezam/AGDoorAjarTimingController.m:92:    NSString *timeDescription = [NSString stringWithFormat:@"%@%@%@", minutesStr, separatorStr, secondsStr];
Sezam/AGKeypadSetupScanViewController.m:76:                [self failWithError:@"App was closed mid-operation."];
Sezam/AGKeypadSetupScanViewController.m:99:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://store.august.com/#august-smart-keypad"]];
Sezam/AGKeypadSetupScanViewController.m:116:    NSArray *strings = @[ @"With August Smart Keypad, give guests without a smartphone access to your home with a personal entry code.",  @"Current guests can enjoy Keypad access in addition to their app access.", @"Add, revoke and change personal entry codes when you need to.", @"The emergency access code can be used to give immediate access to your lock, if you can’t give them a personal entry code." ];
Sezam/AGKeypadSetupScanViewController.m:143:    UIAlertController *controller = [self confirmQuitController:@"Quit Setup?" withMessage:@"Are you sure you want to quit Keypad setup?"];
Sezam/AGKeypadSetupScanViewController.m:150:    UIAlertAction *dismissAction = [UIAlertAction actionWithTitle:@"Quit" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeypadSetupScanViewController.m:160:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Continue" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
Sezam/AGKeypadSetupScanViewController.m:192:     navController.lock.associatedKeypad.objectId = @"asdfasfd";
Sezam/AGKeypadSetupScanViewController.m:193:     navController.userActivePin = @"12435";
Sezam/AGKeypadSetupScanViewController.m:194:     AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadTestCodeController"];
Sezam/AGKeypadSetupScanViewController.m:208:    UIViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupComplete"];
Sezam/AGKeypadSetupScanViewController.m:245:                [self partialSuccessWithError:@"Your Keypad is set up but the lock is is not configured. Setup will be automatically be completed the next time you connect to your lock."];
Sezam/AGKeypadSetupScanViewController.m:257:    if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGKeypadSetupScanViewController.m:270:    navController.serialNumberOfChosenKeypad = [selectedKeypadInfo objectForKey:@"serial"];
Sezam/AGKeypadSetupScanViewController.m:272:    self.progressMeterLabel.text = @"Associating Keypad";
Sezam/AGKeypadSetupScanViewController.m:291:                        [self failWithError:@"Trouble connecting to server."];
Sezam/AGKeypadSetupScanViewController.m:301:            AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:318:        if ([[NSUserDefaults standardUserDefaults] boolForKey: @"DebugAddLock"]) {
Sezam/AGKeypadSetupScanViewController.m:319:            AGDebugPickKeypadViewController *keypadPicker = (AGDebugPickKeypadViewController *)[self.storyboard instantiateViewControllerWithIdentifier:@"DebugPickKeypad"];
Sezam/AGKeypadSetupScanViewController.m:336:        NSString *lastResetCode = [[NSUserDefaults standardUserDefaults] stringForKey:@"LastKeypadResetCode"];
Sezam/AGKeypadSetupScanViewController.m:349:        [self failWithError:@"Could not complete communication with Keypad."];
Sezam/AGKeypadSetupScanViewController.m:355:        BOOL forceOTAOnSetupAlways = [[NSUserDefaults standardUserDefaults] boolForKey: @"AlwaysKeypadOTAOnSetup"];
Sezam/AGKeypadSetupScanViewController.m:358:            navController.lock.associatedKeypad.currentFirmwareVersion = @"0.0.1";
Sezam/AGKeypadSetupScanViewController.m:388:                [self failWithError:@"Server problem checking keypad version."];
Sezam/AGKeypadSetupScanViewController.m:404:        self.progressMeterLabel.text = @"Communicating With Server";
Sezam/AGKeypadSetupScanViewController.m:409:                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:438:                            [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:441:                        NSString *emergencyPincode = responseDict[@"pin"];
Sezam/AGKeypadSetupScanViewController.m:445:                                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:448:                            NSString *emergencyUserID =  [dict objectForKey:@"id"];
Sezam/AGKeypadSetupScanViewController.m:449:                            NSString *slot = dict[@"slot"];
Sezam/AGKeypadSetupScanViewController.m:453:                                    [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:463:                                        [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:468:                                    NSString *userPincode = responseDict[@"pin"];
Sezam/AGKeypadSetupScanViewController.m:491:                [self failWithError:@"Trouble communicating to server."];
Sezam/AGKeypadSetupScanViewController.m:533:    return @"";
Sezam/AGKeypadSetupScanViewController.m:614:    self.progressMeterLabel.text = @"Communicating with Lock";
Sezam/AGKeypadSetupScanViewController.m:630:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Connection Problem" message:@"We had trouble connecting to your lock to complete setup. Make sure your are in bluetooth range of the lock." delegate:self cancelButtonTitle:@"Skip" otherButtonTitles:@"Try Again", nil];
Sezam/AGKeypadSetupScanViewController.m:692:                    [self partialSuccessWithError:@"Your keypad was set up but we failed to update your entry codes to the lock."];
Sezam/AGKeypadSetupScanViewController.m:696:            [self partialSuccessWithError:@"Your keypad was set up but we had a network error before updating your entry codes to the lock."];
Sezam/AGKeypadSetupScanViewController.m:711:    AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:719:    AGKeypadSetupFailedViewController *vc =[self.storyboard instantiateViewControllerWithIdentifier:@"KeypadSetupFailed"];
Sezam/AGKeypadSetupScanViewController.m:766:        NSData *d  = [dict objectForKeyedSubscript:@"data"];
Sezam/AGKeypadSetupScanViewController.m:772:            self.progressMeterLabel.text = @"Updating Firmware...";
Sezam/AGKeypadSetupScanViewController.m:780:            [self failWithError:@"Cannot update Keypad firmware."];
Sezam/AGKeypadSetupScanViewController.m:806:        [self failWithError:@"We had a problem updating the Keypad firmware."];
Sezam/AGLockSetupDriver.m:54:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockSetupDriver.m:55:    UIViewController *beginVC = [storyboard instantiateViewControllerWithIdentifier:@"PickLockTypeViewController"];
Sezam/AGLockSetupDriver.m:64:    UIStoryboard* storyboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:nil];
Sezam/AGLockSetupDriver.m:65:    AGTwoStepChecklistViewController *checkListVC = [storyboard instantiateViewControllerWithIdentifier:@"AGTwoStepChecklistViewController"];
Sezam/AGLockSetupDriver.m:93:    AGLockSetupState state = [noti.userInfo[@"lockSetupState"] integerValue];
Sezam/AGHomeKitTestController.m:112:    self.testItemOptions = @[@"HK State", @"All HK",@"Stress Test", @"August Get State", @"Big Data", @"All"];
Sezam/AGHomeKitTestController.m:141:        [dict setObject:theLock forKey:@"lock"];
Sezam/AGHomeKitTestController.m:149:            [dict setObject:accessoryToUse forKey:@"hklock"];
Sezam/AGHomeKitTestController.m:160:    NSString *advState = @"Unknown";
Sezam/AGHomeKitTestController.m:163:            advState = @"HomeKit and August Advertising";
Sezam/AGHomeKitTestController.m:166:            advState = @"HomeKit Advertising Only";
Sezam/AGHomeKitTestController.m:169:            advState = @"August Advertising Only";
Sezam/AGHomeKitTestController.m:247:    UIAlertView *changeAdvertising = [[UIAlertView alloc] initWithTitle:@"Change Advertising" message:@"Change the advertising model" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"August Protocol Only", @"August and HomeKit", @"HomeKit Only", nil];
Sezam/AGHomeKitTestController.m:255:    UIAlertView *setTiming = [[UIAlertView alloc] initWithTitle:@"Start Loop" message:@"Set the time you would like between each operation." delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"0 Seconds", @"0.2 Seconds", @"0.5 Seconds", @"1 Second", @"5 Seconds", @"10 Seconds", @"15 Seconds", @"Random", nil];
Sezam/AGHomeKitTestController.m:265:    [self.startStopTestButton setTitle:@"Stop" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:295:    AGTableViewCell *cell = (AGTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"TestCell"];
Sezam/AGHomeKitTestController.m:300:            cell.label.text  = @"Identify";
Sezam/AGHomeKitTestController.m:303:            cell.label.text  = @"Get State";
Sezam/AGHomeKitTestController.m:306:            cell.label.text  = @"Lock";
Sezam/AGHomeKitTestController.m:309:            cell.label.text  = @"Unlock";
Sezam/AGHomeKitTestController.m:312:            cell.label.text  = @"Get State (August Protocol)";
Sezam/AGHomeKitTestController.m:315:            cell.label.text  = @"Big Data (August Protocol)";
Sezam/AGHomeKitTestController.m:330:        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"An operation is already in progress" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGHomeKitTestController.m:342:            self.curOperationInfoLabel.text = @"Identify Operation";
Sezam/AGHomeKitTestController.m:343:            self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:347:                    self.curOperationResultLabel.text = @"Complete";
Sezam/AGHomeKitTestController.m:377:            self.curOperationInfoLabel.text = @"Uknown test selected";
Sezam/AGHomeKitTestController.m:378:            self.curOperationResultLabel.text = @"";
Sezam/AGHomeKitTestController.m:387:    self.curOperationInfoLabel.text = @"Post Data August Protocol";
Sezam/AGHomeKitTestController.m:388:    self.curOperationResultLabel.text = @"Connecting...";
Sezam/AGHomeKitTestController.m:398:            self.curOperationResultLabel.text = @"Sending 90 Commands";
Sezam/AGHomeKitTestController.m:404:                    self.curOperationResultLabel.text = @"Success";
Sezam/AGHomeKitTestController.m:407:                    self.curOperationResultLabel.text = @"Error";
Sezam/AGHomeKitTestController.m:414:            self.curOperationResultLabel.text = @"Failed to connect";
Sezam/AGHomeKitTestController.m:430:    self.curOperationInfoLabel.text = @"Get Status August Protocol";
Sezam/AGHomeKitTestController.m:431:    self.curOperationResultLabel.text = @"Connecting...";
Sezam/AGHomeKitTestController.m:436:            self.curOperationResultLabel.text = @"Connected";
Sezam/AGHomeKitTestController.m:444:                    self.curOperationResultLabel.text = [NSString stringWithFormat:@"Success: %@", returnedValue];
Sezam/AGHomeKitTestController.m:461:            self.curOperationResultLabel.text = @"Failed to connect";
Sezam/AGHomeKitTestController.m:478:    self.curOperationInfoLabel.text = @"Get Status Operation";
Sezam/AGHomeKitTestController.m:479:    self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:505:                            self.curOperationResultLabel.text = @"Success: Locked";
Sezam/AGHomeKitTestController.m:508:                            self.curOperationResultLabel.text = @"Success: Unlocked";
Sezam/AGHomeKitTestController.m:511:                            self.curOperationResultLabel.text = @"Success: Jammed";
Sezam/AGHomeKitTestController.m:513:                            self.curOperationResultLabel.text = @"Success: Unknown state";
Sezam/AGHomeKitTestController.m:532:        self.lastError = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:534:        self.curOperationResultLabel.text = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:542:    self.lastError = @"Unexpected lock disconnect";
Sezam/AGHomeKitTestController.m:553:    self.curOperationInfoLabel.text = isLock?@"HK Lock Operation":@"HK Unlock Operation";
Sezam/AGHomeKitTestController.m:554:    self.curOperationResultLabel.text = @"Calling...";
Sezam/AGHomeKitTestController.m:570:                            self.curOperationResultLabel.text = @"Complete";
Sezam/AGHomeKitTestController.m:590:            self.curOperationResultLabel.text = @"Lock characteristic not found";
Sezam/AGHomeKitTestController.m:618:    NSString *statsString = [NSString stringWithFormat:@"Finished %d attempts.\n\n%d successes\n\n%d HomeKit failures\n\n %d August failures", self.numberOperationsStarted, self.numberOfSuccess, self.numberOfHKFailure, self.numberOfAugFailure ];
Sezam/AGHomeKitTestController.m:619:    UIAlertView *doneAlert = [[UIAlertView alloc] initWithTitle:@"Stopped Operations" message:statsString delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
Sezam/AGHomeKitTestController.m:629:        [self.startStopTestButton setTitle:@"Start" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:632:        if ([self.testType isEqualToString:@"Stress Test"] == false) {
Sezam/AGHomeKitTestController.m:647:    if ([self.testType isEqualToString:@"Stress Test"]) {
Sezam/AGHomeKitTestController.m:665:        self.agLock = [d objectForKey:@"lock"];
Sezam/AGHomeKitTestController.m:673:        self.homeKitLock = [d objectForKey:@"hklock"];
Sezam/AGHomeKitTestController.m:707:        [self.startStopTestButton setTitle:@"Stop" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:722:            self.curOperationInfoLabel.text = [NSString stringWithFormat:@"Stress Test %d", self.stressTestCount];
Sezam/AGHomeKitTestController.m:734:        return [NSString stringWithFormat:@"%@", [self.testCountOptions objectAtIndex:row]];
Sezam/AGHomeKitTestController.m:740:    if ([self.testType isEqualToString:@"Stress Test"]) {
Sezam/AGHomeKitTestController.m:748:            self.lastError = @"";
Sezam/AGHomeKitTestController.m:750:        NSDictionary *operationStats = @{@"priorwait":[NSNumber numberWithFloat:self.curDelayTime], @"duration": [NSNumber numberWithFloat:-[self.timeStartedOperation timeIntervalSinceDate:[NSDate date]]], @"success":[NSNumber numberWithBool:self.wasSuccessful], @"errorinfo":self.lastError, @"time":[NSDate date]};
Sezam/AGHomeKitTestController.m:775:        [self.startStopTestButton setTitle:@"Start" forState:UIControlStateNormal];
Sezam/AGHomeKitTestController.m:786:            if ([self.testType isEqualToString:@"All"]) {
Sezam/AGHomeKitTestController.m:805:            if ([self.testType isEqualToString:@"All HK"]) {
Sezam/AGHomeKitTestController.m:821:            if ([self.testType isEqualToString:@"HK State"]) {
Sezam/AGHomeKitTestController.m:824:            if ([self.testType isEqualToString:@"August Get State"]) {
Sezam/AGHomeKitTestController.m:827:            if ([self.testType isEqualToString:@"Big Data"]) {
Sezam/AGHomeKitTestController.m:846:            self.curOperationResultLabel.text = @"Success: Locked";
Sezam/AGHomeKitTestController.m:849:            self.curOperationResultLabel.text = @"Success: Unlocked";
Sezam/AGHomeKitTestController.m:852:            self.curOperationResultLabel.text = @"Success: Jammed";
Sezam/AGHomeKitTestController.m:854:            self.curOperationResultLabel.text = @"Success: Unknown state";
Sezam/AGHomeKitTestController.m:865:            self.doorStateLabel.text = @"Door State: Open";
Sezam/AGHomeKitTestController.m:868:            self.doorStateLabel.text = @"Door State: Closed";
Sezam/AGWeeklyRecurrencePickerController.m:77:    self.timeOfDayPickerController = (AGInviteEditDatePickerViewController *)[[UIStoryboard storyboardWithName:@"GuestList" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"AGInviteEditDatePickerViewController"];
Sezam/AGWeeklyRecurrencePickerController.m:184:        [dateFormatter setDateFormat:@"h:mma"];
Sezam/AGWeeklyRecurrencePickerController.m:186:        [dateFormatter setDateFormat:@"h:mma z"];
Sezam/AGHomeKitCreateRoomViewController.m:26:    self.roomNameTextField.text = @"Living Room";
Sezam/AGHomeKitCreateRoomViewController.m:27:    self.instructionLabel.text = [NSString stringWithFormat:@"Choose a name for the new room in %@", [self navController].selectedHome.name];
Sezam/AGHomeKitCreateRoomViewController.m:67:                    NSString *errorMsg = [NSString stringWithFormat: @"An Error Occurred Creating a New HomeKit Room. %@", [AGHomeKitManager homeKitErrorMessage:error]];
Sezam/AGHomeKitCreateRoomViewController.m:70:                    [AGUtility showError:@"An Error Occurred Creating a New HomeKit Room." inViewController:self];
Sezam/AGHomeKitCreateRoomViewController.m:75:                UIViewController *vc = [self.storyboard instantiateViewControllerWithIdentifier:@"HomeKitComplete"];
Sezam/AGInstaToggleState.m:23:    NSString *state = @"Unknown";
Sezam/AGInstaToggleState.m:26:            state = @"Off";
Sezam/AGInstaToggleState.m:29:            state = @"Toggle";
Sezam/AGInstaToggleState.m:32:            state = @"Lock";
Sezam/AGInstaToggleState.m:36:            state = @"Unlock";
Sezam/AGInstaToggleState.m:41:    return [NSString stringWithFormat:@"August toggle state %@", state];
Sezam/AGInstaToggleState.m:48:    if ([tString isEqualToString:@"lock"])
Sezam/AGInstaToggleState.m:50:    if ([tString isEqualToString:@"unlock"])
Sezam/AGInstaToggleState.m:52:    if ([tString isEqualToString:@"toggle"])
Sezam/AGEmailVerifyViewController.m:97:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:108:                            [self performSegueWithIdentifier:@"EmailVerifyToNewPassword" sender:nil];
Sezam/AGEmailVerifyViewController.m:133:                                        [self performSegueWithIdentifier:@"EmailVerifyToAccountCreated" sender:nil];
Sezam/AGEmailVerifyViewController.m:148:                                [self performSegueWithIdentifier:@"EmailVerifyToPhoneVerify" sender:nil];
Sezam/AGEmailVerifyViewController.m:154:                                [self performSegueWithIdentifier:@"EmailVerifyToAddPhone" sender:nil];
Sezam/AGEmailVerifyViewController.m:182:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:193:            [errorAlertController addAction:[UIAlertAction actionWithTitle:@"OK"
Sezam/AGEmailVerifyViewController.m:208:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"message://"]];
Sezam/AGEmailVerifyViewController.m:223:    if ([segue.identifier isEqualToString:@"EmailVerifyToAddPhone"]) {
Sezam/AGEmailVerifyViewController.m:228:    } else if  ([segue.identifier isEqualToString:@"EmailVerifyToResetPassword"]) {
Sezam/AGEmailVerifyViewController.m:235:    else if ([segue.identifier isEqualToString:@"EmailVerifyToAccountCreated"]) {
Sezam/AGEmailVerifyViewController.m:238:    }else if ([segue.identifier isEqualToString:@"EmailVerifyToNewPassword"])
Sezam/AGEmailVerifyViewController.m:241:    } else if ([segue.identifier isEqualToString:@"EmailVerifyToPhoneVerify"]){
Sezam/AGNestStructureMapViewController.m:45:            NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestStructureMapViewController.m:46:            self.houseSelectLabel.text = [NSString stringWithFormat:@"Which August house would you like to pair with your Nest home \"%@\"?", structureName];
Sezam/AGNestStructureMapViewController.m:57:    self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Loading Houses..."] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:62:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading August houses:\n\n%@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:68:                if ([house.houseType isEqualToString: @"superuser"]) {
Sezam/AGNestStructureMapViewController.m:112:    NSString *structureStructureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:115:        NSString *houseStructureID = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:144:    AGCollectionViewCell * cell = [self.collectionView dequeueReusableCellWithReuseIdentifier:@"CELL" forIndexPath:indexPath];
Sezam/AGNestStructureMapViewController.m:159:        NSString *houseStructureID = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:161:        NSString *structureStructureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:182:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:185:            self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Removing %@ from Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:190:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:205:        NSString *structureID = [structureDict objectForKey:@"structureID"];
Sezam/AGNestStructureMapViewController.m:206:        NSString *structureName = [structureDict objectForKey:@"structureName"];
Sezam/AGNestStructureMapViewController.m:213:    self.loadingAlertView = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"Linking %@ to Nest", house.name] message:nil delegate:self cancelButtonTitle:nil otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:216:    NSString *structureIDMappedToHouse = [house.nestConnectInfo objectForKey:@"StructureID"];
Sezam/AGNestStructureMapViewController.m:222:                UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", currentMappedHouse.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:236:                    UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error removing %@ from Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:255:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error linking %@ to Nest:\n\n%@", house.name, error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:263:                    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Error" message:[NSString stringWithFormat:@"Error loading Nest objects: %@", error.localizedDescription] delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGNestStructureMapViewController.m:286:    [self performSegueWithIdentifier:@"nestStructureMapToNestConfirm" sender:nil];
Sezam/AGNestStructureMapViewController.m:295:    if ([segue.identifier isEqualToString:@"nestStructureMapToNestConfirm"]) {
Sezam/AGAddPhoneNumberViewController.m:57:    NSString * message = @"This person is already a user of this doorbell";
Sezam/AGAddPhoneNumberViewController.m:103:            [self performSegueWithIdentifier:@"AddPhoneNumberToAddFirstAndLastName" sender:nil];
Sezam/AGAddPhoneNumberViewController.m:108:            [self performSegueWithIdentifier:@"AddPhoneNumberToInviteUserExists" sender:self];
Sezam/AGAddPhoneNumberViewController.m:115:    if (![self.tempNumFromAddressBook isEqual:@""]) {
Sezam/AGAddPhoneNumberViewController.m:116:        if (![sender isEqual:@"+1"])
Sezam/AGAddPhoneNumberViewController.m:136:    self.tempNumFromAddressBook = @"";
Sezam/AGAddPhoneNumberViewController.m:151:    [self.countryCodeControl.inputTextField setValue:@"BodyGrayLight" forKey:@"nuiClass"];
Sezam/AGUnityModuleRegisterViewController.m:50:    _registerStateView = [[[NSBundle mainBundle] loadNibNamed:@"AGUnityModuleStateView" owner:self options:nil] firstObject];
Sezam/AGUnityModuleRegisterViewController.m:69:            @(AGUnityModuleRegisterStateBatteryInfo): @"Your lock needs to be restarted while the module is installed.",
Sezam/AGUnityModuleRegisterViewController.m:70:            @(AGUnityModuleRegisterStateConfirm): @"Please follow the instructions below to register your August module.",
Sezam/AGUnityModuleRegisterViewController.m:71:            @(AGUnityModuleRegisterStateFailed): @"There was an error registering your August module. Please try again.",
Sezam/AGUnityModuleRegisterViewController.m:72:            @(AGUnityModuleRegisterStateFinished): @"Your August module has been successfully registered.",
Sezam/AGUnityModuleRegisterViewController.m:76:            @(AGUnityModuleRegisterStateBatteryInfo):@" • \tRemove a battery from your lock\n"
Sezam/AGUnityModuleRegisterViewController.m:79:            @(AGUnityModuleRegisterStateConfirm): @" •\tEnter the master PIN code on your lock, then the gear button.\n"
Sezam/AGUnityModuleRegisterViewController.m:126:        heroImgName = @"unity_header_image_remove_battery";
Sezam/AGUnityModuleRegisterViewController.m:128:        heroImgName = @"unity_setup";
Sezam/AGUnityModuleRegisterViewController.m:230:	dict[@"manufacturer"] = @"yale";
Sezam/AGUnityModuleRegisterViewController.m:231:	dict[@"serialNumber"] = responseDict[@"hostModelID"];
Sezam/AGUnityModuleRegisterViewController.m:232:	dict[@"productID"] = responseDict[@"productID"];
Sezam/AGUnityModuleRegisterViewController.m:233:	dict[@"productTypeID"] = responseDict[@"productTypeID"];
Sezam/AGUnityModuleRegisterViewController.m:260:        [self performSegueWithIdentifier:@"lockSetupToSetupOTA" sender:nil];
Sezam/AGUnityModuleRegisterViewController.m:263:    operationItem.label = @"Clear all pin codes";
Sezam/AGUnityModuleRegisterViewController.m:278:    UIStoryboard *augustStoryboard = [UIStoryboard storyboardWithName:@"AugustStoryboard" bundle:[NSBundle mainBundle]];
Sezam/AGUnityModuleRegisterViewController.m:279:    AGInstallGuideWebViewController *webVC = [augustStoryboard instantiateViewControllerWithIdentifier:@"AGInstallGuideWebViewController"];
Sezam/AGUnityModuleRegisterViewController.m:352:        BOOL isInitialState = [returnedValue isEqual:@"kAugLockState_Init"];
Sezam/AGUnityModuleRegisterViewController.m:385:    if([segue.identifier isEqualToString:@"lockSetupToSetupOTA"]) {
Sezam/AGAutoLockTimingCell.m:37:    self.titleLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockTimingCell.m:43:    self.timingLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:17];
Sezam/AGAutoLockTimingCell.m:54:    self.timingDescriptionLabel.font = [UIFont fontWithName:@"ProximaNova-Regular" size:13];
Sezam/AGAutoLockTimingCell.m:78:        self.timingDescriptionLabel.text = @"Re-Lock will lock your door if it has been unlocked, but not opened within the specified time.";
Sezam/AGAutoLockTimingCell.m:80:        self.timingDescriptionLabel.text = @"The timer will start when your door is closed.";
Sezam/AGImageQualityViewController.m:76:    NSArray *titles = @[@"Contrast", @"Brightness", @"Color Saturation", @"Sharpness", @"Hue Change", @"Automatic Contrast Compensation", @"Backlight Compensation"];
Sezam/AGImageQualityViewController.m:157:    cell.numberLabel.text = [NSString stringWithFormat:@"%d", value];
Sezam/AGImageQualityViewController.m:173:            NSString *msg = [NSString stringWithFormat:@"Error updating %@", model.title];
Sezam/AGImageQualityViewController.m:184:    UIAlertController *alerVC = [UIAlertController alertControllerWithTitle:@"Error"
Sezam/AGImageQualityViewController.m:185:                                                                    message:[NSString stringWithFormat:@"Error updating %@", msg]
Sezam/AGImageQualityViewController.m:187:    UIAlertAction *defaultAction = [UIAlertAction actionWithTitle:@"OK"
Sezam/AGImageQualityViewController.m:214:            NSString *msg = [NSString stringWithFormat:@"Error updating %@", model.title];
Sezam/AGImageQualityViewController.m:245:        AGTitleBtnCell *cell = [tableView dequeueReusableCellWithIdentifier:@"TitleBtnCell"];
Sezam/AGImageQualityViewController.m:247:            cell = [[AGTitleBtnCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"TitleBtnCell"];
Sezam/AGImageQualityViewController.m:253:        AGTableViewWithSliderCell *cell = [tableView dequeueReusableCellWithIdentifier:@"SliderCell"];
Sezam/AGImageQualityViewController.m:255:            cell = [[AGTableViewWithSliderCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"SliderCell"];
Sezam/AGImageQualityViewController.m:268:        cell.numberLabel.text = [NSString stringWithFormat:@"%d", model.value.intValue];
Sezam/AGAutoUnlocker.m:149:        NSAssert(record, @"An AutoUnlocker can't be used if its not persisted");
Sezam/AGAutoUnlocker.m:207:    NSNumber *homeRegionRadiusNum = [AGUtility getAppFeatureNumber:@"AutoUnlockInnerHomeRegionRadius"];
Sezam/AGAutoUnlocker.m:229:    AGCircularGeoRegion *innerEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self innerGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"inner"]];
Sezam/AGAutoUnlocker.m:231:    AGCircularGeoRegion *middleEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self middleGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"middle"]];
Sezam/AGAutoUnlocker.m:233:    AGCircularGeoRegion *outerEntranceRegion = [[AGCircularGeoRegion alloc] initWithCenter:record.region.center radius:[self outerGeofenceEntranceRadius] identifier:[NSString stringWithFormat:@"%@-%@", record.region.identifier, @"outer"]];
Sezam/AGAutoUnlocker.m:289:    NSNumber *innerGeofenceEntranceRadiusNum = [AGUtility getAppFeatureNumber:@"AutoUnlockInnerGeofenceEntranceRadius"];
Sezam/AGAutoUnlocker.m:290:    if (innerGeofenceEntranceRadiusNum && [AGFeatureManager enabled:@"AutoUnlockCustomInnerGeofenceEntranceRadius"]) {
Sezam/AGAutoUnlocker.m:432:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"]) {
Sezam/AGAutoUnlocker.m:433:        [[AGAutoUnlockNotificationHandler new] showGenericNotification:@"Debug: Detected spurious exit while connected to home wifi network. This represents a slight amount of wasted energy."];
Sezam/AGAutoUnlocker.m:465:    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"]) {
Sezam/AGAutoUnlocker.m:466:        [[AGAutoUnlockNotificationHandler new] showGenericNotification:@"Debug: Detected spurious exit via accurate location services. This represents a slight amount of wasted energy."];
Sezam/AGAutoUnlocker.m:476:    NSDictionary *lockIDToUUIDMap = [[NSUserDefaults standardUserDefaults] objectForKey:@"lockIDToUUIDMap"];
Sezam/AGAutoUnlocker.m:480:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:481:                                                                         @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:482:                                                                         @"au_cancel_type":@"UUIDNotInAugustCache",
Sezam/AGAutoUnlocker.m:483:                                                                         @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:484:                                                                         @"au_info": @{
Sezam/AGAutoUnlocker.m:502:    self.bleRegionMonitor = [[AGBLERegionMonitor alloc] initWithMonitorID:[NSString stringWithFormat:@"AGAutoUnlocker-%@", self.lock.objectId] regionUUID:deviceUUID];
Sezam/AGAutoUnlocker.m:519:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:520:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:521:                                                                     @"au_cancel_type":@"UUIDNotInOSCache",
Sezam/AGAutoUnlocker.m:522:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:523:                                                                     @"au_info": @{
Sezam/AGAutoUnlocker.m:576:            NSString *robustUnlockerError = error.userInfo[@"AGError"];
Sezam/AGAutoUnlocker.m:578:                robustUnlockerError = @"NotUnlockerError";
Sezam/AGAutoUnlocker.m:581:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:582:                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:583:                                                                             @"au_cancel_type":@"BLEOperationError",
Sezam/AGAutoUnlocker.m:584:                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:585:                                                                             @"au_info":@{
Sezam/AGAutoUnlocker.m:586:                                                                                     @"ble_error":error.description,
Sezam/AGAutoUnlocker.m:587:                                                                                     @"unlocker_error":robustUnlockerError,
Sezam/AGAutoUnlocker.m:595:            AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:596:                                                                             @"au_result":@"Success",
Sezam/AGAutoUnlocker.m:597:                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:598:                                                                             @"au_info": @{
Sezam/AGAutoUnlocker.m:667:        NSMutableDictionary *exitEventInfoDict = [NSMutableDictionary dictionaryWithDictionary:@{@"notification_shown":@(didShowImmediateReentryNotification)}];
Sezam/AGAutoUnlocker.m:670:                                                                                             @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:671:                                                                                             @"au_cancel_type":@"ImmediateBLERegionEntryAfterGeofenceExit",
Sezam/AGAutoUnlocker.m:672:                                                                                             @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:673:                                                                                             @"au_info": @{
Sezam/AGAutoUnlocker.m:678:        analyticsDict[@"au_exit_info"] = exitEventInfoDict;
Sezam/AGAutoUnlocker.m:680:        AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", analyticsDict);
Sezam/AGAutoUnlocker.m:811:    NSString *wifiEnabledStr = [AGUtility wiFiEnabledState] == AGWifiStateEnabled ? @"true" : @"false";
Sezam/AGAutoUnlocker.m:813:    AGAnalyticsDiaryInfoData(@"AutoUnlockExitReverified", (@{
Sezam/AGAutoUnlocker.m:814:                                                                    @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:815:                                                                    @"au_info":@{
Sezam/AGAutoUnlocker.m:816:                                                                            @"wifi_enabled":wifiEnabledStr,
Sezam/AGAutoUnlocker.m:817:                                                                            @"distance_from_home":@([homeLocation distanceFromLocation:verifiedExitLocation]),
Sezam/AGAutoUnlocker.m:818:                                                                            @"exit_accuracy":@(verifiedExitLocation.horizontalAccuracy),
Sezam/AGAutoUnlocker.m:819:                                                                            @"geofence_size":@(record.region.radius),
Sezam/AGAutoUnlocker.m:820:                                                                            @"reverification_cause":[self awayModeCauseLogDescriptionFromEnum:record.awayModeCause]
Sezam/AGAutoUnlocker.m:830:    NSString *wifiEnabledStr = [AGUtility wiFiEnabledState] == AGWifiStateEnabled ? @"true" : @"false";
Sezam/AGAutoUnlocker.m:832:    AGAnalyticsDiaryInfoData(@"AutoUnlockInitiateUnlockAttempt", (@{
Sezam/AGAutoUnlocker.m:833:                                                                    @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:834:                                                                    @"au_initiation_type":@"ExitedHomeArea",
Sezam/AGAutoUnlocker.m:835:                                                                    @"au_info":@{
Sezam/AGAutoUnlocker.m:836:                                                                            @"wifi_enabled":wifiEnabledStr,
Sezam/AGAutoUnlocker.m:837:                                                                            @"distance_from_home":@([homeLocation distanceFromLocation:verifiedExitLocation]),
Sezam/AGAutoUnlocker.m:838:                                                                            @"exit_accuracy":@(verifiedExitLocation.horizontalAccuracy),
Sezam/AGAutoUnlocker.m:839:                                                                            @"geofence_size":@(record.region.radius)
Sezam/AGAutoUnlocker.m:850:                                                                                  @"description":@"Exited home area"
Sezam/AGAutoUnlocker.m:851:                                                                                  } identifier:@"ExitHomeArea"]];
Sezam/AGAutoUnlocker.m:855:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:856:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:857:                                                                     @"au_cancel_type":@"AppForceQuit",
Sezam/AGAutoUnlocker.m:858:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:859:                                                                     @"au_info": @{
Sezam/AGAutoUnlocker.m:870:                                                                                  @"description":@"Auto-Unlock set to Home mode because of device reboot"
Sezam/AGAutoUnlocker.m:871:                                                                                  } identifier:@"AutoUnlockSetToHomeModeBecausePhoneRestart"]];
Sezam/AGAutoUnlocker.m:873:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:874:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:875:                                                                     @"au_cancel_type":@"DeviceReboot",
Sezam/AGAutoUnlocker.m:876:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:877:                                                                     @"au_info":@{
Sezam/AGAutoUnlocker.m:878:                                                                                @"reboot_date_diff":@([AGAppSessionMonitor sharedInstance].rebootDateTimeDifferenceSinceLastLaunch),
Sezam/AGAutoUnlocker.m:889:                                                                                  @"description":@"Auto-Unlock set to Home mode because you had been near home too long without unlocking"
Sezam/AGAutoUnlocker.m:890:                                                                                } identifier:@"AutoUnlockSetToHomeModeBecauseAwayModeInHomeRegionTooLong"]];
Sezam/AGAutoUnlocker.m:892:    AGAnalyticsDiaryInfoData(@"AutoUnlockUnlockAttemptCompleted", (@{
Sezam/AGAutoUnlocker.m:893:                                                                     @"au_result":@"Cancel",
Sezam/AGAutoUnlocker.m:894:                                                                     @"au_cancel_type":@"AwayModeInHomeRegionTooLong",
Sezam/AGAutoUnlocker.m:895:                                                                     @"au_source":@"AutoUnlock",
Sezam/AGAutoUnlocker.m:896:                                                                     @"au_info":@{
Sezam/AGAutoUnlocker.m:897:                                                                             @"home_region_duration":@(durationInHomeRegion),
Sezam/AGAutoUnlocker.m:923:    [[NSNotificationCenter defaultCenter] postNotificationName:kAGAutoUnlockerUpdatedNotification object:nil userInfo:@{@"AutoUnlocker":self}];
Sezam/AGAutoUnlocker.m:927:    NSNumber *delayNum = [AGUtility getAppFeatureNumber:@"AwayModeActivatedNotificationDelay"];
Sezam/AGAutoUnlocker.m:936:    NSNumber *penaltyDistanceNum = [AGUtility getAppFeatureNumber:@"SpuriousExitPenaltyGeofenceDistance"];
Sezam/AGAutoUnlocker.m:945:    NSNumber *penaltySecondsNum = [AGUtility getAppFeatureNumber:@"SpuriousExitPenaltyDurationSeconds"];
Sezam/AGAutoUnlocker.m:954:    NSNumber *featureNum = [AGUtility getAppFeatureNumber:@"AutoUnlockRebootDateTimeDifferenceToTriggerUnverifiedAwayMode"];
Sezam/AGAutoUnlocker.m:964:        return @"ExitedHomeArea";
Sezam/AGAutoUnlocker.m:967:        return @"UserChanged";
Sezam/AGAutoUnlocker.m:970:        return @"VerifiedAfterForceQuit";
Sezam/AGAutoUnlocker.m:973:        return @"VerifiedAfterDeviceReboot";
Sezam/AGAutoUnlocker.m:975:    return @"Unknown";
Sezam/AGAutoUnlocker.m:980:    return [AGFeatureManager enabled:@"PenalizeSpuriousExits"];
Sezam/AGAutoUnlocker.m:1005://This fixes a bug where the regionID was set to @"" when changing the home location. If multiple autounlockers had their locations changed, this could lead to various errors as multiple regions had the same ID.
Sezam/AGRateAppViewController.m:32:        self.mainTextLabel.text = @"If you enjoy using August, please take a moment to write a nice review. It really helps.";
Sezam/AGRateAppViewController.m:33:        [self.actionButton setTitle:@"Rate The App" forState:UIControlStateNormal];
Sezam/AGRateAppViewController.m:36:        self.mainTextLabel.text = @"We'd love to know how we can make August better, and make your experience a happy one!";
Sezam/AGRateAppViewController.m:37:        [self.actionButton setTitle:@"Send Feedback" forState:UIControlStateNormal];
Sezam/AGRateAppViewController.m:48:        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"itms-apps://itunes.apple.com/app/id648730592"]];
Sezam/AGDoorbellSetupDockViewController.m:38:    [self performSegueWithIdentifier:@"DoorbellDockSetupToDoorbellScan" sender:nil];
Sezam/AGDoorbellSetupDockViewController.m:49:    if ([segue.identifier isEqualToString:@"DoorbellDockSetupToDoorbellScan"]) {
Sezam/AGAppSessionMonitor.m:63:    NSUserDefaults *userDefaults = [[NSUserDefaults alloc] initWithSuiteName:@"AGAppSessionMonitor"];
Sezam/AGCountryPickerViewController.m:29:    self.indexTitles = @[@"A", @"B", @"C", @"D", @"E", @"F", @"G", @"H", @"I", @"J", @"K", @"L", @"M", @"N", @"O", @"P", @"Q", @"R", @"S", @"T", @"U", @"V", @"W", @"X", @"Y", @"Z"];
Sezam/AGCountryPickerViewController.m:58:    searchBar.text=@"";
Sezam/AGCountryPickerViewController.m:70:    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"countries" ofType:@"json"];
Sezam/AGCountryPickerViewController.m:80:        NSString *name = [entry objectForKey:@"name"];
Sezam/AGCountryPickerViewController.m:82:        NSString *code = [entry objectForKey:@"dial_code"];
Sezam/AGCountryPickerViewController.m:116:        return @"";
Sezam/AGCountryPickerViewController.m:123:    static NSString *MyIdentifier = @"CountryCell";
Sezam/AGCountryPickerViewController.m:153:        [cell.countryName setText:@""];
Sezam/AGCountryPickerViewController.m:158:        [cell.countryCode setText:@""];
Sezam/AGCountryPickerViewController.m:201:    [letter setFont:[UIFont fontWithName:@"ProximaNova-Bold" size:17]];
Sezam/AGCountryPickerViewController.m:235:            NSArray *words = [wordsAndEmptyStrings filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"length > 0"]];
Sezam/AGAddGuestViewController.m:87:            [self performSegueWithIdentifier:@"AddGuestVCtoAddNamesVC" sender:nil];
Sezam/AGAddGuestViewController.m:91:            [self performSegueWithIdentifier:@"InvitePhoneToInviteEdit" sender:nil];
Sezam/AGAddGuestViewController.m:98:    if (![self.tempNumFromAddressBook isEqual:@""]) {
Sezam/AGAddGuestViewController.m:99:        if (![sender isEqual:@"+1"])
Sezam/AGAddGuestViewController.m:109:    if ([segue.identifier isEqualToString:@"InvitePhoneToInviteEdit"]) {
Sezam/AGAddGuestViewController.m:113:    if ([segue.identifier isEqualToString:@"AddGuestVCtoAddNamesVC"]) {
Sezam/AGAddGuestViewController.m:121:    self.firstName = @"";
Sezam/AGAddGuestViewController.m:122:    self.lastName = @"";
Sezam/AGAddGuestViewController.m:124:    self.tempNumFromAddressBook = @"";
Sezam/AGAddGuestViewController.m:132:    [self.countryCodeControl.inputTextField setValue:@"BodyGrayLight" forKey:@"nuiClass"];
Sezam/AGAddGuestViewController.m:147:    [self.countryCodeControl.inputTextField setValue:@"BodyLight" forKey:@"nuiClass"];
Sezam/AGAutoUnlockHistoryController.m:37:    self.view.titleLabel.text = @"HISTORY";
Sezam/AGAutoUnlockHistoryController.m:46:    [dateFormatter setDateFormat:@"MMM dd, yyyy"];
Sezam/AGAutoUnlockHistoryController.m:71:    [eventTimeFormatter setDateFormat:@"hh:mm a"];
Sezam/AGAutoUnlockHistoryController.m:79:    NSSortDescriptor *descriptor = [[NSSortDescriptor alloc] initWithKey:@"self" ascending:NO];
Sezam/AGAutoUnlockHistoryController.m:87:            title = @"TODAY";
Sezam/AGAutoUnlockHistoryController.m:89:            title = @"YESTERDAY";
Sezam/AGAutoUnlockHistoryController.m:94:        NSSortDescriptor *descriptor = [[NSSortDescriptor alloc] initWithKey:@"self.date" ascending:NO];
Sezam/AGAutoUnlockHistoryController.m:101:            [displayableEvents addObject:[AGDisplayableLogEvent eventWithTime:[eventTimeFormatter stringFromDate:curEvent.date] description:curEvent.userInfo[@"description"]]];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:63:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"ImmediatelyFoundLockFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:72:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"LocationNotVerifiableFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:81:        NSString *falseExitScoreStr = [AGUtility getAppFeature:@"ConnectedToHomeWifiFalseExitScore"];
Sezam/AGAutoUnlockGeofenceSizeCreator.m:93:    NSNumber *decayPeriodNum = [AGUtility getAppFeatureNumber:@"AutoUnlockDynamicGeofenceDecayPeriodDays"];
Sezam/AGNumericKeypad.m:38:	[self addSubview:[self addNumericKeyWithTitle:@"1" frame:CGRectMake(0, 1, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:39:	[self addSubview:[self addNumericKeyWithTitle:@"2" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, 1, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:40:	[self addSubview:[self addNumericKeyWithTitle:@"3" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, 1, KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:42:	[self addSubview:[self addNumericKeyWithTitle:@"4" frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:43:	[self addSubview:[self addNumericKeyWithTitle:@"5" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:44:	[self addSubview:[self addNumericKeyWithTitle:@"6" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, KEYBOARD_NUMERIC_KEY_HEIGHT + 2, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:46:	[self addSubview:[self addNumericKeyWithTitle:@"7" frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:47:	[self addSubview:[self addNumericKeyWithTitle:@"8" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH , KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:48:	[self addSubview:[self addNumericKeyWithTitle:@"9" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH * 2 - 1, KEYBOARD_NUMERIC_KEY_HEIGHT * 2 + 3, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:50:	[self addSubview:[self addNumericKeyWithTitle:@"." frame:CGRectMake(0, KEYBOARD_NUMERIC_KEY_HEIGHT * 3 + 4, KEYBOARD_NUMERIC_KEY_WIDTH - 3, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:51:	[self addSubview:[self addNumericKeyWithTitle:@"0" frame:CGRectMake(KEYBOARD_NUMERIC_KEY_WIDTH - 2, KEYBOARD_NUMERIC_KEY_HEIGHT * 3 + 4, KEYBOARD_NUMERIC_KEY_WIDTH, KEYBOARD_NUMERIC_KEY_HEIGHT)]];
Sezam/AGNumericKeypad.m:107:    if ([@"." isEqualToString:keyText]) {
Sezam/AGNumericKeypad.m:113:    NSRange dot = [_textField.text rangeOfString:@"."];
Sezam/AGNumericKeypad.m:118:                [self.textInputDelegate insertText:@"0."];
Sezam/AGNumericKeypad.m:120:                [self.textInputDelegate insertText:@"."];
Sezam/AGNumericKeypad.m:125:            if (kMaxNumber <= [[NSString stringWithFormat:@"%@%d", _textField.text, key] doubleValue]) {
Sezam/AGNumericKeypad.m:126:                _textField.text = [NSString stringWithFormat:@"%d", kMaxNumber];
Sezam/AGNumericKeypad.m:127:            } else if ([@"0.00" isEqualToString:_textField.text]) {
Sezam/AGNumericKeypad.m:128:                _textField.text = [NSString stringWithFormat:@"%d", key];
Sezam/AGNumericKeypad.m:130:                [self.textInputDelegate insertText:[NSString stringWithFormat:@"%d", key]];
Sezam/AGNumericKeypad.m:138:    if ([@"0." isEqualToString:_textField.text]) {
Sezam/AGNumericKeypad.m:139:        _textField.text = @"";
Sezam/AGSignalStrengthViewController.m:44:        self.wifiTitleLabel.text = @"Checking WiFi Signal";
Sezam/AGSignalStrengthViewController.m:45:        self.wifiMessageLabel.text = @"";
Sezam/AGSignalStrengthViewController.m:47:        //float linkQuality = [self.doorbellTelemetry[@"link_quality"] floatValue];
Sezam/AGSignalStrengthViewController.m:48:        float signalLevel = [self.doorbellTelemetry[@"signal_level"] floatValue];
Sezam/AGSignalStrengthViewController.m:52:            self.wifiTitleLabel.text = @"ALL SYSTEMS GO";
Sezam/AGSignalStrengthViewController.m:53:            self.wifiMessageLabel.text = @"Your Doorbell Cam is reporting a good Wi-Fi signal.";
Sezam/AGSignalStrengthViewController.m:57:            self.wifiTitleLabel.text = @"POOR WI-FI SIGNAL";
Sezam/AGSignalStrengthViewController.m:58:            self.wifiMessageLabel.text = @"Your Doorbell Cam is reporting a very poor Wi-Fi signal. Video streaming and other features may not work properly.";
Sezam/AGSignalStrengthViewController.m:101:    NSDictionary *getTelemetryEncoder = @{@"status":@"get_telemetry", @"origin":@"iOS"};
Sezam/AGSignalStrengthViewController.m:130:    self.wifiTitleLabel.text = @"DOORBELL OFFLINE";
Sezam/AGSignalStrengthViewController.m:131:    self.wifiMessageLabel.text = @"Your Doorbell Cam is offline. Wi-Fi Signal refers to the last known signal strength.";
Sezam/AGSignalStrengthViewController.m:139:    if ([messageData objectForKey:@"telemetry"]) {
Sezam/AGSignalStrengthViewController.m:140:        NSDictionary *telemetry = messageData[@"telemetry"];
Sezam/AGSignalStrengthViewController.m:142:            self.doorbellTelemetry[@"link_quality"] = telemetry[@"link_quality"];
Sezam/AGSignalStrengthViewController.m:143:            self.doorbellTelemetry[@"signal_level"] = telemetry[@"signal_level"];
Sezam/AGSignalStrengthViewController.m:182:        cell =  [tableView dequeueReusableCellWithIdentifier:@"SignalStrength"];
Sezam/AGSignalStrengthViewController.m:183:        cell.label2.text = @"Signal Level";
Sezam/AGSignalStrengthViewController.m:184:        NSString *signalLevel = [self.doorbellTelemetry objectForKey:@"signal_level"];
Sezam/AGSignalStrengthViewController.m:185:        cell.label.text = [NSString stringWithFormat:@"%d dBm", [signalLevel intValue]];
Sezam/AGSignalStrengthViewController.m:188:        cell =  [tableView dequeueReusableCellWithIdentifier:@"MessageRow"];
Sezam/AGSignalStrengthViewController.m:191:        cell =  [tableView dequeueReusableCellWithIdentifier:@"TroubleShootingRow"];
Sezam/AGDoorbellScanSetupViewController.m:31:        self.instructionsLabel.text = @"Let’s set up your Doorbell Cam. Make sure you’ve completed installation, allowed it to charge for at least 15 minutes, and can see the slow-blinking green light.";
Sezam/AGDoorbellScanSetupViewController.m:32:        [self.primaryButton setTitle:@"OK, I SEE THE BLINKING GREEN LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:34:        self.headerTitleLabel.nuiClass = @"Title";
Sezam/AGDoorbellScanSetupViewController.m:38:        self.instructionsLabel.text = @"Place your Doorbell Cam on the setup dock. In a moment, you should see the light pulsing white.\n\nNOTE: You may need to press the Reset button on the back of your Doorbell Cam.";
Sezam/AGDoorbellScanSetupViewController.m:39:        [self.primaryButton setTitle:@"OK, I SEE THE PULSING WHITE LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:40:        [self.secondaryButton setTitle:@"I DON'T SEE THE PULSING WHITE LIGHT" forState:UIControlStateNormal];
Sezam/AGDoorbellScanSetupViewController.m:43:        self.headerTitleLabel.nuiClass = @"TitleWhite";
Sezam/AGDoorbellScanSetupViewController.m:79:        UIAlertController *dontSeeGreenBlinkingLightAlert = [UIAlertController alertControllerWithTitle:@"Don’t See The Green Blinking Light?" message:@"Note: The green blinking light can appear very dim in broad daylight.\n\nIf you’re sure the light is not blinking, we can help! Tap “Get Help” for step-by-step troubleshooting help with this issue." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:80:        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:84:        UIAlertAction *getHelpAction = [UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGDoorbellScanSetupViewController.m:100:        UIAlertController *needWifiAlert = [UIAlertController alertControllerWithTitle:@"Turn On Wi-Fi" message:@"Your phone must have Wi-Fi enabled to complete this scan." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:101:        [needWifiAlert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:nil]];
Sezam/AGDoorbellScanSetupViewController.m:102:        [needWifiAlert addAction:[UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellScanSetupViewController.m:111:        self.scanningForDoorbellAlert = [UIAlertController alertControllerWithTitle:@"Scanning for Doorbell..." message:nil preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:115:        NSString *match = [NSString stringWithFormat:@"August Doorbell Cam*"];
Sezam/AGDoorbellScanSetupViewController.m:116:        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"name like %@", match];
Sezam/AGDoorbellScanSetupViewController.m:141:        BOOL isInDebugMode = [[NSUserDefaults standardUserDefaults] boolForKey:@"DebugAddLock"];
Sezam/AGDoorbellScanSetupViewController.m:144:            [self performSegueWithIdentifier:@"DoorbellScanToDebugPicker" sender:nil];
Sezam/AGDoorbellScanSetupViewController.m:146:            UIAlertController *multipleDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Multiple Doorbells Found" message:@"We found multiple unconfigured doorbells. Please power off any doorbells you are not trying to set up." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:147:            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:151:            UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Retry"
Sezam/AGDoorbellScanSetupViewController.m:188:        [self performSegueWithIdentifier:@"DoorbellScanToDoorbellRegister" sender:nil];
Sezam/AGDoorbellScanSetupViewController.m:223:    UIAlertController *noDoorbellsFoundAlert = [UIAlertController alertControllerWithTitle:@"Doorbell Not Found" message:@"We couldn’t find your Doorbell Cam. This can happen for a few reasons. If you’d like help troubleshooting, select Get Help." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDoorbellScanSetupViewController.m:224:    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
Sezam/AGDoorbellScanSetupViewController.m:228:    UIAlertAction *retryAction = [UIAlertAction actionWithTitle:@"Get Help"
Sezam/AGDoorbellScanSetupViewController.m:255:    if ([segue.identifier isEqualToString:@"DoorbellScanToDebugPicker"]) {
Sezam/AGDoorbellScanSetupViewController.m:260:    if ([segue.identifier isEqualToString:@"DoorbellScanToDoorbellRegister"]) {
Sezam/AGUserInviteReceivedViewController.m:27:    UIStoryboard *signupStoryboard = [UIStoryboard storyboardWithName:@"SignUp" bundle:nil];
Sezam/AGUserInviteReceivedViewController.m:28:    self.checkListVC = [signupStoryboard instantiateViewControllerWithIdentifier:@"AGOnboardingChecklistViewController"];
Sezam/AGUserInviteReceivedViewController.m:69:    [self performSegueWithIdentifier:@"userInviteToOnboardingChecklist" sender:sender];
Sezam/AGAccessScheduleViewController.m:35:    self.daysOfTheWeek = @[@"SU", @"MO", @"TU", @"WE", @"TH", @"FR", @"SA"];
Sezam/AGAccessScheduleViewController.m:139:    [myFormatter setDateFormat:@"c"]; // day number, like 7 for saturday
Sezam/AGAccessScheduleViewController.m:186:        cell = [tableView dequeueReusableCellWithIdentifier:@"ScheduleAlways"];
Sezam/AGAccessScheduleViewController.m:207:        AGRecurringDaysTableViewCell *recurringCell = (AGRecurringDaysTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ScheduleRecurring"];
Sezam/AGAccessScheduleViewController.m:233:        AGTemporaryAccessTableViewCell *tempCell = (AGTemporaryAccessTableViewCell *)[tableView dequeueReusableCellWithIdentifier:@"ScheduleTemporary"];
Sezam/AGAccessScheduleViewController.m:350:    if ([segue.identifier isEqualToString:@"RecurTimeSegue"]) {
Sezam/AGAccessScheduleViewController.m:360:    if ([segue.identifier isEqualToString:@"TempDateSegue"]) {
Sezam/AGSimpleGeoRegionExitDetector.m:148:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-inner", self.region.identifier];
Sezam/AGSimpleGeoRegionExitDetector.m:152:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-middle", self.region.identifier];
Sezam/AGSimpleGeoRegionExitDetector.m:156:    return [NSString stringWithFormat:@"AGVerifiedGeoRegionExitDetector-%@-outer", self.region.identifier];
Sezam/AGAutoUnlockManager.h:24:static NSString* kSendUnlockCommandEvent = @"sendUnlockCommand";
Sezam/AGButton.m:33:    if ([type isEqualToString:@"Primary"]) {
Sezam/AGButton.m:37:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:39:    } else if ([type isEqualToString:@"Secondary"]) {
Sezam/AGButton.m:43:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:47:    } else if ([type isEqualToString:@"Inactive"]) {
Sezam/AGButton.m:51:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:53:    } else if ([type isEqualToString:@"Tertiary"]) {
Sezam/AGButton.m:57:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:60:    } else if ([type isEqualToString:@"Destructive Primary"]) {
Sezam/AGButton.m:64:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:66:    } else if ([type isEqualToString:@"Destructive Secondary"]) {
Sezam/AGButton.m:70:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:74:    } else if ([type isEqualToString:@"Onboard_Setup"]) {
Sezam/AGButton.m:78:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:82:    } else if ([type isEqualToString:@"Onboard_Secondary"]) {
Sezam/AGButton.m:86:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:88:    } else if ([type isEqualToString:@"Onboard_Skip"]) {
Sezam/AGButton.m:92:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:96:    } else if ([type isEqualToString:@"TealWithWhiteBorder"]) {
Sezam/AGButton.m:100:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:104:    } else if ([type isEqualToString:@"WhiteWithTealLettersAndNoBorder"]) {
Sezam/AGButton.m:108:        [self.titleLabel setFont:[UIFont fontWithName:@"ProximaNova-Semibold" size:13]];
Sezam/AGButton.m:121:    if ([self.size isEqualToString:@"Standard"]) {
Sezam/AGButton.m:123:    } else if ([self.size isEqualToString:@"Small"]) {
Sezam/AGButton.m:125:    } else if ([self.size isEqualToString:@"SmallAndShort"]) {
Sezam/AGButton.m:127:    } else if ([self.size isEqualToString:@"Tiny"]) {
Sezam/AGCircularGeoRegion.m:27:    return @[@"center"];
Sezam/AGAccountCreatedViewController.m:36:    [[self userName] setText: [NSString stringWithFormat:@"%@ %@",self.theUser.firstName,self.theUser.lastName]];
Sezam/AGAccountCreatedViewController.m:38:    if ([[formatedNumber substringWithRange:NSMakeRange(0, 2)] isEqualToString:@"+1"])
Sezam/AGAccountCreatedViewController.m:41:        formatedNumber = [NSString stringWithFormat:@"(%@) %@-%@",[formatedNumberNoCode substringWithRange:NSMakeRange(0, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(3, 3)],[formatedNumberNoCode substringWithRange:NSMakeRange(6, (formatedNumberNoCode.length-6))]];
Sezam/AGAccountCreatedViewController.m:42:        [[self userPhone] setText: [NSString stringWithFormat: @"+1 %@", formatedNumber]];
Sezam/AGAccountCreatedViewController.m:44:        [[self userPhone] setText: [NSString stringWithFormat: @"%@", formatedNumber]];
Sezam/AGAccountCreatedViewController.m:50:        user.objectId = @"me";
Sezam/AGAccountCreatedViewController.m:74:        if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGOnboardingChecklistViewController"]) {
Sezam/AGAccountCreatedViewController.m:76:        } else if ([signupNavController.currentOnboardingClassString isEqualToString:@"AGTristepOnboardingChecklistViewController"]) {
Sezam/AGDisconnectFromZWaveViewController.m:194:    UIAlertController *wifiErrorAlert = [UIAlertController alertControllerWithTitle:@"Reset Z-Wave device?" message:@"Only choose this option if your hub is no longer in use." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:195:    [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"Cancel" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDisconnectFromZWaveViewController.m:196:    [wifiErrorAlert addAction:[UIAlertAction actionWithTitle:@"Reset" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * action) {
Sezam/AGDisconnectFromZWaveViewController.m:212:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:234:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:254:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:260:                if ([responseDict objectForKey:@"zWaveState"]) {
Sezam/AGDisconnectFromZWaveViewController.m:261:                    self.zWaveState = [AGUtility calculateZWaveStateFromCommand:[[responseDict objectForKey:@"zWaveState"] intValue]];
Sezam/AGDisconnectFromZWaveViewController.m:293:            if (error || ((NSNumber *)responseDict[@"error"]).boolValue) {
Sezam/AGDisconnectFromZWaveViewController.m:307:    UIAlertController *errorAlert = [UIAlertController alertControllerWithTitle:@"ZWave Error" message:@"Unable to Disable ZWave. Please try again." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:308:    [errorAlert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) {}]];
Sezam/AGDisconnectFromZWaveViewController.m:330:        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"Reset Successful"
Sezam/AGDisconnectFromZWaveViewController.m:331:                                                                       message:@"Your lock's Z-Wave connection has been reset, and has been removed from the hub." preferredStyle:UIAlertControllerStyleAlert];
Sezam/AGDisconnectFromZWaveViewController.m:333:        [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) {
Sezam/AGSetupOTAViewController.m:22:static NSString* kAGFirstBadLockFirmwareVersion = @"2.1.0";      // 2.1 and above is Jupiter
Sezam/AGSetupOTAViewController.m:23:static NSString* kAGLastBadLockFirmwareVersion = @"2.1.50";      // After this version (or around there) the lock has problems fixed
Sezam/AGSetupOTAViewController.m:103:    self.stringsArray = @[@"Issue instant keys to anyone–wherever you are. Go to the Guest List and press the invite button to get started.",
Sezam/AGSetupOTAViewController.m:104:                          @"Auto-Lock will automatically re-lock your door behind you when you leave home. Go to lock settings to turn this feature on.",
Sezam/AGSetupOTAViewController.m:105:                          @"With Auto-Unlock your door will automatically unlock when you arrive home. Go to lock settings to turn this feature on.",
Sezam/AGSetupOTAViewController.m:106:                          @"Visit August Access to integrate your lock with Nest, Airbnb, Amazon Alexa, IFTTT, Logitech Harmony, Wink, and more."];
Sezam/AGSetupOTAViewController.m:115:    NSMutableDictionary *tutorialOptions = [NSMutableDictionary dictionaryWithObjects:@[[NSValue valueWithCGSize:imageSize],[NSNumber numberWithInteger:UIViewContentModeScaleAspectFill], @"Setup OTA Style"] forKeys:@[@"Image Size", @"Image Content Mode", @"Tutorial View Style"]];
Sezam/AGSetupOTAViewController.m:201:    if ([message isEqualToString:@"LOCK IN USE"]) {
Sezam/AGSetupOTAViewController.m:202:        self.statusLabel.text = @"Lock In Use";
Sezam/AGSetupOTAViewController.m:207:    if ([error.domain isEqualToString:@"SecurityError"]) {
Sezam/AGSetupOTAViewController.m:209:        NSString *errorStr = [NSString stringWithFormat:@"%ld: %@", (long)error.code, [errorUserInfo objectForKey:@"Error"]];
Sezam/AGSetupOTAViewController.m:210:        if ((error != nil) && ([[errorUserInfo objectForKey:@"Error"] rangeOfString:@"403"].location != NSNotFound))
Sezam/AGSetupOTAViewController.m:222:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Device Update Needed" message:@"This iPhone's OS is not compatible for Lock Setup.\n\n Please visit the Settings app and go to the General section to update your OS. After the update you will need to set up the lock again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles: nil];
Sezam/AGSetupOTAViewController.m:228:        [[NSNotificationCenter defaultCenter] postNotificationName:@"REFRESH_KEYCHAIN" object:nil];
Sezam/AGSetupOTAViewController.m:259:    if ([self.agLock.lockCapability.onboardCPUs containsObject:@"arm"] || [self.agLock.lockCapability.onboardCPUs containsObject:@"st"]) {
Sezam/AGSetupOTAViewController.m:275:            NSString *fwVersionString = [NSString stringWithFormat:@"%@-%@-%@",self.armGitHash, firmwareVersionSecondTriplet, bleFirmwareVersion];
Sezam/AGSetupOTAViewController.m:320:    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Network Error" message:@"We had a network error. Please check your internet connectivity and try again." delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGSetupOTAViewController.m:347:            NSString *fwUpdateFilePath = [[NSBundle mainBundle] pathForResource:@"jupiter-bcm-2.0.9.ota.bin" ofType:@"signed"];
Sezam/AGSetupOTAViewController.m:349:            self.currentUpdatingChip = @"bcm";
Sezam/AGSetupOTAViewController.m:371:                    NSArray *updateInfoArray = [dict objectForKey:@"updateInfo"];
Sezam/AGSetupOTAViewController.m:372:                    if ((updateInfoArray.count > 0) && ([[NSUserDefaults standardUserDefaults] boolForKey: @"DisableOTA"] == false)) {
Sezam/AGSetupOTAViewController.m:381:                        NSString *newChip = [updateInfoDict objectForKey:@"chip"];
Sezam/AGSetupOTAViewController.m:391:                         if ([self.currentUpdatingChip isEqualToString:@"sd"] && self.isZWaveEnabled == NO) {
Sezam/AGSetupOTAViewController.m:393:                         } else if ([self.currentUpdatingChip isEqualToString:@"yale"]){
Sezam/AGSetupOTAViewController.m:397:                             NSString *version = [updateInfoDict objectForKey:@"version"];
Sezam/AGSetupOTAViewController.m:418:                                     [[NSUserDefaults standardUserDefaults] setBool:YES forKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGSetupOTAViewController.m:440:    if ([self.currentUpdatingChip isEqualToString:@"st"]) {
Sezam/AGSetupOTAViewController.m:449:    if (([self.currentUpdatingChip isEqualToString:@"ti"]) || ([self.currentUpdatingChip isEqualToString:@"bcm"]) || ([self.currentUpdatingChip isEqualToString:@"st"])  || ([self.currentUpdatingChip isEqualToString:@"arm"])) {
Sezam/AGSetupOTAViewController.m:474:    self.pullBatteriesAlertController = [UIAlertController alertControllerWithTitle:@"Please Remove + Re-Insert Your Lock Batteries"
Sezam/AGSetupOTAViewController.m:475:                                                                            message:@"Please remove two of the batteries from your lock, then put them back in. This will reset the power on your lock and complete the update."
Sezam/AGSetupOTAViewController.m:478:    [self.pullBatteriesAlertController addAction:[UIAlertAction actionWithTitle:@"Ok, I’ve Re-Inserted the Batteries"
Sezam/AGSetupOTAViewController.m:499:    self.statusLabel.text = [NSString stringWithFormat:@"Updating Lock Firmware (%lu%%)", (unsigned long)percentageOfTotalUpdates];
Sezam/AGSetupOTAViewController.m:568:    [[NSUserDefaults standardUserDefaults] removeObjectForKey:[NSString stringWithFormat:@"SetupOTA_%@", self.agLock.objectId]];
Sezam/AGSetupOTAViewController.m:578:            if ([bcmVersion isGreaterThan:[EDSemver semverWithString:@"2.1.74"]]) {
Sezam/AGSetupOTAViewController.m:593:    self.statusLabel.text = @"Lock is Connected.";
Sezam/AGSetupOTAViewController.m:598:        NSString *otaMessage = @"The August app is installing an important update to your lock. \n\nTo complete this update as quickly as possible, please leave your phone near the lock with the app running. This will take several minutes.\n\nSetup will resume once the update is complete.";
Sezam/AGSetupOTAViewController.m:629://        [self performSegueWithIdentifier:@"setupOTAToLockAndDoorCalibration" sender:nil];
Sezam/AGSetupOTAViewController.m:631:        UIStoryboard *settingsStoryboard = [UIStoryboard storyboardWithName:@"LockSettings" bundle:[NSBundle mainBundle]];
Sezam/AGSetupOTAViewController.m:632:        AGLockAndDoorCalibrationViewController *lockAndDoorCalibrationViewController = [settingsStoryboard instantiateViewControllerWithIdentifier:@"LockAndDoorCalibrationViewController"];
Sezam/AGSetupOTAViewController.m:642:        [self performSegueWithIdentifier:@"setupOTAToManualCalibrate" sender:nil];
Sezam/AGSetupOTAViewController.m:652:    if ([segue.identifier isEqualToString:@"setupOTAToManualCalibrate"]) {
Sezam/AGNameLockViewController.m:23:    NSString *nameFromHomeKitSetup = [dictFromHomeKitSetup objectForKey:@"lock"];
Sezam/AGNameLockViewController.m:39:    [self performSegueWithIdentifier:@"LockSetupNameLockToSelectHouse" sender:nil];
Sezam/AGNameLockViewController.m:48:    if([segue.identifier isEqualToString:@"LockSetupNameLockToSelectHouse"])
Sezam/AGAugustAccessDetailViewController.m:39:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Page %@", self.partner.name] attributes:@{}];
Sezam/AGAugustAccessDetailViewController.m:50:    NSString *whatIsText = [NSString stringWithFormat:@"What is %@?", _partner.name];
Sezam/AGAugustAccessDetailViewController.m:76:    NSString *signUpText = [NSString stringWithFormat:@"Sign up for %@", _partner.name];
Sezam/AGAugustAccessDetailViewController.m:79:    NSString *locationsText = [NSString stringWithFormat:@"Available: %@", _partner.locations];
Sezam/AGAugustAccessDetailViewController.m:85:    [AGUtility logEventToFabric:[NSString stringWithFormat:@"August Access - Get More Info %@", self.partner.name] attributes:@{@"Promotion":self.partner.promotion}];
Sezam/AGAugustAccessDetailViewController.m:94:    if ([segue.identifier isEqualToString:@"PartnerDetailToNotifyMe"]) {
Sezam/AGKeypadDisconnectViewController.m:63:        self.resetCodeLabel2WithCode.text = @"UNKNOWN";
Sezam/AGKeypadDisconnectViewController.m:73:        [self.backlightBlinkingButton setTitle:@"DONE" forState:UIControlStateNormal];
Sezam/AGKeypadDisconnectViewController.m:91:    [AGUtility showError:@"There was a network problem removing this keypad" inViewController:self];
Sezam/AGKeypadDisconnectViewController.m:95:    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Disconnecting Keypad From Lock..." message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGKeypadDisconnectViewController.m:108:                    [[NSUserDefaults standardUserDefaults] setObject:resetCode forKey:@"LastKeypadResetCode"];
Sezam/AGKeypadDisconnectViewController.m:115:                        self.clearingAlertView = [[UIAlertView alloc] initWithTitle:@"Clearing Entry Codes From Lock" message:nil delegate:nil cancelButtonTitle:nil otherButtonTitles: nil];
Sezam/AGUnityModuleStateView.m:42:            [_confirmRegisteredBtn setTitle:@"MY LOCK HAS RESTARTED" forState:UIControlStateNormal];
Sezam/AGUnityModuleStateView.m:47:            [_confirmRegisteredBtn setTitle:@"MODULE IS REGISTERED" forState:UIControlStateNormal];
Sezam/AGDoorbellVideoQualityViewController.m:63:    cell =  [tableView dequeueReusableCellWithIdentifier:@"VideoResolutionCell"];
Sezam/AGDoorbellVideoQualityViewController.m:118:            UIAlertView *errorAlert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Error updating Video Resolution" delegate:self cancelButtonTitle:@"Ok" otherButtonTitles:nil];
Sezam/AGLicenseAgreeViewController.m:48:        self.subtitleLabel.text = @"Let's get you set up with an August account.";
Sezam/AGLicenseAgreeViewController.m:49:        self.infoLabel.text = @"I agree to the ";
Sezam/AGLicenseAgreeViewController.m:57:        self.subtitleLabel.text = @"We've recently updated our terms of service. Please take a look.";
Sezam/AGLicenseAgreeViewController.m:58:        self.infoLabel.text = @"I agree to the ";
Sezam/AGLicenseAgreeViewController.m:83:        [self performSegueWithIdentifier:@"LicenseAgreeToCreateAccount" sender:nil];
Sezam/AGLicenseAgreeViewController.m:107:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/privacy-policy/"]];
Sezam/AGLicenseAgreeViewController.m:111:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/terms-of-service/"]];
Sezam/AGLicenseAgreeViewController.m:115:    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"http://blog.august.com/end-user-license-agreement/"]];
Sezam/AGLicenseAgreeViewController.m:130:    if ([segue.identifier isEqualToString:@"LicenseAgreeToCreateAccount"]) {
RSKImageCropper/RSKImageCropViewController.m:270:        _moveAndScaleLabel.text = @"Move and Scale";
RSKImageCropper/RSKImageCropViewController.m:282:        [_cancelButton setTitle:@"Cancel" forState:UIControlStateNormal];
RSKImageCropper/RSKImageCropViewController.m:294:        [_chooseButton setTitle:@"Choose" forState:UIControlStateNormal];
RSKImageCropper/RSKImageCropViewController.m:330:        CABasicAnimation *pathAnimation = [CABasicAnimation animationWithKeyPath:@"path"];
RSKImageCropper/RSKImageCropViewController.m:333:        [self.maskLayer addAnimation:pathAnimation forKey:@"path"];
